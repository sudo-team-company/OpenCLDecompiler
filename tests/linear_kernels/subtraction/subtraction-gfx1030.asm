.rocm
.gpu GFX1000
.arch_minor 3
.arch_stepping 0
.eflags 54
.newbinfmt
.target "amdgcn-amd-amdhsa--gfx1030"
.md_version 1, 0
.kernel subtract_char_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 20
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_char_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_char_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 8
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 8
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 8
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 6
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 6
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 20
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 20
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 21
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 20
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0080
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 8
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 6
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 6
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 7
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 7
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 21
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 5
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_long_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_long_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel subtract_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 3, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "subtract_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.text
subtract_x_x:
.skip 256
/*000000000100*/ s_clause        0x1
/*000000000104*/ s_load_dword    s2, s[4:5], 0x10
/*00000000010c*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*000000000114*/ s_lshl_b32      s3, s6, 6
/*000000000118*/ v_mov_b32       v1, 0
/*00000000011c*/ s_waitcnt       lgkmcnt(0)
/*000000000120*/ v_add3_u32      v0, s2, s3, v0
/*000000000128*/ v_lshlrev_b64   v[2:3], 2, v[0:1]
/*000000000130*/ v_add_co_u32    v2, vcc, s0, v2
/*000000000138*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000013c*/ global_store_dword v[2:3], v1, off
/*000000000144*/ s_endpgm
/*000000000148*/ s_nop           0x0
/*00000000014c*/ s_nop           0x0
/*000000000150*/ s_nop           0x0
/*000000000154*/ s_nop           0x0
/*000000000158*/ s_nop           0x0
/*00000000015c*/ s_nop           0x0
/*000000000160*/ s_nop           0x0
/*000000000164*/ s_nop           0x0
/*000000000168*/ s_nop           0x0
/*00000000016c*/ s_nop           0x0
/*000000000170*/ s_nop           0x0
/*000000000174*/ s_nop           0x0
/*000000000178*/ s_nop           0x0
/*00000000017c*/ s_nop           0x0
/*000000000180*/ s_nop           0x0
/*000000000184*/ s_nop           0x0
/*000000000188*/ s_nop           0x0
/*00000000018c*/ s_nop           0x0
/*000000000190*/ s_nop           0x0
/*000000000194*/ s_nop           0x0
/*000000000198*/ s_nop           0x0
/*00000000019c*/ s_nop           0x0
/*0000000001a0*/ s_nop           0x0
/*0000000001a4*/ s_nop           0x0
/*0000000001a8*/ s_nop           0x0
/*0000000001ac*/ s_nop           0x0
/*0000000001b0*/ s_nop           0x0
/*0000000001b4*/ s_nop           0x0
/*0000000001b8*/ s_nop           0x0
/*0000000001bc*/ s_nop           0x0
/*0000000001c0*/ s_nop           0x0
/*0000000001c4*/ s_nop           0x0
/*0000000001c8*/ s_nop           0x0
/*0000000001cc*/ s_nop           0x0
/*0000000001d0*/ s_nop           0x0
/*0000000001d4*/ s_nop           0x0
/*0000000001d8*/ s_nop           0x0
/*0000000001dc*/ s_nop           0x0
/*0000000001e0*/ s_nop           0x0
/*0000000001e4*/ s_nop           0x0
/*0000000001e8*/ s_nop           0x0
/*0000000001ec*/ s_nop           0x0
/*0000000001f0*/ s_nop           0x0
/*0000000001f4*/ s_nop           0x0
/*0000000001f8*/ s_nop           0x0
/*0000000001fc*/ s_nop           0x0
subtract_get_global_offset_x:
.skip 256
/*000000000300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000308*/ s_waitcnt       lgkmcnt(0)
/*00000000030c*/ s_clause        0x2
/*000000000310*/ s_load_dword    s1, s[4:5], 0x20
/*000000000318*/ s_load_dword    s3, s[4:5], 0x0
/*000000000320*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000328*/ v_mov_b32       v4, 0
/*00000000032c*/ s_lshl_b32      s6, s6, 1
/*000000000330*/ s_lshl_b32      s7, s7, 4
/*000000000334*/ s_lshl_b32      s8, s8, 1
/*000000000338*/ v_mov_b32       v6, v4
/*00000000033c*/ v_mov_b32       v8, v4
/*000000000340*/ s_waitcnt       lgkmcnt(0)
/*000000000344*/ v_add3_u32      v7, s1, s8, v2
/*00000000034c*/ v_add3_u32      v3, s0, s6, v0
/*000000000354*/ v_add3_u32      v5, s2, s7, v1
/*00000000035c*/ s_sub_i32       s0, s0, s3
/*000000000360*/ s_sub_i32       s2, s2, s3
/*000000000364*/ v_mov_b32       v11, s0
/*000000000368*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000370*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000378*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000380*/ s_sub_i32       s0, s1, s3
/*000000000384*/ v_mov_b32       v13, s2
/*000000000388*/ v_mov_b32       v7, s0
/*00000000038c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000394*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000398*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000003a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000003a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000003ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000003b0*/ global_store_dword v[0:1], v11, off
/*0000000003b8*/ global_store_dword v[2:3], v13, off
/*0000000003c0*/ global_store_dword v[4:5], v7, off
/*0000000003c8*/ s_endpgm
/*0000000003cc*/ s_nop           0x0
/*0000000003d0*/ s_nop           0x0
/*0000000003d4*/ s_nop           0x0
/*0000000003d8*/ s_nop           0x0
/*0000000003dc*/ s_nop           0x0
/*0000000003e0*/ s_nop           0x0
/*0000000003e4*/ s_nop           0x0
/*0000000003e8*/ s_nop           0x0
/*0000000003ec*/ s_nop           0x0
/*0000000003f0*/ s_nop           0x0
/*0000000003f4*/ s_nop           0x0
/*0000000003f8*/ s_nop           0x0
/*0000000003fc*/ s_nop           0x0
subtract_get_local_id_x:
.skip 256
/*000000000500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000508*/ s_waitcnt       lgkmcnt(0)
/*00000000050c*/ s_clause        0x2
/*000000000510*/ s_load_dword    s1, s[4:5], 0x20
/*000000000518*/ s_load_dword    s3, s[4:5], 0x0
/*000000000520*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000528*/ v_mov_b32       v4, 0
/*00000000052c*/ s_lshl_b32      s6, s6, 3
/*000000000530*/ s_lshl_b32      s7, s7, 2
/*000000000534*/ s_lshl_b32      s8, s8, 1
/*000000000538*/ v_mov_b32       v6, v4
/*00000000053c*/ v_mov_b32       v8, v4
/*000000000540*/ s_waitcnt       lgkmcnt(0)
/*000000000544*/ v_add3_u32      v7, s1, s8, v2
/*00000000054c*/ v_add3_u32      v3, s0, s6, v0
/*000000000554*/ v_add3_u32      v5, s2, s7, v1
/*00000000055c*/ v_subrev_nc_u32 v9, s3, v0
/*000000000560*/ v_subrev_nc_u32 v10, s3, v1
/*000000000564*/ v_subrev_nc_u32 v11, s3, v2
/*000000000568*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000000570*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000000578*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000000580*/ v_add_co_u32    v2, vcc, s4, v3
/*000000000588*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*00000000058c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000594*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000598*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000005a0*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000005a4*/ global_store_dword v[2:3], v9, off
/*0000000005ac*/ global_store_dword v[0:1], v10, off
/*0000000005b4*/ global_store_dword v[4:5], v11, off
/*0000000005bc*/ s_endpgm
/*0000000005c0*/ s_nop           0x0
/*0000000005c4*/ s_nop           0x0
/*0000000005c8*/ s_nop           0x0
/*0000000005cc*/ s_nop           0x0
/*0000000005d0*/ s_nop           0x0
/*0000000005d4*/ s_nop           0x0
/*0000000005d8*/ s_nop           0x0
/*0000000005dc*/ s_nop           0x0
/*0000000005e0*/ s_nop           0x0
/*0000000005e4*/ s_nop           0x0
/*0000000005e8*/ s_nop           0x0
/*0000000005ec*/ s_nop           0x0
/*0000000005f0*/ s_nop           0x0
/*0000000005f4*/ s_nop           0x0
/*0000000005f8*/ s_nop           0x0
/*0000000005fc*/ s_nop           0x0
subtract_get_group_id_x:
.skip 256
/*000000000700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000708*/ s_waitcnt       lgkmcnt(0)
/*00000000070c*/ s_clause        0x2
/*000000000710*/ s_load_dword    s1, s[4:5], 0x20
/*000000000718*/ s_load_dword    s3, s[4:5], 0x0
/*000000000720*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000728*/ v_mov_b32       v4, 0
/*00000000072c*/ s_lshl_b32      s9, s6, 1
/*000000000730*/ s_lshl_b32      s10, s7, 4
/*000000000734*/ s_lshl_b32      s11, s8, 1
/*000000000738*/ v_mov_b32       v6, v4
/*00000000073c*/ v_mov_b32       v8, v4
/*000000000740*/ s_waitcnt       lgkmcnt(0)
/*000000000744*/ v_add3_u32      v7, s1, s11, v2
/*00000000074c*/ v_add3_u32      v3, s0, s9, v0
/*000000000754*/ v_add3_u32      v5, s2, s10, v1
/*00000000075c*/ s_sub_i32       s0, s6, s3
/*000000000760*/ s_sub_i32       s1, s7, s3
/*000000000764*/ v_mov_b32       v11, s0
/*000000000768*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000770*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000778*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000780*/ s_sub_i32       s0, s8, s3
/*000000000784*/ v_mov_b32       v13, s1
/*000000000788*/ v_mov_b32       v7, s0
/*00000000078c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000794*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000798*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000007a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000007a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000007ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000007b0*/ global_store_dword v[0:1], v11, off
/*0000000007b8*/ global_store_dword v[2:3], v13, off
/*0000000007c0*/ global_store_dword v[4:5], v7, off
/*0000000007c8*/ s_endpgm
/*0000000007cc*/ s_nop           0x0
/*0000000007d0*/ s_nop           0x0
/*0000000007d4*/ s_nop           0x0
/*0000000007d8*/ s_nop           0x0
/*0000000007dc*/ s_nop           0x0
/*0000000007e0*/ s_nop           0x0
/*0000000007e4*/ s_nop           0x0
/*0000000007e8*/ s_nop           0x0
/*0000000007ec*/ s_nop           0x0
/*0000000007f0*/ s_nop           0x0
/*0000000007f4*/ s_nop           0x0
/*0000000007f8*/ s_nop           0x0
/*0000000007fc*/ s_nop           0x0
subtract_get_local_size_x:
.skip 256
/*000000000900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000908*/ s_waitcnt       lgkmcnt(0)
/*00000000090c*/ s_clause        0x2
/*000000000910*/ s_load_dword    s1, s[4:5], 0x20
/*000000000918*/ s_load_dword    s3, s[4:5], 0x0
/*000000000920*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000928*/ v_mov_b32       v4, 0
/*00000000092c*/ s_lshl_b32      s6, s6, 1
/*000000000930*/ s_lshl_b32      s7, s7, 1
/*000000000934*/ s_lshl_b32      s8, s8, 2
/*000000000938*/ v_mov_b32       v6, v4
/*00000000093c*/ v_mov_b32       v8, v4
/*000000000940*/ s_waitcnt       lgkmcnt(0)
/*000000000944*/ v_add3_u32      v7, s1, s8, v2
/*00000000094c*/ v_add3_u32      v3, s0, s6, v0
/*000000000954*/ v_add3_u32      v5, s2, s7, v1
/*00000000095c*/ s_sub_i32       s0, 2, s3
/*000000000960*/ s_sub_i32       s1, 4, s3
/*000000000964*/ v_mov_b32       v9, s0
/*000000000968*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000970*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000978*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000980*/ v_mov_b32       v6, s1
/*000000000984*/ v_add_co_u32    v7, vcc, s4, v0
/*00000000098c*/ v_add_co_ci_u32 v8, vcc, s5, v1, vcc
/*000000000990*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000998*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000099c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000009a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000009a8*/ global_store_dword v[7:8], v9, off
/*0000000009b0*/ global_store_dword v[2:3], v9, off
/*0000000009b8*/ global_store_dword v[4:5], v6, off
/*0000000009c0*/ s_endpgm
/*0000000009c4*/ s_nop           0x0
/*0000000009c8*/ s_nop           0x0
/*0000000009cc*/ s_nop           0x0
/*0000000009d0*/ s_nop           0x0
/*0000000009d4*/ s_nop           0x0
/*0000000009d8*/ s_nop           0x0
/*0000000009dc*/ s_nop           0x0
/*0000000009e0*/ s_nop           0x0
/*0000000009e4*/ s_nop           0x0
/*0000000009e8*/ s_nop           0x0
/*0000000009ec*/ s_nop           0x0
/*0000000009f0*/ s_nop           0x0
/*0000000009f4*/ s_nop           0x0
/*0000000009f8*/ s_nop           0x0
/*0000000009fc*/ s_nop           0x0
subtract_get_global_id_x:
.skip 256
/*000000000b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000b08*/ s_waitcnt       lgkmcnt(0)
/*000000000b0c*/ s_clause        0x2
/*000000000b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000000b18*/ s_load_dword    s3, s[4:5], 0x0
/*000000000b20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000b28*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000000b30*/ v_mov_b32       v4, 0
/*000000000b34*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000000b3c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000000b44*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000000b4c*/ v_mov_b32       v1, v4
/*000000000b50*/ v_mov_b32       v8, v4
/*000000000b54*/ s_waitcnt       lgkmcnt(0)
/*000000000b58*/ v_add_nc_u32    v7, s1, v2
/*000000000b5c*/ v_add_nc_u32    v0, s2, v0
/*000000000b60*/ v_add_co_u32    v2, vcc, s4, v5
/*000000000b68*/ v_subrev_nc_u32 v9, s3, v3
/*000000000b6c*/ v_add_co_ci_u32 v3, vcc, s5, v6, vcc
/*000000000b70*/ v_subrev_nc_u32 v10, s3, v7
/*000000000b74*/ v_lshlrev_b64   v[4:5], 2, v[0:1]
/*000000000b7c*/ v_subrev_nc_u32 v11, s3, v0
/*000000000b80*/ v_lshlrev_b64   v[0:1], 2, v[7:8]
/*000000000b88*/ v_add_nc_u32    v9, s0, v9
/*000000000b8c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000000b94*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000000b98*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000ba0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000ba4*/ global_store_dword v[2:3], v9, off
/*000000000bac*/ global_store_dword v[4:5], v11, off
/*000000000bb4*/ global_store_dword v[0:1], v10, off
/*000000000bbc*/ s_endpgm
/*000000000bc0*/ s_nop           0x0
/*000000000bc4*/ s_nop           0x0
/*000000000bc8*/ s_nop           0x0
/*000000000bcc*/ s_nop           0x0
/*000000000bd0*/ s_nop           0x0
/*000000000bd4*/ s_nop           0x0
/*000000000bd8*/ s_nop           0x0
/*000000000bdc*/ s_nop           0x0
/*000000000be0*/ s_nop           0x0
/*000000000be4*/ s_nop           0x0
/*000000000be8*/ s_nop           0x0
/*000000000bec*/ s_nop           0x0
/*000000000bf0*/ s_nop           0x0
/*000000000bf4*/ s_nop           0x0
/*000000000bf8*/ s_nop           0x0
/*000000000bfc*/ s_nop           0x0
subtract_get_global_size_x:
.skip 256
/*000000000d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000000d08*/ s_waitcnt       lgkmcnt(0)
/*000000000d0c*/ s_clause        0x1
/*000000000d10*/ s_load_dword    s1, s[6:7], 0x8
/*000000000d18*/ s_load_dword    s3, s[6:7], 0x20
/*000000000d20*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000000d28*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000000d30*/ v_mov_b32       v4, 0
/*000000000d34*/ s_lshl_b32      s6, s8, 4
/*000000000d38*/ s_lshl_b32      s7, s9, 1
/*000000000d3c*/ s_lshl_b32      s8, s10, 1
/*000000000d40*/ v_mov_b32       v6, v4
/*000000000d44*/ v_mov_b32       v8, v4
/*000000000d48*/ s_waitcnt       lgkmcnt(0)
/*000000000d4c*/ v_add3_u32      v7, s3, s8, v2
/*000000000d54*/ v_add3_u32      v3, s0, s6, v0
/*000000000d5c*/ v_add3_u32      v5, s2, s7, v1
/*000000000d64*/ s_sub_i32       s0, s12, s1
/*000000000d68*/ s_sub_i32       s2, s13, s1
/*000000000d6c*/ v_mov_b32       v11, s0
/*000000000d70*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000d78*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000d80*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000d88*/ s_sub_i32       s0, s14, s1
/*000000000d8c*/ v_mov_b32       v13, s2
/*000000000d90*/ v_mov_b32       v7, s0
/*000000000d94*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000d9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000da0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000da8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000000dac*/ v_add_co_u32    v4, vcc, s4, v4
/*000000000db4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000000db8*/ global_store_dword v[0:1], v11, off
/*000000000dc0*/ global_store_dword v[2:3], v13, off
/*000000000dc8*/ global_store_dword v[4:5], v7, off
/*000000000dd0*/ s_endpgm
/*000000000dd4*/ s_nop           0x0
/*000000000dd8*/ s_nop           0x0
/*000000000ddc*/ s_nop           0x0
/*000000000de0*/ s_nop           0x0
/*000000000de4*/ s_nop           0x0
/*000000000de8*/ s_nop           0x0
/*000000000dec*/ s_nop           0x0
/*000000000df0*/ s_nop           0x0
/*000000000df4*/ s_nop           0x0
/*000000000df8*/ s_nop           0x0
/*000000000dfc*/ s_nop           0x0
subtract_get_num_groups_x:
.skip 256
/*000000000f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000000f08*/ s_waitcnt       lgkmcnt(0)
/*000000000f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000000f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000000f1c*/ s_clause        0x1
/*000000000f20*/ s_load_dword    s3, s[6:7], 0x0
/*000000000f28*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000000f30*/ s_lshl_b32      s8, s8, 1
/*000000000f34*/ v_mov_b32       v4, 0
/*000000000f38*/ s_lshl_b32      s7, s10, 2
/*000000000f3c*/ s_lshl_b32      s6, s9, 1
/*000000000f40*/ s_waitcnt       lgkmcnt(0)
/*000000000f44*/ v_add3_u32      v2, s1, s7, v2
/*000000000f4c*/ v_add3_u32      v3, s0, s8, v0
/*000000000f54*/ s_and_b32       s1, s12, -2
/*000000000f58*/ v_add3_u32      v0, s2, s6, v1
/*000000000f60*/ v_mov_b32       v1, v4
/*000000000f64*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000000f6c*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000000f74*/ s_and_b32       s6, s13, -2
/*000000000f78*/ s_lshr_b32      s0, s12, 1
/*000000000f7c*/ v_mov_b32       v3, v4
/*000000000f80*/ v_cmp_gt_u32    s[6:7], s13, s6
/*000000000f88*/ s_lshr_b32      s2, s13, 1
/*000000000f8c*/ s_lshr_b32      s7, s14, 2
/*000000000f90*/ s_and_b32       s8, s14, -4
/*000000000f94*/ s_sub_i32       s0, s0, s3
/*000000000f98*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000000fa0*/ s_cmpk_lg_u32   s1, 0x0
/*000000000fa4*/ v_cmp_gt_u32    s[1:2], s14, s8
/*000000000fac*/ s_addc_u32      s0, s0, 0
/*000000000fb0*/ v_add_co_u32    v5, vcc, s4, v5
/*000000000fb8*/ s_sub_i32       s2, s2, s3
/*000000000fbc*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000000fc4*/ s_cmpk_lg_u32   s6, 0x0
/*000000000fc8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000000fcc*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000fd4*/ v_mov_b32       v7, s0
/*000000000fd8*/ s_addc_u32      s0, s2, 0
/*000000000fdc*/ s_sub_i32       s2, s7, s3
/*000000000fe0*/ s_cmpk_lg_u32   s1, 0x0
/*000000000fe4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000fe8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000ff0*/ v_mov_b32       v11, s0
/*000000000ff4*/ s_addc_u32      s0, s2, 0
/*000000000ff8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000000ffc*/ v_mov_b32       v8, s0
/*000000001000*/ global_store_dword v[5:6], v7, off
/*000000001008*/ global_store_dword v[0:1], v11, off
/*000000001010*/ global_store_dword v[2:3], v8, off
/*000000001018*/ s_endpgm
/*00000000101c*/ s_nop           0x0
/*000000001020*/ s_nop           0x0
/*000000001024*/ s_nop           0x0
/*000000001028*/ s_nop           0x0
/*00000000102c*/ s_nop           0x0
/*000000001030*/ s_nop           0x0
/*000000001034*/ s_nop           0x0
/*000000001038*/ s_nop           0x0
/*00000000103c*/ s_nop           0x0
/*000000001040*/ s_nop           0x0
/*000000001044*/ s_nop           0x0
/*000000001048*/ s_nop           0x0
/*00000000104c*/ s_nop           0x0
/*000000001050*/ s_nop           0x0
/*000000001054*/ s_nop           0x0
/*000000001058*/ s_nop           0x0
/*00000000105c*/ s_nop           0x0
/*000000001060*/ s_nop           0x0
/*000000001064*/ s_nop           0x0
/*000000001068*/ s_nop           0x0
/*00000000106c*/ s_nop           0x0
/*000000001070*/ s_nop           0x0
/*000000001074*/ s_nop           0x0
/*000000001078*/ s_nop           0x0
/*00000000107c*/ s_nop           0x0
/*000000001080*/ s_nop           0x0
/*000000001084*/ s_nop           0x0
/*000000001088*/ s_nop           0x0
/*00000000108c*/ s_nop           0x0
/*000000001090*/ s_nop           0x0
/*000000001094*/ s_nop           0x0
/*000000001098*/ s_nop           0x0
/*00000000109c*/ s_nop           0x0
/*0000000010a0*/ s_nop           0x0
/*0000000010a4*/ s_nop           0x0
/*0000000010a8*/ s_nop           0x0
/*0000000010ac*/ s_nop           0x0
/*0000000010b0*/ s_nop           0x0
/*0000000010b4*/ s_nop           0x0
/*0000000010b8*/ s_nop           0x0
/*0000000010bc*/ s_nop           0x0
/*0000000010c0*/ s_nop           0x0
/*0000000010c4*/ s_nop           0x0
/*0000000010c8*/ s_nop           0x0
/*0000000010cc*/ s_nop           0x0
/*0000000010d0*/ s_nop           0x0
/*0000000010d4*/ s_nop           0x0
/*0000000010d8*/ s_nop           0x0
/*0000000010dc*/ s_nop           0x0
/*0000000010e0*/ s_nop           0x0
/*0000000010e4*/ s_nop           0x0
/*0000000010e8*/ s_nop           0x0
/*0000000010ec*/ s_nop           0x0
/*0000000010f0*/ s_nop           0x0
/*0000000010f4*/ s_nop           0x0
/*0000000010f8*/ s_nop           0x0
/*0000000010fc*/ s_nop           0x0
subtract_get_work_dim_x:
.skip 256
/*000000001200*/ v_mov_b32       v1, s4
/*000000001204*/ v_mov_b32       v2, s5
/*000000001208*/ s_clause        0x2
/*00000000120c*/ s_load_dword    s2, s[6:7], 0x10
/*000000001214*/ s_load_dword    s3, s[6:7], 0x0
/*00000000121c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000001224*/ s_lshl_b32      s4, s8, 1
/*000000001228*/ global_load_ushort v2, v[1:2], off inst_offset:2
/*000000001230*/ v_mov_b32       v1, 0
/*000000001234*/ s_waitcnt       lgkmcnt(0)
/*000000001238*/ v_add3_u32      v0, s2, s4, v0
/*000000001240*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000001248*/ v_add_co_u32    v0, vcc, s0, v0
/*000000001250*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*000000001254*/ s_waitcnt       vmcnt(0)
/*000000001258*/ v_subrev_nc_u32 v2, s3, v2
/*00000000125c*/ global_store_dword v[0:1], v2, off
/*000000001264*/ s_endpgm
/*000000001268*/ s_nop           0x0
/*00000000126c*/ s_nop           0x0
/*000000001270*/ s_nop           0x0
/*000000001274*/ s_nop           0x0
/*000000001278*/ s_nop           0x0
/*00000000127c*/ s_nop           0x0
/*000000001280*/ s_nop           0x0
/*000000001284*/ s_nop           0x0
/*000000001288*/ s_nop           0x0
/*00000000128c*/ s_nop           0x0
/*000000001290*/ s_nop           0x0
/*000000001294*/ s_nop           0x0
/*000000001298*/ s_nop           0x0
/*00000000129c*/ s_nop           0x0
/*0000000012a0*/ s_nop           0x0
/*0000000012a4*/ s_nop           0x0
/*0000000012a8*/ s_nop           0x0
/*0000000012ac*/ s_nop           0x0
/*0000000012b0*/ s_nop           0x0
/*0000000012b4*/ s_nop           0x0
/*0000000012b8*/ s_nop           0x0
/*0000000012bc*/ s_nop           0x0
/*0000000012c0*/ s_nop           0x0
/*0000000012c4*/ s_nop           0x0
/*0000000012c8*/ s_nop           0x0
/*0000000012cc*/ s_nop           0x0
/*0000000012d0*/ s_nop           0x0
/*0000000012d4*/ s_nop           0x0
/*0000000012d8*/ s_nop           0x0
/*0000000012dc*/ s_nop           0x0
/*0000000012e0*/ s_nop           0x0
/*0000000012e4*/ s_nop           0x0
/*0000000012e8*/ s_nop           0x0
/*0000000012ec*/ s_nop           0x0
/*0000000012f0*/ s_nop           0x0
/*0000000012f4*/ s_nop           0x0
/*0000000012f8*/ s_nop           0x0
/*0000000012fc*/ s_nop           0x0
subtract_x_get_global_offset:
.skip 256
/*000000001400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001408*/ s_waitcnt       lgkmcnt(0)
/*00000000140c*/ s_clause        0x2
/*000000001410*/ s_load_dword    s1, s[4:5], 0x20
/*000000001418*/ s_load_dword    s3, s[4:5], 0x8
/*000000001420*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000001428*/ v_mov_b32       v4, 0
/*00000000142c*/ s_lshl_b32      s6, s6, 4
/*000000001430*/ s_lshl_b32      s7, s7, 1
/*000000001434*/ s_lshl_b32      s8, s8, 1
/*000000001438*/ v_mov_b32       v6, v4
/*00000000143c*/ v_mov_b32       v8, v4
/*000000001440*/ s_waitcnt       lgkmcnt(0)
/*000000001444*/ v_add3_u32      v7, s1, s8, v2
/*00000000144c*/ v_add3_u32      v3, s0, s6, v0
/*000000001454*/ v_add3_u32      v5, s2, s7, v1
/*00000000145c*/ s_sub_i32       s0, s3, s0
/*000000001460*/ s_sub_i32       s2, s3, s2
/*000000001464*/ v_mov_b32       v11, s0
/*000000001468*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001470*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001478*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001480*/ s_sub_i32       s0, s3, s1
/*000000001484*/ v_mov_b32       v13, s2
/*000000001488*/ v_mov_b32       v7, s0
/*00000000148c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001494*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001498*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000014a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000014a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000014ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000014b0*/ global_store_dword v[0:1], v11, off
/*0000000014b8*/ global_store_dword v[2:3], v13, off
/*0000000014c0*/ global_store_dword v[4:5], v7, off
/*0000000014c8*/ s_endpgm
/*0000000014cc*/ s_nop           0x0
/*0000000014d0*/ s_nop           0x0
/*0000000014d4*/ s_nop           0x0
/*0000000014d8*/ s_nop           0x0
/*0000000014dc*/ s_nop           0x0
/*0000000014e0*/ s_nop           0x0
/*0000000014e4*/ s_nop           0x0
/*0000000014e8*/ s_nop           0x0
/*0000000014ec*/ s_nop           0x0
/*0000000014f0*/ s_nop           0x0
/*0000000014f4*/ s_nop           0x0
/*0000000014f8*/ s_nop           0x0
/*0000000014fc*/ s_nop           0x0
subtract_get_global_offset_get_global_offset:
.skip 256
/*000000001600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001608*/ s_waitcnt       lgkmcnt(0)
/*00000000160c*/ s_clause        0x1
/*000000001610*/ s_load_dword    s1, s[4:5], 0x20
/*000000001618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001620*/ v_mov_b32       v4, 0
/*000000001624*/ s_lshl_b32      s3, s6, 1
/*000000001628*/ s_lshl_b32      s6, s7, 4
/*00000000162c*/ s_lshl_b32      s7, s8, 1
/*000000001630*/ v_mov_b32       v6, v4
/*000000001634*/ v_mov_b32       v8, v4
/*000000001638*/ v_add3_u32      v3, s0, s3, v0
/*000000001640*/ v_add3_u32      v5, s2, s6, v1
/*000000001648*/ s_waitcnt       lgkmcnt(0)
/*00000000164c*/ v_add3_u32      v7, s1, s7, v2
/*000000001654*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000165c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001664*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000166c*/ v_add_co_u32    v10, vcc, s4, v0
/*000000001674*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*000000001678*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001680*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000001684*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000168c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000001690*/ global_store_dword v[10:11], v4, off
/*000000001698*/ global_store_dword v[2:3], v4, off
/*0000000016a0*/ global_store_dword v[5:6], v4, off
/*0000000016a8*/ s_endpgm
/*0000000016ac*/ s_nop           0x0
/*0000000016b0*/ s_nop           0x0
/*0000000016b4*/ s_nop           0x0
/*0000000016b8*/ s_nop           0x0
/*0000000016bc*/ s_nop           0x0
/*0000000016c0*/ s_nop           0x0
/*0000000016c4*/ s_nop           0x0
/*0000000016c8*/ s_nop           0x0
/*0000000016cc*/ s_nop           0x0
/*0000000016d0*/ s_nop           0x0
/*0000000016d4*/ s_nop           0x0
/*0000000016d8*/ s_nop           0x0
/*0000000016dc*/ s_nop           0x0
/*0000000016e0*/ s_nop           0x0
/*0000000016e4*/ s_nop           0x0
/*0000000016e8*/ s_nop           0x0
/*0000000016ec*/ s_nop           0x0
/*0000000016f0*/ s_nop           0x0
/*0000000016f4*/ s_nop           0x0
/*0000000016f8*/ s_nop           0x0
/*0000000016fc*/ s_nop           0x0
subtract_get_local_id_get_global_offset:
.skip 256
/*000000001800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001808*/ s_waitcnt       lgkmcnt(0)
/*00000000180c*/ s_clause        0x1
/*000000001810*/ s_load_dword    s1, s[4:5], 0x20
/*000000001818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001820*/ v_mov_b32       v4, 0
/*000000001824*/ s_lshl_b32      s3, s6, 3
/*000000001828*/ s_lshl_b32      s6, s7, 2
/*00000000182c*/ s_lshl_b32      s7, s8, 1
/*000000001830*/ v_mov_b32       v6, v4
/*000000001834*/ v_mov_b32       v8, v4
/*000000001838*/ v_add3_u32      v3, s0, s3, v0
/*000000001840*/ v_add3_u32      v5, s2, s6, v1
/*000000001848*/ s_waitcnt       lgkmcnt(0)
/*00000000184c*/ v_add3_u32      v7, s1, s7, v2
/*000000001854*/ v_subrev_nc_u32 v9, s0, v0
/*000000001858*/ v_subrev_nc_u32 v10, s2, v1
/*00000000185c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000001864*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*00000000186c*/ v_subrev_nc_u32 v11, s1, v2
/*000000001870*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000001878*/ v_add_co_u32    v2, vcc, s4, v3
/*000000001880*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000001884*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000188c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001890*/ v_add_co_u32    v4, vcc, s4, v5
/*000000001898*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000189c*/ global_store_dword v[2:3], v9, off
/*0000000018a4*/ global_store_dword v[0:1], v10, off
/*0000000018ac*/ global_store_dword v[4:5], v11, off
/*0000000018b4*/ s_endpgm
/*0000000018b8*/ s_nop           0x0
/*0000000018bc*/ s_nop           0x0
/*0000000018c0*/ s_nop           0x0
/*0000000018c4*/ s_nop           0x0
/*0000000018c8*/ s_nop           0x0
/*0000000018cc*/ s_nop           0x0
/*0000000018d0*/ s_nop           0x0
/*0000000018d4*/ s_nop           0x0
/*0000000018d8*/ s_nop           0x0
/*0000000018dc*/ s_nop           0x0
/*0000000018e0*/ s_nop           0x0
/*0000000018e4*/ s_nop           0x0
/*0000000018e8*/ s_nop           0x0
/*0000000018ec*/ s_nop           0x0
/*0000000018f0*/ s_nop           0x0
/*0000000018f4*/ s_nop           0x0
/*0000000018f8*/ s_nop           0x0
/*0000000018fc*/ s_nop           0x0
subtract_get_group_id_get_global_offset:
.skip 256
/*000000001a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001a08*/ s_waitcnt       lgkmcnt(0)
/*000000001a0c*/ s_clause        0x1
/*000000001a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001a20*/ v_mov_b32       v4, 0
/*000000001a24*/ s_lshl_b32      s3, s6, 1
/*000000001a28*/ s_lshl_b32      s9, s7, 4
/*000000001a2c*/ s_lshl_b32      s10, s8, 1
/*000000001a30*/ v_mov_b32       v6, v4
/*000000001a34*/ v_mov_b32       v8, v4
/*000000001a38*/ v_add3_u32      v3, s0, s3, v0
/*000000001a40*/ v_add3_u32      v5, s2, s9, v1
/*000000001a48*/ s_waitcnt       lgkmcnt(0)
/*000000001a4c*/ v_add3_u32      v7, s1, s10, v2
/*000000001a54*/ s_sub_i32       s0, s6, s0
/*000000001a58*/ s_sub_i32       s2, s7, s2
/*000000001a5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001a64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001a6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001a74*/ v_mov_b32       v11, s0
/*000000001a78*/ s_sub_i32       s0, s8, s1
/*000000001a7c*/ v_mov_b32       v13, s2
/*000000001a80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001a88*/ v_mov_b32       v6, s0
/*000000001a8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001a90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001a98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000001a9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000001aa4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000001aa8*/ global_store_dword v[0:1], v11, off
/*000000001ab0*/ global_store_dword v[2:3], v13, off
/*000000001ab8*/ global_store_dword v[4:5], v6, off
/*000000001ac0*/ s_endpgm
/*000000001ac4*/ s_nop           0x0
/*000000001ac8*/ s_nop           0x0
/*000000001acc*/ s_nop           0x0
/*000000001ad0*/ s_nop           0x0
/*000000001ad4*/ s_nop           0x0
/*000000001ad8*/ s_nop           0x0
/*000000001adc*/ s_nop           0x0
/*000000001ae0*/ s_nop           0x0
/*000000001ae4*/ s_nop           0x0
/*000000001ae8*/ s_nop           0x0
/*000000001aec*/ s_nop           0x0
/*000000001af0*/ s_nop           0x0
/*000000001af4*/ s_nop           0x0
/*000000001af8*/ s_nop           0x0
/*000000001afc*/ s_nop           0x0
subtract_get_local_size_get_global_offset:
.skip 256
/*000000001c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001c08*/ s_waitcnt       lgkmcnt(0)
/*000000001c0c*/ s_clause        0x1
/*000000001c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001c18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001c20*/ v_mov_b32       v4, 0
/*000000001c24*/ s_lshl_b32      s3, s6, 1
/*000000001c28*/ s_lshl_b32      s6, s7, 1
/*000000001c2c*/ s_lshl_b32      s7, s8, 2
/*000000001c30*/ v_mov_b32       v6, v4
/*000000001c34*/ v_mov_b32       v8, v4
/*000000001c38*/ v_add3_u32      v3, s0, s3, v0
/*000000001c40*/ v_add3_u32      v5, s2, s6, v1
/*000000001c48*/ s_waitcnt       lgkmcnt(0)
/*000000001c4c*/ v_add3_u32      v7, s1, s7, v2
/*000000001c54*/ s_sub_i32       s0, 2, s0
/*000000001c58*/ s_sub_i32       s2, 2, s2
/*000000001c5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001c64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001c6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001c74*/ v_mov_b32       v11, s0
/*000000001c78*/ s_sub_i32       s0, 4, s1
/*000000001c7c*/ v_mov_b32       v13, s2
/*000000001c80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001c88*/ v_mov_b32       v6, s0
/*000000001c8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001c90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001c98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000001c9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000001ca4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000001ca8*/ global_store_dword v[0:1], v11, off
/*000000001cb0*/ global_store_dword v[2:3], v13, off
/*000000001cb8*/ global_store_dword v[4:5], v6, off
/*000000001cc0*/ s_endpgm
/*000000001cc4*/ s_nop           0x0
/*000000001cc8*/ s_nop           0x0
/*000000001ccc*/ s_nop           0x0
/*000000001cd0*/ s_nop           0x0
/*000000001cd4*/ s_nop           0x0
/*000000001cd8*/ s_nop           0x0
/*000000001cdc*/ s_nop           0x0
/*000000001ce0*/ s_nop           0x0
/*000000001ce4*/ s_nop           0x0
/*000000001ce8*/ s_nop           0x0
/*000000001cec*/ s_nop           0x0
/*000000001cf0*/ s_nop           0x0
/*000000001cf4*/ s_nop           0x0
/*000000001cf8*/ s_nop           0x0
/*000000001cfc*/ s_nop           0x0
subtract_get_global_id_get_global_offset:
.skip 256
/*000000001e00*/ s_clause        0x1
/*000000001e04*/ s_load_dwordx4  s[0:3], s[4:5], 0x18
/*000000001e0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001e14*/ v_mov_b32       v4, 0
/*000000001e18*/ v_lshl_or_b32   v11, s7, 1, v1
/*000000001e20*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000001e28*/ v_lshl_or_b32   v13, s8, 2, v2
/*000000001e30*/ v_mov_b32       v1, v4
/*000000001e34*/ v_mov_b32       v8, v4
/*000000001e38*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000001e40*/ s_waitcnt       lgkmcnt(0)
/*000000001e44*/ v_add_nc_u32    v0, s0, v11
/*000000001e48*/ v_add_nc_u32    v7, s2, v13
/*000000001e4c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000001e54*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000001e58*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000001e60*/ v_lshlrev_b64   v[6:7], 2, v[7:8]
/*000000001e68*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001e70*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001e74*/ v_add_co_u32    v6, vcc, s4, v6
/*000000001e7c*/ v_add_co_ci_u32 v7, vcc, s5, v7, vcc
/*000000001e80*/ global_store_dword v[4:5], v3, off
/*000000001e88*/ global_store_dword v[0:1], v11, off
/*000000001e90*/ global_store_dword v[6:7], v13, off
/*000000001e98*/ s_endpgm
/*000000001e9c*/ s_nop           0x0
/*000000001ea0*/ s_nop           0x0
/*000000001ea4*/ s_nop           0x0
/*000000001ea8*/ s_nop           0x0
/*000000001eac*/ s_nop           0x0
/*000000001eb0*/ s_nop           0x0
/*000000001eb4*/ s_nop           0x0
/*000000001eb8*/ s_nop           0x0
/*000000001ebc*/ s_nop           0x0
/*000000001ec0*/ s_nop           0x0
/*000000001ec4*/ s_nop           0x0
/*000000001ec8*/ s_nop           0x0
/*000000001ecc*/ s_nop           0x0
/*000000001ed0*/ s_nop           0x0
/*000000001ed4*/ s_nop           0x0
/*000000001ed8*/ s_nop           0x0
/*000000001edc*/ s_nop           0x0
/*000000001ee0*/ s_nop           0x0
/*000000001ee4*/ s_nop           0x0
/*000000001ee8*/ s_nop           0x0
/*000000001eec*/ s_nop           0x0
/*000000001ef0*/ s_nop           0x0
/*000000001ef4*/ s_nop           0x0
/*000000001ef8*/ s_nop           0x0
/*000000001efc*/ s_nop           0x0
subtract_get_global_size_get_global_offset:
.skip 256
/*000000002000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002008*/ s_waitcnt       lgkmcnt(0)
/*00000000200c*/ s_load_dword    s1, s[6:7], 0x20
/*000000002014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000201c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000002024*/ v_mov_b32       v4, 0
/*000000002028*/ s_lshl_b32      s3, s8, 4
/*00000000202c*/ s_lshl_b32      s6, s9, 1
/*000000002030*/ s_lshl_b32      s7, s10, 1
/*000000002034*/ v_mov_b32       v6, v4
/*000000002038*/ v_mov_b32       v8, v4
/*00000000203c*/ s_waitcnt       lgkmcnt(0)
/*000000002040*/ v_add3_u32      v7, s1, s7, v2
/*000000002048*/ v_add3_u32      v3, s0, s3, v0
/*000000002050*/ v_add3_u32      v5, s2, s6, v1
/*000000002058*/ s_sub_i32       s0, s12, s0
/*00000000205c*/ s_sub_i32       s2, s13, s2
/*000000002060*/ v_mov_b32       v11, s0
/*000000002064*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000206c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002074*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000207c*/ s_sub_i32       s0, s14, s1
/*000000002080*/ v_mov_b32       v13, s2
/*000000002084*/ v_mov_b32       v7, s0
/*000000002088*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002090*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002094*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000209c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000020a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000020a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000020ac*/ global_store_dword v[0:1], v11, off
/*0000000020b4*/ global_store_dword v[2:3], v13, off
/*0000000020bc*/ global_store_dword v[4:5], v7, off
/*0000000020c4*/ s_endpgm
/*0000000020c8*/ s_nop           0x0
/*0000000020cc*/ s_nop           0x0
/*0000000020d0*/ s_nop           0x0
/*0000000020d4*/ s_nop           0x0
/*0000000020d8*/ s_nop           0x0
/*0000000020dc*/ s_nop           0x0
/*0000000020e0*/ s_nop           0x0
/*0000000020e4*/ s_nop           0x0
/*0000000020e8*/ s_nop           0x0
/*0000000020ec*/ s_nop           0x0
/*0000000020f0*/ s_nop           0x0
/*0000000020f4*/ s_nop           0x0
/*0000000020f8*/ s_nop           0x0
/*0000000020fc*/ s_nop           0x0
subtract_get_num_groups_get_global_offset:
.skip 256
/*000000002200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002208*/ s_waitcnt       lgkmcnt(0)
/*00000000220c*/ s_load_dword    s1, s[6:7], 0x20
/*000000002214*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000221c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000002224*/ s_lshl_b32      s3, s8, 1
/*000000002228*/ v_mov_b32       v4, 0
/*00000000222c*/ s_lshl_b32      s6, s9, 1
/*000000002230*/ s_lshl_b32      s7, s10, 2
/*000000002234*/ s_waitcnt       lgkmcnt(0)
/*000000002238*/ v_add3_u32      v2, s1, s7, v2
/*000000002240*/ v_add3_u32      v3, s0, s3, v0
/*000000002248*/ v_add3_u32      v0, s2, s6, v1
/*000000002250*/ s_and_b32       s6, s12, -2
/*000000002254*/ v_mov_b32       v1, v4
/*000000002258*/ v_cmp_gt_u32    s[6:7], s12, s6
/*000000002260*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000002268*/ s_and_b32       s8, s13, -2
/*00000000226c*/ v_mov_b32       v3, v4
/*000000002270*/ s_lshr_b32      s3, s12, 1
/*000000002274*/ v_cmp_gt_u32    s[8:9], s13, s8
/*00000000227c*/ s_lshr_b32      s7, s13, 1
/*000000002280*/ s_lshr_b32      s9, s14, 2
/*000000002284*/ s_and_b32       s10, s14, -4
/*000000002288*/ s_sub_i32       s0, s3, s0
/*00000000228c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000002294*/ s_cmpk_lg_u32   s6, 0x0
/*000000002298*/ v_cmp_gt_u32    s[3:4], s14, s10
/*0000000022a0*/ s_addc_u32      s0, s0, 0
/*0000000022a4*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000022ac*/ s_sub_i32       s2, s7, s2
/*0000000022b0*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*0000000022b8*/ s_cmpk_lg_u32   s8, 0x0
/*0000000022bc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000022c0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000022c8*/ v_mov_b32       v7, s0
/*0000000022cc*/ s_addc_u32      s0, s2, 0
/*0000000022d0*/ s_sub_i32       s1, s9, s1
/*0000000022d4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000022d8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000022dc*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000022e4*/ v_mov_b32       v11, s0
/*0000000022e8*/ s_addc_u32      s0, s1, 0
/*0000000022ec*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000022f0*/ v_mov_b32       v8, s0
/*0000000022f4*/ global_store_dword v[5:6], v7, off
/*0000000022fc*/ global_store_dword v[0:1], v11, off
/*000000002304*/ global_store_dword v[2:3], v8, off
/*00000000230c*/ s_endpgm
/*000000002310*/ s_nop           0x0
/*000000002314*/ s_nop           0x0
/*000000002318*/ s_nop           0x0
/*00000000231c*/ s_nop           0x0
/*000000002320*/ s_nop           0x0
/*000000002324*/ s_nop           0x0
/*000000002328*/ s_nop           0x0
/*00000000232c*/ s_nop           0x0
/*000000002330*/ s_nop           0x0
/*000000002334*/ s_nop           0x0
/*000000002338*/ s_nop           0x0
/*00000000233c*/ s_nop           0x0
/*000000002340*/ s_nop           0x0
/*000000002344*/ s_nop           0x0
/*000000002348*/ s_nop           0x0
/*00000000234c*/ s_nop           0x0
/*000000002350*/ s_nop           0x0
/*000000002354*/ s_nop           0x0
/*000000002358*/ s_nop           0x0
/*00000000235c*/ s_nop           0x0
/*000000002360*/ s_nop           0x0
/*000000002364*/ s_nop           0x0
/*000000002368*/ s_nop           0x0
/*00000000236c*/ s_nop           0x0
/*000000002370*/ s_nop           0x0
/*000000002374*/ s_nop           0x0
/*000000002378*/ s_nop           0x0
/*00000000237c*/ s_nop           0x0
/*000000002380*/ s_nop           0x0
/*000000002384*/ s_nop           0x0
/*000000002388*/ s_nop           0x0
/*00000000238c*/ s_nop           0x0
/*000000002390*/ s_nop           0x0
/*000000002394*/ s_nop           0x0
/*000000002398*/ s_nop           0x0
/*00000000239c*/ s_nop           0x0
/*0000000023a0*/ s_nop           0x0
/*0000000023a4*/ s_nop           0x0
/*0000000023a8*/ s_nop           0x0
/*0000000023ac*/ s_nop           0x0
/*0000000023b0*/ s_nop           0x0
/*0000000023b4*/ s_nop           0x0
/*0000000023b8*/ s_nop           0x0
/*0000000023bc*/ s_nop           0x0
/*0000000023c0*/ s_nop           0x0
/*0000000023c4*/ s_nop           0x0
/*0000000023c8*/ s_nop           0x0
/*0000000023cc*/ s_nop           0x0
/*0000000023d0*/ s_nop           0x0
/*0000000023d4*/ s_nop           0x0
/*0000000023d8*/ s_nop           0x0
/*0000000023dc*/ s_nop           0x0
/*0000000023e0*/ s_nop           0x0
/*0000000023e4*/ s_nop           0x0
/*0000000023e8*/ s_nop           0x0
/*0000000023ec*/ s_nop           0x0
/*0000000023f0*/ s_nop           0x0
/*0000000023f4*/ s_nop           0x0
/*0000000023f8*/ s_nop           0x0
/*0000000023fc*/ s_nop           0x0
subtract_get_work_dim_get_global_offset:
.skip 256
/*000000002500*/ v_mov_b32       v3, s4
/*000000002504*/ v_mov_b32       v4, s5
/*000000002508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002510*/ s_waitcnt       lgkmcnt(0)
/*000000002514*/ s_clause        0x1
/*000000002518*/ s_load_dword    s1, s[6:7], 0x20
/*000000002520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000002528*/ s_lshl_b32      s3, s8, 1
/*00000000252c*/ s_lshl_b32      s6, s9, 1
/*000000002530*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000002538*/ v_mov_b32       v4, 0
/*00000000253c*/ s_lshl_b32      s7, s10, 2
/*000000002540*/ v_mov_b32       v6, v4
/*000000002544*/ v_mov_b32       v8, v4
/*000000002548*/ v_add3_u32      v3, s0, s3, v0
/*000000002550*/ v_add3_u32      v5, s2, s6, v1
/*000000002558*/ s_waitcnt       lgkmcnt(0)
/*00000000255c*/ v_add3_u32      v7, s1, s7, v2
/*000000002564*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000256c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002574*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000257c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002584*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002588*/ v_add_co_u32    v2, vcc, s4, v2
/*000000002590*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000002594*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000259c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000025a0*/ s_waitcnt       vmcnt(0)
/*0000000025a4*/ v_subrev_nc_u32 v6, s0, v9
/*0000000025a8*/ v_subrev_nc_u32 v13, s2, v9
/*0000000025ac*/ v_subrev_nc_u32 v11, s1, v9
/*0000000025b0*/ global_store_dword v[0:1], v6, off
/*0000000025b8*/ global_store_dword v[2:3], v13, off
/*0000000025c0*/ global_store_dword v[4:5], v11, off
/*0000000025c8*/ s_endpgm
/*0000000025cc*/ s_nop           0x0
/*0000000025d0*/ s_nop           0x0
/*0000000025d4*/ s_nop           0x0
/*0000000025d8*/ s_nop           0x0
/*0000000025dc*/ s_nop           0x0
/*0000000025e0*/ s_nop           0x0
/*0000000025e4*/ s_nop           0x0
/*0000000025e8*/ s_nop           0x0
/*0000000025ec*/ s_nop           0x0
/*0000000025f0*/ s_nop           0x0
/*0000000025f4*/ s_nop           0x0
/*0000000025f8*/ s_nop           0x0
/*0000000025fc*/ s_nop           0x0
subtract_x_get_local_id:
.skip 256
/*000000002700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002708*/ s_waitcnt       lgkmcnt(0)
/*00000000270c*/ s_clause        0x2
/*000000002710*/ s_load_dword    s1, s[4:5], 0x20
/*000000002718*/ s_load_dword    s3, s[4:5], 0x8
/*000000002720*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000002728*/ v_mov_b32       v4, 0
/*00000000272c*/ s_lshl_b32      s6, s6, 4
/*000000002730*/ s_lshl_b32      s7, s7, 1
/*000000002734*/ s_lshl_b32      s8, s8, 1
/*000000002738*/ v_mov_b32       v6, v4
/*00000000273c*/ v_mov_b32       v8, v4
/*000000002740*/ s_waitcnt       lgkmcnt(0)
/*000000002744*/ v_add3_u32      v7, s1, s8, v2
/*00000000274c*/ v_add3_u32      v3, s0, s6, v0
/*000000002754*/ v_add3_u32      v5, s2, s7, v1
/*00000000275c*/ v_sub_nc_u32    v9, s3, v0
/*000000002760*/ v_sub_nc_u32    v10, s3, v1
/*000000002764*/ v_sub_nc_u32    v11, s3, v2
/*000000002768*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002770*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002778*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002780*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002788*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*00000000278c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002794*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002798*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000027a0*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000027a4*/ global_store_dword v[2:3], v9, off
/*0000000027ac*/ global_store_dword v[0:1], v10, off
/*0000000027b4*/ global_store_dword v[4:5], v11, off
/*0000000027bc*/ s_endpgm
/*0000000027c0*/ s_nop           0x0
/*0000000027c4*/ s_nop           0x0
/*0000000027c8*/ s_nop           0x0
/*0000000027cc*/ s_nop           0x0
/*0000000027d0*/ s_nop           0x0
/*0000000027d4*/ s_nop           0x0
/*0000000027d8*/ s_nop           0x0
/*0000000027dc*/ s_nop           0x0
/*0000000027e0*/ s_nop           0x0
/*0000000027e4*/ s_nop           0x0
/*0000000027e8*/ s_nop           0x0
/*0000000027ec*/ s_nop           0x0
/*0000000027f0*/ s_nop           0x0
/*0000000027f4*/ s_nop           0x0
/*0000000027f8*/ s_nop           0x0
/*0000000027fc*/ s_nop           0x0
subtract_get_global_offset_get_local_id:
.skip 256
/*000000002900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002908*/ s_waitcnt       lgkmcnt(0)
/*00000000290c*/ s_clause        0x1
/*000000002910*/ s_load_dword    s1, s[4:5], 0x20
/*000000002918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002920*/ v_mov_b32       v4, 0
/*000000002924*/ s_lshl_b32      s3, s6, 1
/*000000002928*/ s_lshl_b32      s6, s7, 4
/*00000000292c*/ s_lshl_b32      s7, s8, 1
/*000000002930*/ v_mov_b32       v6, v4
/*000000002934*/ v_mov_b32       v8, v4
/*000000002938*/ v_add3_u32      v3, s0, s3, v0
/*000000002940*/ v_add3_u32      v5, s2, s6, v1
/*000000002948*/ s_waitcnt       lgkmcnt(0)
/*00000000294c*/ v_add3_u32      v7, s1, s7, v2
/*000000002954*/ v_sub_nc_u32    v9, s0, v0
/*000000002958*/ v_sub_nc_u32    v10, s2, v1
/*00000000295c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002964*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*00000000296c*/ v_sub_nc_u32    v11, s1, v2
/*000000002970*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002978*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002980*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002984*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000298c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002990*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002998*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000299c*/ global_store_dword v[2:3], v9, off
/*0000000029a4*/ global_store_dword v[0:1], v10, off
/*0000000029ac*/ global_store_dword v[4:5], v11, off
/*0000000029b4*/ s_endpgm
/*0000000029b8*/ s_nop           0x0
/*0000000029bc*/ s_nop           0x0
/*0000000029c0*/ s_nop           0x0
/*0000000029c4*/ s_nop           0x0
/*0000000029c8*/ s_nop           0x0
/*0000000029cc*/ s_nop           0x0
/*0000000029d0*/ s_nop           0x0
/*0000000029d4*/ s_nop           0x0
/*0000000029d8*/ s_nop           0x0
/*0000000029dc*/ s_nop           0x0
/*0000000029e0*/ s_nop           0x0
/*0000000029e4*/ s_nop           0x0
/*0000000029e8*/ s_nop           0x0
/*0000000029ec*/ s_nop           0x0
/*0000000029f0*/ s_nop           0x0
/*0000000029f4*/ s_nop           0x0
/*0000000029f8*/ s_nop           0x0
/*0000000029fc*/ s_nop           0x0
subtract_get_local_id_get_local_id:
.skip 256
/*000000002b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002b08*/ s_waitcnt       lgkmcnt(0)
/*000000002b0c*/ s_clause        0x1
/*000000002b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002b20*/ v_mov_b32       v4, 0
/*000000002b24*/ s_lshl_b32      s3, s6, 3
/*000000002b28*/ s_lshl_b32      s6, s7, 2
/*000000002b2c*/ s_lshl_b32      s7, s8, 1
/*000000002b30*/ v_mov_b32       v6, v4
/*000000002b34*/ v_mov_b32       v8, v4
/*000000002b38*/ v_add3_u32      v3, s0, s3, v0
/*000000002b40*/ v_add3_u32      v5, s2, s6, v1
/*000000002b48*/ s_waitcnt       lgkmcnt(0)
/*000000002b4c*/ v_add3_u32      v7, s1, s7, v2
/*000000002b54*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000002b5c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002b64*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002b6c*/ v_add_co_u32    v10, vcc, s4, v0
/*000000002b74*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*000000002b78*/ v_add_co_u32    v2, vcc, s4, v2
/*000000002b80*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000002b84*/ v_add_co_u32    v5, vcc, s4, v5
/*000000002b8c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000002b90*/ global_store_dword v[10:11], v4, off
/*000000002b98*/ global_store_dword v[2:3], v4, off
/*000000002ba0*/ global_store_dword v[5:6], v4, off
/*000000002ba8*/ s_endpgm
/*000000002bac*/ s_nop           0x0
/*000000002bb0*/ s_nop           0x0
/*000000002bb4*/ s_nop           0x0
/*000000002bb8*/ s_nop           0x0
/*000000002bbc*/ s_nop           0x0
/*000000002bc0*/ s_nop           0x0
/*000000002bc4*/ s_nop           0x0
/*000000002bc8*/ s_nop           0x0
/*000000002bcc*/ s_nop           0x0
/*000000002bd0*/ s_nop           0x0
/*000000002bd4*/ s_nop           0x0
/*000000002bd8*/ s_nop           0x0
/*000000002bdc*/ s_nop           0x0
/*000000002be0*/ s_nop           0x0
/*000000002be4*/ s_nop           0x0
/*000000002be8*/ s_nop           0x0
/*000000002bec*/ s_nop           0x0
/*000000002bf0*/ s_nop           0x0
/*000000002bf4*/ s_nop           0x0
/*000000002bf8*/ s_nop           0x0
/*000000002bfc*/ s_nop           0x0
subtract_get_group_id_get_local_id:
.skip 256
/*000000002d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002d08*/ s_waitcnt       lgkmcnt(0)
/*000000002d0c*/ s_clause        0x1
/*000000002d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002d18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002d20*/ v_mov_b32       v4, 0
/*000000002d24*/ s_lshl_b32      s3, s6, 1
/*000000002d28*/ s_lshl_b32      s9, s7, 4
/*000000002d2c*/ s_lshl_b32      s10, s8, 1
/*000000002d30*/ v_sub_nc_u32    v9, s6, v0
/*000000002d34*/ v_mov_b32       v6, v4
/*000000002d38*/ v_mov_b32       v8, v4
/*000000002d3c*/ v_sub_nc_u32    v10, s7, v1
/*000000002d40*/ v_sub_nc_u32    v11, s8, v2
/*000000002d44*/ v_add3_u32      v3, s0, s3, v0
/*000000002d4c*/ v_add3_u32      v5, s2, s9, v1
/*000000002d54*/ s_waitcnt       lgkmcnt(0)
/*000000002d58*/ v_add3_u32      v7, s1, s10, v2
/*000000002d60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002d68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002d70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002d78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002d80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002d84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002d8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002d90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002d98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002d9c*/ global_store_dword v[2:3], v9, off
/*000000002da4*/ global_store_dword v[0:1], v10, off
/*000000002dac*/ global_store_dword v[4:5], v11, off
/*000000002db4*/ s_endpgm
/*000000002db8*/ s_nop           0x0
/*000000002dbc*/ s_nop           0x0
/*000000002dc0*/ s_nop           0x0
/*000000002dc4*/ s_nop           0x0
/*000000002dc8*/ s_nop           0x0
/*000000002dcc*/ s_nop           0x0
/*000000002dd0*/ s_nop           0x0
/*000000002dd4*/ s_nop           0x0
/*000000002dd8*/ s_nop           0x0
/*000000002ddc*/ s_nop           0x0
/*000000002de0*/ s_nop           0x0
/*000000002de4*/ s_nop           0x0
/*000000002de8*/ s_nop           0x0
/*000000002dec*/ s_nop           0x0
/*000000002df0*/ s_nop           0x0
/*000000002df4*/ s_nop           0x0
/*000000002df8*/ s_nop           0x0
/*000000002dfc*/ s_nop           0x0
subtract_get_local_size_get_local_id:
.skip 256
/*000000002f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002f08*/ s_waitcnt       lgkmcnt(0)
/*000000002f0c*/ s_clause        0x1
/*000000002f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002f20*/ v_mov_b32       v4, 0
/*000000002f24*/ s_lshl_b32      s3, s6, 1
/*000000002f28*/ s_lshl_b32      s6, s7, 1
/*000000002f2c*/ s_lshl_b32      s7, s8, 2
/*000000002f30*/ v_sub_nc_u32    v9, 2, v0
/*000000002f34*/ v_mov_b32       v6, v4
/*000000002f38*/ v_mov_b32       v8, v4
/*000000002f3c*/ v_sub_nc_u32    v10, 2, v1
/*000000002f40*/ v_sub_nc_u32    v11, 4, v2
/*000000002f44*/ v_add3_u32      v3, s0, s3, v0
/*000000002f4c*/ v_add3_u32      v5, s2, s6, v1
/*000000002f54*/ s_waitcnt       lgkmcnt(0)
/*000000002f58*/ v_add3_u32      v7, s1, s7, v2
/*000000002f60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002f68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002f70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002f78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002f80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002f84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002f8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002f90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002f98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002f9c*/ global_store_dword v[2:3], v9, off
/*000000002fa4*/ global_store_dword v[0:1], v10, off
/*000000002fac*/ global_store_dword v[4:5], v11, off
/*000000002fb4*/ s_endpgm
/*000000002fb8*/ s_nop           0x0
/*000000002fbc*/ s_nop           0x0
/*000000002fc0*/ s_nop           0x0
/*000000002fc4*/ s_nop           0x0
/*000000002fc8*/ s_nop           0x0
/*000000002fcc*/ s_nop           0x0
/*000000002fd0*/ s_nop           0x0
/*000000002fd4*/ s_nop           0x0
/*000000002fd8*/ s_nop           0x0
/*000000002fdc*/ s_nop           0x0
/*000000002fe0*/ s_nop           0x0
/*000000002fe4*/ s_nop           0x0
/*000000002fe8*/ s_nop           0x0
/*000000002fec*/ s_nop           0x0
/*000000002ff0*/ s_nop           0x0
/*000000002ff4*/ s_nop           0x0
/*000000002ff8*/ s_nop           0x0
/*000000002ffc*/ s_nop           0x0
subtract_get_global_id_get_local_id:
.skip 256
/*000000003100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003108*/ s_waitcnt       lgkmcnt(0)
/*00000000310c*/ s_clause        0x1
/*000000003110*/ s_load_dword    s1, s[4:5], 0x20
/*000000003118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003120*/ s_lshl_b32      s3, s6, 1
/*000000003124*/ v_mov_b32       v4, 0
/*000000003128*/ v_or_b32        v3, s3, v0
/*00000000312c*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000003134*/ v_lshl_or_b32   v8, s8, 2, v2
/*00000000313c*/ v_mov_b32       v5, v4
/*000000003140*/ v_lshlrev_b64   v[6:7], 2, v[3:4]
/*000000003148*/ v_mov_b32       v9, v4
/*00000000314c*/ v_add_nc_u32    v4, s2, v0
/*000000003150*/ s_waitcnt       lgkmcnt(0)
/*000000003154*/ v_add_nc_u32    v8, s1, v8
/*000000003158*/ v_add_co_u32    v6, vcc, s4, v6
/*000000003160*/ s_add_i32       s0, s3, s0
/*000000003164*/ v_add_co_ci_u32 v7, vcc, s5, v7, vcc
/*000000003168*/ v_lshlrev_b64   v[10:11], 2, v[4:5]
/*000000003170*/ v_sub_nc_u32    v4, v4, v1
/*000000003174*/ v_lshlrev_b64   v[0:1], 2, v[8:9]
/*00000000317c*/ v_sub_nc_u32    v15, v8, v2
/*000000003180*/ v_mov_b32       v5, s0
/*000000003184*/ v_add_co_u32    v2, vcc, s4, v10
/*00000000318c*/ v_add_co_ci_u32 v3, vcc, s5, v11, vcc
/*000000003190*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003198*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000319c*/ global_store_dword v[6:7], v5, off
/*0000000031a4*/ global_store_dword v[2:3], v4, off
/*0000000031ac*/ global_store_dword v[0:1], v15, off
/*0000000031b4*/ s_endpgm
/*0000000031b8*/ s_nop           0x0
/*0000000031bc*/ s_nop           0x0
/*0000000031c0*/ s_nop           0x0
/*0000000031c4*/ s_nop           0x0
/*0000000031c8*/ s_nop           0x0
/*0000000031cc*/ s_nop           0x0
/*0000000031d0*/ s_nop           0x0
/*0000000031d4*/ s_nop           0x0
/*0000000031d8*/ s_nop           0x0
/*0000000031dc*/ s_nop           0x0
/*0000000031e0*/ s_nop           0x0
/*0000000031e4*/ s_nop           0x0
/*0000000031e8*/ s_nop           0x0
/*0000000031ec*/ s_nop           0x0
/*0000000031f0*/ s_nop           0x0
/*0000000031f4*/ s_nop           0x0
/*0000000031f8*/ s_nop           0x0
/*0000000031fc*/ s_nop           0x0
subtract_get_global_size_get_local_id:
.skip 256
/*000000003300*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003308*/ s_waitcnt       lgkmcnt(0)
/*00000000330c*/ s_load_dword    s1, s[6:7], 0x20
/*000000003314*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000331c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000003324*/ v_mov_b32       v4, 0
/*000000003328*/ s_lshl_b32      s3, s8, 4
/*00000000332c*/ s_lshl_b32      s6, s9, 1
/*000000003330*/ s_lshl_b32      s7, s10, 1
/*000000003334*/ v_mov_b32       v6, v4
/*000000003338*/ v_mov_b32       v8, v4
/*00000000333c*/ s_waitcnt       lgkmcnt(0)
/*000000003340*/ v_add3_u32      v7, s1, s7, v2
/*000000003348*/ v_add3_u32      v3, s0, s3, v0
/*000000003350*/ v_add3_u32      v5, s2, s6, v1
/*000000003358*/ v_sub_nc_u32    v9, s12, v0
/*00000000335c*/ v_sub_nc_u32    v10, s13, v1
/*000000003360*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000003368*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000003370*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000003378*/ v_sub_nc_u32    v7, s14, v2
/*00000000337c*/ v_add_co_u32    v3, vcc, s4, v3
/*000000003384*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000003388*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003390*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003394*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000339c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000033a0*/ global_store_dword v[3:4], v9, off
/*0000000033a8*/ global_store_dword v[0:1], v10, off
/*0000000033b0*/ global_store_dword v[5:6], v7, off
/*0000000033b8*/ s_endpgm
/*0000000033bc*/ s_nop           0x0
/*0000000033c0*/ s_nop           0x0
/*0000000033c4*/ s_nop           0x0
/*0000000033c8*/ s_nop           0x0
/*0000000033cc*/ s_nop           0x0
/*0000000033d0*/ s_nop           0x0
/*0000000033d4*/ s_nop           0x0
/*0000000033d8*/ s_nop           0x0
/*0000000033dc*/ s_nop           0x0
/*0000000033e0*/ s_nop           0x0
/*0000000033e4*/ s_nop           0x0
/*0000000033e8*/ s_nop           0x0
/*0000000033ec*/ s_nop           0x0
/*0000000033f0*/ s_nop           0x0
/*0000000033f4*/ s_nop           0x0
/*0000000033f8*/ s_nop           0x0
/*0000000033fc*/ s_nop           0x0
subtract_get_num_groups_get_local_id:
.skip 256
/*000000003500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003508*/ s_waitcnt       lgkmcnt(0)
/*00000000350c*/ s_load_dword    s1, s[6:7], 0x20
/*000000003514*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000351c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000003524*/ s_lshl_b32      s3, s8, 1
/*000000003528*/ v_mov_b32       v4, 0
/*00000000352c*/ s_lshl_b32      s7, s10, 2
/*000000003530*/ s_lshl_b32      s6, s9, 1
/*000000003534*/ v_mov_b32       v6, v4
/*000000003538*/ v_add3_u32      v3, s0, s3, v0
/*000000003540*/ s_waitcnt       lgkmcnt(0)
/*000000003544*/ v_add3_u32      v7, s1, s7, v2
/*00000000354c*/ s_lshr_b32      s0, s12, 1
/*000000003550*/ s_and_b32       s1, s12, -2
/*000000003554*/ v_sub_nc_u32    v0, s0, v0
/*000000003558*/ v_cmp_gt_u32    vcc, s12, s1
/*000000003560*/ v_lshlrev_b64   v[8:9], 2, v[3:4]
/*000000003568*/ v_add3_u32      v5, s2, s6, v1
/*000000003570*/ s_lshr_b32      s2, s13, 1
/*000000003574*/ s_and_b32       s3, s13, -2
/*000000003578*/ v_add_co_ci_u32 v12, vcc, 0, v0, vcc
/*00000000357c*/ v_sub_nc_u32    v3, s2, v1
/*000000003580*/ v_add_co_u32    v10, vcc, s4, v8
/*000000003588*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000003590*/ v_add_co_ci_u32 v11, vcc, s5, v9, vcc
/*000000003594*/ v_cmp_gt_u32    vcc, s13, s3
/*00000000359c*/ v_mov_b32       v8, v4
/*0000000035a0*/ s_lshr_b32      s6, s14, 2
/*0000000035a4*/ s_and_b32       s0, s14, -4
/*0000000035a8*/ v_sub_nc_u32    v5, s6, v2
/*0000000035ac*/ v_add_co_ci_u32 v15, vcc, 0, v3, vcc
/*0000000035b0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000035b8*/ v_lshlrev_b64   v[2:3], 2, v[7:8]
/*0000000035c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000035c4*/ v_cmp_gt_u32    vcc, s14, s0
/*0000000035cc*/ v_add_co_ci_u32 v5, vcc, 0, v5, vcc
/*0000000035d0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000035d8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000035dc*/ global_store_dword v[10:11], v12, off
/*0000000035e4*/ global_store_dword v[0:1], v15, off
/*0000000035ec*/ global_store_dword v[2:3], v5, off
/*0000000035f4*/ s_endpgm
/*0000000035f8*/ s_nop           0x0
/*0000000035fc*/ s_nop           0x0
subtract_get_work_dim_get_local_id:
.skip 256
/*000000003700*/ v_mov_b32       v3, s4
/*000000003704*/ v_mov_b32       v4, s5
/*000000003708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003710*/ s_waitcnt       lgkmcnt(0)
/*000000003714*/ s_clause        0x1
/*000000003718*/ s_load_dword    s1, s[6:7], 0x20
/*000000003720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000003728*/ s_lshl_b32      s3, s8, 1
/*00000000372c*/ s_lshl_b32      s6, s9, 1
/*000000003730*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000003738*/ v_mov_b32       v4, 0
/*00000000373c*/ s_lshl_b32      s7, s10, 2
/*000000003740*/ v_mov_b32       v6, v4
/*000000003744*/ v_mov_b32       v8, v4
/*000000003748*/ v_add3_u32      v3, s0, s3, v0
/*000000003750*/ v_add3_u32      v5, s2, s6, v1
/*000000003758*/ s_waitcnt       lgkmcnt(0)
/*00000000375c*/ v_add3_u32      v7, s1, s7, v2
/*000000003764*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000376c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000003774*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*00000000377c*/ v_add_co_u32    v3, vcc, s4, v3
/*000000003784*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000003788*/ v_add_co_u32    v5, vcc, s4, v5
/*000000003790*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000003794*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000379c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*0000000037a0*/ s_waitcnt       vmcnt(0)
/*0000000037a4*/ v_sub_nc_u32    v10, v15, v0
/*0000000037a8*/ v_sub_nc_u32    v11, v15, v1
/*0000000037ac*/ v_sub_nc_u32    v2, v15, v2
/*0000000037b0*/ global_store_dword v[3:4], v10, off
/*0000000037b8*/ global_store_dword v[5:6], v11, off
/*0000000037c0*/ global_store_dword v[7:8], v2, off
/*0000000037c8*/ s_endpgm
/*0000000037cc*/ s_nop           0x0
/*0000000037d0*/ s_nop           0x0
/*0000000037d4*/ s_nop           0x0
/*0000000037d8*/ s_nop           0x0
/*0000000037dc*/ s_nop           0x0
/*0000000037e0*/ s_nop           0x0
/*0000000037e4*/ s_nop           0x0
/*0000000037e8*/ s_nop           0x0
/*0000000037ec*/ s_nop           0x0
/*0000000037f0*/ s_nop           0x0
/*0000000037f4*/ s_nop           0x0
/*0000000037f8*/ s_nop           0x0
/*0000000037fc*/ s_nop           0x0
subtract_x_get_group_id:
.skip 256
/*000000003900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003908*/ s_waitcnt       lgkmcnt(0)
/*00000000390c*/ s_clause        0x2
/*000000003910*/ s_load_dword    s1, s[4:5], 0x20
/*000000003918*/ s_load_dword    s3, s[4:5], 0x8
/*000000003920*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000003928*/ v_mov_b32       v4, 0
/*00000000392c*/ s_lshl_b32      s9, s6, 4
/*000000003930*/ s_lshl_b32      s10, s7, 1
/*000000003934*/ s_lshl_b32      s11, s8, 1
/*000000003938*/ v_mov_b32       v6, v4
/*00000000393c*/ v_mov_b32       v8, v4
/*000000003940*/ s_waitcnt       lgkmcnt(0)
/*000000003944*/ v_add3_u32      v7, s1, s11, v2
/*00000000394c*/ v_add3_u32      v3, s0, s9, v0
/*000000003954*/ v_add3_u32      v5, s2, s10, v1
/*00000000395c*/ s_sub_i32       s0, s3, s6
/*000000003960*/ s_sub_i32       s1, s3, s7
/*000000003964*/ v_mov_b32       v11, s0
/*000000003968*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003970*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003978*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000003980*/ s_sub_i32       s0, s3, s8
/*000000003984*/ v_mov_b32       v13, s1
/*000000003988*/ v_mov_b32       v7, s0
/*00000000398c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003994*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003998*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000039a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000039a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000039ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000039b0*/ global_store_dword v[0:1], v11, off
/*0000000039b8*/ global_store_dword v[2:3], v13, off
/*0000000039c0*/ global_store_dword v[4:5], v7, off
/*0000000039c8*/ s_endpgm
/*0000000039cc*/ s_nop           0x0
/*0000000039d0*/ s_nop           0x0
/*0000000039d4*/ s_nop           0x0
/*0000000039d8*/ s_nop           0x0
/*0000000039dc*/ s_nop           0x0
/*0000000039e0*/ s_nop           0x0
/*0000000039e4*/ s_nop           0x0
/*0000000039e8*/ s_nop           0x0
/*0000000039ec*/ s_nop           0x0
/*0000000039f0*/ s_nop           0x0
/*0000000039f4*/ s_nop           0x0
/*0000000039f8*/ s_nop           0x0
/*0000000039fc*/ s_nop           0x0
subtract_get_global_offset_get_group_id:
.skip 256
/*000000003b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003b08*/ s_waitcnt       lgkmcnt(0)
/*000000003b0c*/ s_clause        0x1
/*000000003b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003b20*/ v_mov_b32       v4, 0
/*000000003b24*/ s_lshl_b32      s3, s6, 1
/*000000003b28*/ s_lshl_b32      s9, s7, 4
/*000000003b2c*/ s_lshl_b32      s10, s8, 1
/*000000003b30*/ v_mov_b32       v6, v4
/*000000003b34*/ v_mov_b32       v8, v4
/*000000003b38*/ v_add3_u32      v3, s0, s3, v0
/*000000003b40*/ v_add3_u32      v5, s2, s9, v1
/*000000003b48*/ s_waitcnt       lgkmcnt(0)
/*000000003b4c*/ v_add3_u32      v7, s1, s10, v2
/*000000003b54*/ s_sub_i32       s0, s0, s6
/*000000003b58*/ s_sub_i32       s2, s2, s7
/*000000003b5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003b64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003b6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000003b74*/ v_mov_b32       v11, s0
/*000000003b78*/ s_sub_i32       s0, s1, s8
/*000000003b7c*/ v_mov_b32       v13, s2
/*000000003b80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003b88*/ v_mov_b32       v6, s0
/*000000003b8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003b90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000003b98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000003b9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000003ba4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000003ba8*/ global_store_dword v[0:1], v11, off
/*000000003bb0*/ global_store_dword v[2:3], v13, off
/*000000003bb8*/ global_store_dword v[4:5], v6, off
/*000000003bc0*/ s_endpgm
/*000000003bc4*/ s_nop           0x0
/*000000003bc8*/ s_nop           0x0
/*000000003bcc*/ s_nop           0x0
/*000000003bd0*/ s_nop           0x0
/*000000003bd4*/ s_nop           0x0
/*000000003bd8*/ s_nop           0x0
/*000000003bdc*/ s_nop           0x0
/*000000003be0*/ s_nop           0x0
/*000000003be4*/ s_nop           0x0
/*000000003be8*/ s_nop           0x0
/*000000003bec*/ s_nop           0x0
/*000000003bf0*/ s_nop           0x0
/*000000003bf4*/ s_nop           0x0
/*000000003bf8*/ s_nop           0x0
/*000000003bfc*/ s_nop           0x0
subtract_get_local_id_get_group_id:
.skip 256
/*000000003d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003d08*/ s_waitcnt       lgkmcnt(0)
/*000000003d0c*/ s_clause        0x1
/*000000003d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003d18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003d20*/ v_mov_b32       v4, 0
/*000000003d24*/ s_lshl_b32      s3, s6, 3
/*000000003d28*/ s_lshl_b32      s9, s7, 2
/*000000003d2c*/ s_lshl_b32      s10, s8, 1
/*000000003d30*/ v_subrev_nc_u32 v9, s6, v0
/*000000003d34*/ v_mov_b32       v6, v4
/*000000003d38*/ v_mov_b32       v8, v4
/*000000003d3c*/ v_subrev_nc_u32 v10, s7, v1
/*000000003d40*/ v_subrev_nc_u32 v11, s8, v2
/*000000003d44*/ v_add3_u32      v3, s0, s3, v0
/*000000003d4c*/ v_add3_u32      v5, s2, s9, v1
/*000000003d54*/ s_waitcnt       lgkmcnt(0)
/*000000003d58*/ v_add3_u32      v7, s1, s10, v2
/*000000003d60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000003d68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000003d70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000003d78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000003d80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000003d84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003d8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003d90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000003d98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000003d9c*/ global_store_dword v[2:3], v9, off
/*000000003da4*/ global_store_dword v[0:1], v10, off
/*000000003dac*/ global_store_dword v[4:5], v11, off
/*000000003db4*/ s_endpgm
/*000000003db8*/ s_nop           0x0
/*000000003dbc*/ s_nop           0x0
/*000000003dc0*/ s_nop           0x0
/*000000003dc4*/ s_nop           0x0
/*000000003dc8*/ s_nop           0x0
/*000000003dcc*/ s_nop           0x0
/*000000003dd0*/ s_nop           0x0
/*000000003dd4*/ s_nop           0x0
/*000000003dd8*/ s_nop           0x0
/*000000003ddc*/ s_nop           0x0
/*000000003de0*/ s_nop           0x0
/*000000003de4*/ s_nop           0x0
/*000000003de8*/ s_nop           0x0
/*000000003dec*/ s_nop           0x0
/*000000003df0*/ s_nop           0x0
/*000000003df4*/ s_nop           0x0
/*000000003df8*/ s_nop           0x0
/*000000003dfc*/ s_nop           0x0
subtract_get_group_id_get_group_id:
.skip 256
/*000000003f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003f08*/ s_waitcnt       lgkmcnt(0)
/*000000003f0c*/ s_clause        0x1
/*000000003f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003f20*/ v_mov_b32       v4, 0
/*000000003f24*/ s_lshl_b32      s3, s6, 1
/*000000003f28*/ s_lshl_b32      s6, s7, 4
/*000000003f2c*/ s_lshl_b32      s7, s8, 1
/*000000003f30*/ v_mov_b32       v6, v4
/*000000003f34*/ v_mov_b32       v8, v4
/*000000003f38*/ v_add3_u32      v3, s0, s3, v0
/*000000003f40*/ v_add3_u32      v5, s2, s6, v1
/*000000003f48*/ s_waitcnt       lgkmcnt(0)
/*000000003f4c*/ v_add3_u32      v7, s1, s7, v2
/*000000003f54*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003f5c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003f64*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000003f6c*/ v_add_co_u32    v10, vcc, s4, v0
/*000000003f74*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*000000003f78*/ v_add_co_u32    v2, vcc, s4, v2
/*000000003f80*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000003f84*/ v_add_co_u32    v5, vcc, s4, v5
/*000000003f8c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000003f90*/ global_store_dword v[10:11], v4, off
/*000000003f98*/ global_store_dword v[2:3], v4, off
/*000000003fa0*/ global_store_dword v[5:6], v4, off
/*000000003fa8*/ s_endpgm
/*000000003fac*/ s_nop           0x0
/*000000003fb0*/ s_nop           0x0
/*000000003fb4*/ s_nop           0x0
/*000000003fb8*/ s_nop           0x0
/*000000003fbc*/ s_nop           0x0
/*000000003fc0*/ s_nop           0x0
/*000000003fc4*/ s_nop           0x0
/*000000003fc8*/ s_nop           0x0
/*000000003fcc*/ s_nop           0x0
/*000000003fd0*/ s_nop           0x0
/*000000003fd4*/ s_nop           0x0
/*000000003fd8*/ s_nop           0x0
/*000000003fdc*/ s_nop           0x0
/*000000003fe0*/ s_nop           0x0
/*000000003fe4*/ s_nop           0x0
/*000000003fe8*/ s_nop           0x0
/*000000003fec*/ s_nop           0x0
/*000000003ff0*/ s_nop           0x0
/*000000003ff4*/ s_nop           0x0
/*000000003ff8*/ s_nop           0x0
/*000000003ffc*/ s_nop           0x0
subtract_get_local_size_get_group_id:
.skip 256
/*000000004100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004108*/ s_waitcnt       lgkmcnt(0)
/*00000000410c*/ s_clause        0x1
/*000000004110*/ s_load_dword    s1, s[4:5], 0x20
/*000000004118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004120*/ v_mov_b32       v4, 0
/*000000004124*/ s_lshl_b32      s3, s6, 1
/*000000004128*/ s_lshl_b32      s9, s7, 1
/*00000000412c*/ s_lshl_b32      s10, s8, 2
/*000000004130*/ s_sub_i32       s6, 2, s6
/*000000004134*/ v_mov_b32       v6, v4
/*000000004138*/ v_mov_b32       v8, v4
/*00000000413c*/ s_sub_i32       s7, 2, s7
/*000000004140*/ v_mov_b32       v11, s6
/*000000004144*/ v_mov_b32       v13, s7
/*000000004148*/ v_add3_u32      v3, s0, s3, v0
/*000000004150*/ v_add3_u32      v5, s2, s9, v1
/*000000004158*/ s_waitcnt       lgkmcnt(0)
/*00000000415c*/ v_add3_u32      v7, s1, s10, v2
/*000000004164*/ s_sub_i32       s0, 4, s8
/*000000004168*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004170*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004178*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004180*/ v_mov_b32       v6, s0
/*000000004184*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000418c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004190*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004198*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000419c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000041a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000041a8*/ global_store_dword v[0:1], v11, off
/*0000000041b0*/ global_store_dword v[2:3], v13, off
/*0000000041b8*/ global_store_dword v[4:5], v6, off
/*0000000041c0*/ s_endpgm
/*0000000041c4*/ s_nop           0x0
/*0000000041c8*/ s_nop           0x0
/*0000000041cc*/ s_nop           0x0
/*0000000041d0*/ s_nop           0x0
/*0000000041d4*/ s_nop           0x0
/*0000000041d8*/ s_nop           0x0
/*0000000041dc*/ s_nop           0x0
/*0000000041e0*/ s_nop           0x0
/*0000000041e4*/ s_nop           0x0
/*0000000041e8*/ s_nop           0x0
/*0000000041ec*/ s_nop           0x0
/*0000000041f0*/ s_nop           0x0
/*0000000041f4*/ s_nop           0x0
/*0000000041f8*/ s_nop           0x0
/*0000000041fc*/ s_nop           0x0
subtract_get_global_id_get_group_id:
.skip 256
/*000000004300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004308*/ s_waitcnt       lgkmcnt(0)
/*00000000430c*/ s_clause        0x1
/*000000004310*/ s_load_dword    s1, s[4:5], 0x20
/*000000004318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004320*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000004328*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000004330*/ v_mov_b32       v4, 0
/*000000004334*/ v_lshl_or_b32   v6, s8, 2, v2
/*00000000433c*/ v_subrev_nc_u32 v7, s6, v3
/*000000004340*/ v_mov_b32       v1, v4
/*000000004344*/ v_lshlrev_b64   v[2:3], 2, v[3:4]
/*00000000434c*/ v_mov_b32       v5, v4
/*000000004350*/ v_add_nc_u32    v0, s2, v0
/*000000004354*/ s_waitcnt       lgkmcnt(0)
/*000000004358*/ v_add_nc_u32    v4, s1, v6
/*00000000435c*/ v_add_nc_u32    v8, s0, v7
/*000000004360*/ v_lshlrev_b64   v[6:7], 2, v[0:1]
/*000000004368*/ v_add_co_u32    v1, vcc, s4, v2
/*000000004370*/ v_subrev_nc_u32 v9, s8, v4
/*000000004374*/ v_add_co_ci_u32 v2, vcc, s5, v3, vcc
/*000000004378*/ v_lshlrev_b64   v[3:4], 2, v[4:5]
/*000000004380*/ v_subrev_nc_u32 v0, s7, v0
/*000000004384*/ v_add_co_u32    v5, vcc, s4, v6
/*00000000438c*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*000000004390*/ v_add_co_u32    v3, vcc, s4, v3
/*000000004398*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000439c*/ global_store_dword v[1:2], v8, off
/*0000000043a4*/ global_store_dword v[5:6], v0, off
/*0000000043ac*/ global_store_dword v[3:4], v9, off
/*0000000043b4*/ s_endpgm
/*0000000043b8*/ s_nop           0x0
/*0000000043bc*/ s_nop           0x0
/*0000000043c0*/ s_nop           0x0
/*0000000043c4*/ s_nop           0x0
/*0000000043c8*/ s_nop           0x0
/*0000000043cc*/ s_nop           0x0
/*0000000043d0*/ s_nop           0x0
/*0000000043d4*/ s_nop           0x0
/*0000000043d8*/ s_nop           0x0
/*0000000043dc*/ s_nop           0x0
/*0000000043e0*/ s_nop           0x0
/*0000000043e4*/ s_nop           0x0
/*0000000043e8*/ s_nop           0x0
/*0000000043ec*/ s_nop           0x0
/*0000000043f0*/ s_nop           0x0
/*0000000043f4*/ s_nop           0x0
/*0000000043f8*/ s_nop           0x0
/*0000000043fc*/ s_nop           0x0
subtract_get_global_size_get_group_id:
.skip 256
/*000000004500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004508*/ s_waitcnt       lgkmcnt(0)
/*00000000450c*/ s_load_dword    s1, s[6:7], 0x20
/*000000004514*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000451c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000004524*/ v_mov_b32       v4, 0
/*000000004528*/ s_lshl_b32      s3, s8, 4
/*00000000452c*/ s_lshl_b32      s6, s9, 1
/*000000004530*/ s_lshl_b32      s7, s10, 1
/*000000004534*/ v_mov_b32       v6, v4
/*000000004538*/ v_mov_b32       v8, v4
/*00000000453c*/ s_waitcnt       lgkmcnt(0)
/*000000004540*/ v_add3_u32      v7, s1, s7, v2
/*000000004548*/ v_add3_u32      v3, s0, s3, v0
/*000000004550*/ v_add3_u32      v5, s2, s6, v1
/*000000004558*/ s_sub_i32       s0, s12, s8
/*00000000455c*/ s_sub_i32       s1, s13, s9
/*000000004560*/ v_mov_b32       v11, s0
/*000000004564*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000456c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004574*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000457c*/ s_sub_i32       s0, s14, s10
/*000000004580*/ v_mov_b32       v13, s1
/*000000004584*/ v_mov_b32       v7, s0
/*000000004588*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004590*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004594*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000459c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000045a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000045a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000045ac*/ global_store_dword v[0:1], v11, off
/*0000000045b4*/ global_store_dword v[2:3], v13, off
/*0000000045bc*/ global_store_dword v[4:5], v7, off
/*0000000045c4*/ s_endpgm
/*0000000045c8*/ s_nop           0x0
/*0000000045cc*/ s_nop           0x0
/*0000000045d0*/ s_nop           0x0
/*0000000045d4*/ s_nop           0x0
/*0000000045d8*/ s_nop           0x0
/*0000000045dc*/ s_nop           0x0
/*0000000045e0*/ s_nop           0x0
/*0000000045e4*/ s_nop           0x0
/*0000000045e8*/ s_nop           0x0
/*0000000045ec*/ s_nop           0x0
/*0000000045f0*/ s_nop           0x0
/*0000000045f4*/ s_nop           0x0
/*0000000045f8*/ s_nop           0x0
/*0000000045fc*/ s_nop           0x0
subtract_get_num_groups_get_group_id:
.skip 256
/*000000004700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004708*/ s_waitcnt       lgkmcnt(0)
/*00000000470c*/ s_load_dword    s1, s[6:7], 0x20
/*000000004714*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000471c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000004724*/ s_lshl_b32      s3, s8, 1
/*000000004728*/ v_mov_b32       v4, 0
/*00000000472c*/ s_lshl_b32      s7, s10, 2
/*000000004730*/ s_lshl_b32      s6, s9, 1
/*000000004734*/ s_waitcnt       lgkmcnt(0)
/*000000004738*/ v_add3_u32      v2, s1, s7, v2
/*000000004740*/ v_add3_u32      v3, s0, s3, v0
/*000000004748*/ s_and_b32       s1, s12, -2
/*00000000474c*/ v_add3_u32      v0, s2, s6, v1
/*000000004754*/ v_mov_b32       v1, v4
/*000000004758*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000004760*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000004768*/ s_and_b32       s3, s13, -2
/*00000000476c*/ s_lshr_b32      s0, s12, 1
/*000000004770*/ v_mov_b32       v3, v4
/*000000004774*/ v_cmp_gt_u32    s[3:4], s13, s3
/*00000000477c*/ s_lshr_b32      s2, s13, 1
/*000000004780*/ s_lshr_b32      s6, s14, 2
/*000000004784*/ s_and_b32       s7, s14, -4
/*000000004788*/ s_sub_i32       s0, s0, s8
/*00000000478c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000004794*/ s_cmpk_lg_u32   s1, 0x0
/*000000004798*/ v_cmp_gt_u32    s[1:2], s14, s7
/*0000000047a0*/ s_addc_u32      s0, s0, 0
/*0000000047a4*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000047ac*/ s_sub_i32       s2, s2, s9
/*0000000047b0*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*0000000047b8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000047bc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000047c0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000047c8*/ v_mov_b32       v7, s0
/*0000000047cc*/ s_addc_u32      s0, s2, 0
/*0000000047d0*/ s_sub_i32       s2, s6, s10
/*0000000047d4*/ s_cmpk_lg_u32   s1, 0x0
/*0000000047d8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000047dc*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000047e4*/ v_mov_b32       v11, s0
/*0000000047e8*/ s_addc_u32      s0, s2, 0
/*0000000047ec*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000047f0*/ v_mov_b32       v8, s0
/*0000000047f4*/ global_store_dword v[5:6], v7, off
/*0000000047fc*/ global_store_dword v[0:1], v11, off
/*000000004804*/ global_store_dword v[2:3], v8, off
/*00000000480c*/ s_endpgm
/*000000004810*/ s_nop           0x0
/*000000004814*/ s_nop           0x0
/*000000004818*/ s_nop           0x0
/*00000000481c*/ s_nop           0x0
/*000000004820*/ s_nop           0x0
/*000000004824*/ s_nop           0x0
/*000000004828*/ s_nop           0x0
/*00000000482c*/ s_nop           0x0
/*000000004830*/ s_nop           0x0
/*000000004834*/ s_nop           0x0
/*000000004838*/ s_nop           0x0
/*00000000483c*/ s_nop           0x0
/*000000004840*/ s_nop           0x0
/*000000004844*/ s_nop           0x0
/*000000004848*/ s_nop           0x0
/*00000000484c*/ s_nop           0x0
/*000000004850*/ s_nop           0x0
/*000000004854*/ s_nop           0x0
/*000000004858*/ s_nop           0x0
/*00000000485c*/ s_nop           0x0
/*000000004860*/ s_nop           0x0
/*000000004864*/ s_nop           0x0
/*000000004868*/ s_nop           0x0
/*00000000486c*/ s_nop           0x0
/*000000004870*/ s_nop           0x0
/*000000004874*/ s_nop           0x0
/*000000004878*/ s_nop           0x0
/*00000000487c*/ s_nop           0x0
/*000000004880*/ s_nop           0x0
/*000000004884*/ s_nop           0x0
/*000000004888*/ s_nop           0x0
/*00000000488c*/ s_nop           0x0
/*000000004890*/ s_nop           0x0
/*000000004894*/ s_nop           0x0
/*000000004898*/ s_nop           0x0
/*00000000489c*/ s_nop           0x0
/*0000000048a0*/ s_nop           0x0
/*0000000048a4*/ s_nop           0x0
/*0000000048a8*/ s_nop           0x0
/*0000000048ac*/ s_nop           0x0
/*0000000048b0*/ s_nop           0x0
/*0000000048b4*/ s_nop           0x0
/*0000000048b8*/ s_nop           0x0
/*0000000048bc*/ s_nop           0x0
/*0000000048c0*/ s_nop           0x0
/*0000000048c4*/ s_nop           0x0
/*0000000048c8*/ s_nop           0x0
/*0000000048cc*/ s_nop           0x0
/*0000000048d0*/ s_nop           0x0
/*0000000048d4*/ s_nop           0x0
/*0000000048d8*/ s_nop           0x0
/*0000000048dc*/ s_nop           0x0
/*0000000048e0*/ s_nop           0x0
/*0000000048e4*/ s_nop           0x0
/*0000000048e8*/ s_nop           0x0
/*0000000048ec*/ s_nop           0x0
/*0000000048f0*/ s_nop           0x0
/*0000000048f4*/ s_nop           0x0
/*0000000048f8*/ s_nop           0x0
/*0000000048fc*/ s_nop           0x0
subtract_get_work_dim_get_group_id:
.skip 256
/*000000004a00*/ v_mov_b32       v3, s4
/*000000004a04*/ v_mov_b32       v4, s5
/*000000004a08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004a10*/ s_waitcnt       lgkmcnt(0)
/*000000004a14*/ s_clause        0x1
/*000000004a18*/ s_load_dword    s1, s[6:7], 0x20
/*000000004a20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000004a28*/ s_lshl_b32      s3, s8, 1
/*000000004a2c*/ s_lshl_b32      s6, s9, 1
/*000000004a30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000004a38*/ v_mov_b32       v4, 0
/*000000004a3c*/ s_lshl_b32      s7, s10, 2
/*000000004a40*/ v_mov_b32       v6, v4
/*000000004a44*/ v_mov_b32       v8, v4
/*000000004a48*/ v_add3_u32      v3, s0, s3, v0
/*000000004a50*/ v_add3_u32      v5, s2, s6, v1
/*000000004a58*/ s_waitcnt       lgkmcnt(0)
/*000000004a5c*/ v_add3_u32      v7, s1, s7, v2
/*000000004a64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004a6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004a74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004a7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004a84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004a88*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004a90*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000004a94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004a9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004aa0*/ s_waitcnt       vmcnt(0)
/*000000004aa4*/ v_subrev_nc_u32 v6, s8, v9
/*000000004aa8*/ v_subrev_nc_u32 v13, s9, v9
/*000000004aac*/ v_subrev_nc_u32 v11, s10, v9
/*000000004ab0*/ global_store_dword v[0:1], v6, off
/*000000004ab8*/ global_store_dword v[2:3], v13, off
/*000000004ac0*/ global_store_dword v[4:5], v11, off
/*000000004ac8*/ s_endpgm
/*000000004acc*/ s_nop           0x0
/*000000004ad0*/ s_nop           0x0
/*000000004ad4*/ s_nop           0x0
/*000000004ad8*/ s_nop           0x0
/*000000004adc*/ s_nop           0x0
/*000000004ae0*/ s_nop           0x0
/*000000004ae4*/ s_nop           0x0
/*000000004ae8*/ s_nop           0x0
/*000000004aec*/ s_nop           0x0
/*000000004af0*/ s_nop           0x0
/*000000004af4*/ s_nop           0x0
/*000000004af8*/ s_nop           0x0
/*000000004afc*/ s_nop           0x0
subtract_x_get_local_size:
.skip 256
/*000000004c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004c08*/ s_waitcnt       lgkmcnt(0)
/*000000004c0c*/ s_clause        0x2
/*000000004c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000004c18*/ s_load_dword    s3, s[4:5], 0x8
/*000000004c20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000004c28*/ v_mov_b32       v4, 0
/*000000004c2c*/ s_lshl_b32      s6, s6, 4
/*000000004c30*/ s_lshl_b32      s7, s7, 1
/*000000004c34*/ s_lshl_b32      s8, s8, 1
/*000000004c38*/ v_mov_b32       v6, v4
/*000000004c3c*/ v_mov_b32       v8, v4
/*000000004c40*/ s_waitcnt       lgkmcnt(0)
/*000000004c44*/ v_add3_u32      v7, s1, s8, v2
/*000000004c4c*/ v_add3_u32      v3, s0, s6, v0
/*000000004c54*/ v_add3_u32      v5, s2, s7, v1
/*000000004c5c*/ s_add_i32       s0, s3, -16
/*000000004c60*/ s_add_i32       s1, s3, -2
/*000000004c64*/ v_mov_b32       v11, s0
/*000000004c68*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004c70*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004c78*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004c80*/ v_mov_b32       v6, s1
/*000000004c84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004c8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004c90*/ v_add_co_u32    v7, vcc, s4, v2
/*000000004c98*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*000000004c9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004ca4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004ca8*/ global_store_dword v[0:1], v11, off
/*000000004cb0*/ global_store_dword v[7:8], v6, off
/*000000004cb8*/ global_store_dword v[4:5], v6, off
/*000000004cc0*/ s_endpgm
/*000000004cc4*/ s_nop           0x0
/*000000004cc8*/ s_nop           0x0
/*000000004ccc*/ s_nop           0x0
/*000000004cd0*/ s_nop           0x0
/*000000004cd4*/ s_nop           0x0
/*000000004cd8*/ s_nop           0x0
/*000000004cdc*/ s_nop           0x0
/*000000004ce0*/ s_nop           0x0
/*000000004ce4*/ s_nop           0x0
/*000000004ce8*/ s_nop           0x0
/*000000004cec*/ s_nop           0x0
/*000000004cf0*/ s_nop           0x0
/*000000004cf4*/ s_nop           0x0
/*000000004cf8*/ s_nop           0x0
/*000000004cfc*/ s_nop           0x0
subtract_get_global_offset_get_local_size:
.skip 256
/*000000004e00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004e08*/ s_waitcnt       lgkmcnt(0)
/*000000004e0c*/ s_clause        0x1
/*000000004e10*/ s_load_dword    s1, s[4:5], 0x20
/*000000004e18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004e20*/ v_mov_b32       v4, 0
/*000000004e24*/ s_lshl_b32      s3, s6, 1
/*000000004e28*/ s_lshl_b32      s6, s7, 4
/*000000004e2c*/ s_lshl_b32      s7, s8, 1
/*000000004e30*/ v_mov_b32       v6, v4
/*000000004e34*/ v_mov_b32       v8, v4
/*000000004e38*/ v_add3_u32      v3, s0, s3, v0
/*000000004e40*/ v_add3_u32      v5, s2, s6, v1
/*000000004e48*/ s_waitcnt       lgkmcnt(0)
/*000000004e4c*/ v_add3_u32      v7, s1, s7, v2
/*000000004e54*/ s_add_i32       s0, s0, -2
/*000000004e58*/ s_add_i32       s2, s2, -16
/*000000004e5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004e64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004e6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004e74*/ v_mov_b32       v11, s0
/*000000004e78*/ s_add_i32       s0, s1, -2
/*000000004e7c*/ v_mov_b32       v13, s2
/*000000004e80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004e88*/ v_mov_b32       v6, s0
/*000000004e8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004e90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004e98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000004e9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004ea4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004ea8*/ global_store_dword v[0:1], v11, off
/*000000004eb0*/ global_store_dword v[2:3], v13, off
/*000000004eb8*/ global_store_dword v[4:5], v6, off
/*000000004ec0*/ s_endpgm
/*000000004ec4*/ s_nop           0x0
/*000000004ec8*/ s_nop           0x0
/*000000004ecc*/ s_nop           0x0
/*000000004ed0*/ s_nop           0x0
/*000000004ed4*/ s_nop           0x0
/*000000004ed8*/ s_nop           0x0
/*000000004edc*/ s_nop           0x0
/*000000004ee0*/ s_nop           0x0
/*000000004ee4*/ s_nop           0x0
/*000000004ee8*/ s_nop           0x0
/*000000004eec*/ s_nop           0x0
/*000000004ef0*/ s_nop           0x0
/*000000004ef4*/ s_nop           0x0
/*000000004ef8*/ s_nop           0x0
/*000000004efc*/ s_nop           0x0
subtract_get_local_id_get_local_size:
.skip 256
/*000000005000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005008*/ s_waitcnt       lgkmcnt(0)
/*00000000500c*/ s_clause        0x1
/*000000005010*/ s_load_dword    s1, s[4:5], 0x20
/*000000005018*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005020*/ v_mov_b32       v4, 0
/*000000005024*/ s_lshl_b32      s3, s6, 3
/*000000005028*/ s_lshl_b32      s6, s7, 2
/*00000000502c*/ s_lshl_b32      s7, s8, 1
/*000000005030*/ v_or_b32        v9, -8, v0
/*000000005034*/ v_mov_b32       v6, v4
/*000000005038*/ v_mov_b32       v8, v4
/*00000000503c*/ v_or_b32        v10, -4, v1
/*000000005040*/ v_or_b32        v11, -2, v2
/*000000005044*/ v_add3_u32      v3, s0, s3, v0
/*00000000504c*/ v_add3_u32      v5, s2, s6, v1
/*000000005054*/ s_waitcnt       lgkmcnt(0)
/*000000005058*/ v_add3_u32      v7, s1, s7, v2
/*000000005060*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000005068*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000005070*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000005078*/ v_add_co_u32    v2, vcc, s4, v3
/*000000005080*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000005084*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000508c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005090*/ v_add_co_u32    v4, vcc, s4, v5
/*000000005098*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000509c*/ global_store_dword v[2:3], v9, off
/*0000000050a4*/ global_store_dword v[0:1], v10, off
/*0000000050ac*/ global_store_dword v[4:5], v11, off
/*0000000050b4*/ s_endpgm
/*0000000050b8*/ s_nop           0x0
/*0000000050bc*/ s_nop           0x0
/*0000000050c0*/ s_nop           0x0
/*0000000050c4*/ s_nop           0x0
/*0000000050c8*/ s_nop           0x0
/*0000000050cc*/ s_nop           0x0
/*0000000050d0*/ s_nop           0x0
/*0000000050d4*/ s_nop           0x0
/*0000000050d8*/ s_nop           0x0
/*0000000050dc*/ s_nop           0x0
/*0000000050e0*/ s_nop           0x0
/*0000000050e4*/ s_nop           0x0
/*0000000050e8*/ s_nop           0x0
/*0000000050ec*/ s_nop           0x0
/*0000000050f0*/ s_nop           0x0
/*0000000050f4*/ s_nop           0x0
/*0000000050f8*/ s_nop           0x0
/*0000000050fc*/ s_nop           0x0
subtract_get_group_id_get_local_size:
.skip 256
/*000000005200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005208*/ s_waitcnt       lgkmcnt(0)
/*00000000520c*/ s_clause        0x1
/*000000005210*/ s_load_dword    s1, s[4:5], 0x20
/*000000005218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005220*/ v_mov_b32       v4, 0
/*000000005224*/ s_lshl_b32      s3, s6, 1
/*000000005228*/ s_lshl_b32      s9, s7, 4
/*00000000522c*/ s_lshl_b32      s10, s8, 1
/*000000005230*/ s_add_i32       s6, s6, -2
/*000000005234*/ v_mov_b32       v6, v4
/*000000005238*/ v_mov_b32       v8, v4
/*00000000523c*/ s_add_i32       s7, s7, -16
/*000000005240*/ v_mov_b32       v11, s6
/*000000005244*/ v_mov_b32       v13, s7
/*000000005248*/ v_add3_u32      v3, s0, s3, v0
/*000000005250*/ v_add3_u32      v5, s2, s9, v1
/*000000005258*/ s_waitcnt       lgkmcnt(0)
/*00000000525c*/ v_add3_u32      v7, s1, s10, v2
/*000000005264*/ s_add_i32       s0, s8, -2
/*000000005268*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005270*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005278*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005280*/ v_mov_b32       v6, s0
/*000000005284*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000528c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005290*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005298*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000529c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000052a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000052a8*/ global_store_dword v[0:1], v11, off
/*0000000052b0*/ global_store_dword v[2:3], v13, off
/*0000000052b8*/ global_store_dword v[4:5], v6, off
/*0000000052c0*/ s_endpgm
/*0000000052c4*/ s_nop           0x0
/*0000000052c8*/ s_nop           0x0
/*0000000052cc*/ s_nop           0x0
/*0000000052d0*/ s_nop           0x0
/*0000000052d4*/ s_nop           0x0
/*0000000052d8*/ s_nop           0x0
/*0000000052dc*/ s_nop           0x0
/*0000000052e0*/ s_nop           0x0
/*0000000052e4*/ s_nop           0x0
/*0000000052e8*/ s_nop           0x0
/*0000000052ec*/ s_nop           0x0
/*0000000052f0*/ s_nop           0x0
/*0000000052f4*/ s_nop           0x0
/*0000000052f8*/ s_nop           0x0
/*0000000052fc*/ s_nop           0x0
subtract_get_local_size_get_local_size:
.skip 256
/*000000005400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005408*/ s_waitcnt       lgkmcnt(0)
/*00000000540c*/ s_clause        0x1
/*000000005410*/ s_load_dword    s1, s[4:5], 0x20
/*000000005418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005420*/ v_mov_b32       v4, 0
/*000000005424*/ s_lshl_b32      s3, s6, 1
/*000000005428*/ s_lshl_b32      s6, s7, 1
/*00000000542c*/ s_lshl_b32      s7, s8, 2
/*000000005430*/ v_mov_b32       v6, v4
/*000000005434*/ v_mov_b32       v8, v4
/*000000005438*/ v_add3_u32      v3, s0, s3, v0
/*000000005440*/ v_add3_u32      v5, s2, s6, v1
/*000000005448*/ s_waitcnt       lgkmcnt(0)
/*00000000544c*/ v_add3_u32      v7, s1, s7, v2
/*000000005454*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000545c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005464*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000546c*/ v_add_co_u32    v10, vcc, s4, v0
/*000000005474*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*000000005478*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005480*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000005484*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000548c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000005490*/ global_store_dword v[10:11], v4, off
/*000000005498*/ global_store_dword v[2:3], v4, off
/*0000000054a0*/ global_store_dword v[5:6], v4, off
/*0000000054a8*/ s_endpgm
/*0000000054ac*/ s_nop           0x0
/*0000000054b0*/ s_nop           0x0
/*0000000054b4*/ s_nop           0x0
/*0000000054b8*/ s_nop           0x0
/*0000000054bc*/ s_nop           0x0
/*0000000054c0*/ s_nop           0x0
/*0000000054c4*/ s_nop           0x0
/*0000000054c8*/ s_nop           0x0
/*0000000054cc*/ s_nop           0x0
/*0000000054d0*/ s_nop           0x0
/*0000000054d4*/ s_nop           0x0
/*0000000054d8*/ s_nop           0x0
/*0000000054dc*/ s_nop           0x0
/*0000000054e0*/ s_nop           0x0
/*0000000054e4*/ s_nop           0x0
/*0000000054e8*/ s_nop           0x0
/*0000000054ec*/ s_nop           0x0
/*0000000054f0*/ s_nop           0x0
/*0000000054f4*/ s_nop           0x0
/*0000000054f8*/ s_nop           0x0
/*0000000054fc*/ s_nop           0x0
subtract_get_global_id_get_local_size:
.skip 256
/*000000005600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005608*/ s_waitcnt       lgkmcnt(0)
/*00000000560c*/ s_clause        0x1
/*000000005610*/ s_load_dword    s1, s[4:5], 0x20
/*000000005618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005620*/ v_mov_b32       v4, 0
/*000000005624*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000562c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000005634*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000000563c*/ v_mov_b32       v1, v4
/*000000005640*/ v_mov_b32       v8, v4
/*000000005644*/ v_add_nc_u32    v0, s2, v5
/*000000005648*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000005650*/ s_waitcnt       lgkmcnt(0)
/*000000005654*/ v_add_nc_u32    v7, s1, v2
/*000000005658*/ v_add3_u32      v9, v3, s0, -2
/*000000005660*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000005668*/ v_add_nc_u32    v10, -2, v0
/*00000000566c*/ v_add_co_u32    v3, vcc, s4, v5
/*000000005674*/ v_add_nc_u32    v11, -4, v7
/*000000005678*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*00000000567c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000005684*/ v_add_co_u32    v0, vcc, s4, v1
/*00000000568c*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000005690*/ v_add_co_u32    v5, vcc, s4, v5
/*000000005698*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000569c*/ global_store_dword v[3:4], v9, off
/*0000000056a4*/ global_store_dword v[0:1], v10, off
/*0000000056ac*/ global_store_dword v[5:6], v11, off
/*0000000056b4*/ s_endpgm
/*0000000056b8*/ s_nop           0x0
/*0000000056bc*/ s_nop           0x0
/*0000000056c0*/ s_nop           0x0
/*0000000056c4*/ s_nop           0x0
/*0000000056c8*/ s_nop           0x0
/*0000000056cc*/ s_nop           0x0
/*0000000056d0*/ s_nop           0x0
/*0000000056d4*/ s_nop           0x0
/*0000000056d8*/ s_nop           0x0
/*0000000056dc*/ s_nop           0x0
/*0000000056e0*/ s_nop           0x0
/*0000000056e4*/ s_nop           0x0
/*0000000056e8*/ s_nop           0x0
/*0000000056ec*/ s_nop           0x0
/*0000000056f0*/ s_nop           0x0
/*0000000056f4*/ s_nop           0x0
/*0000000056f8*/ s_nop           0x0
/*0000000056fc*/ s_nop           0x0
subtract_get_global_size_get_local_size:
.skip 256
/*000000005800*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005808*/ s_waitcnt       lgkmcnt(0)
/*00000000580c*/ s_load_dword    s1, s[6:7], 0x20
/*000000005814*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000581c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000005824*/ v_mov_b32       v4, 0
/*000000005828*/ s_lshl_b32      s3, s8, 4
/*00000000582c*/ s_lshl_b32      s6, s9, 1
/*000000005830*/ s_lshl_b32      s7, s10, 1
/*000000005834*/ v_mov_b32       v6, v4
/*000000005838*/ v_mov_b32       v8, v4
/*00000000583c*/ s_waitcnt       lgkmcnt(0)
/*000000005840*/ v_add3_u32      v7, s1, s7, v2
/*000000005848*/ v_add3_u32      v3, s0, s3, v0
/*000000005850*/ v_add3_u32      v5, s2, s6, v1
/*000000005858*/ s_add_i32       s0, s12, -16
/*00000000585c*/ s_add_i32       s1, s13, -2
/*000000005860*/ v_mov_b32       v11, s0
/*000000005864*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000586c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005874*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000587c*/ s_add_i32       s0, s14, -2
/*000000005880*/ v_mov_b32       v13, s1
/*000000005884*/ v_mov_b32       v7, s0
/*000000005888*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005890*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005894*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000589c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000058a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000058a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000058ac*/ global_store_dword v[0:1], v11, off
/*0000000058b4*/ global_store_dword v[2:3], v13, off
/*0000000058bc*/ global_store_dword v[4:5], v7, off
/*0000000058c4*/ s_endpgm
/*0000000058c8*/ s_nop           0x0
/*0000000058cc*/ s_nop           0x0
/*0000000058d0*/ s_nop           0x0
/*0000000058d4*/ s_nop           0x0
/*0000000058d8*/ s_nop           0x0
/*0000000058dc*/ s_nop           0x0
/*0000000058e0*/ s_nop           0x0
/*0000000058e4*/ s_nop           0x0
/*0000000058e8*/ s_nop           0x0
/*0000000058ec*/ s_nop           0x0
/*0000000058f0*/ s_nop           0x0
/*0000000058f4*/ s_nop           0x0
/*0000000058f8*/ s_nop           0x0
/*0000000058fc*/ s_nop           0x0
subtract_get_num_groups_get_local_size:
.skip 256
/*000000005a00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005a08*/ s_waitcnt       lgkmcnt(0)
/*000000005a0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000005a14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000005a1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000005a24*/ s_lshl_b32      s3, s8, 1
/*000000005a28*/ v_mov_b32       v4, 0
/*000000005a2c*/ s_lshl_b32      s6, s9, 1
/*000000005a30*/ s_lshl_b32      s7, s10, 2
/*000000005a34*/ v_mov_b32       v6, v4
/*000000005a38*/ v_add3_u32      v3, s0, s3, v0
/*000000005a40*/ v_add3_u32      v5, s2, s6, v1
/*000000005a48*/ s_waitcnt       lgkmcnt(0)
/*000000005a4c*/ v_add3_u32      v0, s1, s7, v2
/*000000005a54*/ s_and_b32       s1, s12, -2
/*000000005a58*/ s_and_b32       s3, s13, -2
/*000000005a5c*/ v_lshlrev_b64   v[1:2], 2, v[3:4]
/*000000005a64*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000005a6c*/ v_cmp_gt_u32    s[3:4], s13, s3
/*000000005a74*/ s_lshr_b32      s0, s12, 1
/*000000005a78*/ s_lshr_b32      s2, s13, 1
/*000000005a7c*/ s_lshr_b32      s6, s14, 2
/*000000005a80*/ v_add_co_u32    v7, vcc, s4, v1
/*000000005a88*/ v_mov_b32       v1, v4
/*000000005a8c*/ s_and_b32       s7, s14, -4
/*000000005a90*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000005a94*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005a9c*/ s_cmpk_lg_u32   s1, 0x0
/*000000005aa0*/ v_cmp_gt_u32    s[1:2], s14, s7
/*000000005aa8*/ s_addc_u32      s0, s0, -2
/*000000005aac*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000005ab4*/ s_cmpk_lg_u32   s3, 0x0
/*000000005ab8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005ac0*/ v_mov_b32       v10, s0
/*000000005ac4*/ s_addc_u32      s0, s2, -2
/*000000005ac8*/ s_cmpk_lg_u32   s1, 0x0
/*000000005acc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000005ad0*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005ad8*/ v_mov_b32       v5, s0
/*000000005adc*/ s_addc_u32      s0, s6, -4
/*000000005ae0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005ae4*/ v_mov_b32       v6, s0
/*000000005ae8*/ global_store_dword v[7:8], v10, off
/*000000005af0*/ global_store_dword v[2:3], v5, off
/*000000005af8*/ global_store_dword v[0:1], v6, off
/*000000005b00*/ s_endpgm
/*000000005b04*/ s_nop           0x0
/*000000005b08*/ s_nop           0x0
/*000000005b0c*/ s_nop           0x0
/*000000005b10*/ s_nop           0x0
/*000000005b14*/ s_nop           0x0
/*000000005b18*/ s_nop           0x0
/*000000005b1c*/ s_nop           0x0
/*000000005b20*/ s_nop           0x0
/*000000005b24*/ s_nop           0x0
/*000000005b28*/ s_nop           0x0
/*000000005b2c*/ s_nop           0x0
/*000000005b30*/ s_nop           0x0
/*000000005b34*/ s_nop           0x0
/*000000005b38*/ s_nop           0x0
/*000000005b3c*/ s_nop           0x0
/*000000005b40*/ s_nop           0x0
/*000000005b44*/ s_nop           0x0
/*000000005b48*/ s_nop           0x0
/*000000005b4c*/ s_nop           0x0
/*000000005b50*/ s_nop           0x0
/*000000005b54*/ s_nop           0x0
/*000000005b58*/ s_nop           0x0
/*000000005b5c*/ s_nop           0x0
/*000000005b60*/ s_nop           0x0
/*000000005b64*/ s_nop           0x0
/*000000005b68*/ s_nop           0x0
/*000000005b6c*/ s_nop           0x0
/*000000005b70*/ s_nop           0x0
/*000000005b74*/ s_nop           0x0
/*000000005b78*/ s_nop           0x0
/*000000005b7c*/ s_nop           0x0
/*000000005b80*/ s_nop           0x0
/*000000005b84*/ s_nop           0x0
/*000000005b88*/ s_nop           0x0
/*000000005b8c*/ s_nop           0x0
/*000000005b90*/ s_nop           0x0
/*000000005b94*/ s_nop           0x0
/*000000005b98*/ s_nop           0x0
/*000000005b9c*/ s_nop           0x0
/*000000005ba0*/ s_nop           0x0
/*000000005ba4*/ s_nop           0x0
/*000000005ba8*/ s_nop           0x0
/*000000005bac*/ s_nop           0x0
/*000000005bb0*/ s_nop           0x0
/*000000005bb4*/ s_nop           0x0
/*000000005bb8*/ s_nop           0x0
/*000000005bbc*/ s_nop           0x0
/*000000005bc0*/ s_nop           0x0
/*000000005bc4*/ s_nop           0x0
/*000000005bc8*/ s_nop           0x0
/*000000005bcc*/ s_nop           0x0
/*000000005bd0*/ s_nop           0x0
/*000000005bd4*/ s_nop           0x0
/*000000005bd8*/ s_nop           0x0
/*000000005bdc*/ s_nop           0x0
/*000000005be0*/ s_nop           0x0
/*000000005be4*/ s_nop           0x0
/*000000005be8*/ s_nop           0x0
/*000000005bec*/ s_nop           0x0
/*000000005bf0*/ s_nop           0x0
/*000000005bf4*/ s_nop           0x0
/*000000005bf8*/ s_nop           0x0
/*000000005bfc*/ s_nop           0x0
subtract_get_work_dim_get_local_size:
.skip 256
/*000000005d00*/ v_mov_b32       v3, s4
/*000000005d04*/ v_mov_b32       v4, s5
/*000000005d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005d10*/ s_waitcnt       lgkmcnt(0)
/*000000005d14*/ s_clause        0x1
/*000000005d18*/ s_load_dword    s1, s[6:7], 0x20
/*000000005d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000005d28*/ s_lshl_b32      s3, s8, 1
/*000000005d2c*/ s_lshl_b32      s6, s9, 1
/*000000005d30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000005d38*/ v_mov_b32       v4, 0
/*000000005d3c*/ s_lshl_b32      s7, s10, 2
/*000000005d40*/ v_mov_b32       v6, v4
/*000000005d44*/ v_mov_b32       v8, v4
/*000000005d48*/ v_add3_u32      v3, s0, s3, v0
/*000000005d50*/ v_add3_u32      v5, s2, s6, v1
/*000000005d58*/ s_waitcnt       lgkmcnt(0)
/*000000005d5c*/ v_add3_u32      v7, s1, s7, v2
/*000000005d64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005d6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005d74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005d7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005d84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005d88*/ v_add_co_u32    v11, vcc, s4, v2
/*000000005d90*/ v_add_co_ci_u32 v12, vcc, s5, v3, vcc
/*000000005d94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005d9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005da0*/ s_waitcnt       vmcnt(0)
/*000000005da4*/ v_add_nc_u32    v6, -2, v9
/*000000005da8*/ v_add_nc_u32    v7, -4, v9
/*000000005dac*/ global_store_dword v[0:1], v6, off
/*000000005db4*/ global_store_dword v[11:12], v6, off
/*000000005dbc*/ global_store_dword v[4:5], v7, off
/*000000005dc4*/ s_endpgm
/*000000005dc8*/ s_nop           0x0
/*000000005dcc*/ s_nop           0x0
/*000000005dd0*/ s_nop           0x0
/*000000005dd4*/ s_nop           0x0
/*000000005dd8*/ s_nop           0x0
/*000000005ddc*/ s_nop           0x0
/*000000005de0*/ s_nop           0x0
/*000000005de4*/ s_nop           0x0
/*000000005de8*/ s_nop           0x0
/*000000005dec*/ s_nop           0x0
/*000000005df0*/ s_nop           0x0
/*000000005df4*/ s_nop           0x0
/*000000005df8*/ s_nop           0x0
/*000000005dfc*/ s_nop           0x0
subtract_x_get_global_id:
.skip 256
/*000000005f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005f08*/ s_waitcnt       lgkmcnt(0)
/*000000005f0c*/ s_clause        0x2
/*000000005f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000005f18*/ s_load_dword    s3, s[4:5], 0x8
/*000000005f20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000005f28*/ v_lshl_or_b32   v0, s6, 4, v0
/*000000005f30*/ v_mov_b32       v3, 0
/*000000005f34*/ v_lshl_or_b32   v4, s7, 1, v1
/*000000005f3c*/ v_lshl_or_b32   v6, s8, 1, v2
/*000000005f44*/ v_mov_b32       v1, v3
/*000000005f48*/ v_mov_b32       v5, v3
/*000000005f4c*/ v_add_nc_u32    v2, s0, v0
/*000000005f50*/ v_add_nc_u32    v0, s2, v4
/*000000005f54*/ s_waitcnt       lgkmcnt(0)
/*000000005f58*/ v_add_nc_u32    v4, s1, v6
/*000000005f5c*/ v_sub_nc_u32    v9, s3, v2
/*000000005f60*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000005f68*/ v_sub_nc_u32    v7, s3, v0
/*000000005f6c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000005f74*/ v_sub_nc_u32    v11, s3, v4
/*000000005f78*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000005f80*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005f88*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000005f8c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005f94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005f98*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005fa0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005fa4*/ global_store_dword v[2:3], v9, off
/*000000005fac*/ global_store_dword v[0:1], v7, off
/*000000005fb4*/ global_store_dword v[4:5], v11, off
/*000000005fbc*/ s_endpgm
/*000000005fc0*/ s_nop           0x0
/*000000005fc4*/ s_nop           0x0
/*000000005fc8*/ s_nop           0x0
/*000000005fcc*/ s_nop           0x0
/*000000005fd0*/ s_nop           0x0
/*000000005fd4*/ s_nop           0x0
/*000000005fd8*/ s_nop           0x0
/*000000005fdc*/ s_nop           0x0
/*000000005fe0*/ s_nop           0x0
/*000000005fe4*/ s_nop           0x0
/*000000005fe8*/ s_nop           0x0
/*000000005fec*/ s_nop           0x0
/*000000005ff0*/ s_nop           0x0
/*000000005ff4*/ s_nop           0x0
/*000000005ff8*/ s_nop           0x0
/*000000005ffc*/ s_nop           0x0
subtract_get_global_offset_get_global_id:
.skip 256
/*000000006100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006108*/ s_waitcnt       lgkmcnt(0)
/*00000000610c*/ s_clause        0x1
/*000000006110*/ s_load_dword    s1, s[4:5], 0x20
/*000000006118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006120*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006128*/ v_mov_b32       v3, 0
/*00000000612c*/ v_lshl_or_b32   v6, s7, 4, v1
/*000000006134*/ v_lshl_or_b32   v7, s8, 1, v2
/*00000000613c*/ v_sub_nc_u32    v8, 0, v0
/*000000006140*/ v_mov_b32       v1, v3
/*000000006144*/ v_mov_b32       v5, v3
/*000000006148*/ v_add_nc_u32    v2, s0, v0
/*00000000614c*/ v_add_nc_u32    v0, s2, v6
/*000000006150*/ s_waitcnt       lgkmcnt(0)
/*000000006154*/ v_add_nc_u32    v4, s1, v7
/*000000006158*/ v_sub_nc_u32    v6, 0, v6
/*00000000615c*/ v_sub_nc_u32    v7, 0, v7
/*000000006160*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006168*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000006170*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006178*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006180*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006184*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000618c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006190*/ v_add_co_u32    v4, vcc, s4, v4
/*000000006198*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000619c*/ global_store_dword v[2:3], v8, off
/*0000000061a4*/ global_store_dword v[0:1], v6, off
/*0000000061ac*/ global_store_dword v[4:5], v7, off
/*0000000061b4*/ s_endpgm
/*0000000061b8*/ s_nop           0x0
/*0000000061bc*/ s_nop           0x0
/*0000000061c0*/ s_nop           0x0
/*0000000061c4*/ s_nop           0x0
/*0000000061c8*/ s_nop           0x0
/*0000000061cc*/ s_nop           0x0
/*0000000061d0*/ s_nop           0x0
/*0000000061d4*/ s_nop           0x0
/*0000000061d8*/ s_nop           0x0
/*0000000061dc*/ s_nop           0x0
/*0000000061e0*/ s_nop           0x0
/*0000000061e4*/ s_nop           0x0
/*0000000061e8*/ s_nop           0x0
/*0000000061ec*/ s_nop           0x0
/*0000000061f0*/ s_nop           0x0
/*0000000061f4*/ s_nop           0x0
/*0000000061f8*/ s_nop           0x0
/*0000000061fc*/ s_nop           0x0
subtract_get_local_id_get_global_id:
.skip 256
/*000000006300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006308*/ s_waitcnt       lgkmcnt(0)
/*00000000630c*/ s_clause        0x1
/*000000006310*/ s_load_dword    s1, s[4:5], 0x20
/*000000006318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006320*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000006328*/ v_mov_b32       v4, 0
/*00000000632c*/ v_lshl_or_b32   v5, s7, 2, v1
/*000000006334*/ v_lshl_or_b32   v7, s8, 1, v2
/*00000000633c*/ v_mov_b32       v12, v4
/*000000006340*/ v_mov_b32       v8, v4
/*000000006344*/ v_add_nc_u32    v3, s0, v3
/*000000006348*/ v_add_nc_u32    v11, s2, v5
/*00000000634c*/ s_waitcnt       lgkmcnt(0)
/*000000006350*/ v_add_nc_u32    v7, s1, v7
/*000000006354*/ v_sub_nc_u32    v9, v0, v3
/*000000006358*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000006360*/ v_sub_nc_u32    v10, v1, v11
/*000000006364*/ v_lshlrev_b64   v[0:1], 2, v[11:12]
/*00000000636c*/ v_sub_nc_u32    v11, v2, v7
/*000000006370*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000006378*/ v_add_co_u32    v2, vcc, s4, v3
/*000000006380*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000006384*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000638c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006390*/ v_add_co_u32    v4, vcc, s4, v5
/*000000006398*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000639c*/ global_store_dword v[2:3], v9, off
/*0000000063a4*/ global_store_dword v[0:1], v10, off
/*0000000063ac*/ global_store_dword v[4:5], v11, off
/*0000000063b4*/ s_endpgm
/*0000000063b8*/ s_nop           0x0
/*0000000063bc*/ s_nop           0x0
/*0000000063c0*/ s_nop           0x0
/*0000000063c4*/ s_nop           0x0
/*0000000063c8*/ s_nop           0x0
/*0000000063cc*/ s_nop           0x0
/*0000000063d0*/ s_nop           0x0
/*0000000063d4*/ s_nop           0x0
/*0000000063d8*/ s_nop           0x0
/*0000000063dc*/ s_nop           0x0
/*0000000063e0*/ s_nop           0x0
/*0000000063e4*/ s_nop           0x0
/*0000000063e8*/ s_nop           0x0
/*0000000063ec*/ s_nop           0x0
/*0000000063f0*/ s_nop           0x0
/*0000000063f4*/ s_nop           0x0
/*0000000063f8*/ s_nop           0x0
/*0000000063fc*/ s_nop           0x0
subtract_get_group_id_get_global_id:
.skip 256
/*000000006500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006508*/ s_waitcnt       lgkmcnt(0)
/*00000000650c*/ s_clause        0x1
/*000000006510*/ s_load_dword    s1, s[4:5], 0x20
/*000000006518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006520*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006528*/ v_mov_b32       v3, 0
/*00000000652c*/ v_lshl_or_b32   v4, s7, 4, v1
/*000000006534*/ v_lshl_or_b32   v6, s8, 1, v2
/*00000000653c*/ v_mov_b32       v1, v3
/*000000006540*/ v_mov_b32       v5, v3
/*000000006544*/ v_add_nc_u32    v2, s0, v0
/*000000006548*/ v_add_nc_u32    v0, s2, v4
/*00000000654c*/ s_waitcnt       lgkmcnt(0)
/*000000006550*/ v_add_nc_u32    v4, s1, v6
/*000000006554*/ v_sub_nc_u32    v9, s6, v2
/*000000006558*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006560*/ v_sub_nc_u32    v7, s7, v0
/*000000006564*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000656c*/ v_sub_nc_u32    v11, s8, v4
/*000000006570*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006578*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006580*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006584*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000658c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006590*/ v_add_co_u32    v4, vcc, s4, v4
/*000000006598*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000659c*/ global_store_dword v[2:3], v9, off
/*0000000065a4*/ global_store_dword v[0:1], v7, off
/*0000000065ac*/ global_store_dword v[4:5], v11, off
/*0000000065b4*/ s_endpgm
/*0000000065b8*/ s_nop           0x0
/*0000000065bc*/ s_nop           0x0
/*0000000065c0*/ s_nop           0x0
/*0000000065c4*/ s_nop           0x0
/*0000000065c8*/ s_nop           0x0
/*0000000065cc*/ s_nop           0x0
/*0000000065d0*/ s_nop           0x0
/*0000000065d4*/ s_nop           0x0
/*0000000065d8*/ s_nop           0x0
/*0000000065dc*/ s_nop           0x0
/*0000000065e0*/ s_nop           0x0
/*0000000065e4*/ s_nop           0x0
/*0000000065e8*/ s_nop           0x0
/*0000000065ec*/ s_nop           0x0
/*0000000065f0*/ s_nop           0x0
/*0000000065f4*/ s_nop           0x0
/*0000000065f8*/ s_nop           0x0
/*0000000065fc*/ s_nop           0x0
subtract_get_local_size_get_global_id:
.skip 256
/*000000006700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006708*/ s_waitcnt       lgkmcnt(0)
/*00000000670c*/ s_clause        0x1
/*000000006710*/ s_load_dword    s1, s[4:5], 0x20
/*000000006718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006720*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006728*/ v_mov_b32       v3, 0
/*00000000672c*/ v_lshl_or_b32   v4, s7, 1, v1
/*000000006734*/ v_lshl_or_b32   v6, s8, 2, v2
/*00000000673c*/ v_mov_b32       v1, v3
/*000000006740*/ v_mov_b32       v5, v3
/*000000006744*/ v_add_nc_u32    v2, s0, v0
/*000000006748*/ v_add_nc_u32    v0, s2, v4
/*00000000674c*/ s_waitcnt       lgkmcnt(0)
/*000000006750*/ v_add_nc_u32    v4, s1, v6
/*000000006754*/ v_sub_nc_u32    v9, 2, v2
/*000000006758*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006760*/ v_sub_nc_u32    v7, 2, v0
/*000000006764*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000676c*/ v_sub_nc_u32    v11, 4, v4
/*000000006770*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006778*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006780*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006784*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000678c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006790*/ v_add_co_u32    v4, vcc, s4, v4
/*000000006798*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000679c*/ global_store_dword v[2:3], v9, off
/*0000000067a4*/ global_store_dword v[0:1], v7, off
/*0000000067ac*/ global_store_dword v[4:5], v11, off
/*0000000067b4*/ s_endpgm
/*0000000067b8*/ s_nop           0x0
/*0000000067bc*/ s_nop           0x0
/*0000000067c0*/ s_nop           0x0
/*0000000067c4*/ s_nop           0x0
/*0000000067c8*/ s_nop           0x0
/*0000000067cc*/ s_nop           0x0
/*0000000067d0*/ s_nop           0x0
/*0000000067d4*/ s_nop           0x0
/*0000000067d8*/ s_nop           0x0
/*0000000067dc*/ s_nop           0x0
/*0000000067e0*/ s_nop           0x0
/*0000000067e4*/ s_nop           0x0
/*0000000067e8*/ s_nop           0x0
/*0000000067ec*/ s_nop           0x0
/*0000000067f0*/ s_nop           0x0
/*0000000067f4*/ s_nop           0x0
/*0000000067f8*/ s_nop           0x0
/*0000000067fc*/ s_nop           0x0
subtract_get_global_id_get_global_id:
.skip 256
/*000000006900*/ s_clause        0x1
/*000000006904*/ s_load_dwordx4  s[0:3], s[4:5], 0x18
/*00000000690c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006914*/ v_mov_b32       v4, 0
/*000000006918*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000006920*/ s_waitcnt       lgkmcnt(0)
/*000000006924*/ s_lshl_b32      s1, s7, 1
/*000000006928*/ v_mov_b32       v6, v4
/*00000000692c*/ v_add3_u32      v5, s0, s1, v1
/*000000006934*/ s_lshl_b32      s0, s8, 2
/*000000006938*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000006940*/ v_mov_b32       v3, v4
/*000000006944*/ v_add3_u32      v2, s2, s0, v2
/*00000000694c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000006954*/ v_add_co_u32    v10, vcc, s4, v0
/*00000000695c*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006964*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*000000006968*/ v_add_co_u32    v5, vcc, s4, v5
/*000000006970*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000006974*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000697c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006980*/ global_store_dword v[10:11], v4, off
/*000000006988*/ global_store_dword v[5:6], v4, off
/*000000006990*/ global_store_dword v[2:3], v4, off
/*000000006998*/ s_endpgm
/*00000000699c*/ s_nop           0x0
/*0000000069a0*/ s_nop           0x0
/*0000000069a4*/ s_nop           0x0
/*0000000069a8*/ s_nop           0x0
/*0000000069ac*/ s_nop           0x0
/*0000000069b0*/ s_nop           0x0
/*0000000069b4*/ s_nop           0x0
/*0000000069b8*/ s_nop           0x0
/*0000000069bc*/ s_nop           0x0
/*0000000069c0*/ s_nop           0x0
/*0000000069c4*/ s_nop           0x0
/*0000000069c8*/ s_nop           0x0
/*0000000069cc*/ s_nop           0x0
/*0000000069d0*/ s_nop           0x0
/*0000000069d4*/ s_nop           0x0
/*0000000069d8*/ s_nop           0x0
/*0000000069dc*/ s_nop           0x0
/*0000000069e0*/ s_nop           0x0
/*0000000069e4*/ s_nop           0x0
/*0000000069e8*/ s_nop           0x0
/*0000000069ec*/ s_nop           0x0
/*0000000069f0*/ s_nop           0x0
/*0000000069f4*/ s_nop           0x0
/*0000000069f8*/ s_nop           0x0
/*0000000069fc*/ s_nop           0x0
subtract_get_global_size_get_global_id:
.skip 256
/*000000006b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000006b08*/ s_waitcnt       lgkmcnt(0)
/*000000006b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000006b14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000006b1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000006b24*/ v_lshl_or_b32   v0, s8, 4, v0
/*000000006b2c*/ v_mov_b32       v3, 0
/*000000006b30*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006b38*/ v_lshl_or_b32   v6, s10, 1, v2
/*000000006b40*/ v_mov_b32       v1, v3
/*000000006b44*/ v_mov_b32       v5, v3
/*000000006b48*/ v_add_nc_u32    v2, s0, v0
/*000000006b4c*/ v_add_nc_u32    v0, s2, v4
/*000000006b50*/ s_waitcnt       lgkmcnt(0)
/*000000006b54*/ v_add_nc_u32    v4, s1, v6
/*000000006b58*/ v_lshlrev_b64   v[6:7], 2, v[2:3]
/*000000006b60*/ v_sub_nc_u32    v11, s13, v0
/*000000006b64*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000006b6c*/ v_sub_nc_u32    v8, s12, v2
/*000000006b70*/ v_lshlrev_b64   v[2:3], 2, v[4:5]
/*000000006b78*/ v_sub_nc_u32    v4, s14, v4
/*000000006b7c*/ v_add_co_u32    v5, vcc, s4, v6
/*000000006b84*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*000000006b88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000006b90*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006b94*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006b9c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006ba0*/ global_store_dword v[5:6], v8, off
/*000000006ba8*/ global_store_dword v[0:1], v11, off
/*000000006bb0*/ global_store_dword v[2:3], v4, off
/*000000006bb8*/ s_endpgm
/*000000006bbc*/ s_nop           0x0
/*000000006bc0*/ s_nop           0x0
/*000000006bc4*/ s_nop           0x0
/*000000006bc8*/ s_nop           0x0
/*000000006bcc*/ s_nop           0x0
/*000000006bd0*/ s_nop           0x0
/*000000006bd4*/ s_nop           0x0
/*000000006bd8*/ s_nop           0x0
/*000000006bdc*/ s_nop           0x0
/*000000006be0*/ s_nop           0x0
/*000000006be4*/ s_nop           0x0
/*000000006be8*/ s_nop           0x0
/*000000006bec*/ s_nop           0x0
/*000000006bf0*/ s_nop           0x0
/*000000006bf4*/ s_nop           0x0
/*000000006bf8*/ s_nop           0x0
/*000000006bfc*/ s_nop           0x0
subtract_get_num_groups_get_global_id:
.skip 256
/*000000006d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000006d08*/ s_waitcnt       lgkmcnt(0)
/*000000006d0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000006d14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000006d1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000006d24*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000006d2c*/ v_lshl_or_b32   v5, s10, 2, v2
/*000000006d34*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006d3c*/ v_mov_b32       v3, 0
/*000000006d40*/ v_mov_b32       v1, v3
/*000000006d44*/ v_add_nc_u32    v2, s0, v0
/*000000006d48*/ v_add_nc_u32    v0, s2, v4
/*000000006d4c*/ s_waitcnt       lgkmcnt(0)
/*000000006d50*/ v_add_nc_u32    v4, s1, v5
/*000000006d54*/ s_lshr_b32      s0, s12, 1
/*000000006d58*/ s_and_b32       s1, s12, -2
/*000000006d5c*/ v_sub_nc_u32    v7, s0, v2
/*000000006d60*/ v_cmp_gt_u32    vcc, s12, s1
/*000000006d68*/ v_lshlrev_b64   v[5:6], 2, v[2:3]
/*000000006d70*/ s_lshr_b32      s2, s13, 1
/*000000006d74*/ s_and_b32       s3, s13, -2
/*000000006d78*/ v_sub_nc_u32    v2, s2, v0
/*000000006d7c*/ v_add_co_ci_u32 v9, vcc, 0, v7, vcc
/*000000006d80*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000006d88*/ v_add_co_u32    v7, vcc, s4, v5
/*000000006d90*/ v_mov_b32       v5, v3
/*000000006d94*/ v_add_co_ci_u32 v8, vcc, s5, v6, vcc
/*000000006d98*/ v_cmp_gt_u32    vcc, s13, s3
/*000000006da0*/ s_lshr_b32      s6, s14, 2
/*000000006da4*/ s_and_b32       s0, s14, -4
/*000000006da8*/ v_sub_nc_u32    v10, s6, v4
/*000000006dac*/ v_add_co_ci_u32 v6, vcc, 0, v2, vcc
/*000000006db0*/ v_add_co_u32    v0, vcc, s4, v0
/*000000006db8*/ v_lshlrev_b64   v[2:3], 2, v[4:5]
/*000000006dc0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006dc4*/ v_cmp_gt_u32    vcc, s14, s0
/*000000006dcc*/ v_add_co_ci_u32 v4, vcc, 0, v10, vcc
/*000000006dd0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006dd8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006ddc*/ global_store_dword v[7:8], v9, off
/*000000006de4*/ global_store_dword v[0:1], v6, off
/*000000006dec*/ global_store_dword v[2:3], v4, off
/*000000006df4*/ s_endpgm
/*000000006df8*/ s_nop           0x0
/*000000006dfc*/ s_nop           0x0
subtract_get_work_dim_get_global_id:
.skip 256
/*000000006f00*/ v_mov_b32       v3, s4
/*000000006f04*/ v_mov_b32       v4, s5
/*000000006f08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000006f10*/ s_waitcnt       lgkmcnt(0)
/*000000006f14*/ s_clause        0x1
/*000000006f18*/ s_load_dword    s1, s[6:7], 0x20
/*000000006f20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000006f28*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000006f30*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000006f38*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000006f40*/ v_mov_b32       v3, 0
/*000000006f44*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006f4c*/ v_mov_b32       v1, v3
/*000000006f50*/ v_mov_b32       v5, v3
/*000000006f54*/ v_add_nc_u32    v2, s0, v0
/*000000006f58*/ v_add_nc_u32    v0, s2, v4
/*000000006f5c*/ s_waitcnt       lgkmcnt(0)
/*000000006f60*/ v_add_nc_u32    v4, s1, v6
/*000000006f64*/ v_lshlrev_b64   v[6:7], 2, v[2:3]
/*000000006f6c*/ v_lshlrev_b64   v[8:9], 2, v[0:1]
/*000000006f74*/ v_lshlrev_b64   v[10:11], 2, v[4:5]
/*000000006f7c*/ v_add_co_u32    v5, vcc, s4, v6
/*000000006f84*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*000000006f88*/ v_add_co_u32    v7, vcc, s4, v8
/*000000006f90*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*000000006f94*/ v_add_co_u32    v9, vcc, s4, v10
/*000000006f9c*/ v_add_co_ci_u32 v10, vcc, s5, v11, vcc
/*000000006fa0*/ s_waitcnt       vmcnt(0)
/*000000006fa4*/ v_sub_nc_u32    v11, v15, v2
/*000000006fa8*/ v_sub_nc_u32    v2, v15, v0
/*000000006fac*/ v_sub_nc_u32    v3, v15, v4
/*000000006fb0*/ global_store_dword v[5:6], v11, off
/*000000006fb8*/ global_store_dword v[7:8], v2, off
/*000000006fc0*/ global_store_dword v[9:10], v3, off
/*000000006fc8*/ s_endpgm
/*000000006fcc*/ s_nop           0x0
/*000000006fd0*/ s_nop           0x0
/*000000006fd4*/ s_nop           0x0
/*000000006fd8*/ s_nop           0x0
/*000000006fdc*/ s_nop           0x0
/*000000006fe0*/ s_nop           0x0
/*000000006fe4*/ s_nop           0x0
/*000000006fe8*/ s_nop           0x0
/*000000006fec*/ s_nop           0x0
/*000000006ff0*/ s_nop           0x0
/*000000006ff4*/ s_nop           0x0
/*000000006ff8*/ s_nop           0x0
/*000000006ffc*/ s_nop           0x0
subtract_x_get_global_size:
.skip 256
/*000000007100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007108*/ s_waitcnt       lgkmcnt(0)
/*00000000710c*/ s_clause        0x1
/*000000007110*/ s_load_dword    s1, s[6:7], 0x8
/*000000007118*/ s_load_dword    s3, s[6:7], 0x20
/*000000007120*/ s_clause        0x1
/*000000007124*/ s_load_dword    s11, s[4:5], 0xc
/*00000000712c*/ s_load_dword    s12, s[4:5], 0x10
/*000000007134*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*00000000713c*/ s_load_dword    s4, s[4:5], 0x14
/*000000007144*/ v_mov_b32       v4, 0
/*000000007148*/ s_lshl_b32      s8, s8, 4
/*00000000714c*/ s_lshl_b32      s9, s9, 1
/*000000007150*/ s_lshl_b32      s10, s10, 1
/*000000007154*/ v_mov_b32       v6, v4
/*000000007158*/ v_mov_b32       v8, v4
/*00000000715c*/ s_waitcnt       lgkmcnt(0)
/*000000007160*/ v_add3_u32      v7, s3, s10, v2
/*000000007168*/ v_add3_u32      v3, s0, s8, v0
/*000000007170*/ v_add3_u32      v5, s2, s9, v1
/*000000007178*/ s_sub_i32       s0, s1, s11
/*00000000717c*/ s_sub_i32       s2, s1, s12
/*000000007180*/ v_mov_b32       v11, s0
/*000000007184*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000718c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007194*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000719c*/ s_sub_i32       s0, s1, s4
/*0000000071a0*/ v_mov_b32       v13, s2
/*0000000071a4*/ v_mov_b32       v7, s0
/*0000000071a8*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000071b0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000071b4*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000071bc*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000071c0*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000071c8*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000071cc*/ global_store_dword v[0:1], v11, off
/*0000000071d4*/ global_store_dword v[2:3], v13, off
/*0000000071dc*/ global_store_dword v[4:5], v7, off
/*0000000071e4*/ s_endpgm
/*0000000071e8*/ s_nop           0x0
/*0000000071ec*/ s_nop           0x0
/*0000000071f0*/ s_nop           0x0
/*0000000071f4*/ s_nop           0x0
/*0000000071f8*/ s_nop           0x0
/*0000000071fc*/ s_nop           0x0
subtract_get_global_offset_get_global_size:
.skip 256
/*000000007300*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007308*/ s_waitcnt       lgkmcnt(0)
/*00000000730c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007314*/ s_clause        0x1
/*000000007318*/ s_load_dword    s3, s[4:5], 0xc
/*000000007320*/ s_load_dword    s11, s[4:5], 0x10
/*000000007328*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007330*/ s_load_dword    s4, s[4:5], 0x14
/*000000007338*/ v_mov_b32       v4, 0
/*00000000733c*/ s_lshl_b32      s8, s8, 1
/*000000007340*/ s_lshl_b32      s9, s9, 4
/*000000007344*/ s_lshl_b32      s10, s10, 1
/*000000007348*/ v_mov_b32       v6, v4
/*00000000734c*/ v_mov_b32       v8, v4
/*000000007350*/ s_waitcnt       lgkmcnt(0)
/*000000007354*/ v_add3_u32      v7, s1, s10, v2
/*00000000735c*/ v_add3_u32      v3, s0, s8, v0
/*000000007364*/ v_add3_u32      v5, s2, s9, v1
/*00000000736c*/ s_sub_i32       s0, s0, s3
/*000000007370*/ s_sub_i32       s2, s2, s11
/*000000007374*/ v_mov_b32       v11, s0
/*000000007378*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007380*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007388*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007390*/ s_sub_i32       s0, s1, s4
/*000000007394*/ v_mov_b32       v13, s2
/*000000007398*/ v_mov_b32       v7, s0
/*00000000739c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000073a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000073a8*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000073b0*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000073b4*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000073bc*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000073c0*/ global_store_dword v[0:1], v11, off
/*0000000073c8*/ global_store_dword v[2:3], v13, off
/*0000000073d0*/ global_store_dword v[4:5], v7, off
/*0000000073d8*/ s_endpgm
/*0000000073dc*/ s_nop           0x0
/*0000000073e0*/ s_nop           0x0
/*0000000073e4*/ s_nop           0x0
/*0000000073e8*/ s_nop           0x0
/*0000000073ec*/ s_nop           0x0
/*0000000073f0*/ s_nop           0x0
/*0000000073f4*/ s_nop           0x0
/*0000000073f8*/ s_nop           0x0
/*0000000073fc*/ s_nop           0x0
subtract_get_local_id_get_global_size:
.skip 256
/*000000007500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007508*/ s_waitcnt       lgkmcnt(0)
/*00000000750c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007514*/ s_clause        0x1
/*000000007518*/ s_load_dword    s3, s[4:5], 0xc
/*000000007520*/ s_load_dword    s11, s[4:5], 0x10
/*000000007528*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007530*/ v_mov_b32       v4, 0
/*000000007534*/ s_lshl_b32      s8, s8, 3
/*000000007538*/ s_load_dword    s4, s[4:5], 0x14
/*000000007540*/ s_lshl_b32      s9, s9, 2
/*000000007544*/ s_lshl_b32      s5, s10, 1
/*000000007548*/ v_mov_b32       v6, v4
/*00000000754c*/ v_mov_b32       v8, v4
/*000000007550*/ s_waitcnt       lgkmcnt(0)
/*000000007554*/ v_add3_u32      v7, s1, s5, v2
/*00000000755c*/ v_subrev_nc_u32 v9, s3, v0
/*000000007560*/ v_add3_u32      v3, s0, s8, v0
/*000000007568*/ v_add3_u32      v5, s2, s9, v1
/*000000007570*/ v_subrev_nc_u32 v10, s11, v1
/*000000007574*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000757c*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000007584*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000758c*/ v_subrev_nc_u32 v7, s4, v2
/*000000007590*/ v_add_co_u32    v3, vcc, s6, v3
/*000000007598*/ v_add_co_ci_u32 v4, vcc, s7, v4, vcc
/*00000000759c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000075a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000075a8*/ v_add_co_u32    v5, vcc, s6, v5
/*0000000075b0*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*0000000075b4*/ global_store_dword v[3:4], v9, off
/*0000000075bc*/ global_store_dword v[0:1], v10, off
/*0000000075c4*/ global_store_dword v[5:6], v7, off
/*0000000075cc*/ s_endpgm
/*0000000075d0*/ s_nop           0x0
/*0000000075d4*/ s_nop           0x0
/*0000000075d8*/ s_nop           0x0
/*0000000075dc*/ s_nop           0x0
/*0000000075e0*/ s_nop           0x0
/*0000000075e4*/ s_nop           0x0
/*0000000075e8*/ s_nop           0x0
/*0000000075ec*/ s_nop           0x0
/*0000000075f0*/ s_nop           0x0
/*0000000075f4*/ s_nop           0x0
/*0000000075f8*/ s_nop           0x0
/*0000000075fc*/ s_nop           0x0
subtract_get_group_id_get_global_size:
.skip 256
/*000000007700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007708*/ s_waitcnt       lgkmcnt(0)
/*00000000770c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007714*/ s_clause        0x1
/*000000007718*/ s_load_dword    s3, s[4:5], 0xc
/*000000007720*/ s_load_dword    s11, s[4:5], 0x10
/*000000007728*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007730*/ s_load_dword    s4, s[4:5], 0x14
/*000000007738*/ v_mov_b32       v4, 0
/*00000000773c*/ s_lshl_b32      s12, s8, 1
/*000000007740*/ s_lshl_b32      s13, s9, 4
/*000000007744*/ s_lshl_b32      s14, s10, 1
/*000000007748*/ v_mov_b32       v6, v4
/*00000000774c*/ v_mov_b32       v8, v4
/*000000007750*/ s_waitcnt       lgkmcnt(0)
/*000000007754*/ v_add3_u32      v7, s1, s14, v2
/*00000000775c*/ v_add3_u32      v3, s0, s12, v0
/*000000007764*/ v_add3_u32      v5, s2, s13, v1
/*00000000776c*/ s_sub_i32       s0, s8, s3
/*000000007770*/ s_sub_i32       s1, s9, s11
/*000000007774*/ v_mov_b32       v11, s0
/*000000007778*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007780*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007788*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007790*/ s_sub_i32       s0, s10, s4
/*000000007794*/ v_mov_b32       v13, s1
/*000000007798*/ v_mov_b32       v7, s0
/*00000000779c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000077a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000077a8*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000077b0*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000077b4*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000077bc*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000077c0*/ global_store_dword v[0:1], v11, off
/*0000000077c8*/ global_store_dword v[2:3], v13, off
/*0000000077d0*/ global_store_dword v[4:5], v7, off
/*0000000077d8*/ s_endpgm
/*0000000077dc*/ s_nop           0x0
/*0000000077e0*/ s_nop           0x0
/*0000000077e4*/ s_nop           0x0
/*0000000077e8*/ s_nop           0x0
/*0000000077ec*/ s_nop           0x0
/*0000000077f0*/ s_nop           0x0
/*0000000077f4*/ s_nop           0x0
/*0000000077f8*/ s_nop           0x0
/*0000000077fc*/ s_nop           0x0
subtract_get_local_size_get_global_size:
.skip 256
/*000000007900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007908*/ s_waitcnt       lgkmcnt(0)
/*00000000790c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000791c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000007924*/ v_mov_b32       v4, 0
/*000000007928*/ s_lshl_b32      s3, s8, 1
/*00000000792c*/ s_lshl_b32      s6, s9, 1
/*000000007930*/ s_lshl_b32      s7, s10, 2
/*000000007934*/ v_mov_b32       v6, v4
/*000000007938*/ v_mov_b32       v8, v4
/*00000000793c*/ s_waitcnt       lgkmcnt(0)
/*000000007940*/ v_add3_u32      v7, s1, s7, v2
/*000000007948*/ v_add3_u32      v3, s0, s3, v0
/*000000007950*/ v_add3_u32      v5, s2, s6, v1
/*000000007958*/ s_sub_i32       s0, 2, s12
/*00000000795c*/ s_sub_i32       s1, 2, s13
/*000000007960*/ v_mov_b32       v11, s0
/*000000007964*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000796c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007974*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000797c*/ s_sub_i32       s0, 4, s14
/*000000007980*/ v_mov_b32       v13, s1
/*000000007984*/ v_mov_b32       v7, s0
/*000000007988*/ v_add_co_u32    v0, vcc, s4, v0
/*000000007990*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000007994*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000799c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000079a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000079a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000079ac*/ global_store_dword v[0:1], v11, off
/*0000000079b4*/ global_store_dword v[2:3], v13, off
/*0000000079bc*/ global_store_dword v[4:5], v7, off
/*0000000079c4*/ s_endpgm
/*0000000079c8*/ s_nop           0x0
/*0000000079cc*/ s_nop           0x0
/*0000000079d0*/ s_nop           0x0
/*0000000079d4*/ s_nop           0x0
/*0000000079d8*/ s_nop           0x0
/*0000000079dc*/ s_nop           0x0
/*0000000079e0*/ s_nop           0x0
/*0000000079e4*/ s_nop           0x0
/*0000000079e8*/ s_nop           0x0
/*0000000079ec*/ s_nop           0x0
/*0000000079f0*/ s_nop           0x0
/*0000000079f4*/ s_nop           0x0
/*0000000079f8*/ s_nop           0x0
/*0000000079fc*/ s_nop           0x0
subtract_get_global_id_get_global_size:
.skip 256
/*000000007b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007b08*/ s_waitcnt       lgkmcnt(0)
/*000000007b0c*/ s_clause        0x1
/*000000007b10*/ s_load_dword    s1, s[6:7], 0x20
/*000000007b18*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007b20*/ s_clause        0x1
/*000000007b24*/ s_load_dword    s3, s[4:5], 0xc
/*000000007b2c*/ s_load_dword    s11, s[4:5], 0x10
/*000000007b34*/ v_mov_b32       v4, 0
/*000000007b38*/ v_lshl_or_b32   v5, s9, 1, v1
/*000000007b40*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000007b48*/ s_load_dword    s4, s[4:5], 0x14
/*000000007b50*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000007b58*/ v_mov_b32       v1, v4
/*000000007b5c*/ v_mov_b32       v8, v4
/*000000007b60*/ s_waitcnt       lgkmcnt(0)
/*000000007b64*/ v_add_nc_u32    v7, s1, v2
/*000000007b68*/ v_add_nc_u32    v0, s2, v5
/*000000007b6c*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000007b74*/ v_add_nc_u32    v9, s0, v3
/*000000007b78*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000007b80*/ v_subrev_nc_u32 v10, s11, v0
/*000000007b84*/ v_add_co_u32    v3, vcc, s6, v5
/*000000007b8c*/ v_subrev_nc_u32 v9, s3, v9
/*000000007b90*/ v_add_co_ci_u32 v4, vcc, s7, v6, vcc
/*000000007b94*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000007b9c*/ v_add_co_u32    v0, vcc, s6, v1
/*000000007ba4*/ v_subrev_nc_u32 v7, s4, v7
/*000000007ba8*/ v_add_co_ci_u32 v1, vcc, s7, v2, vcc
/*000000007bac*/ v_add_co_u32    v5, vcc, s6, v5
/*000000007bb4*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*000000007bb8*/ global_store_dword v[3:4], v9, off
/*000000007bc0*/ global_store_dword v[0:1], v10, off
/*000000007bc8*/ global_store_dword v[5:6], v7, off
/*000000007bd0*/ s_endpgm
/*000000007bd4*/ s_nop           0x0
/*000000007bd8*/ s_nop           0x0
/*000000007bdc*/ s_nop           0x0
/*000000007be0*/ s_nop           0x0
/*000000007be4*/ s_nop           0x0
/*000000007be8*/ s_nop           0x0
/*000000007bec*/ s_nop           0x0
/*000000007bf0*/ s_nop           0x0
/*000000007bf4*/ s_nop           0x0
/*000000007bf8*/ s_nop           0x0
/*000000007bfc*/ s_nop           0x0
subtract_get_global_size_get_global_size:
.skip 256
/*000000007d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000007d08*/ s_waitcnt       lgkmcnt(0)
/*000000007d0c*/ s_clause        0x1
/*000000007d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000007d18*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000007d20*/ v_mov_b32       v4, 0
/*000000007d24*/ s_lshl_b32      s3, s6, 4
/*000000007d28*/ s_lshl_b32      s6, s7, 1
/*000000007d2c*/ s_lshl_b32      s7, s8, 1
/*000000007d30*/ v_mov_b32       v6, v4
/*000000007d34*/ v_mov_b32       v8, v4
/*000000007d38*/ v_add3_u32      v3, s0, s3, v0
/*000000007d40*/ v_add3_u32      v5, s2, s6, v1
/*000000007d48*/ s_waitcnt       lgkmcnt(0)
/*000000007d4c*/ v_add3_u32      v7, s1, s7, v2
/*000000007d54*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007d5c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007d64*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000007d6c*/ v_add_co_u32    v10, vcc, s4, v0
/*000000007d74*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*000000007d78*/ v_add_co_u32    v2, vcc, s4, v2
/*000000007d80*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000007d84*/ v_add_co_u32    v5, vcc, s4, v5
/*000000007d8c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000007d90*/ global_store_dword v[10:11], v4, off
/*000000007d98*/ global_store_dword v[2:3], v4, off
/*000000007da0*/ global_store_dword v[5:6], v4, off
/*000000007da8*/ s_endpgm
/*000000007dac*/ s_nop           0x0
/*000000007db0*/ s_nop           0x0
/*000000007db4*/ s_nop           0x0
/*000000007db8*/ s_nop           0x0
/*000000007dbc*/ s_nop           0x0
/*000000007dc0*/ s_nop           0x0
/*000000007dc4*/ s_nop           0x0
/*000000007dc8*/ s_nop           0x0
/*000000007dcc*/ s_nop           0x0
/*000000007dd0*/ s_nop           0x0
/*000000007dd4*/ s_nop           0x0
/*000000007dd8*/ s_nop           0x0
/*000000007ddc*/ s_nop           0x0
/*000000007de0*/ s_nop           0x0
/*000000007de4*/ s_nop           0x0
/*000000007de8*/ s_nop           0x0
/*000000007dec*/ s_nop           0x0
/*000000007df0*/ s_nop           0x0
/*000000007df4*/ s_nop           0x0
/*000000007df8*/ s_nop           0x0
/*000000007dfc*/ s_nop           0x0
subtract_get_num_groups_get_global_size:
.skip 256
/*000000007f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007f08*/ s_waitcnt       lgkmcnt(0)
/*000000007f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000007f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000007f24*/ s_lshl_b32      s3, s8, 1
/*000000007f28*/ v_mov_b32       v4, 0
/*000000007f2c*/ s_lshl_b32      s7, s10, 2
/*000000007f30*/ s_lshl_b32      s6, s9, 1
/*000000007f34*/ s_waitcnt       lgkmcnt(0)
/*000000007f38*/ v_add3_u32      v2, s1, s7, v2
/*000000007f40*/ v_add3_u32      v3, s0, s3, v0
/*000000007f48*/ s_and_b32       s1, s12, -2
/*000000007f4c*/ v_add3_u32      v0, s2, s6, v1
/*000000007f54*/ v_mov_b32       v1, v4
/*000000007f58*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000007f60*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000007f68*/ s_and_b32       s3, s13, -2
/*000000007f6c*/ s_lshr_b32      s0, s12, 1
/*000000007f70*/ v_mov_b32       v3, v4
/*000000007f74*/ v_cmp_gt_u32    s[3:4], s13, s3
/*000000007f7c*/ s_lshr_b32      s2, s13, 1
/*000000007f80*/ s_lshr_b32      s6, s14, 2
/*000000007f84*/ s_and_b32       s7, s14, -4
/*000000007f88*/ s_sub_i32       s0, s0, s12
/*000000007f8c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000007f94*/ s_cmpk_lg_u32   s1, 0x0
/*000000007f98*/ v_cmp_gt_u32    s[1:2], s14, s7
/*000000007fa0*/ s_addc_u32      s0, s0, 0
/*000000007fa4*/ v_add_co_u32    v5, vcc, s4, v5
/*000000007fac*/ s_sub_i32       s2, s2, s13
/*000000007fb0*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000007fb8*/ s_cmpk_lg_u32   s3, 0x0
/*000000007fbc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000007fc0*/ v_add_co_u32    v0, vcc, s4, v0
/*000000007fc8*/ v_mov_b32       v7, s0
/*000000007fcc*/ s_addc_u32      s0, s2, 0
/*000000007fd0*/ s_sub_i32       s2, s6, s14
/*000000007fd4*/ s_cmpk_lg_u32   s1, 0x0
/*000000007fd8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000007fdc*/ v_add_co_u32    v2, vcc, s4, v2
/*000000007fe4*/ v_mov_b32       v11, s0
/*000000007fe8*/ s_addc_u32      s0, s2, 0
/*000000007fec*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000007ff0*/ v_mov_b32       v8, s0
/*000000007ff4*/ global_store_dword v[5:6], v7, off
/*000000007ffc*/ global_store_dword v[0:1], v11, off
/*000000008004*/ global_store_dword v[2:3], v8, off
/*00000000800c*/ s_endpgm
/*000000008010*/ s_nop           0x0
/*000000008014*/ s_nop           0x0
/*000000008018*/ s_nop           0x0
/*00000000801c*/ s_nop           0x0
/*000000008020*/ s_nop           0x0
/*000000008024*/ s_nop           0x0
/*000000008028*/ s_nop           0x0
/*00000000802c*/ s_nop           0x0
/*000000008030*/ s_nop           0x0
/*000000008034*/ s_nop           0x0
/*000000008038*/ s_nop           0x0
/*00000000803c*/ s_nop           0x0
/*000000008040*/ s_nop           0x0
/*000000008044*/ s_nop           0x0
/*000000008048*/ s_nop           0x0
/*00000000804c*/ s_nop           0x0
/*000000008050*/ s_nop           0x0
/*000000008054*/ s_nop           0x0
/*000000008058*/ s_nop           0x0
/*00000000805c*/ s_nop           0x0
/*000000008060*/ s_nop           0x0
/*000000008064*/ s_nop           0x0
/*000000008068*/ s_nop           0x0
/*00000000806c*/ s_nop           0x0
/*000000008070*/ s_nop           0x0
/*000000008074*/ s_nop           0x0
/*000000008078*/ s_nop           0x0
/*00000000807c*/ s_nop           0x0
/*000000008080*/ s_nop           0x0
/*000000008084*/ s_nop           0x0
/*000000008088*/ s_nop           0x0
/*00000000808c*/ s_nop           0x0
/*000000008090*/ s_nop           0x0
/*000000008094*/ s_nop           0x0
/*000000008098*/ s_nop           0x0
/*00000000809c*/ s_nop           0x0
/*0000000080a0*/ s_nop           0x0
/*0000000080a4*/ s_nop           0x0
/*0000000080a8*/ s_nop           0x0
/*0000000080ac*/ s_nop           0x0
/*0000000080b0*/ s_nop           0x0
/*0000000080b4*/ s_nop           0x0
/*0000000080b8*/ s_nop           0x0
/*0000000080bc*/ s_nop           0x0
/*0000000080c0*/ s_nop           0x0
/*0000000080c4*/ s_nop           0x0
/*0000000080c8*/ s_nop           0x0
/*0000000080cc*/ s_nop           0x0
/*0000000080d0*/ s_nop           0x0
/*0000000080d4*/ s_nop           0x0
/*0000000080d8*/ s_nop           0x0
/*0000000080dc*/ s_nop           0x0
/*0000000080e0*/ s_nop           0x0
/*0000000080e4*/ s_nop           0x0
/*0000000080e8*/ s_nop           0x0
/*0000000080ec*/ s_nop           0x0
/*0000000080f0*/ s_nop           0x0
/*0000000080f4*/ s_nop           0x0
/*0000000080f8*/ s_nop           0x0
/*0000000080fc*/ s_nop           0x0
subtract_get_work_dim_get_global_size:
.skip 256
/*000000008200*/ v_mov_b32       v3, s4
/*000000008204*/ v_mov_b32       v4, s5
/*000000008208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008210*/ s_waitcnt       lgkmcnt(0)
/*000000008214*/ s_clause        0x1
/*000000008218*/ s_load_dword    s1, s[6:7], 0x20
/*000000008220*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008228*/ s_lshl_b32      s3, s8, 1
/*00000000822c*/ s_lshl_b32      s8, s9, 1
/*000000008230*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000008238*/ v_mov_b32       v4, 0
/*00000000823c*/ s_lshl_b32      s9, s10, 2
/*000000008240*/ s_clause        0x2
/*000000008244*/ s_load_dword    s10, s[4:5], 0xc
/*00000000824c*/ s_load_dword    s11, s[4:5], 0x10
/*000000008254*/ s_load_dword    s4, s[4:5], 0x14
/*00000000825c*/ v_mov_b32       v6, v4
/*000000008260*/ v_mov_b32       v8, v4
/*000000008264*/ v_add3_u32      v3, s0, s3, v0
/*00000000826c*/ v_add3_u32      v5, s2, s8, v1
/*000000008274*/ s_waitcnt       lgkmcnt(0)
/*000000008278*/ v_add3_u32      v7, s1, s9, v2
/*000000008280*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000008288*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000008290*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000008298*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000082a0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000082a4*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000082ac*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000082b0*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000082b8*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000082bc*/ s_waitcnt       vmcnt(0)
/*0000000082c0*/ v_subrev_nc_u32 v6, s10, v9
/*0000000082c4*/ v_subrev_nc_u32 v13, s11, v9
/*0000000082c8*/ v_subrev_nc_u32 v11, s4, v9
/*0000000082cc*/ global_store_dword v[0:1], v6, off
/*0000000082d4*/ global_store_dword v[2:3], v13, off
/*0000000082dc*/ global_store_dword v[4:5], v11, off
/*0000000082e4*/ s_endpgm
/*0000000082e8*/ s_nop           0x0
/*0000000082ec*/ s_nop           0x0
/*0000000082f0*/ s_nop           0x0
/*0000000082f4*/ s_nop           0x0
/*0000000082f8*/ s_nop           0x0
/*0000000082fc*/ s_nop           0x0
subtract_x_get_num_groups:
.skip 256
/*000000008400*/ s_load_dword    s11, s[4:5], 0xc
/*000000008408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008410*/ s_waitcnt       lgkmcnt(0)
/*000000008414*/ s_load_dword    s1, s[6:7], 0x8
/*00000000841c*/ s_load_dword    s3, s[4:5], 0x10
/*000000008424*/ s_clause        0x1
/*000000008428*/ s_load_dword    s12, s[6:7], 0x20
/*000000008430*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*000000008438*/ s_load_dword    s4, s[4:5], 0x14
/*000000008440*/ s_lshl_b32      s8, s8, 4
/*000000008444*/ s_lshl_b32      s9, s9, 1
/*000000008448*/ s_lshl_b32      s10, s10, 1
/*00000000844c*/ v_mov_b32       v4, 0
/*000000008450*/ v_mov_b32       v6, v4
/*000000008454*/ s_and_b32       s5, s11, -16
/*000000008458*/ v_add3_u32      v3, s0, s8, v0
/*000000008460*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008468*/ s_lshr_b32      s0, s11, 4
/*00000000846c*/ v_add3_u32      v5, s2, s9, v1
/*000000008474*/ v_mov_b32       v1, v4
/*000000008478*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000008480*/ s_cmpk_lg_u32   s5, 0x0
/*000000008484*/ s_waitcnt       lgkmcnt(0)
/*000000008488*/ v_add3_u32      v0, s12, s10, v2
/*000000008490*/ s_subb_u32      s0, s1, s0
/*000000008494*/ s_and_b32       s2, s3, -2
/*000000008498*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*0000000084a0*/ v_cmp_gt_u32    s[2:3], s3, s2
/*0000000084a8*/ s_lshr_b32      s3, s3, 1
/*0000000084ac*/ v_mov_b32       v9, s0
/*0000000084b0*/ v_add_co_u32    v2, vcc, s6, v3
/*0000000084b8*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000084c0*/ s_cmpk_lg_u32   s2, 0x0
/*0000000084c4*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*0000000084c8*/ s_subb_u32      s2, s1, s3
/*0000000084cc*/ s_and_b32       s3, s4, -2
/*0000000084d0*/ v_add_co_u32    v4, vcc, s6, v5
/*0000000084d8*/ v_cmp_gt_u32    s[0:1], s4, s3
/*0000000084e0*/ s_lshr_b32      s3, s4, 1
/*0000000084e4*/ v_add_co_ci_u32 v5, vcc, s7, v6, vcc
/*0000000084e8*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000084f0*/ v_mov_b32       v6, s2
/*0000000084f4*/ s_cmpk_lg_u32   s0, 0x0
/*0000000084f8*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000084fc*/ s_subb_u32      s0, s1, s3
/*000000008500*/ v_mov_b32       v11, s0
/*000000008504*/ global_store_dword v[2:3], v9, off
/*00000000850c*/ global_store_dword v[4:5], v6, off
/*000000008514*/ global_store_dword v[0:1], v11, off
/*00000000851c*/ s_endpgm
/*000000008520*/ s_nop           0x0
/*000000008524*/ s_nop           0x0
/*000000008528*/ s_nop           0x0
/*00000000852c*/ s_nop           0x0
/*000000008530*/ s_nop           0x0
/*000000008534*/ s_nop           0x0
/*000000008538*/ s_nop           0x0
/*00000000853c*/ s_nop           0x0
/*000000008540*/ s_nop           0x0
/*000000008544*/ s_nop           0x0
/*000000008548*/ s_nop           0x0
/*00000000854c*/ s_nop           0x0
/*000000008550*/ s_nop           0x0
/*000000008554*/ s_nop           0x0
/*000000008558*/ s_nop           0x0
/*00000000855c*/ s_nop           0x0
/*000000008560*/ s_nop           0x0
/*000000008564*/ s_nop           0x0
/*000000008568*/ s_nop           0x0
/*00000000856c*/ s_nop           0x0
/*000000008570*/ s_nop           0x0
/*000000008574*/ s_nop           0x0
/*000000008578*/ s_nop           0x0
/*00000000857c*/ s_nop           0x0
/*000000008580*/ s_nop           0x0
/*000000008584*/ s_nop           0x0
/*000000008588*/ s_nop           0x0
/*00000000858c*/ s_nop           0x0
/*000000008590*/ s_nop           0x0
/*000000008594*/ s_nop           0x0
/*000000008598*/ s_nop           0x0
/*00000000859c*/ s_nop           0x0
/*0000000085a0*/ s_nop           0x0
/*0000000085a4*/ s_nop           0x0
/*0000000085a8*/ s_nop           0x0
/*0000000085ac*/ s_nop           0x0
/*0000000085b0*/ s_nop           0x0
/*0000000085b4*/ s_nop           0x0
/*0000000085b8*/ s_nop           0x0
/*0000000085bc*/ s_nop           0x0
/*0000000085c0*/ s_nop           0x0
/*0000000085c4*/ s_nop           0x0
/*0000000085c8*/ s_nop           0x0
/*0000000085cc*/ s_nop           0x0
/*0000000085d0*/ s_nop           0x0
/*0000000085d4*/ s_nop           0x0
/*0000000085d8*/ s_nop           0x0
/*0000000085dc*/ s_nop           0x0
/*0000000085e0*/ s_nop           0x0
/*0000000085e4*/ s_nop           0x0
/*0000000085e8*/ s_nop           0x0
/*0000000085ec*/ s_nop           0x0
/*0000000085f0*/ s_nop           0x0
/*0000000085f4*/ s_nop           0x0
/*0000000085f8*/ s_nop           0x0
/*0000000085fc*/ s_nop           0x0
subtract_get_global_offset_get_num_groups:
.skip 256
/*000000008700*/ s_load_dword    s11, s[4:5], 0xc
/*000000008708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008710*/ s_waitcnt       lgkmcnt(0)
/*000000008714*/ s_load_dword    s1, s[4:5], 0x10
/*00000000871c*/ s_clause        0x1
/*000000008720*/ s_load_dword    s3, s[6:7], 0x20
/*000000008728*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008730*/ s_load_dword    s4, s[4:5], 0x14
/*000000008738*/ s_lshl_b32      s8, s8, 1
/*00000000873c*/ s_lshl_b32      s9, s9, 4
/*000000008740*/ s_lshl_b32      s10, s10, 1
/*000000008744*/ v_mov_b32       v4, 0
/*000000008748*/ v_mov_b32       v6, v4
/*00000000874c*/ s_and_b32       s5, s11, -2
/*000000008750*/ v_add3_u32      v3, s0, s8, v0
/*000000008758*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008760*/ s_lshr_b32      s8, s11, 1
/*000000008764*/ v_add3_u32      v5, s2, s9, v1
/*00000000876c*/ v_mov_b32       v1, v4
/*000000008770*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000008778*/ s_cmpk_lg_u32   s5, 0x0
/*00000000877c*/ s_waitcnt       lgkmcnt(0)
/*000000008780*/ v_add3_u32      v0, s3, s10, v2
/*000000008788*/ s_subb_u32      s0, s0, s8
/*00000000878c*/ s_and_b32       s5, s1, -16
/*000000008790*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000008798*/ v_cmp_gt_u32    s[5:6], s1, s5
/*0000000087a0*/ s_lshr_b32      s1, s1, 4
/*0000000087a4*/ v_mov_b32       v9, s0
/*0000000087a8*/ v_add_co_u32    v2, vcc, s6, v3
/*0000000087b0*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000087b8*/ s_cmpk_lg_u32   s5, 0x0
/*0000000087bc*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*0000000087c0*/ s_subb_u32      s1, s2, s1
/*0000000087c4*/ s_and_b32       s2, s4, -2
/*0000000087c8*/ v_add_co_u32    v4, vcc, s6, v5
/*0000000087d0*/ v_cmp_gt_u32    s[0:1], s4, s2
/*0000000087d8*/ s_lshr_b32      s2, s4, 1
/*0000000087dc*/ v_add_co_ci_u32 v5, vcc, s7, v6, vcc
/*0000000087e0*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000087e8*/ v_mov_b32       v6, s1
/*0000000087ec*/ s_cmpk_lg_u32   s0, 0x0
/*0000000087f0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000087f4*/ s_subb_u32      s0, s3, s2
/*0000000087f8*/ v_mov_b32       v11, s0
/*0000000087fc*/ global_store_dword v[2:3], v9, off
/*000000008804*/ global_store_dword v[4:5], v6, off
/*00000000880c*/ global_store_dword v[0:1], v11, off
/*000000008814*/ s_endpgm
/*000000008818*/ s_nop           0x0
/*00000000881c*/ s_nop           0x0
/*000000008820*/ s_nop           0x0
/*000000008824*/ s_nop           0x0
/*000000008828*/ s_nop           0x0
/*00000000882c*/ s_nop           0x0
/*000000008830*/ s_nop           0x0
/*000000008834*/ s_nop           0x0
/*000000008838*/ s_nop           0x0
/*00000000883c*/ s_nop           0x0
/*000000008840*/ s_nop           0x0
/*000000008844*/ s_nop           0x0
/*000000008848*/ s_nop           0x0
/*00000000884c*/ s_nop           0x0
/*000000008850*/ s_nop           0x0
/*000000008854*/ s_nop           0x0
/*000000008858*/ s_nop           0x0
/*00000000885c*/ s_nop           0x0
/*000000008860*/ s_nop           0x0
/*000000008864*/ s_nop           0x0
/*000000008868*/ s_nop           0x0
/*00000000886c*/ s_nop           0x0
/*000000008870*/ s_nop           0x0
/*000000008874*/ s_nop           0x0
/*000000008878*/ s_nop           0x0
/*00000000887c*/ s_nop           0x0
/*000000008880*/ s_nop           0x0
/*000000008884*/ s_nop           0x0
/*000000008888*/ s_nop           0x0
/*00000000888c*/ s_nop           0x0
/*000000008890*/ s_nop           0x0
/*000000008894*/ s_nop           0x0
/*000000008898*/ s_nop           0x0
/*00000000889c*/ s_nop           0x0
/*0000000088a0*/ s_nop           0x0
/*0000000088a4*/ s_nop           0x0
/*0000000088a8*/ s_nop           0x0
/*0000000088ac*/ s_nop           0x0
/*0000000088b0*/ s_nop           0x0
/*0000000088b4*/ s_nop           0x0
/*0000000088b8*/ s_nop           0x0
/*0000000088bc*/ s_nop           0x0
/*0000000088c0*/ s_nop           0x0
/*0000000088c4*/ s_nop           0x0
/*0000000088c8*/ s_nop           0x0
/*0000000088cc*/ s_nop           0x0
/*0000000088d0*/ s_nop           0x0
/*0000000088d4*/ s_nop           0x0
/*0000000088d8*/ s_nop           0x0
/*0000000088dc*/ s_nop           0x0
/*0000000088e0*/ s_nop           0x0
/*0000000088e4*/ s_nop           0x0
/*0000000088e8*/ s_nop           0x0
/*0000000088ec*/ s_nop           0x0
/*0000000088f0*/ s_nop           0x0
/*0000000088f4*/ s_nop           0x0
/*0000000088f8*/ s_nop           0x0
/*0000000088fc*/ s_nop           0x0
subtract_get_local_id_get_num_groups:
.skip 256
/*000000008a00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008a08*/ s_waitcnt       lgkmcnt(0)
/*000000008a0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000008a14*/ s_clause        0x1
/*000000008a18*/ s_load_dword    s3, s[4:5], 0xc
/*000000008a20*/ s_load_dword    s11, s[4:5], 0x10
/*000000008a28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008a30*/ s_lshl_b32      s8, s8, 3
/*000000008a34*/ v_mov_b32       v4, 0
/*000000008a38*/ s_lshl_b32      s10, s10, 1
/*000000008a3c*/ s_load_dword    s4, s[4:5], 0x14
/*000000008a44*/ s_lshl_b32      s9, s9, 2
/*000000008a48*/ v_mov_b32       v6, v4
/*000000008a4c*/ s_waitcnt       lgkmcnt(0)
/*000000008a50*/ v_add3_u32      v7, s1, s10, v2
/*000000008a58*/ s_and_b32       s1, s3, -8
/*000000008a5c*/ v_add3_u32      v3, s0, s8, v0
/*000000008a64*/ v_cmp_gt_u32    vcc, s3, s1
/*000000008a6c*/ s_lshr_b32      s0, s3, 3
/*000000008a70*/ v_add3_u32      v5, s2, s9, v1
/*000000008a78*/ s_and_b32       s5, s11, -4
/*000000008a7c*/ v_lshlrev_b64   v[8:9], 2, v[3:4]
/*000000008a84*/ v_subrev_co_ci_u32 v12, vcc, s0, v0, vcc
/*000000008a88*/ s_lshr_b32      s2, s11, 2
/*000000008a8c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000008a94*/ s_and_b32       s0, s4, -2
/*000000008a98*/ s_lshr_b32      s1, s4, 1
/*000000008a9c*/ v_add_co_u32    v10, vcc, s6, v8
/*000000008aa4*/ v_mov_b32       v8, v4
/*000000008aa8*/ v_add_co_ci_u32 v11, vcc, s7, v9, vcc
/*000000008aac*/ v_cmp_gt_u32    vcc, s11, s5
/*000000008ab4*/ v_lshlrev_b64   v[3:4], 2, v[7:8]
/*000000008abc*/ v_subrev_co_ci_u32 v15, vcc, s2, v1, vcc
/*000000008ac0*/ v_add_co_u32    v0, vcc, s6, v5
/*000000008ac8*/ v_add_co_ci_u32 v1, vcc, s7, v6, vcc
/*000000008acc*/ v_cmp_gt_u32    vcc, s4, s0
/*000000008ad4*/ v_subrev_co_ci_u32 v5, vcc, s1, v2, vcc
/*000000008ad8*/ v_add_co_u32    v2, vcc, s6, v3
/*000000008ae0*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*000000008ae4*/ global_store_dword v[10:11], v12, off
/*000000008aec*/ global_store_dword v[0:1], v15, off
/*000000008af4*/ global_store_dword v[2:3], v5, off
/*000000008afc*/ s_endpgm
subtract_get_group_id_get_num_groups:
.skip 256
/*000000008c00*/ s_load_dword    s11, s[4:5], 0xc
/*000000008c08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008c10*/ s_waitcnt       lgkmcnt(0)
/*000000008c14*/ s_load_dword    s1, s[4:5], 0x10
/*000000008c1c*/ s_clause        0x1
/*000000008c20*/ s_load_dword    s3, s[6:7], 0x20
/*000000008c28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008c30*/ s_load_dword    s4, s[4:5], 0x14
/*000000008c38*/ s_lshl_b32      s12, s8, 1
/*000000008c3c*/ s_lshl_b32      s13, s9, 4
/*000000008c40*/ s_lshl_b32      s14, s10, 1
/*000000008c44*/ v_mov_b32       v4, 0
/*000000008c48*/ v_mov_b32       v6, v4
/*000000008c4c*/ s_and_b32       s5, s11, -2
/*000000008c50*/ v_add3_u32      v3, s0, s12, v0
/*000000008c58*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008c60*/ s_lshr_b32      s0, s11, 1
/*000000008c64*/ v_add3_u32      v5, s2, s13, v1
/*000000008c6c*/ v_mov_b32       v1, v4
/*000000008c70*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000008c78*/ s_cmpk_lg_u32   s5, 0x0
/*000000008c7c*/ s_waitcnt       lgkmcnt(0)
/*000000008c80*/ v_add3_u32      v0, s3, s14, v2
/*000000008c88*/ s_subb_u32      s0, s8, s0
/*000000008c8c*/ s_and_b32       s2, s1, -16
/*000000008c90*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000008c98*/ v_cmp_gt_u32    s[2:3], s1, s2
/*000000008ca0*/ s_lshr_b32      s1, s1, 4
/*000000008ca4*/ v_mov_b32       v9, s0
/*000000008ca8*/ v_add_co_u32    v2, vcc, s6, v3
/*000000008cb0*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000008cb8*/ s_cmpk_lg_u32   s2, 0x0
/*000000008cbc*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*000000008cc0*/ s_subb_u32      s1, s9, s1
/*000000008cc4*/ s_and_b32       s2, s4, -2
/*000000008cc8*/ v_add_co_u32    v4, vcc, s6, v5
/*000000008cd0*/ v_cmp_gt_u32    s[0:1], s4, s2
/*000000008cd8*/ s_lshr_b32      s2, s4, 1
/*000000008cdc*/ v_add_co_ci_u32 v5, vcc, s7, v6, vcc
/*000000008ce0*/ v_add_co_u32    v0, vcc, s6, v0
/*000000008ce8*/ v_mov_b32       v6, s1
/*000000008cec*/ s_cmpk_lg_u32   s0, 0x0
/*000000008cf0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*000000008cf4*/ s_subb_u32      s0, s10, s2
/*000000008cf8*/ v_mov_b32       v11, s0
/*000000008cfc*/ global_store_dword v[2:3], v9, off
/*000000008d04*/ global_store_dword v[4:5], v6, off
/*000000008d0c*/ global_store_dword v[0:1], v11, off
/*000000008d14*/ s_endpgm
/*000000008d18*/ s_nop           0x0
/*000000008d1c*/ s_nop           0x0
/*000000008d20*/ s_nop           0x0
/*000000008d24*/ s_nop           0x0
/*000000008d28*/ s_nop           0x0
/*000000008d2c*/ s_nop           0x0
/*000000008d30*/ s_nop           0x0
/*000000008d34*/ s_nop           0x0
/*000000008d38*/ s_nop           0x0
/*000000008d3c*/ s_nop           0x0
/*000000008d40*/ s_nop           0x0
/*000000008d44*/ s_nop           0x0
/*000000008d48*/ s_nop           0x0
/*000000008d4c*/ s_nop           0x0
/*000000008d50*/ s_nop           0x0
/*000000008d54*/ s_nop           0x0
/*000000008d58*/ s_nop           0x0
/*000000008d5c*/ s_nop           0x0
/*000000008d60*/ s_nop           0x0
/*000000008d64*/ s_nop           0x0
/*000000008d68*/ s_nop           0x0
/*000000008d6c*/ s_nop           0x0
/*000000008d70*/ s_nop           0x0
/*000000008d74*/ s_nop           0x0
/*000000008d78*/ s_nop           0x0
/*000000008d7c*/ s_nop           0x0
/*000000008d80*/ s_nop           0x0
/*000000008d84*/ s_nop           0x0
/*000000008d88*/ s_nop           0x0
/*000000008d8c*/ s_nop           0x0
/*000000008d90*/ s_nop           0x0
/*000000008d94*/ s_nop           0x0
/*000000008d98*/ s_nop           0x0
/*000000008d9c*/ s_nop           0x0
/*000000008da0*/ s_nop           0x0
/*000000008da4*/ s_nop           0x0
/*000000008da8*/ s_nop           0x0
/*000000008dac*/ s_nop           0x0
/*000000008db0*/ s_nop           0x0
/*000000008db4*/ s_nop           0x0
/*000000008db8*/ s_nop           0x0
/*000000008dbc*/ s_nop           0x0
/*000000008dc0*/ s_nop           0x0
/*000000008dc4*/ s_nop           0x0
/*000000008dc8*/ s_nop           0x0
/*000000008dcc*/ s_nop           0x0
/*000000008dd0*/ s_nop           0x0
/*000000008dd4*/ s_nop           0x0
/*000000008dd8*/ s_nop           0x0
/*000000008ddc*/ s_nop           0x0
/*000000008de0*/ s_nop           0x0
/*000000008de4*/ s_nop           0x0
/*000000008de8*/ s_nop           0x0
/*000000008dec*/ s_nop           0x0
/*000000008df0*/ s_nop           0x0
/*000000008df4*/ s_nop           0x0
/*000000008df8*/ s_nop           0x0
/*000000008dfc*/ s_nop           0x0
subtract_get_local_size_get_num_groups:
.skip 256
/*000000008f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008f08*/ s_waitcnt       lgkmcnt(0)
/*000000008f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000008f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000008f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000008f24*/ s_lshl_b32      s3, s8, 1
/*000000008f28*/ s_lshl_b32      s7, s10, 2
/*000000008f2c*/ s_lshl_b32      s6, s9, 1
/*000000008f30*/ v_mov_b32       v4, 0
/*000000008f34*/ v_mov_b32       v6, v4
/*000000008f38*/ v_add3_u32      v3, s0, s3, v0
/*000000008f40*/ s_waitcnt       lgkmcnt(0)
/*000000008f44*/ v_add3_u32      v0, s1, s7, v2
/*000000008f4c*/ s_and_b32       s1, s12, -2
/*000000008f50*/ v_add3_u32      v5, s2, s6, v1
/*000000008f58*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000008f60*/ s_and_b32       s2, s13, -2
/*000000008f64*/ s_lshr_b32      s0, s12, 1
/*000000008f68*/ v_cmp_gt_u32    s[2:3], s13, s2
/*000000008f70*/ v_lshlrev_b64   v[1:2], 2, v[3:4]
/*000000008f78*/ v_cndmask_b32   v7, 0, -1, s[1:2]
/*000000008f80*/ s_lshr_b32      s1, s13, 1
/*000000008f84*/ v_cndmask_b32   v3, 0, -1, s[2:3]
/*000000008f8c*/ v_subrev_nc_u32 v9, s0, v7
/*000000008f90*/ s_and_b32       s0, s14, -4
/*000000008f94*/ v_add_co_u32    v7, vcc, s4, v1
/*000000008f9c*/ v_cmp_gt_u32    s[0:1], s14, s0
/*000000008fa4*/ v_mov_b32       v1, v4
/*000000008fa8*/ v_subrev_nc_u32 v10, s1, v3
/*000000008fac*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000008fb0*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000008fb8*/ v_cndmask_b32   v11, 0, -1, s[0:1]
/*000000008fc0*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000008fc8*/ s_lshr_b32      s0, s14, 2
/*000000008fcc*/ v_add_nc_u32    v9, 2, v9
/*000000008fd0*/ v_add_nc_u32    v4, 2, v10
/*000000008fd4*/ v_subrev_nc_u32 v5, s0, v11
/*000000008fd8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000008fe0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000008fe4*/ v_add_co_u32    v0, vcc, s4, v0
/*000000008fec*/ v_add_nc_u32    v11, 4, v5
/*000000008ff0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000008ff4*/ global_store_dword v[7:8], v9, off
/*000000008ffc*/ global_store_dword v[2:3], v4, off
/*000000009004*/ global_store_dword v[0:1], v11, off
/*00000000900c*/ s_endpgm
/*000000009010*/ s_nop           0x0
/*000000009014*/ s_nop           0x0
/*000000009018*/ s_nop           0x0
/*00000000901c*/ s_nop           0x0
/*000000009020*/ s_nop           0x0
/*000000009024*/ s_nop           0x0
/*000000009028*/ s_nop           0x0
/*00000000902c*/ s_nop           0x0
/*000000009030*/ s_nop           0x0
/*000000009034*/ s_nop           0x0
/*000000009038*/ s_nop           0x0
/*00000000903c*/ s_nop           0x0
/*000000009040*/ s_nop           0x0
/*000000009044*/ s_nop           0x0
/*000000009048*/ s_nop           0x0
/*00000000904c*/ s_nop           0x0
/*000000009050*/ s_nop           0x0
/*000000009054*/ s_nop           0x0
/*000000009058*/ s_nop           0x0
/*00000000905c*/ s_nop           0x0
/*000000009060*/ s_nop           0x0
/*000000009064*/ s_nop           0x0
/*000000009068*/ s_nop           0x0
/*00000000906c*/ s_nop           0x0
/*000000009070*/ s_nop           0x0
/*000000009074*/ s_nop           0x0
/*000000009078*/ s_nop           0x0
/*00000000907c*/ s_nop           0x0
/*000000009080*/ s_nop           0x0
/*000000009084*/ s_nop           0x0
/*000000009088*/ s_nop           0x0
/*00000000908c*/ s_nop           0x0
/*000000009090*/ s_nop           0x0
/*000000009094*/ s_nop           0x0
/*000000009098*/ s_nop           0x0
/*00000000909c*/ s_nop           0x0
/*0000000090a0*/ s_nop           0x0
/*0000000090a4*/ s_nop           0x0
/*0000000090a8*/ s_nop           0x0
/*0000000090ac*/ s_nop           0x0
/*0000000090b0*/ s_nop           0x0
/*0000000090b4*/ s_nop           0x0
/*0000000090b8*/ s_nop           0x0
/*0000000090bc*/ s_nop           0x0
/*0000000090c0*/ s_nop           0x0
/*0000000090c4*/ s_nop           0x0
/*0000000090c8*/ s_nop           0x0
/*0000000090cc*/ s_nop           0x0
/*0000000090d0*/ s_nop           0x0
/*0000000090d4*/ s_nop           0x0
/*0000000090d8*/ s_nop           0x0
/*0000000090dc*/ s_nop           0x0
/*0000000090e0*/ s_nop           0x0
/*0000000090e4*/ s_nop           0x0
/*0000000090e8*/ s_nop           0x0
/*0000000090ec*/ s_nop           0x0
/*0000000090f0*/ s_nop           0x0
/*0000000090f4*/ s_nop           0x0
/*0000000090f8*/ s_nop           0x0
/*0000000090fc*/ s_nop           0x0
subtract_get_global_id_get_num_groups:
.skip 256
/*000000009200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009208*/ s_waitcnt       lgkmcnt(0)
/*00000000920c*/ s_load_dword    s1, s[6:7], 0x20
/*000000009214*/ s_load_dword    s3, s[4:5], 0xc
/*00000000921c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000009224*/ s_load_dword    s11, s[4:5], 0x10
/*00000000922c*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000009234*/ v_mov_b32       v4, 0
/*000000009238*/ s_load_dword    s4, s[4:5], 0x14
/*000000009240*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000009248*/ v_lshl_or_b32   v0, s9, 1, v1
/*000000009250*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000009258*/ v_mov_b32       v1, v4
/*00000000925c*/ s_waitcnt       lgkmcnt(0)
/*000000009260*/ v_add_nc_u32    v2, s1, v2
/*000000009264*/ s_lshr_b32      s1, s3, 1
/*000000009268*/ v_add_nc_u32    v3, s0, v3
/*00000000926c*/ s_and_b32       s0, s3, -2
/*000000009270*/ v_add_nc_u32    v0, s2, v0
/*000000009274*/ v_cmp_gt_u32    vcc, s3, s0
/*00000000927c*/ s_lshr_b32      s0, s11, 1
/*000000009280*/ v_lshlrev_b64   v[7:8], 2, v[0:1]
/*000000009288*/ v_subrev_co_ci_u32 v11, vcc, s1, v3, vcc
/*00000000928c*/ v_add_co_u32    v5, vcc, s6, v5
/*000000009294*/ s_and_b32       s1, s11, -2
/*000000009298*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*00000000929c*/ v_cmp_gt_u32    vcc, s11, s1
/*0000000092a4*/ v_mov_b32       v3, v4
/*0000000092a8*/ s_lshr_b32      s1, s4, 2
/*0000000092ac*/ v_subrev_co_ci_u32 v10, vcc, s0, v0, vcc
/*0000000092b0*/ v_add_co_u32    v0, vcc, s6, v7
/*0000000092b8*/ s_and_b32       s0, s4, -4
/*0000000092bc*/ v_add_co_ci_u32 v1, vcc, s7, v8, vcc
/*0000000092c0*/ v_cmp_gt_u32    vcc, s4, s0
/*0000000092c8*/ v_lshlrev_b64   v[3:4], 2, v[2:3]
/*0000000092d0*/ v_subrev_co_ci_u32 v13, vcc, s1, v2, vcc
/*0000000092d4*/ v_add_co_u32    v2, vcc, s6, v3
/*0000000092dc*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*0000000092e0*/ global_store_dword v[5:6], v11, off
/*0000000092e8*/ global_store_dword v[0:1], v10, off
/*0000000092f0*/ global_store_dword v[2:3], v13, off
/*0000000092f8*/ s_endpgm
/*0000000092fc*/ s_nop           0x0
subtract_get_global_size_get_num_groups:
.skip 256
/*000000009400*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000009408*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000009410*/ s_waitcnt       lgkmcnt(0)
/*000000009414*/ s_clause        0x1
/*000000009418*/ s_load_dword    s3, s[6:7], 0x20
/*000000009420*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000009428*/ s_lshl_b32      s7, s9, 1
/*00000000942c*/ s_lshl_b32      s6, s8, 4
/*000000009430*/ s_lshl_b32      s8, s10, 1
/*000000009434*/ v_mov_b32       v4, 0
/*000000009438*/ v_mov_b32       v6, v4
/*00000000943c*/ v_mov_b32       v8, v4
/*000000009440*/ s_and_b32       s9, s0, -16
/*000000009444*/ v_add3_u32      v3, s12, s6, v0
/*00000000944c*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000009454*/ s_lshr_b32      s6, s0, 4
/*000000009458*/ s_waitcnt       lgkmcnt(0)
/*00000000945c*/ v_add3_u32      v7, s3, s8, v2
/*000000009464*/ v_add3_u32      v5, s14, s7, v1
/*00000000946c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009474*/ s_cmpk_lg_u32   s9, 0x0
/*000000009478*/ s_subb_u32      s0, s0, s6
/*00000000947c*/ s_and_b32       s3, s1, -2
/*000000009480*/ s_lshr_b32      s6, s1, 1
/*000000009484*/ v_cmp_gt_u32    s[3:4], s1, s3
/*00000000948c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009494*/ v_mov_b32       v6, s0
/*000000009498*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000094a0*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000094a8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000094ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000094b0*/ s_subb_u32      s1, s1, s6
/*0000000094b4*/ s_and_b32       s3, s2, -2
/*0000000094b8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000094c0*/ v_cmp_gt_u32    s[0:1], s2, s3
/*0000000094c8*/ s_lshr_b32      s3, s2, 1
/*0000000094cc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000094d0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000094d8*/ v_mov_b32       v9, s1
/*0000000094dc*/ s_cmpk_lg_u32   s0, 0x0
/*0000000094e0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000094e4*/ s_subb_u32      s0, s2, s3
/*0000000094e8*/ v_mov_b32       v11, s0
/*0000000094ec*/ global_store_dword v[0:1], v6, off
/*0000000094f4*/ global_store_dword v[2:3], v9, off
/*0000000094fc*/ global_store_dword v[4:5], v11, off
/*000000009504*/ s_endpgm
/*000000009508*/ s_nop           0x0
/*00000000950c*/ s_nop           0x0
/*000000009510*/ s_nop           0x0
/*000000009514*/ s_nop           0x0
/*000000009518*/ s_nop           0x0
/*00000000951c*/ s_nop           0x0
/*000000009520*/ s_nop           0x0
/*000000009524*/ s_nop           0x0
/*000000009528*/ s_nop           0x0
/*00000000952c*/ s_nop           0x0
/*000000009530*/ s_nop           0x0
/*000000009534*/ s_nop           0x0
/*000000009538*/ s_nop           0x0
/*00000000953c*/ s_nop           0x0
/*000000009540*/ s_nop           0x0
/*000000009544*/ s_nop           0x0
/*000000009548*/ s_nop           0x0
/*00000000954c*/ s_nop           0x0
/*000000009550*/ s_nop           0x0
/*000000009554*/ s_nop           0x0
/*000000009558*/ s_nop           0x0
/*00000000955c*/ s_nop           0x0
/*000000009560*/ s_nop           0x0
/*000000009564*/ s_nop           0x0
/*000000009568*/ s_nop           0x0
/*00000000956c*/ s_nop           0x0
/*000000009570*/ s_nop           0x0
/*000000009574*/ s_nop           0x0
/*000000009578*/ s_nop           0x0
/*00000000957c*/ s_nop           0x0
/*000000009580*/ s_nop           0x0
/*000000009584*/ s_nop           0x0
/*000000009588*/ s_nop           0x0
/*00000000958c*/ s_nop           0x0
/*000000009590*/ s_nop           0x0
/*000000009594*/ s_nop           0x0
/*000000009598*/ s_nop           0x0
/*00000000959c*/ s_nop           0x0
/*0000000095a0*/ s_nop           0x0
/*0000000095a4*/ s_nop           0x0
/*0000000095a8*/ s_nop           0x0
/*0000000095ac*/ s_nop           0x0
/*0000000095b0*/ s_nop           0x0
/*0000000095b4*/ s_nop           0x0
/*0000000095b8*/ s_nop           0x0
/*0000000095bc*/ s_nop           0x0
/*0000000095c0*/ s_nop           0x0
/*0000000095c4*/ s_nop           0x0
/*0000000095c8*/ s_nop           0x0
/*0000000095cc*/ s_nop           0x0
/*0000000095d0*/ s_nop           0x0
/*0000000095d4*/ s_nop           0x0
/*0000000095d8*/ s_nop           0x0
/*0000000095dc*/ s_nop           0x0
/*0000000095e0*/ s_nop           0x0
/*0000000095e4*/ s_nop           0x0
/*0000000095e8*/ s_nop           0x0
/*0000000095ec*/ s_nop           0x0
/*0000000095f0*/ s_nop           0x0
/*0000000095f4*/ s_nop           0x0
/*0000000095f8*/ s_nop           0x0
/*0000000095fc*/ s_nop           0x0
subtract_get_num_groups_get_num_groups:
.skip 256
/*000000009700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000009708*/ s_waitcnt       lgkmcnt(0)
/*00000000970c*/ s_clause        0x1
/*000000009710*/ s_load_dword    s1, s[4:5], 0x20
/*000000009718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000009720*/ v_mov_b32       v4, 0
/*000000009724*/ s_lshl_b32      s3, s6, 1
/*000000009728*/ s_lshl_b32      s6, s7, 1
/*00000000972c*/ s_lshl_b32      s7, s8, 2
/*000000009730*/ v_mov_b32       v6, v4
/*000000009734*/ v_mov_b32       v8, v4
/*000000009738*/ v_add3_u32      v3, s0, s3, v0
/*000000009740*/ v_add3_u32      v5, s2, s6, v1
/*000000009748*/ s_waitcnt       lgkmcnt(0)
/*00000000974c*/ v_add3_u32      v7, s1, s7, v2
/*000000009754*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000975c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009764*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000976c*/ v_add_co_u32    v10, vcc, s4, v0
/*000000009774*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*000000009778*/ v_add_co_u32    v2, vcc, s4, v2
/*000000009780*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000009784*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000978c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000009790*/ global_store_dword v[10:11], v4, off
/*000000009798*/ global_store_dword v[2:3], v4, off
/*0000000097a0*/ global_store_dword v[5:6], v4, off
/*0000000097a8*/ s_endpgm
/*0000000097ac*/ s_nop           0x0
/*0000000097b0*/ s_nop           0x0
/*0000000097b4*/ s_nop           0x0
/*0000000097b8*/ s_nop           0x0
/*0000000097bc*/ s_nop           0x0
/*0000000097c0*/ s_nop           0x0
/*0000000097c4*/ s_nop           0x0
/*0000000097c8*/ s_nop           0x0
/*0000000097cc*/ s_nop           0x0
/*0000000097d0*/ s_nop           0x0
/*0000000097d4*/ s_nop           0x0
/*0000000097d8*/ s_nop           0x0
/*0000000097dc*/ s_nop           0x0
/*0000000097e0*/ s_nop           0x0
/*0000000097e4*/ s_nop           0x0
/*0000000097e8*/ s_nop           0x0
/*0000000097ec*/ s_nop           0x0
/*0000000097f0*/ s_nop           0x0
/*0000000097f4*/ s_nop           0x0
/*0000000097f8*/ s_nop           0x0
/*0000000097fc*/ s_nop           0x0
subtract_get_work_dim_get_num_groups:
.skip 256
/*000000009900*/ v_mov_b32       v3, s4
/*000000009904*/ v_mov_b32       v4, s5
/*000000009908*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009910*/ s_waitcnt       lgkmcnt(0)
/*000000009914*/ s_load_dword    s1, s[6:7], 0x20
/*00000000991c*/ s_clause        0x2
/*000000009920*/ s_load_dword    s3, s[4:5], 0xc
/*000000009928*/ s_load_dword    s11, s[4:5], 0x10
/*000000009930*/ s_load_dword    s12, s[4:5], 0x14
/*000000009938*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000009940*/ s_lshl_b32      s6, s8, 1
/*000000009944*/ s_lshl_b32      s7, s9, 1
/*000000009948*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000009950*/ v_mov_b32       v4, 0
/*000000009954*/ s_lshl_b32      s8, s10, 2
/*000000009958*/ v_mov_b32       v6, v4
/*00000000995c*/ v_mov_b32       v8, v4
/*000000009960*/ s_waitcnt       lgkmcnt(0)
/*000000009964*/ v_add3_u32      v7, s1, s8, v2
/*00000000996c*/ s_and_b32       s1, s3, -2
/*000000009970*/ v_add3_u32      v3, s0, s6, v0
/*000000009978*/ v_add3_u32      v5, s2, s7, v1
/*000000009980*/ s_lshr_b32      s0, s3, 1
/*000000009984*/ s_and_b32       s6, s11, -2
/*000000009988*/ s_lshr_b32      s2, s11, 1
/*00000000998c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009994*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000999c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000099a4*/ s_and_b32       s8, s12, -4
/*0000000099a8*/ s_lshr_b32      s7, s12, 2
/*0000000099ac*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000099b4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000099b8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000099c0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000099c4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000099cc*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000099d0*/ v_cmp_gt_u32    vcc, s3, s1
/*0000000099d8*/ s_waitcnt       vmcnt(0)
/*0000000099dc*/ v_subrev_co_ci_u32 v6, vcc, s0, v9, vcc
/*0000000099e0*/ v_cmp_gt_u32    vcc, s11, s6
/*0000000099e8*/ v_subrev_co_ci_u32 v13, vcc, s2, v9, vcc
/*0000000099ec*/ v_cmp_gt_u32    vcc, s12, s8
/*0000000099f4*/ v_subrev_co_ci_u32 v11, vcc, s7, v9, vcc
/*0000000099f8*/ global_store_dword v[0:1], v6, off
/*000000009a00*/ global_store_dword v[2:3], v13, off
/*000000009a08*/ global_store_dword v[4:5], v11, off
/*000000009a10*/ s_endpgm
/*000000009a14*/ s_nop           0x0
/*000000009a18*/ s_nop           0x0
/*000000009a1c*/ s_nop           0x0
/*000000009a20*/ s_nop           0x0
/*000000009a24*/ s_nop           0x0
/*000000009a28*/ s_nop           0x0
/*000000009a2c*/ s_nop           0x0
/*000000009a30*/ s_nop           0x0
/*000000009a34*/ s_nop           0x0
/*000000009a38*/ s_nop           0x0
/*000000009a3c*/ s_nop           0x0
/*000000009a40*/ s_nop           0x0
/*000000009a44*/ s_nop           0x0
/*000000009a48*/ s_nop           0x0
/*000000009a4c*/ s_nop           0x0
/*000000009a50*/ s_nop           0x0
/*000000009a54*/ s_nop           0x0
/*000000009a58*/ s_nop           0x0
/*000000009a5c*/ s_nop           0x0
/*000000009a60*/ s_nop           0x0
/*000000009a64*/ s_nop           0x0
/*000000009a68*/ s_nop           0x0
/*000000009a6c*/ s_nop           0x0
/*000000009a70*/ s_nop           0x0
/*000000009a74*/ s_nop           0x0
/*000000009a78*/ s_nop           0x0
/*000000009a7c*/ s_nop           0x0
/*000000009a80*/ s_nop           0x0
/*000000009a84*/ s_nop           0x0
/*000000009a88*/ s_nop           0x0
/*000000009a8c*/ s_nop           0x0
/*000000009a90*/ s_nop           0x0
/*000000009a94*/ s_nop           0x0
/*000000009a98*/ s_nop           0x0
/*000000009a9c*/ s_nop           0x0
/*000000009aa0*/ s_nop           0x0
/*000000009aa4*/ s_nop           0x0
/*000000009aa8*/ s_nop           0x0
/*000000009aac*/ s_nop           0x0
/*000000009ab0*/ s_nop           0x0
/*000000009ab4*/ s_nop           0x0
/*000000009ab8*/ s_nop           0x0
/*000000009abc*/ s_nop           0x0
/*000000009ac0*/ s_nop           0x0
/*000000009ac4*/ s_nop           0x0
/*000000009ac8*/ s_nop           0x0
/*000000009acc*/ s_nop           0x0
/*000000009ad0*/ s_nop           0x0
/*000000009ad4*/ s_nop           0x0
/*000000009ad8*/ s_nop           0x0
/*000000009adc*/ s_nop           0x0
/*000000009ae0*/ s_nop           0x0
/*000000009ae4*/ s_nop           0x0
/*000000009ae8*/ s_nop           0x0
/*000000009aec*/ s_nop           0x0
/*000000009af0*/ s_nop           0x0
/*000000009af4*/ s_nop           0x0
/*000000009af8*/ s_nop           0x0
/*000000009afc*/ s_nop           0x0
subtract_x_get_work_dim:
.skip 256
/*000000009c00*/ v_mov_b32       v3, s4
/*000000009c04*/ v_mov_b32       v4, s5
/*000000009c08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009c10*/ s_waitcnt       lgkmcnt(0)
/*000000009c14*/ s_clause        0x2
/*000000009c18*/ s_load_dword    s1, s[6:7], 0x20
/*000000009c20*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000009c28*/ s_load_dword    s6, s[6:7], 0x8
/*000000009c30*/ s_lshl_b32      s3, s8, 4
/*000000009c34*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000009c3c*/ v_mov_b32       v4, 0
/*000000009c40*/ s_lshl_b32      s7, s9, 1
/*000000009c44*/ s_lshl_b32      s8, s10, 1
/*000000009c48*/ v_mov_b32       v6, v4
/*000000009c4c*/ v_mov_b32       v8, v4
/*000000009c50*/ v_add3_u32      v3, s0, s3, v0
/*000000009c58*/ v_add3_u32      v5, s2, s7, v1
/*000000009c60*/ s_waitcnt       lgkmcnt(0)
/*000000009c64*/ v_add3_u32      v7, s1, s8, v2
/*000000009c6c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009c74*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009c7c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000009c84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000009c8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000009c90*/ v_add_co_u32    v7, vcc, s4, v2
/*000000009c98*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*000000009c9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000009ca4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000009ca8*/ s_waitcnt       vmcnt(0)
/*000000009cac*/ v_sub_nc_u32    v6, s6, v9
/*000000009cb0*/ global_store_dword v[0:1], v6, off
/*000000009cb8*/ global_store_dword v[7:8], v6, off
/*000000009cc0*/ global_store_dword v[4:5], v6, off
/*000000009cc8*/ s_endpgm
/*000000009ccc*/ s_nop           0x0
/*000000009cd0*/ s_nop           0x0
/*000000009cd4*/ s_nop           0x0
/*000000009cd8*/ s_nop           0x0
/*000000009cdc*/ s_nop           0x0
/*000000009ce0*/ s_nop           0x0
/*000000009ce4*/ s_nop           0x0
/*000000009ce8*/ s_nop           0x0
/*000000009cec*/ s_nop           0x0
/*000000009cf0*/ s_nop           0x0
/*000000009cf4*/ s_nop           0x0
/*000000009cf8*/ s_nop           0x0
/*000000009cfc*/ s_nop           0x0
subtract_get_global_offset_get_work_dim:
.skip 256
/*000000009e00*/ v_mov_b32       v3, s4
/*000000009e04*/ v_mov_b32       v4, s5
/*000000009e08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009e10*/ s_waitcnt       lgkmcnt(0)
/*000000009e14*/ s_clause        0x1
/*000000009e18*/ s_load_dword    s1, s[6:7], 0x20
/*000000009e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000009e28*/ s_lshl_b32      s3, s8, 1
/*000000009e2c*/ s_lshl_b32      s6, s9, 4
/*000000009e30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000009e38*/ v_mov_b32       v4, 0
/*000000009e3c*/ s_lshl_b32      s7, s10, 1
/*000000009e40*/ v_mov_b32       v6, v4
/*000000009e44*/ v_mov_b32       v8, v4
/*000000009e48*/ v_add3_u32      v3, s0, s3, v0
/*000000009e50*/ v_add3_u32      v5, s2, s6, v1
/*000000009e58*/ s_waitcnt       lgkmcnt(0)
/*000000009e5c*/ v_add3_u32      v7, s1, s7, v2
/*000000009e64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009e6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009e74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000009e7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000009e84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000009e88*/ v_add_co_u32    v2, vcc, s4, v2
/*000000009e90*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000009e94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000009e9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000009ea0*/ s_waitcnt       vmcnt(0)
/*000000009ea4*/ v_sub_nc_u32    v6, s0, v9
/*000000009ea8*/ v_sub_nc_u32    v13, s2, v9
/*000000009eac*/ v_sub_nc_u32    v11, s1, v9
/*000000009eb0*/ global_store_dword v[0:1], v6, off
/*000000009eb8*/ global_store_dword v[2:3], v13, off
/*000000009ec0*/ global_store_dword v[4:5], v11, off
/*000000009ec8*/ s_endpgm
/*000000009ecc*/ s_nop           0x0
/*000000009ed0*/ s_nop           0x0
/*000000009ed4*/ s_nop           0x0
/*000000009ed8*/ s_nop           0x0
/*000000009edc*/ s_nop           0x0
/*000000009ee0*/ s_nop           0x0
/*000000009ee4*/ s_nop           0x0
/*000000009ee8*/ s_nop           0x0
/*000000009eec*/ s_nop           0x0
/*000000009ef0*/ s_nop           0x0
/*000000009ef4*/ s_nop           0x0
/*000000009ef8*/ s_nop           0x0
/*000000009efc*/ s_nop           0x0
subtract_get_local_id_get_work_dim:
.skip 256
/*00000000a000*/ v_mov_b32       v3, s4
/*00000000a004*/ v_mov_b32       v4, s5
/*00000000a008*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a010*/ s_waitcnt       lgkmcnt(0)
/*00000000a014*/ s_clause        0x1
/*00000000a018*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a020*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a028*/ s_lshl_b32      s3, s8, 3
/*00000000a02c*/ s_lshl_b32      s6, s9, 2
/*00000000a030*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*00000000a038*/ v_mov_b32       v4, 0
/*00000000a03c*/ s_lshl_b32      s7, s10, 1
/*00000000a040*/ v_mov_b32       v6, v4
/*00000000a044*/ v_mov_b32       v8, v4
/*00000000a048*/ v_add3_u32      v3, s0, s3, v0
/*00000000a050*/ v_add3_u32      v5, s2, s6, v1
/*00000000a058*/ s_waitcnt       lgkmcnt(0)
/*00000000a05c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a064*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000a06c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*00000000a074*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*00000000a07c*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000a084*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000a088*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000a090*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000a094*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000a09c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*00000000a0a0*/ s_waitcnt       vmcnt(0)
/*00000000a0a4*/ v_sub_nc_u32    v10, v0, v15
/*00000000a0a8*/ v_sub_nc_u32    v11, v1, v15
/*00000000a0ac*/ v_sub_nc_u32    v2, v2, v15
/*00000000a0b0*/ global_store_dword v[3:4], v10, off
/*00000000a0b8*/ global_store_dword v[5:6], v11, off
/*00000000a0c0*/ global_store_dword v[7:8], v2, off
/*00000000a0c8*/ s_endpgm
/*00000000a0cc*/ s_nop           0x0
/*00000000a0d0*/ s_nop           0x0
/*00000000a0d4*/ s_nop           0x0
/*00000000a0d8*/ s_nop           0x0
/*00000000a0dc*/ s_nop           0x0
/*00000000a0e0*/ s_nop           0x0
/*00000000a0e4*/ s_nop           0x0
/*00000000a0e8*/ s_nop           0x0
/*00000000a0ec*/ s_nop           0x0
/*00000000a0f0*/ s_nop           0x0
/*00000000a0f4*/ s_nop           0x0
/*00000000a0f8*/ s_nop           0x0
/*00000000a0fc*/ s_nop           0x0
subtract_get_group_id_get_work_dim:
.skip 256
/*00000000a200*/ v_mov_b32       v3, s4
/*00000000a204*/ v_mov_b32       v4, s5
/*00000000a208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a210*/ s_waitcnt       lgkmcnt(0)
/*00000000a214*/ s_clause        0x1
/*00000000a218*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a228*/ s_lshl_b32      s3, s8, 1
/*00000000a22c*/ s_lshl_b32      s6, s9, 4
/*00000000a230*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a238*/ v_mov_b32       v4, 0
/*00000000a23c*/ s_lshl_b32      s7, s10, 1
/*00000000a240*/ v_mov_b32       v6, v4
/*00000000a244*/ v_mov_b32       v8, v4
/*00000000a248*/ v_add3_u32      v3, s0, s3, v0
/*00000000a250*/ v_add3_u32      v5, s2, s6, v1
/*00000000a258*/ s_waitcnt       lgkmcnt(0)
/*00000000a25c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a264*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a26c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a274*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a27c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a284*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a288*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000a290*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000a294*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a29c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a2a0*/ s_waitcnt       vmcnt(0)
/*00000000a2a4*/ v_sub_nc_u32    v6, s8, v9
/*00000000a2a8*/ v_sub_nc_u32    v13, s9, v9
/*00000000a2ac*/ v_sub_nc_u32    v11, s10, v9
/*00000000a2b0*/ global_store_dword v[0:1], v6, off
/*00000000a2b8*/ global_store_dword v[2:3], v13, off
/*00000000a2c0*/ global_store_dword v[4:5], v11, off
/*00000000a2c8*/ s_endpgm
/*00000000a2cc*/ s_nop           0x0
/*00000000a2d0*/ s_nop           0x0
/*00000000a2d4*/ s_nop           0x0
/*00000000a2d8*/ s_nop           0x0
/*00000000a2dc*/ s_nop           0x0
/*00000000a2e0*/ s_nop           0x0
/*00000000a2e4*/ s_nop           0x0
/*00000000a2e8*/ s_nop           0x0
/*00000000a2ec*/ s_nop           0x0
/*00000000a2f0*/ s_nop           0x0
/*00000000a2f4*/ s_nop           0x0
/*00000000a2f8*/ s_nop           0x0
/*00000000a2fc*/ s_nop           0x0
subtract_get_local_size_get_work_dim:
.skip 256
/*00000000a400*/ v_mov_b32       v3, s4
/*00000000a404*/ v_mov_b32       v4, s5
/*00000000a408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a410*/ s_waitcnt       lgkmcnt(0)
/*00000000a414*/ s_clause        0x1
/*00000000a418*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a428*/ s_lshl_b32      s3, s8, 1
/*00000000a42c*/ s_lshl_b32      s6, s9, 1
/*00000000a430*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a438*/ v_mov_b32       v4, 0
/*00000000a43c*/ s_lshl_b32      s7, s10, 2
/*00000000a440*/ v_mov_b32       v6, v4
/*00000000a444*/ v_mov_b32       v8, v4
/*00000000a448*/ v_add3_u32      v3, s0, s3, v0
/*00000000a450*/ v_add3_u32      v5, s2, s6, v1
/*00000000a458*/ s_waitcnt       lgkmcnt(0)
/*00000000a45c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a464*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a46c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a474*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a47c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a484*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a488*/ v_add_co_u32    v11, vcc, s4, v2
/*00000000a490*/ v_add_co_ci_u32 v12, vcc, s5, v3, vcc
/*00000000a494*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a49c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a4a0*/ s_waitcnt       vmcnt(0)
/*00000000a4a4*/ v_sub_nc_u32    v6, 2, v9
/*00000000a4a8*/ v_sub_nc_u32    v7, 4, v9
/*00000000a4ac*/ global_store_dword v[0:1], v6, off
/*00000000a4b4*/ global_store_dword v[11:12], v6, off
/*00000000a4bc*/ global_store_dword v[4:5], v7, off
/*00000000a4c4*/ s_endpgm
/*00000000a4c8*/ s_nop           0x0
/*00000000a4cc*/ s_nop           0x0
/*00000000a4d0*/ s_nop           0x0
/*00000000a4d4*/ s_nop           0x0
/*00000000a4d8*/ s_nop           0x0
/*00000000a4dc*/ s_nop           0x0
/*00000000a4e0*/ s_nop           0x0
/*00000000a4e4*/ s_nop           0x0
/*00000000a4e8*/ s_nop           0x0
/*00000000a4ec*/ s_nop           0x0
/*00000000a4f0*/ s_nop           0x0
/*00000000a4f4*/ s_nop           0x0
/*00000000a4f8*/ s_nop           0x0
/*00000000a4fc*/ s_nop           0x0
subtract_get_global_id_get_work_dim:
.skip 256
/*00000000a600*/ v_mov_b32       v3, s4
/*00000000a604*/ v_mov_b32       v4, s5
/*00000000a608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a610*/ s_waitcnt       lgkmcnt(0)
/*00000000a614*/ s_clause        0x1
/*00000000a618*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a620*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a628*/ v_lshl_or_b32   v5, s9, 1, v1
/*00000000a630*/ v_lshl_or_b32   v2, s10, 2, v2
/*00000000a638*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a640*/ v_mov_b32       v4, 0
/*00000000a644*/ v_lshl_or_b32   v3, s8, 1, v0
/*00000000a64c*/ v_mov_b32       v1, v4
/*00000000a650*/ v_add_nc_u32    v0, s2, v5
/*00000000a654*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*00000000a65c*/ v_add_nc_u32    v10, s0, v3
/*00000000a660*/ s_waitcnt       lgkmcnt(0)
/*00000000a664*/ v_add_nc_u32    v3, s1, v2
/*00000000a668*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000a670*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000a678*/ v_lshlrev_b64   v[7:8], 2, v[3:4]
/*00000000a680*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000a684*/ v_add_co_u32    v1, vcc, s4, v1
/*00000000a68c*/ v_add_co_ci_u32 v2, vcc, s5, v2, vcc
/*00000000a690*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000a698*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*00000000a69c*/ s_waitcnt       vmcnt(0)
/*00000000a6a0*/ v_sub_nc_u32    v4, v10, v9
/*00000000a6a4*/ v_sub_nc_u32    v0, v0, v9
/*00000000a6a8*/ v_sub_nc_u32    v10, v3, v9
/*00000000a6ac*/ global_store_dword v[5:6], v4, off
/*00000000a6b4*/ global_store_dword v[1:2], v0, off
/*00000000a6bc*/ global_store_dword v[7:8], v10, off
/*00000000a6c4*/ s_endpgm
/*00000000a6c8*/ s_nop           0x0
/*00000000a6cc*/ s_nop           0x0
/*00000000a6d0*/ s_nop           0x0
/*00000000a6d4*/ s_nop           0x0
/*00000000a6d8*/ s_nop           0x0
/*00000000a6dc*/ s_nop           0x0
/*00000000a6e0*/ s_nop           0x0
/*00000000a6e4*/ s_nop           0x0
/*00000000a6e8*/ s_nop           0x0
/*00000000a6ec*/ s_nop           0x0
/*00000000a6f0*/ s_nop           0x0
/*00000000a6f4*/ s_nop           0x0
/*00000000a6f8*/ s_nop           0x0
/*00000000a6fc*/ s_nop           0x0
subtract_get_global_size_get_work_dim:
.skip 256
/*00000000a800*/ v_mov_b32       v3, s4
/*00000000a804*/ v_mov_b32       v4, s5
/*00000000a808*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a810*/ s_waitcnt       lgkmcnt(0)
/*00000000a814*/ s_clause        0x1
/*00000000a818*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a820*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*00000000a828*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*00000000a830*/ s_lshl_b32      s3, s8, 4
/*00000000a834*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a83c*/ v_mov_b32       v4, 0
/*00000000a840*/ s_lshl_b32      s8, s9, 1
/*00000000a844*/ s_lshl_b32      s9, s10, 1
/*00000000a848*/ v_mov_b32       v6, v4
/*00000000a84c*/ v_mov_b32       v8, v4
/*00000000a850*/ v_add3_u32      v3, s0, s3, v0
/*00000000a858*/ v_add3_u32      v5, s2, s8, v1
/*00000000a860*/ s_waitcnt       lgkmcnt(0)
/*00000000a864*/ v_add3_u32      v7, s1, s9, v2
/*00000000a86c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a874*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a87c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a884*/ v_add_co_u32    v0, vcc, s12, v0
/*00000000a88c*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*00000000a890*/ v_add_co_u32    v2, vcc, s12, v2
/*00000000a898*/ v_add_co_ci_u32 v3, vcc, s13, v3, vcc
/*00000000a89c*/ v_add_co_u32    v4, vcc, s12, v4
/*00000000a8a4*/ v_add_co_ci_u32 v5, vcc, s13, v5, vcc
/*00000000a8a8*/ s_waitcnt       vmcnt(0)
/*00000000a8ac*/ v_sub_nc_u32    v6, s4, v9
/*00000000a8b0*/ v_sub_nc_u32    v13, s5, v9
/*00000000a8b4*/ v_sub_nc_u32    v11, s6, v9
/*00000000a8b8*/ global_store_dword v[0:1], v6, off
/*00000000a8c0*/ global_store_dword v[2:3], v13, off
/*00000000a8c8*/ global_store_dword v[4:5], v11, off
/*00000000a8d0*/ s_endpgm
/*00000000a8d4*/ s_nop           0x0
/*00000000a8d8*/ s_nop           0x0
/*00000000a8dc*/ s_nop           0x0
/*00000000a8e0*/ s_nop           0x0
/*00000000a8e4*/ s_nop           0x0
/*00000000a8e8*/ s_nop           0x0
/*00000000a8ec*/ s_nop           0x0
/*00000000a8f0*/ s_nop           0x0
/*00000000a8f4*/ s_nop           0x0
/*00000000a8f8*/ s_nop           0x0
/*00000000a8fc*/ s_nop           0x0
subtract_get_num_groups_get_work_dim:
.skip 256
/*00000000aa00*/ v_mov_b32       v3, s4
/*00000000aa04*/ v_mov_b32       v4, s5
/*00000000aa08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000aa10*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000aa18*/ s_waitcnt       lgkmcnt(0)
/*00000000aa1c*/ s_clause        0x1
/*00000000aa20*/ s_load_dword    s1, s[6:7], 0x20
/*00000000aa28*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000aa30*/ s_lshl_b32      s3, s8, 1
/*00000000aa34*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000aa3c*/ v_mov_b32       v4, 0
/*00000000aa40*/ s_lshl_b32      s6, s9, 1
/*00000000aa44*/ s_lshl_b32      s7, s10, 2
/*00000000aa48*/ v_mov_b32       v6, v4
/*00000000aa4c*/ v_mov_b32       v8, v4
/*00000000aa50*/ v_add3_u32      v3, s0, s3, v0
/*00000000aa58*/ s_and_b32       s0, s12, -2
/*00000000aa5c*/ v_add3_u32      v5, s2, s6, v1
/*00000000aa64*/ v_cmp_gt_u32    s[0:1], s12, s0
/*00000000aa6c*/ s_waitcnt       lgkmcnt(0)
/*00000000aa70*/ v_add3_u32      v7, s1, s7, v2
/*00000000aa78*/ s_lshr_b32      s1, s12, 1
/*00000000aa7c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000aa84*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000aa8c*/ s_cmpk_lg_u32   s0, 0x0
/*00000000aa90*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000aa98*/ s_addc_u32      s0, s1, 0
/*00000000aa9c*/ s_and_b32       s1, s13, -2
/*00000000aaa0*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000aaa8*/ v_cmp_gt_u32    s[1:2], s13, s1
/*00000000aab0*/ s_lshr_b32      s2, s13, 1
/*00000000aab4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000aab8*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000aac0*/ s_cmpk_lg_u32   s1, 0x0
/*00000000aac4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000aac8*/ s_addc_u32      s1, s2, 0
/*00000000aacc*/ s_lshr_b32      s2, s14, 2
/*00000000aad0*/ s_and_b32       s3, s14, -4
/*00000000aad4*/ v_cmp_gt_u32    vcc, s14, s3
/*00000000aadc*/ s_waitcnt       vmcnt(0)
/*00000000aae0*/ v_sub_nc_u32    v6, s2, v9
/*00000000aae4*/ v_sub_nc_u32    v7, s0, v9
/*00000000aae8*/ v_sub_nc_u32    v8, s1, v9
/*00000000aaec*/ v_add_co_ci_u32 v6, vcc, 0, v6, vcc
/*00000000aaf0*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000aaf8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000aafc*/ global_store_dword v[0:1], v7, off
/*00000000ab04*/ global_store_dword v[2:3], v8, off
/*00000000ab0c*/ global_store_dword v[4:5], v6, off
/*00000000ab14*/ s_endpgm
/*00000000ab18*/ s_nop           0x0
/*00000000ab1c*/ s_nop           0x0
/*00000000ab20*/ s_nop           0x0
/*00000000ab24*/ s_nop           0x0
/*00000000ab28*/ s_nop           0x0
/*00000000ab2c*/ s_nop           0x0
/*00000000ab30*/ s_nop           0x0
/*00000000ab34*/ s_nop           0x0
/*00000000ab38*/ s_nop           0x0
/*00000000ab3c*/ s_nop           0x0
/*00000000ab40*/ s_nop           0x0
/*00000000ab44*/ s_nop           0x0
/*00000000ab48*/ s_nop           0x0
/*00000000ab4c*/ s_nop           0x0
/*00000000ab50*/ s_nop           0x0
/*00000000ab54*/ s_nop           0x0
/*00000000ab58*/ s_nop           0x0
/*00000000ab5c*/ s_nop           0x0
/*00000000ab60*/ s_nop           0x0
/*00000000ab64*/ s_nop           0x0
/*00000000ab68*/ s_nop           0x0
/*00000000ab6c*/ s_nop           0x0
/*00000000ab70*/ s_nop           0x0
/*00000000ab74*/ s_nop           0x0
/*00000000ab78*/ s_nop           0x0
/*00000000ab7c*/ s_nop           0x0
/*00000000ab80*/ s_nop           0x0
/*00000000ab84*/ s_nop           0x0
/*00000000ab88*/ s_nop           0x0
/*00000000ab8c*/ s_nop           0x0
/*00000000ab90*/ s_nop           0x0
/*00000000ab94*/ s_nop           0x0
/*00000000ab98*/ s_nop           0x0
/*00000000ab9c*/ s_nop           0x0
/*00000000aba0*/ s_nop           0x0
/*00000000aba4*/ s_nop           0x0
/*00000000aba8*/ s_nop           0x0
/*00000000abac*/ s_nop           0x0
/*00000000abb0*/ s_nop           0x0
/*00000000abb4*/ s_nop           0x0
/*00000000abb8*/ s_nop           0x0
/*00000000abbc*/ s_nop           0x0
/*00000000abc0*/ s_nop           0x0
/*00000000abc4*/ s_nop           0x0
/*00000000abc8*/ s_nop           0x0
/*00000000abcc*/ s_nop           0x0
/*00000000abd0*/ s_nop           0x0
/*00000000abd4*/ s_nop           0x0
/*00000000abd8*/ s_nop           0x0
/*00000000abdc*/ s_nop           0x0
/*00000000abe0*/ s_nop           0x0
/*00000000abe4*/ s_nop           0x0
/*00000000abe8*/ s_nop           0x0
/*00000000abec*/ s_nop           0x0
/*00000000abf0*/ s_nop           0x0
/*00000000abf4*/ s_nop           0x0
/*00000000abf8*/ s_nop           0x0
/*00000000abfc*/ s_nop           0x0
subtract_get_work_dim_get_work_dim:
.skip 256
/*00000000ad00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ad08*/ s_waitcnt       lgkmcnt(0)
/*00000000ad0c*/ s_clause        0x1
/*00000000ad10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000ad18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ad20*/ v_mov_b32       v4, 0
/*00000000ad24*/ s_lshl_b32      s3, s6, 1
/*00000000ad28*/ s_lshl_b32      s6, s7, 1
/*00000000ad2c*/ s_lshl_b32      s7, s8, 2
/*00000000ad30*/ v_mov_b32       v6, v4
/*00000000ad34*/ v_mov_b32       v8, v4
/*00000000ad38*/ v_add3_u32      v3, s0, s3, v0
/*00000000ad40*/ v_add3_u32      v5, s2, s6, v1
/*00000000ad48*/ s_waitcnt       lgkmcnt(0)
/*00000000ad4c*/ v_add3_u32      v7, s1, s7, v2
/*00000000ad54*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000ad5c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000ad64*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000ad6c*/ v_add_co_u32    v10, vcc, s4, v0
/*00000000ad74*/ v_add_co_ci_u32 v11, vcc, s5, v1, vcc
/*00000000ad78*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000ad80*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000ad84*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000ad8c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000ad90*/ global_store_dword v[10:11], v4, off
/*00000000ad98*/ global_store_dword v[2:3], v4, off
/*00000000ada0*/ global_store_dword v[5:6], v4, off
/*00000000ada8*/ s_endpgm
/*00000000adac*/ s_nop           0x0
/*00000000adb0*/ s_nop           0x0
/*00000000adb4*/ s_nop           0x0
/*00000000adb8*/ s_nop           0x0
/*00000000adbc*/ s_nop           0x0
/*00000000adc0*/ s_nop           0x0
/*00000000adc4*/ s_nop           0x0
/*00000000adc8*/ s_nop           0x0
/*00000000adcc*/ s_nop           0x0
/*00000000add0*/ s_nop           0x0
/*00000000add4*/ s_nop           0x0
/*00000000add8*/ s_nop           0x0
/*00000000addc*/ s_nop           0x0
/*00000000ade0*/ s_nop           0x0
/*00000000ade4*/ s_nop           0x0
/*00000000ade8*/ s_nop           0x0
/*00000000adec*/ s_nop           0x0
/*00000000adf0*/ s_nop           0x0
/*00000000adf4*/ s_nop           0x0
/*00000000adf8*/ s_nop           0x0
/*00000000adfc*/ s_nop           0x0
subtract_x_64:
.skip 256
/*00000000af00*/ s_clause        0x2
/*00000000af04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000af0c*/ s_load_dword    s3, s[4:5], 0x0
/*00000000af14*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000af1c*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000000af24*/ v_mov_b32       v1, 0
/*00000000af28*/ s_waitcnt       lgkmcnt(0)
/*00000000af2c*/ v_add_nc_u32    v0, s2, v0
/*00000000af30*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000af38*/ v_sub_nc_u32    v3, s3, v0
/*00000000af3c*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000af44*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000af48*/ global_store_dword v[0:1], v3, off
/*00000000af50*/ s_endpgm
/*00000000af54*/ s_nop           0x0
/*00000000af58*/ s_nop           0x0
/*00000000af5c*/ s_nop           0x0
/*00000000af60*/ s_nop           0x0
/*00000000af64*/ s_nop           0x0
/*00000000af68*/ s_nop           0x0
/*00000000af6c*/ s_nop           0x0
/*00000000af70*/ s_nop           0x0
/*00000000af74*/ s_nop           0x0
/*00000000af78*/ s_nop           0x0
/*00000000af7c*/ s_nop           0x0
/*00000000af80*/ s_nop           0x0
/*00000000af84*/ s_nop           0x0
/*00000000af88*/ s_nop           0x0
/*00000000af8c*/ s_nop           0x0
/*00000000af90*/ s_nop           0x0
/*00000000af94*/ s_nop           0x0
/*00000000af98*/ s_nop           0x0
/*00000000af9c*/ s_nop           0x0
/*00000000afa0*/ s_nop           0x0
/*00000000afa4*/ s_nop           0x0
/*00000000afa8*/ s_nop           0x0
/*00000000afac*/ s_nop           0x0
/*00000000afb0*/ s_nop           0x0
/*00000000afb4*/ s_nop           0x0
/*00000000afb8*/ s_nop           0x0
/*00000000afbc*/ s_nop           0x0
/*00000000afc0*/ s_nop           0x0
/*00000000afc4*/ s_nop           0x0
/*00000000afc8*/ s_nop           0x0
/*00000000afcc*/ s_nop           0x0
/*00000000afd0*/ s_nop           0x0
/*00000000afd4*/ s_nop           0x0
/*00000000afd8*/ s_nop           0x0
/*00000000afdc*/ s_nop           0x0
/*00000000afe0*/ s_nop           0x0
/*00000000afe4*/ s_nop           0x0
/*00000000afe8*/ s_nop           0x0
/*00000000afec*/ s_nop           0x0
/*00000000aff0*/ s_nop           0x0
/*00000000aff4*/ s_nop           0x0
/*00000000aff8*/ s_nop           0x0
/*00000000affc*/ s_nop           0x0
subtract_get_global_offset_64:
.skip 256
/*00000000b100*/ s_clause        0x1
/*00000000b104*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b10c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b114*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000000b11c*/ v_mov_b32       v1, 0
/*00000000b120*/ s_waitcnt       lgkmcnt(0)
/*00000000b124*/ v_add_nc_u32    v0, s2, v0
/*00000000b128*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000b130*/ v_sub_nc_u32    v3, s2, v0
/*00000000b134*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000b13c*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000b140*/ global_store_dword v[0:1], v3, off
/*00000000b148*/ s_endpgm
/*00000000b14c*/ s_nop           0x0
/*00000000b150*/ s_nop           0x0
/*00000000b154*/ s_nop           0x0
/*00000000b158*/ s_nop           0x0
/*00000000b15c*/ s_nop           0x0
/*00000000b160*/ s_nop           0x0
/*00000000b164*/ s_nop           0x0
/*00000000b168*/ s_nop           0x0
/*00000000b16c*/ s_nop           0x0
/*00000000b170*/ s_nop           0x0
/*00000000b174*/ s_nop           0x0
/*00000000b178*/ s_nop           0x0
/*00000000b17c*/ s_nop           0x0
/*00000000b180*/ s_nop           0x0
/*00000000b184*/ s_nop           0x0
/*00000000b188*/ s_nop           0x0
/*00000000b18c*/ s_nop           0x0
/*00000000b190*/ s_nop           0x0
/*00000000b194*/ s_nop           0x0
/*00000000b198*/ s_nop           0x0
/*00000000b19c*/ s_nop           0x0
/*00000000b1a0*/ s_nop           0x0
/*00000000b1a4*/ s_nop           0x0
/*00000000b1a8*/ s_nop           0x0
/*00000000b1ac*/ s_nop           0x0
/*00000000b1b0*/ s_nop           0x0
/*00000000b1b4*/ s_nop           0x0
/*00000000b1b8*/ s_nop           0x0
/*00000000b1bc*/ s_nop           0x0
/*00000000b1c0*/ s_nop           0x0
/*00000000b1c4*/ s_nop           0x0
/*00000000b1c8*/ s_nop           0x0
/*00000000b1cc*/ s_nop           0x0
/*00000000b1d0*/ s_nop           0x0
/*00000000b1d4*/ s_nop           0x0
/*00000000b1d8*/ s_nop           0x0
/*00000000b1dc*/ s_nop           0x0
/*00000000b1e0*/ s_nop           0x0
/*00000000b1e4*/ s_nop           0x0
/*00000000b1e8*/ s_nop           0x0
/*00000000b1ec*/ s_nop           0x0
/*00000000b1f0*/ s_nop           0x0
/*00000000b1f4*/ s_nop           0x0
/*00000000b1f8*/ s_nop           0x0
/*00000000b1fc*/ s_nop           0x0
subtract_get_local_id_64:
.skip 256
/*00000000b300*/ s_clause        0x1
/*00000000b304*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b30c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b314*/ v_lshl_or_b32   v1, s6, 6, v0
/*00000000b31c*/ v_mov_b32       v2, 0
/*00000000b320*/ s_waitcnt       lgkmcnt(0)
/*00000000b324*/ v_add_nc_u32    v1, s2, v1
/*00000000b328*/ v_lshlrev_b64   v[2:3], 2, v[1:2]
/*00000000b330*/ v_sub_nc_u32    v7, v0, v1
/*00000000b334*/ v_add_co_u32    v0, vcc, s0, v2
/*00000000b33c*/ v_add_co_ci_u32 v1, vcc, s1, v3, vcc
/*00000000b340*/ global_store_dword v[0:1], v7, off
/*00000000b348*/ s_endpgm
/*00000000b34c*/ s_nop           0x0
/*00000000b350*/ s_nop           0x0
/*00000000b354*/ s_nop           0x0
/*00000000b358*/ s_nop           0x0
/*00000000b35c*/ s_nop           0x0
/*00000000b360*/ s_nop           0x0
/*00000000b364*/ s_nop           0x0
/*00000000b368*/ s_nop           0x0
/*00000000b36c*/ s_nop           0x0
/*00000000b370*/ s_nop           0x0
/*00000000b374*/ s_nop           0x0
/*00000000b378*/ s_nop           0x0
/*00000000b37c*/ s_nop           0x0
/*00000000b380*/ s_nop           0x0
/*00000000b384*/ s_nop           0x0
/*00000000b388*/ s_nop           0x0
/*00000000b38c*/ s_nop           0x0
/*00000000b390*/ s_nop           0x0
/*00000000b394*/ s_nop           0x0
/*00000000b398*/ s_nop           0x0
/*00000000b39c*/ s_nop           0x0
/*00000000b3a0*/ s_nop           0x0
/*00000000b3a4*/ s_nop           0x0
/*00000000b3a8*/ s_nop           0x0
/*00000000b3ac*/ s_nop           0x0
/*00000000b3b0*/ s_nop           0x0
/*00000000b3b4*/ s_nop           0x0
/*00000000b3b8*/ s_nop           0x0
/*00000000b3bc*/ s_nop           0x0
/*00000000b3c0*/ s_nop           0x0
/*00000000b3c4*/ s_nop           0x0
/*00000000b3c8*/ s_nop           0x0
/*00000000b3cc*/ s_nop           0x0
/*00000000b3d0*/ s_nop           0x0
/*00000000b3d4*/ s_nop           0x0
/*00000000b3d8*/ s_nop           0x0
/*00000000b3dc*/ s_nop           0x0
/*00000000b3e0*/ s_nop           0x0
/*00000000b3e4*/ s_nop           0x0
/*00000000b3e8*/ s_nop           0x0
/*00000000b3ec*/ s_nop           0x0
/*00000000b3f0*/ s_nop           0x0
/*00000000b3f4*/ s_nop           0x0
/*00000000b3f8*/ s_nop           0x0
/*00000000b3fc*/ s_nop           0x0
subtract_get_group_id_64:
.skip 256
/*00000000b500*/ s_clause        0x1
/*00000000b504*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b50c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b514*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000000b51c*/ v_mov_b32       v1, 0
/*00000000b520*/ s_waitcnt       lgkmcnt(0)
/*00000000b524*/ v_add_nc_u32    v0, s2, v0
/*00000000b528*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000b530*/ v_sub_nc_u32    v3, s6, v0
/*00000000b534*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000b53c*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000b540*/ global_store_dword v[0:1], v3, off
/*00000000b548*/ s_endpgm
/*00000000b54c*/ s_nop           0x0
/*00000000b550*/ s_nop           0x0
/*00000000b554*/ s_nop           0x0
/*00000000b558*/ s_nop           0x0
/*00000000b55c*/ s_nop           0x0
/*00000000b560*/ s_nop           0x0
/*00000000b564*/ s_nop           0x0
/*00000000b568*/ s_nop           0x0
/*00000000b56c*/ s_nop           0x0
/*00000000b570*/ s_nop           0x0
/*00000000b574*/ s_nop           0x0
/*00000000b578*/ s_nop           0x0
/*00000000b57c*/ s_nop           0x0
/*00000000b580*/ s_nop           0x0
/*00000000b584*/ s_nop           0x0
/*00000000b588*/ s_nop           0x0
/*00000000b58c*/ s_nop           0x0
/*00000000b590*/ s_nop           0x0
/*00000000b594*/ s_nop           0x0
/*00000000b598*/ s_nop           0x0
/*00000000b59c*/ s_nop           0x0
/*00000000b5a0*/ s_nop           0x0
/*00000000b5a4*/ s_nop           0x0
/*00000000b5a8*/ s_nop           0x0
/*00000000b5ac*/ s_nop           0x0
/*00000000b5b0*/ s_nop           0x0
/*00000000b5b4*/ s_nop           0x0
/*00000000b5b8*/ s_nop           0x0
/*00000000b5bc*/ s_nop           0x0
/*00000000b5c0*/ s_nop           0x0
/*00000000b5c4*/ s_nop           0x0
/*00000000b5c8*/ s_nop           0x0
/*00000000b5cc*/ s_nop           0x0
/*00000000b5d0*/ s_nop           0x0
/*00000000b5d4*/ s_nop           0x0
/*00000000b5d8*/ s_nop           0x0
/*00000000b5dc*/ s_nop           0x0
/*00000000b5e0*/ s_nop           0x0
/*00000000b5e4*/ s_nop           0x0
/*00000000b5e8*/ s_nop           0x0
/*00000000b5ec*/ s_nop           0x0
/*00000000b5f0*/ s_nop           0x0
/*00000000b5f4*/ s_nop           0x0
/*00000000b5f8*/ s_nop           0x0
/*00000000b5fc*/ s_nop           0x0
subtract_get_local_size_64:
.skip 256
/*00000000b700*/ s_clause        0x1
/*00000000b704*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b70c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b714*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000000b71c*/ v_mov_b32       v1, 0
/*00000000b720*/ s_waitcnt       lgkmcnt(0)
/*00000000b724*/ v_add_nc_u32    v0, s2, v0
/*00000000b728*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000b730*/ v_sub_nc_u32    v3, 64, v0
/*00000000b734*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000b73c*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000b740*/ global_store_dword v[0:1], v3, off
/*00000000b748*/ s_endpgm
/*00000000b74c*/ s_nop           0x0
/*00000000b750*/ s_nop           0x0
/*00000000b754*/ s_nop           0x0
/*00000000b758*/ s_nop           0x0
/*00000000b75c*/ s_nop           0x0
/*00000000b760*/ s_nop           0x0
/*00000000b764*/ s_nop           0x0
/*00000000b768*/ s_nop           0x0
/*00000000b76c*/ s_nop           0x0
/*00000000b770*/ s_nop           0x0
/*00000000b774*/ s_nop           0x0
/*00000000b778*/ s_nop           0x0
/*00000000b77c*/ s_nop           0x0
/*00000000b780*/ s_nop           0x0
/*00000000b784*/ s_nop           0x0
/*00000000b788*/ s_nop           0x0
/*00000000b78c*/ s_nop           0x0
/*00000000b790*/ s_nop           0x0
/*00000000b794*/ s_nop           0x0
/*00000000b798*/ s_nop           0x0
/*00000000b79c*/ s_nop           0x0
/*00000000b7a0*/ s_nop           0x0
/*00000000b7a4*/ s_nop           0x0
/*00000000b7a8*/ s_nop           0x0
/*00000000b7ac*/ s_nop           0x0
/*00000000b7b0*/ s_nop           0x0
/*00000000b7b4*/ s_nop           0x0
/*00000000b7b8*/ s_nop           0x0
/*00000000b7bc*/ s_nop           0x0
/*00000000b7c0*/ s_nop           0x0
/*00000000b7c4*/ s_nop           0x0
/*00000000b7c8*/ s_nop           0x0
/*00000000b7cc*/ s_nop           0x0
/*00000000b7d0*/ s_nop           0x0
/*00000000b7d4*/ s_nop           0x0
/*00000000b7d8*/ s_nop           0x0
/*00000000b7dc*/ s_nop           0x0
/*00000000b7e0*/ s_nop           0x0
/*00000000b7e4*/ s_nop           0x0
/*00000000b7e8*/ s_nop           0x0
/*00000000b7ec*/ s_nop           0x0
/*00000000b7f0*/ s_nop           0x0
/*00000000b7f4*/ s_nop           0x0
/*00000000b7f8*/ s_nop           0x0
/*00000000b7fc*/ s_nop           0x0
subtract_get_global_id_64:
.skip 256
/*00000000b900*/ s_clause        0x1
/*00000000b904*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b90c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b914*/ s_lshl_b32      s3, s6, 6
/*00000000b918*/ v_mov_b32       v1, 0
/*00000000b91c*/ s_waitcnt       lgkmcnt(0)
/*00000000b920*/ v_add3_u32      v0, s2, s3, v0
/*00000000b928*/ v_lshlrev_b64   v[2:3], 2, v[0:1]
/*00000000b930*/ v_add_co_u32    v2, vcc, s0, v2
/*00000000b938*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000b93c*/ global_store_dword v[2:3], v1, off
/*00000000b944*/ s_endpgm
/*00000000b948*/ s_nop           0x0
/*00000000b94c*/ s_nop           0x0
/*00000000b950*/ s_nop           0x0
/*00000000b954*/ s_nop           0x0
/*00000000b958*/ s_nop           0x0
/*00000000b95c*/ s_nop           0x0
/*00000000b960*/ s_nop           0x0
/*00000000b964*/ s_nop           0x0
/*00000000b968*/ s_nop           0x0
/*00000000b96c*/ s_nop           0x0
/*00000000b970*/ s_nop           0x0
/*00000000b974*/ s_nop           0x0
/*00000000b978*/ s_nop           0x0
/*00000000b97c*/ s_nop           0x0
/*00000000b980*/ s_nop           0x0
/*00000000b984*/ s_nop           0x0
/*00000000b988*/ s_nop           0x0
/*00000000b98c*/ s_nop           0x0
/*00000000b990*/ s_nop           0x0
/*00000000b994*/ s_nop           0x0
/*00000000b998*/ s_nop           0x0
/*00000000b99c*/ s_nop           0x0
/*00000000b9a0*/ s_nop           0x0
/*00000000b9a4*/ s_nop           0x0
/*00000000b9a8*/ s_nop           0x0
/*00000000b9ac*/ s_nop           0x0
/*00000000b9b0*/ s_nop           0x0
/*00000000b9b4*/ s_nop           0x0
/*00000000b9b8*/ s_nop           0x0
/*00000000b9bc*/ s_nop           0x0
/*00000000b9c0*/ s_nop           0x0
/*00000000b9c4*/ s_nop           0x0
/*00000000b9c8*/ s_nop           0x0
/*00000000b9cc*/ s_nop           0x0
/*00000000b9d0*/ s_nop           0x0
/*00000000b9d4*/ s_nop           0x0
/*00000000b9d8*/ s_nop           0x0
/*00000000b9dc*/ s_nop           0x0
/*00000000b9e0*/ s_nop           0x0
/*00000000b9e4*/ s_nop           0x0
/*00000000b9e8*/ s_nop           0x0
/*00000000b9ec*/ s_nop           0x0
/*00000000b9f0*/ s_nop           0x0
/*00000000b9f4*/ s_nop           0x0
/*00000000b9f8*/ s_nop           0x0
/*00000000b9fc*/ s_nop           0x0
subtract_get_global_size_64:
.skip 256
/*00000000bb00*/ s_load_dword    s2, s[6:7], 0x10
/*00000000bb08*/ s_load_dword    s3, s[4:5], 0xc
/*00000000bb10*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000bb18*/ v_lshl_or_b32   v0, s8, 6, v0
/*00000000bb20*/ v_mov_b32       v1, 0
/*00000000bb24*/ s_waitcnt       lgkmcnt(0)
/*00000000bb28*/ v_add_nc_u32    v0, s2, v0
/*00000000bb2c*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000bb34*/ v_sub_nc_u32    v3, s3, v0
/*00000000bb38*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000bb40*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000bb44*/ global_store_dword v[0:1], v3, off
/*00000000bb4c*/ s_endpgm
/*00000000bb50*/ s_nop           0x0
/*00000000bb54*/ s_nop           0x0
/*00000000bb58*/ s_nop           0x0
/*00000000bb5c*/ s_nop           0x0
/*00000000bb60*/ s_nop           0x0
/*00000000bb64*/ s_nop           0x0
/*00000000bb68*/ s_nop           0x0
/*00000000bb6c*/ s_nop           0x0
/*00000000bb70*/ s_nop           0x0
/*00000000bb74*/ s_nop           0x0
/*00000000bb78*/ s_nop           0x0
/*00000000bb7c*/ s_nop           0x0
/*00000000bb80*/ s_nop           0x0
/*00000000bb84*/ s_nop           0x0
/*00000000bb88*/ s_nop           0x0
/*00000000bb8c*/ s_nop           0x0
/*00000000bb90*/ s_nop           0x0
/*00000000bb94*/ s_nop           0x0
/*00000000bb98*/ s_nop           0x0
/*00000000bb9c*/ s_nop           0x0
/*00000000bba0*/ s_nop           0x0
/*00000000bba4*/ s_nop           0x0
/*00000000bba8*/ s_nop           0x0
/*00000000bbac*/ s_nop           0x0
/*00000000bbb0*/ s_nop           0x0
/*00000000bbb4*/ s_nop           0x0
/*00000000bbb8*/ s_nop           0x0
/*00000000bbbc*/ s_nop           0x0
/*00000000bbc0*/ s_nop           0x0
/*00000000bbc4*/ s_nop           0x0
/*00000000bbc8*/ s_nop           0x0
/*00000000bbcc*/ s_nop           0x0
/*00000000bbd0*/ s_nop           0x0
/*00000000bbd4*/ s_nop           0x0
/*00000000bbd8*/ s_nop           0x0
/*00000000bbdc*/ s_nop           0x0
/*00000000bbe0*/ s_nop           0x0
/*00000000bbe4*/ s_nop           0x0
/*00000000bbe8*/ s_nop           0x0
/*00000000bbec*/ s_nop           0x0
/*00000000bbf0*/ s_nop           0x0
/*00000000bbf4*/ s_nop           0x0
/*00000000bbf8*/ s_nop           0x0
/*00000000bbfc*/ s_nop           0x0
subtract_get_num_groups_64:
.skip 256
/*00000000bd00*/ s_load_dword    s2, s[6:7], 0x10
/*00000000bd08*/ s_load_dword    s3, s[4:5], 0xc
/*00000000bd10*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000bd18*/ v_lshl_or_b32   v0, s8, 6, v0
/*00000000bd20*/ v_mov_b32       v1, 0
/*00000000bd24*/ s_waitcnt       lgkmcnt(0)
/*00000000bd28*/ v_add_nc_u32    v0, s2, v0
/*00000000bd2c*/ s_lshr_b32      s2, s3, 6
/*00000000bd30*/ s_and_b32       s4, s3, 0xffffffc0
/*00000000bd38*/ v_cmp_gt_u32    vcc, s3, s4
/*00000000bd40*/ v_sub_nc_u32    v2, s2, v0
/*00000000bd44*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000bd4c*/ v_add_co_ci_u32 v2, vcc, 0, v2, vcc
/*00000000bd50*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000bd58*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000bd5c*/ global_store_dword v[0:1], v2, off
/*00000000bd64*/ s_endpgm
/*00000000bd68*/ s_nop           0x0
/*00000000bd6c*/ s_nop           0x0
/*00000000bd70*/ s_nop           0x0
/*00000000bd74*/ s_nop           0x0
/*00000000bd78*/ s_nop           0x0
/*00000000bd7c*/ s_nop           0x0
/*00000000bd80*/ s_nop           0x0
/*00000000bd84*/ s_nop           0x0
/*00000000bd88*/ s_nop           0x0
/*00000000bd8c*/ s_nop           0x0
/*00000000bd90*/ s_nop           0x0
/*00000000bd94*/ s_nop           0x0
/*00000000bd98*/ s_nop           0x0
/*00000000bd9c*/ s_nop           0x0
/*00000000bda0*/ s_nop           0x0
/*00000000bda4*/ s_nop           0x0
/*00000000bda8*/ s_nop           0x0
/*00000000bdac*/ s_nop           0x0
/*00000000bdb0*/ s_nop           0x0
/*00000000bdb4*/ s_nop           0x0
/*00000000bdb8*/ s_nop           0x0
/*00000000bdbc*/ s_nop           0x0
/*00000000bdc0*/ s_nop           0x0
/*00000000bdc4*/ s_nop           0x0
/*00000000bdc8*/ s_nop           0x0
/*00000000bdcc*/ s_nop           0x0
/*00000000bdd0*/ s_nop           0x0
/*00000000bdd4*/ s_nop           0x0
/*00000000bdd8*/ s_nop           0x0
/*00000000bddc*/ s_nop           0x0
/*00000000bde0*/ s_nop           0x0
/*00000000bde4*/ s_nop           0x0
/*00000000bde8*/ s_nop           0x0
/*00000000bdec*/ s_nop           0x0
/*00000000bdf0*/ s_nop           0x0
/*00000000bdf4*/ s_nop           0x0
/*00000000bdf8*/ s_nop           0x0
/*00000000bdfc*/ s_nop           0x0
subtract_get_work_dim:
.skip 256
/*00000000bf00*/ v_mov_b32       v1, s4
/*00000000bf04*/ v_mov_b32       v2, s5
/*00000000bf08*/ s_clause        0x1
/*00000000bf0c*/ s_load_dword    s2, s[6:7], 0x10
/*00000000bf14*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000bf1c*/ v_lshl_or_b32   v0, s8, 6, v0
/*00000000bf24*/ global_load_ushort v3, v[1:2], off inst_offset:2
/*00000000bf2c*/ v_mov_b32       v1, 0
/*00000000bf30*/ s_waitcnt       lgkmcnt(0)
/*00000000bf34*/ v_add_nc_u32    v0, s2, v0
/*00000000bf38*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000bf40*/ s_waitcnt       vmcnt(0)
/*00000000bf44*/ v_sub_nc_u32    v3, v3, v0
/*00000000bf48*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000bf50*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000bf54*/ global_store_dword v[0:1], v3, off
/*00000000bf5c*/ s_endpgm
/*00000000bf60*/ s_nop           0x0
/*00000000bf64*/ s_nop           0x0
/*00000000bf68*/ s_nop           0x0
/*00000000bf6c*/ s_nop           0x0
/*00000000bf70*/ s_nop           0x0
/*00000000bf74*/ s_nop           0x0
/*00000000bf78*/ s_nop           0x0
/*00000000bf7c*/ s_nop           0x0
/*00000000bf80*/ s_nop           0x0
/*00000000bf84*/ s_nop           0x0
/*00000000bf88*/ s_nop           0x0
/*00000000bf8c*/ s_nop           0x0
/*00000000bf90*/ s_nop           0x0
/*00000000bf94*/ s_nop           0x0
/*00000000bf98*/ s_nop           0x0
/*00000000bf9c*/ s_nop           0x0
/*00000000bfa0*/ s_nop           0x0
/*00000000bfa4*/ s_nop           0x0
/*00000000bfa8*/ s_nop           0x0
/*00000000bfac*/ s_nop           0x0
/*00000000bfb0*/ s_nop           0x0
/*00000000bfb4*/ s_nop           0x0
/*00000000bfb8*/ s_nop           0x0
/*00000000bfbc*/ s_nop           0x0
/*00000000bfc0*/ s_nop           0x0
/*00000000bfc4*/ s_nop           0x0
/*00000000bfc8*/ s_nop           0x0
/*00000000bfcc*/ s_nop           0x0
/*00000000bfd0*/ s_nop           0x0
/*00000000bfd4*/ s_nop           0x0
/*00000000bfd8*/ s_nop           0x0
/*00000000bfdc*/ s_nop           0x0
/*00000000bfe0*/ s_nop           0x0
/*00000000bfe4*/ s_nop           0x0
/*00000000bfe8*/ s_nop           0x0
/*00000000bfec*/ s_nop           0x0
/*00000000bff0*/ s_nop           0x0
/*00000000bff4*/ s_nop           0x0
/*00000000bff8*/ s_nop           0x0
/*00000000bffc*/ s_nop           0x0
subtract_x_8_8:
.skip 256
/*00000000c100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000c108*/ s_waitcnt       lgkmcnt(0)
/*00000000c10c*/ s_clause        0x1
/*00000000c110*/ s_load_dword    s1, s[4:5], 0x0
/*00000000c118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000c120*/ s_lshl_b32      s3, s6, 3
/*00000000c124*/ v_mov_b32       v3, 0
/*00000000c128*/ v_add3_u32      v2, s0, s3, v0
/*00000000c130*/ v_add_nc_u32    v4, s2, v1
/*00000000c134*/ s_lshl_b32      s0, s7, 3
/*00000000c138*/ s_waitcnt       lgkmcnt(0)
/*00000000c13c*/ s_sub_i32       s0, s1, s0
/*00000000c140*/ v_lshlrev_b64   v[0:1], 2, v[2:3]
/*00000000c148*/ v_sub_nc_u32    v2, s0, v4
/*00000000c14c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000c154*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000c158*/ global_store_dword v[0:1], v2, off
/*00000000c160*/ s_endpgm
/*00000000c164*/ s_nop           0x0
/*00000000c168*/ s_nop           0x0
/*00000000c16c*/ s_nop           0x0
/*00000000c170*/ s_nop           0x0
/*00000000c174*/ s_nop           0x0
/*00000000c178*/ s_nop           0x0
/*00000000c17c*/ s_nop           0x0
/*00000000c180*/ s_nop           0x0
/*00000000c184*/ s_nop           0x0
/*00000000c188*/ s_nop           0x0
/*00000000c18c*/ s_nop           0x0
/*00000000c190*/ s_nop           0x0
/*00000000c194*/ s_nop           0x0
/*00000000c198*/ s_nop           0x0
/*00000000c19c*/ s_nop           0x0
/*00000000c1a0*/ s_nop           0x0
/*00000000c1a4*/ s_nop           0x0
/*00000000c1a8*/ s_nop           0x0
/*00000000c1ac*/ s_nop           0x0
/*00000000c1b0*/ s_nop           0x0
/*00000000c1b4*/ s_nop           0x0
/*00000000c1b8*/ s_nop           0x0
/*00000000c1bc*/ s_nop           0x0
/*00000000c1c0*/ s_nop           0x0
/*00000000c1c4*/ s_nop           0x0
/*00000000c1c8*/ s_nop           0x0
/*00000000c1cc*/ s_nop           0x0
/*00000000c1d0*/ s_nop           0x0
/*00000000c1d4*/ s_nop           0x0
/*00000000c1d8*/ s_nop           0x0
/*00000000c1dc*/ s_nop           0x0
/*00000000c1e0*/ s_nop           0x0
/*00000000c1e4*/ s_nop           0x0
/*00000000c1e8*/ s_nop           0x0
/*00000000c1ec*/ s_nop           0x0
/*00000000c1f0*/ s_nop           0x0
/*00000000c1f4*/ s_nop           0x0
/*00000000c1f8*/ s_nop           0x0
/*00000000c1fc*/ s_nop           0x0
subtract_get_global_offset_8_8:
.skip 256
/*00000000c300*/ s_clause        0x1
/*00000000c304*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000c30c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000c314*/ s_waitcnt       lgkmcnt(0)
/*00000000c318*/ s_lshl_b32      s1, s6, 3
/*00000000c31c*/ v_mov_b32       v1, 0
/*00000000c320*/ v_add3_u32      v0, s0, s1, v0
/*00000000c328*/ s_sub_i32       s0, s0, s2
/*00000000c32c*/ v_mov_b32       v2, s0
/*00000000c330*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c338*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000c340*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000c344*/ global_store_dword v[0:1], v2, off
/*00000000c34c*/ s_endpgm
/*00000000c350*/ s_nop           0x0
/*00000000c354*/ s_nop           0x0
/*00000000c358*/ s_nop           0x0
/*00000000c35c*/ s_nop           0x0
/*00000000c360*/ s_nop           0x0
/*00000000c364*/ s_nop           0x0
/*00000000c368*/ s_nop           0x0
/*00000000c36c*/ s_nop           0x0
/*00000000c370*/ s_nop           0x0
/*00000000c374*/ s_nop           0x0
/*00000000c378*/ s_nop           0x0
/*00000000c37c*/ s_nop           0x0
/*00000000c380*/ s_nop           0x0
/*00000000c384*/ s_nop           0x0
/*00000000c388*/ s_nop           0x0
/*00000000c38c*/ s_nop           0x0
/*00000000c390*/ s_nop           0x0
/*00000000c394*/ s_nop           0x0
/*00000000c398*/ s_nop           0x0
/*00000000c39c*/ s_nop           0x0
/*00000000c3a0*/ s_nop           0x0
/*00000000c3a4*/ s_nop           0x0
/*00000000c3a8*/ s_nop           0x0
/*00000000c3ac*/ s_nop           0x0
/*00000000c3b0*/ s_nop           0x0
/*00000000c3b4*/ s_nop           0x0
/*00000000c3b8*/ s_nop           0x0
/*00000000c3bc*/ s_nop           0x0
/*00000000c3c0*/ s_nop           0x0
/*00000000c3c4*/ s_nop           0x0
/*00000000c3c8*/ s_nop           0x0
/*00000000c3cc*/ s_nop           0x0
/*00000000c3d0*/ s_nop           0x0
/*00000000c3d4*/ s_nop           0x0
/*00000000c3d8*/ s_nop           0x0
/*00000000c3dc*/ s_nop           0x0
/*00000000c3e0*/ s_nop           0x0
/*00000000c3e4*/ s_nop           0x0
/*00000000c3e8*/ s_nop           0x0
/*00000000c3ec*/ s_nop           0x0
/*00000000c3f0*/ s_nop           0x0
/*00000000c3f4*/ s_nop           0x0
/*00000000c3f8*/ s_nop           0x0
/*00000000c3fc*/ s_nop           0x0
subtract_get_local_id_8_8:
.skip 256
/*00000000c500*/ s_clause        0x1
/*00000000c504*/ s_load_dword    s2, s[4:5], 0x10
/*00000000c50c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000c514*/ s_lshl_b32      s3, s6, 3
/*00000000c518*/ v_mov_b32       v3, 0
/*00000000c51c*/ v_sub_nc_u32    v7, v0, v1
/*00000000c520*/ s_waitcnt       lgkmcnt(0)
/*00000000c524*/ v_add3_u32      v2, s2, s3, v0
/*00000000c52c*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*00000000c534*/ v_add_co_u32    v0, vcc, s0, v2
/*00000000c53c*/ v_add_co_ci_u32 v1, vcc, s1, v3, vcc
/*00000000c540*/ global_store_dword v[0:1], v7, off
/*00000000c548*/ s_endpgm
/*00000000c54c*/ s_nop           0x0
/*00000000c550*/ s_nop           0x0
/*00000000c554*/ s_nop           0x0
/*00000000c558*/ s_nop           0x0
/*00000000c55c*/ s_nop           0x0
/*00000000c560*/ s_nop           0x0
/*00000000c564*/ s_nop           0x0
/*00000000c568*/ s_nop           0x0
/*00000000c56c*/ s_nop           0x0
/*00000000c570*/ s_nop           0x0
/*00000000c574*/ s_nop           0x0
/*00000000c578*/ s_nop           0x0
/*00000000c57c*/ s_nop           0x0
/*00000000c580*/ s_nop           0x0
/*00000000c584*/ s_nop           0x0
/*00000000c588*/ s_nop           0x0
/*00000000c58c*/ s_nop           0x0
/*00000000c590*/ s_nop           0x0
/*00000000c594*/ s_nop           0x0
/*00000000c598*/ s_nop           0x0
/*00000000c59c*/ s_nop           0x0
/*00000000c5a0*/ s_nop           0x0
/*00000000c5a4*/ s_nop           0x0
/*00000000c5a8*/ s_nop           0x0
/*00000000c5ac*/ s_nop           0x0
/*00000000c5b0*/ s_nop           0x0
/*00000000c5b4*/ s_nop           0x0
/*00000000c5b8*/ s_nop           0x0
/*00000000c5bc*/ s_nop           0x0
/*00000000c5c0*/ s_nop           0x0
/*00000000c5c4*/ s_nop           0x0
/*00000000c5c8*/ s_nop           0x0
/*00000000c5cc*/ s_nop           0x0
/*00000000c5d0*/ s_nop           0x0
/*00000000c5d4*/ s_nop           0x0
/*00000000c5d8*/ s_nop           0x0
/*00000000c5dc*/ s_nop           0x0
/*00000000c5e0*/ s_nop           0x0
/*00000000c5e4*/ s_nop           0x0
/*00000000c5e8*/ s_nop           0x0
/*00000000c5ec*/ s_nop           0x0
/*00000000c5f0*/ s_nop           0x0
/*00000000c5f4*/ s_nop           0x0
/*00000000c5f8*/ s_nop           0x0
/*00000000c5fc*/ s_nop           0x0
subtract_get_group_id_8_8:
.skip 256
/*00000000c700*/ s_clause        0x1
/*00000000c704*/ s_load_dword    s2, s[4:5], 0x10
/*00000000c70c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000c714*/ s_lshl_b32      s3, s6, 3
/*00000000c718*/ v_mov_b32       v1, 0
/*00000000c71c*/ s_waitcnt       lgkmcnt(0)
/*00000000c720*/ v_add3_u32      v0, s2, s3, v0
/*00000000c728*/ s_sub_i32       s2, s6, s7
/*00000000c72c*/ v_mov_b32       v2, s2
/*00000000c730*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c738*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000c740*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000c744*/ global_store_dword v[0:1], v2, off
/*00000000c74c*/ s_endpgm
/*00000000c750*/ s_nop           0x0
/*00000000c754*/ s_nop           0x0
/*00000000c758*/ s_nop           0x0
/*00000000c75c*/ s_nop           0x0
/*00000000c760*/ s_nop           0x0
/*00000000c764*/ s_nop           0x0
/*00000000c768*/ s_nop           0x0
/*00000000c76c*/ s_nop           0x0
/*00000000c770*/ s_nop           0x0
/*00000000c774*/ s_nop           0x0
/*00000000c778*/ s_nop           0x0
/*00000000c77c*/ s_nop           0x0
/*00000000c780*/ s_nop           0x0
/*00000000c784*/ s_nop           0x0
/*00000000c788*/ s_nop           0x0
/*00000000c78c*/ s_nop           0x0
/*00000000c790*/ s_nop           0x0
/*00000000c794*/ s_nop           0x0
/*00000000c798*/ s_nop           0x0
/*00000000c79c*/ s_nop           0x0
/*00000000c7a0*/ s_nop           0x0
/*00000000c7a4*/ s_nop           0x0
/*00000000c7a8*/ s_nop           0x0
/*00000000c7ac*/ s_nop           0x0
/*00000000c7b0*/ s_nop           0x0
/*00000000c7b4*/ s_nop           0x0
/*00000000c7b8*/ s_nop           0x0
/*00000000c7bc*/ s_nop           0x0
/*00000000c7c0*/ s_nop           0x0
/*00000000c7c4*/ s_nop           0x0
/*00000000c7c8*/ s_nop           0x0
/*00000000c7cc*/ s_nop           0x0
/*00000000c7d0*/ s_nop           0x0
/*00000000c7d4*/ s_nop           0x0
/*00000000c7d8*/ s_nop           0x0
/*00000000c7dc*/ s_nop           0x0
/*00000000c7e0*/ s_nop           0x0
/*00000000c7e4*/ s_nop           0x0
/*00000000c7e8*/ s_nop           0x0
/*00000000c7ec*/ s_nop           0x0
/*00000000c7f0*/ s_nop           0x0
/*00000000c7f4*/ s_nop           0x0
/*00000000c7f8*/ s_nop           0x0
/*00000000c7fc*/ s_nop           0x0
subtract_get_local_size_8_8:
.skip 256
/*00000000c900*/ s_clause        0x1
/*00000000c904*/ s_load_dword    s2, s[4:5], 0x10
/*00000000c90c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000c914*/ s_lshl_b32      s3, s6, 3
/*00000000c918*/ v_mov_b32       v1, 0
/*00000000c91c*/ s_waitcnt       lgkmcnt(0)
/*00000000c920*/ v_add3_u32      v0, s2, s3, v0
/*00000000c928*/ v_lshlrev_b64   v[2:3], 2, v[0:1]
/*00000000c930*/ v_add_co_u32    v2, vcc, s0, v2
/*00000000c938*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000c93c*/ global_store_dword v[2:3], v1, off
/*00000000c944*/ s_endpgm
/*00000000c948*/ s_nop           0x0
/*00000000c94c*/ s_nop           0x0
/*00000000c950*/ s_nop           0x0
/*00000000c954*/ s_nop           0x0
/*00000000c958*/ s_nop           0x0
/*00000000c95c*/ s_nop           0x0
/*00000000c960*/ s_nop           0x0
/*00000000c964*/ s_nop           0x0
/*00000000c968*/ s_nop           0x0
/*00000000c96c*/ s_nop           0x0
/*00000000c970*/ s_nop           0x0
/*00000000c974*/ s_nop           0x0
/*00000000c978*/ s_nop           0x0
/*00000000c97c*/ s_nop           0x0
/*00000000c980*/ s_nop           0x0
/*00000000c984*/ s_nop           0x0
/*00000000c988*/ s_nop           0x0
/*00000000c98c*/ s_nop           0x0
/*00000000c990*/ s_nop           0x0
/*00000000c994*/ s_nop           0x0
/*00000000c998*/ s_nop           0x0
/*00000000c99c*/ s_nop           0x0
/*00000000c9a0*/ s_nop           0x0
/*00000000c9a4*/ s_nop           0x0
/*00000000c9a8*/ s_nop           0x0
/*00000000c9ac*/ s_nop           0x0
/*00000000c9b0*/ s_nop           0x0
/*00000000c9b4*/ s_nop           0x0
/*00000000c9b8*/ s_nop           0x0
/*00000000c9bc*/ s_nop           0x0
/*00000000c9c0*/ s_nop           0x0
/*00000000c9c4*/ s_nop           0x0
/*00000000c9c8*/ s_nop           0x0
/*00000000c9cc*/ s_nop           0x0
/*00000000c9d0*/ s_nop           0x0
/*00000000c9d4*/ s_nop           0x0
/*00000000c9d8*/ s_nop           0x0
/*00000000c9dc*/ s_nop           0x0
/*00000000c9e0*/ s_nop           0x0
/*00000000c9e4*/ s_nop           0x0
/*00000000c9e8*/ s_nop           0x0
/*00000000c9ec*/ s_nop           0x0
/*00000000c9f0*/ s_nop           0x0
/*00000000c9f4*/ s_nop           0x0
/*00000000c9f8*/ s_nop           0x0
/*00000000c9fc*/ s_nop           0x0
subtract_get_global_id_8_8:
.skip 256
/*00000000cb00*/ s_clause        0x1
/*00000000cb04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000cb0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000cb14*/ v_lshl_or_b32   v0, s6, 3, v0
/*00000000cb1c*/ v_lshl_or_b32   v3, s7, 3, v1
/*00000000cb24*/ v_mov_b32       v2, 0
/*00000000cb28*/ s_waitcnt       lgkmcnt(0)
/*00000000cb2c*/ v_add_nc_u32    v1, s0, v0
/*00000000cb30*/ v_add_nc_u32    v0, s2, v3
/*00000000cb34*/ v_lshlrev_b64   v[2:3], 2, v[1:2]
/*00000000cb3c*/ v_sub_nc_u32    v7, v1, v0
/*00000000cb40*/ v_add_co_u32    v0, vcc, s4, v2
/*00000000cb48*/ v_add_co_ci_u32 v1, vcc, s5, v3, vcc
/*00000000cb4c*/ global_store_dword v[0:1], v7, off
/*00000000cb54*/ s_endpgm
/*00000000cb58*/ s_nop           0x0
/*00000000cb5c*/ s_nop           0x0
/*00000000cb60*/ s_nop           0x0
/*00000000cb64*/ s_nop           0x0
/*00000000cb68*/ s_nop           0x0
/*00000000cb6c*/ s_nop           0x0
/*00000000cb70*/ s_nop           0x0
/*00000000cb74*/ s_nop           0x0
/*00000000cb78*/ s_nop           0x0
/*00000000cb7c*/ s_nop           0x0
/*00000000cb80*/ s_nop           0x0
/*00000000cb84*/ s_nop           0x0
/*00000000cb88*/ s_nop           0x0
/*00000000cb8c*/ s_nop           0x0
/*00000000cb90*/ s_nop           0x0
/*00000000cb94*/ s_nop           0x0
/*00000000cb98*/ s_nop           0x0
/*00000000cb9c*/ s_nop           0x0
/*00000000cba0*/ s_nop           0x0
/*00000000cba4*/ s_nop           0x0
/*00000000cba8*/ s_nop           0x0
/*00000000cbac*/ s_nop           0x0
/*00000000cbb0*/ s_nop           0x0
/*00000000cbb4*/ s_nop           0x0
/*00000000cbb8*/ s_nop           0x0
/*00000000cbbc*/ s_nop           0x0
/*00000000cbc0*/ s_nop           0x0
/*00000000cbc4*/ s_nop           0x0
/*00000000cbc8*/ s_nop           0x0
/*00000000cbcc*/ s_nop           0x0
/*00000000cbd0*/ s_nop           0x0
/*00000000cbd4*/ s_nop           0x0
/*00000000cbd8*/ s_nop           0x0
/*00000000cbdc*/ s_nop           0x0
/*00000000cbe0*/ s_nop           0x0
/*00000000cbe4*/ s_nop           0x0
/*00000000cbe8*/ s_nop           0x0
/*00000000cbec*/ s_nop           0x0
/*00000000cbf0*/ s_nop           0x0
/*00000000cbf4*/ s_nop           0x0
/*00000000cbf8*/ s_nop           0x0
/*00000000cbfc*/ s_nop           0x0
subtract_get_global_size_8_8:
.skip 256
/*00000000cd00*/ s_load_dword    s9, s[6:7], 0x10
/*00000000cd08*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000000cd10*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000000cd18*/ s_lshl_b32      s4, s8, 3
/*00000000cd1c*/ v_mov_b32       v1, 0
/*00000000cd20*/ s_waitcnt       lgkmcnt(0)
/*00000000cd24*/ v_add3_u32      v0, s9, s4, v0
/*00000000cd2c*/ s_sub_i32       s0, s0, s1
/*00000000cd30*/ v_mov_b32       v2, s0
/*00000000cd34*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000cd3c*/ v_add_co_u32    v0, vcc, s2, v0
/*00000000cd44*/ v_add_co_ci_u32 v1, vcc, s3, v1, vcc
/*00000000cd48*/ global_store_dword v[0:1], v2, off
/*00000000cd50*/ s_endpgm
/*00000000cd54*/ s_nop           0x0
/*00000000cd58*/ s_nop           0x0
/*00000000cd5c*/ s_nop           0x0
/*00000000cd60*/ s_nop           0x0
/*00000000cd64*/ s_nop           0x0
/*00000000cd68*/ s_nop           0x0
/*00000000cd6c*/ s_nop           0x0
/*00000000cd70*/ s_nop           0x0
/*00000000cd74*/ s_nop           0x0
/*00000000cd78*/ s_nop           0x0
/*00000000cd7c*/ s_nop           0x0
/*00000000cd80*/ s_nop           0x0
/*00000000cd84*/ s_nop           0x0
/*00000000cd88*/ s_nop           0x0
/*00000000cd8c*/ s_nop           0x0
/*00000000cd90*/ s_nop           0x0
/*00000000cd94*/ s_nop           0x0
/*00000000cd98*/ s_nop           0x0
/*00000000cd9c*/ s_nop           0x0
/*00000000cda0*/ s_nop           0x0
/*00000000cda4*/ s_nop           0x0
/*00000000cda8*/ s_nop           0x0
/*00000000cdac*/ s_nop           0x0
/*00000000cdb0*/ s_nop           0x0
/*00000000cdb4*/ s_nop           0x0
/*00000000cdb8*/ s_nop           0x0
/*00000000cdbc*/ s_nop           0x0
/*00000000cdc0*/ s_nop           0x0
/*00000000cdc4*/ s_nop           0x0
/*00000000cdc8*/ s_nop           0x0
/*00000000cdcc*/ s_nop           0x0
/*00000000cdd0*/ s_nop           0x0
/*00000000cdd4*/ s_nop           0x0
/*00000000cdd8*/ s_nop           0x0
/*00000000cddc*/ s_nop           0x0
/*00000000cde0*/ s_nop           0x0
/*00000000cde4*/ s_nop           0x0
/*00000000cde8*/ s_nop           0x0
/*00000000cdec*/ s_nop           0x0
/*00000000cdf0*/ s_nop           0x0
/*00000000cdf4*/ s_nop           0x0
/*00000000cdf8*/ s_nop           0x0
/*00000000cdfc*/ s_nop           0x0
subtract_get_num_groups_8_8:
.skip 256
/*00000000cf00*/ s_load_dword    s9, s[6:7], 0x10
/*00000000cf08*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000000cf10*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000000cf18*/ s_lshl_b32      s4, s8, 3
/*00000000cf1c*/ v_mov_b32       v1, 0
/*00000000cf20*/ s_waitcnt       lgkmcnt(0)
/*00000000cf24*/ v_add3_u32      v0, s9, s4, v0
/*00000000cf2c*/ s_and_b32       s4, s0, -8
/*00000000cf30*/ s_lshr_b32      s5, s0, 3
/*00000000cf34*/ v_cmp_gt_u32    s[0:1], s0, s4
/*00000000cf3c*/ s_and_b32       s4, s1, -8
/*00000000cf40*/ s_lshr_b32      s6, s1, 3
/*00000000cf44*/ v_cmp_gt_u32    s[1:2], s1, s4
/*00000000cf4c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000cf54*/ s_sub_i32       s4, s5, s6
/*00000000cf58*/ s_cmpk_lg_u32   s0, 0x0
/*00000000cf5c*/ s_addc_u32      s0, s4, 0
/*00000000cf60*/ s_cmpk_lg_u32   s1, 0x0
/*00000000cf64*/ v_add_co_u32    v0, vcc, s2, v0
/*00000000cf6c*/ s_subb_u32      s0, s0, 0
/*00000000cf70*/ v_add_co_ci_u32 v1, vcc, s3, v1, vcc
/*00000000cf74*/ v_mov_b32       v2, s0
/*00000000cf78*/ global_store_dword v[0:1], v2, off
/*00000000cf80*/ s_endpgm
/*00000000cf84*/ s_nop           0x0
/*00000000cf88*/ s_nop           0x0
/*00000000cf8c*/ s_nop           0x0
/*00000000cf90*/ s_nop           0x0
/*00000000cf94*/ s_nop           0x0
/*00000000cf98*/ s_nop           0x0
/*00000000cf9c*/ s_nop           0x0
/*00000000cfa0*/ s_nop           0x0
/*00000000cfa4*/ s_nop           0x0
/*00000000cfa8*/ s_nop           0x0
/*00000000cfac*/ s_nop           0x0
/*00000000cfb0*/ s_nop           0x0
/*00000000cfb4*/ s_nop           0x0
/*00000000cfb8*/ s_nop           0x0
/*00000000cfbc*/ s_nop           0x0
/*00000000cfc0*/ s_nop           0x0
/*00000000cfc4*/ s_nop           0x0
/*00000000cfc8*/ s_nop           0x0
/*00000000cfcc*/ s_nop           0x0
/*00000000cfd0*/ s_nop           0x0
/*00000000cfd4*/ s_nop           0x0
/*00000000cfd8*/ s_nop           0x0
/*00000000cfdc*/ s_nop           0x0
/*00000000cfe0*/ s_nop           0x0
/*00000000cfe4*/ s_nop           0x0
/*00000000cfe8*/ s_nop           0x0
/*00000000cfec*/ s_nop           0x0
/*00000000cff0*/ s_nop           0x0
/*00000000cff4*/ s_nop           0x0
/*00000000cff8*/ s_nop           0x0
/*00000000cffc*/ s_nop           0x0
subtract_get_work_dim_8_8:
.skip 256
/*00000000d100*/ v_mov_b32       v2, s4
/*00000000d104*/ v_mov_b32       v3, s5
/*00000000d108*/ s_clause        0x1
/*00000000d10c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000d114*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000d11c*/ s_waitcnt       lgkmcnt(0)
/*00000000d120*/ s_lshl_b32      s1, s8, 3
/*00000000d124*/ v_lshl_or_b32   v4, s9, 3, v1
/*00000000d12c*/ global_load_ushort v3, v[2:3], off inst_offset:2
/*00000000d134*/ v_mov_b32       v2, 0
/*00000000d138*/ v_add3_u32      v1, s0, s1, v0
/*00000000d140*/ v_add_nc_u32    v4, s2, v4
/*00000000d144*/ v_lshlrev_b64   v[0:1], 2, v[1:2]
/*00000000d14c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d154*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d158*/ s_waitcnt       vmcnt(0)
/*00000000d15c*/ v_sub_nc_u32    v2, v3, v4
/*00000000d160*/ global_store_dword v[0:1], v2, off
/*00000000d168*/ s_endpgm
/*00000000d16c*/ s_nop           0x0
/*00000000d170*/ s_nop           0x0
/*00000000d174*/ s_nop           0x0
/*00000000d178*/ s_nop           0x0
/*00000000d17c*/ s_nop           0x0
/*00000000d180*/ s_nop           0x0
/*00000000d184*/ s_nop           0x0
/*00000000d188*/ s_nop           0x0
/*00000000d18c*/ s_nop           0x0
/*00000000d190*/ s_nop           0x0
/*00000000d194*/ s_nop           0x0
/*00000000d198*/ s_nop           0x0
/*00000000d19c*/ s_nop           0x0
/*00000000d1a0*/ s_nop           0x0
/*00000000d1a4*/ s_nop           0x0
/*00000000d1a8*/ s_nop           0x0
/*00000000d1ac*/ s_nop           0x0
/*00000000d1b0*/ s_nop           0x0
/*00000000d1b4*/ s_nop           0x0
/*00000000d1b8*/ s_nop           0x0
/*00000000d1bc*/ s_nop           0x0
/*00000000d1c0*/ s_nop           0x0
/*00000000d1c4*/ s_nop           0x0
/*00000000d1c8*/ s_nop           0x0
/*00000000d1cc*/ s_nop           0x0
/*00000000d1d0*/ s_nop           0x0
/*00000000d1d4*/ s_nop           0x0
/*00000000d1d8*/ s_nop           0x0
/*00000000d1dc*/ s_nop           0x0
/*00000000d1e0*/ s_nop           0x0
/*00000000d1e4*/ s_nop           0x0
/*00000000d1e8*/ s_nop           0x0
/*00000000d1ec*/ s_nop           0x0
/*00000000d1f0*/ s_nop           0x0
/*00000000d1f4*/ s_nop           0x0
/*00000000d1f8*/ s_nop           0x0
/*00000000d1fc*/ s_nop           0x0
subtract_long_x_x:
.skip 256
/*00000000d300*/ s_clause        0x1
/*00000000d304*/ s_load_dword    s2, s[4:5], 0x10
/*00000000d30c*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000000d314*/ s_lshl_b32      s3, s6, 6
/*00000000d318*/ v_mov_b32       v1, 0
/*00000000d31c*/ s_waitcnt       lgkmcnt(0)
/*00000000d320*/ v_add3_u32      v0, s2, s3, v0
/*00000000d328*/ v_lshlrev_b64   v[2:3], 3, v[0:1]
/*00000000d330*/ v_mov_b32       v0, v1
/*00000000d334*/ v_add_co_u32    v2, vcc, s0, v2
/*00000000d33c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000d340*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000000d348*/ s_endpgm
/*00000000d34c*/ s_nop           0x0
/*00000000d350*/ s_nop           0x0
/*00000000d354*/ s_nop           0x0
/*00000000d358*/ s_nop           0x0
/*00000000d35c*/ s_nop           0x0
/*00000000d360*/ s_nop           0x0
/*00000000d364*/ s_nop           0x0
/*00000000d368*/ s_nop           0x0
/*00000000d36c*/ s_nop           0x0
/*00000000d370*/ s_nop           0x0
/*00000000d374*/ s_nop           0x0
/*00000000d378*/ s_nop           0x0
/*00000000d37c*/ s_nop           0x0
/*00000000d380*/ s_nop           0x0
/*00000000d384*/ s_nop           0x0
/*00000000d388*/ s_nop           0x0
/*00000000d38c*/ s_nop           0x0
/*00000000d390*/ s_nop           0x0
/*00000000d394*/ s_nop           0x0
/*00000000d398*/ s_nop           0x0
/*00000000d39c*/ s_nop           0x0
/*00000000d3a0*/ s_nop           0x0
/*00000000d3a4*/ s_nop           0x0
/*00000000d3a8*/ s_nop           0x0
/*00000000d3ac*/ s_nop           0x0
/*00000000d3b0*/ s_nop           0x0
/*00000000d3b4*/ s_nop           0x0
/*00000000d3b8*/ s_nop           0x0
/*00000000d3bc*/ s_nop           0x0
/*00000000d3c0*/ s_nop           0x0
/*00000000d3c4*/ s_nop           0x0
/*00000000d3c8*/ s_nop           0x0
/*00000000d3cc*/ s_nop           0x0
/*00000000d3d0*/ s_nop           0x0
/*00000000d3d4*/ s_nop           0x0
/*00000000d3d8*/ s_nop           0x0
/*00000000d3dc*/ s_nop           0x0
/*00000000d3e0*/ s_nop           0x0
/*00000000d3e4*/ s_nop           0x0
/*00000000d3e8*/ s_nop           0x0
/*00000000d3ec*/ s_nop           0x0
/*00000000d3f0*/ s_nop           0x0
/*00000000d3f4*/ s_nop           0x0
/*00000000d3f8*/ s_nop           0x0
/*00000000d3fc*/ s_nop           0x0
subtract_long_get_global_offset_x:
.skip 256
/*00000000d500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000d508*/ s_waitcnt       lgkmcnt(0)
/*00000000d50c*/ s_clause        0x2
/*00000000d510*/ s_load_dword    s1, s[4:5], 0x20
/*00000000d518*/ s_load_dword    s3, s[4:5], 0x0
/*00000000d520*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000d528*/ v_mov_b32       v3, 0
/*00000000d52c*/ s_lshl_b32      s6, s6, 1
/*00000000d530*/ s_lshl_b32      s7, s7, 4
/*00000000d534*/ s_lshl_b32      s8, s8, 1
/*00000000d538*/ v_mov_b32       v5, v3
/*00000000d53c*/ v_mov_b32       v7, v3
/*00000000d540*/ v_mov_b32       v9, v3
/*00000000d544*/ s_waitcnt       lgkmcnt(0)
/*00000000d548*/ v_add3_u32      v8, s1, s8, v2
/*00000000d550*/ v_add3_u32      v4, s0, s6, v0
/*00000000d558*/ v_add3_u32      v6, s2, s7, v1
/*00000000d560*/ s_sub_i32       s0, s0, s3
/*00000000d564*/ s_sub_i32       s2, s2, s3
/*00000000d568*/ v_mov_b32       v2, s0
/*00000000d56c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000d574*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000d57c*/ s_sub_i32       s0, s1, s3
/*00000000d580*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d588*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d58c*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000d594*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000d598*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000d5a0*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000d5a8*/ v_mov_b32       v2, s2
/*00000000d5ac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d5b4*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000d5bc*/ v_mov_b32       v2, s0
/*00000000d5c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d5c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000d5cc*/ s_endpgm
/*00000000d5d0*/ s_nop           0x0
/*00000000d5d4*/ s_nop           0x0
/*00000000d5d8*/ s_nop           0x0
/*00000000d5dc*/ s_nop           0x0
/*00000000d5e0*/ s_nop           0x0
/*00000000d5e4*/ s_nop           0x0
/*00000000d5e8*/ s_nop           0x0
/*00000000d5ec*/ s_nop           0x0
/*00000000d5f0*/ s_nop           0x0
/*00000000d5f4*/ s_nop           0x0
/*00000000d5f8*/ s_nop           0x0
/*00000000d5fc*/ s_nop           0x0
subtract_long_get_local_id_x:
.skip 256
/*00000000d700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000d708*/ s_waitcnt       lgkmcnt(0)
/*00000000d70c*/ s_clause        0x2
/*00000000d710*/ s_load_dword    s1, s[4:5], 0x20
/*00000000d718*/ s_load_dword    s3, s[4:5], 0x0
/*00000000d720*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000d728*/ v_mov_b32       v15, 0
/*00000000d72c*/ s_lshl_b32      s6, s6, 3
/*00000000d730*/ v_mov_b32       v6, v15
/*00000000d734*/ v_mov_b32       v8, v15
/*00000000d738*/ v_mov_b32       v10, v15
/*00000000d73c*/ v_add3_u32      v5, s0, s6, v0
/*00000000d744*/ s_lshl_b32      s0, s7, 2
/*00000000d748*/ s_lshl_b32      s6, s8, 1
/*00000000d74c*/ v_add3_u32      v7, s2, s0, v1
/*00000000d754*/ s_waitcnt       lgkmcnt(0)
/*00000000d758*/ v_add3_u32      v9, s1, s6, v2
/*00000000d760*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000d768*/ v_subrev_nc_u32 v14, s3, v0
/*00000000d76c*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000d774*/ v_add_co_u32    v4, vcc, s4, v5
/*00000000d77c*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000d780*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000d788*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*00000000d78c*/ global_store_dwordx2 v[4:5], v[14:15], off
/*00000000d794*/ v_subrev_nc_u32 v14, s3, v1
/*00000000d798*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*00000000d7a0*/ global_store_dwordx2 v[7:8], v[14:15], off
/*00000000d7a8*/ v_subrev_nc_u32 v14, s3, v2
/*00000000d7ac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d7b4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d7b8*/ global_store_dwordx2 v[0:1], v[14:15], off
/*00000000d7c0*/ s_endpgm
/*00000000d7c4*/ s_nop           0x0
/*00000000d7c8*/ s_nop           0x0
/*00000000d7cc*/ s_nop           0x0
/*00000000d7d0*/ s_nop           0x0
/*00000000d7d4*/ s_nop           0x0
/*00000000d7d8*/ s_nop           0x0
/*00000000d7dc*/ s_nop           0x0
/*00000000d7e0*/ s_nop           0x0
/*00000000d7e4*/ s_nop           0x0
/*00000000d7e8*/ s_nop           0x0
/*00000000d7ec*/ s_nop           0x0
/*00000000d7f0*/ s_nop           0x0
/*00000000d7f4*/ s_nop           0x0
/*00000000d7f8*/ s_nop           0x0
/*00000000d7fc*/ s_nop           0x0
subtract_long_get_group_id_x:
.skip 256
/*00000000d900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000d908*/ s_waitcnt       lgkmcnt(0)
/*00000000d90c*/ s_clause        0x2
/*00000000d910*/ s_load_dword    s1, s[4:5], 0x20
/*00000000d918*/ s_load_dword    s3, s[4:5], 0x0
/*00000000d920*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000d928*/ v_mov_b32       v3, 0
/*00000000d92c*/ s_lshl_b32      s9, s6, 1
/*00000000d930*/ s_lshl_b32      s10, s7, 4
/*00000000d934*/ s_lshl_b32      s11, s8, 1
/*00000000d938*/ v_mov_b32       v5, v3
/*00000000d93c*/ v_mov_b32       v7, v3
/*00000000d940*/ v_mov_b32       v9, v3
/*00000000d944*/ s_waitcnt       lgkmcnt(0)
/*00000000d948*/ v_add3_u32      v8, s1, s11, v2
/*00000000d950*/ v_add3_u32      v4, s0, s9, v0
/*00000000d958*/ v_add3_u32      v6, s2, s10, v1
/*00000000d960*/ s_sub_i32       s0, s6, s3
/*00000000d964*/ s_sub_i32       s1, s7, s3
/*00000000d968*/ v_mov_b32       v2, s0
/*00000000d96c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000d974*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000d97c*/ s_sub_i32       s0, s8, s3
/*00000000d980*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d988*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d98c*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000d994*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000d998*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000d9a0*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000d9a8*/ v_mov_b32       v2, s1
/*00000000d9ac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d9b4*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000d9bc*/ v_mov_b32       v2, s0
/*00000000d9c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d9c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000d9cc*/ s_endpgm
/*00000000d9d0*/ s_nop           0x0
/*00000000d9d4*/ s_nop           0x0
/*00000000d9d8*/ s_nop           0x0
/*00000000d9dc*/ s_nop           0x0
/*00000000d9e0*/ s_nop           0x0
/*00000000d9e4*/ s_nop           0x0
/*00000000d9e8*/ s_nop           0x0
/*00000000d9ec*/ s_nop           0x0
/*00000000d9f0*/ s_nop           0x0
/*00000000d9f4*/ s_nop           0x0
/*00000000d9f8*/ s_nop           0x0
/*00000000d9fc*/ s_nop           0x0
subtract_long_get_local_size_x:
.skip 256
/*00000000db00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000db08*/ s_waitcnt       lgkmcnt(0)
/*00000000db0c*/ s_clause        0x2
/*00000000db10*/ s_load_dword    s3, s[4:5], 0x20
/*00000000db18*/ s_load_dword    s9, s[4:5], 0x0
/*00000000db20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000db28*/ v_mov_b32       v4, 0
/*00000000db2c*/ s_lshl_b32      s6, s6, 1
/*00000000db30*/ s_lshl_b32      s7, s7, 1
/*00000000db34*/ s_lshl_b32      s8, s8, 2
/*00000000db38*/ s_mov_b32       s1, 0
/*00000000db3c*/ v_mov_b32       v6, v4
/*00000000db40*/ v_mov_b32       v8, v4
/*00000000db44*/ s_waitcnt       lgkmcnt(0)
/*00000000db48*/ v_add3_u32      v7, s3, s8, v2
/*00000000db50*/ v_add3_u32      v3, s0, s6, v0
/*00000000db58*/ v_add3_u32      v5, s2, s7, v1
/*00000000db60*/ s_sub_i32       s0, 2, s9
/*00000000db64*/ v_mov_b32       v10, s1
/*00000000db68*/ s_sub_i32       s2, 4, s9
/*00000000db6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000db74*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000db7c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*00000000db84*/ v_mov_b32       v9, s0
/*00000000db88*/ v_add_co_u32    v11, vcc, s4, v0
/*00000000db90*/ v_add_co_ci_u32 v12, vcc, s5, v1, vcc
/*00000000db94*/ v_add_co_u32    v7, vcc, s4, v2
/*00000000db9c*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*00000000dba0*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000dba8*/ v_mov_b32       v3, s2
/*00000000dbac*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000dbb0*/ global_store_dwordx2 v[11:12], v[9:10], off
/*00000000dbb8*/ global_store_dwordx2 v[7:8], v[9:10], off
/*00000000dbc0*/ global_store_dwordx2 v[5:6], v[3:4], off
/*00000000dbc8*/ s_endpgm
/*00000000dbcc*/ s_nop           0x0
/*00000000dbd0*/ s_nop           0x0
/*00000000dbd4*/ s_nop           0x0
/*00000000dbd8*/ s_nop           0x0
/*00000000dbdc*/ s_nop           0x0
/*00000000dbe0*/ s_nop           0x0
/*00000000dbe4*/ s_nop           0x0
/*00000000dbe8*/ s_nop           0x0
/*00000000dbec*/ s_nop           0x0
/*00000000dbf0*/ s_nop           0x0
/*00000000dbf4*/ s_nop           0x0
/*00000000dbf8*/ s_nop           0x0
/*00000000dbfc*/ s_nop           0x0
subtract_long_get_global_id_x:
.skip 256
/*00000000dd00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000dd08*/ s_waitcnt       lgkmcnt(0)
/*00000000dd0c*/ s_clause        0x2
/*00000000dd10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000dd18*/ s_load_dword    s3, s[4:5], 0x0
/*00000000dd20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000dd28*/ v_mov_b32       v4, 0
/*00000000dd2c*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000dd34*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000000dd3c*/ v_lshl_or_b32   v0, s8, 2, v2
/*00000000dd44*/ v_mov_b32       v6, v4
/*00000000dd48*/ v_mov_b32       v10, v4
/*00000000dd4c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*00000000dd54*/ v_mov_b32       v1, v4
/*00000000dd58*/ s_waitcnt       lgkmcnt(0)
/*00000000dd5c*/ v_add_nc_u32    v9, s1, v0
/*00000000dd60*/ v_add_nc_u32    v5, s2, v5
/*00000000dd64*/ v_subrev_nc_u32 v0, s3, v3
/*00000000dd68*/ v_lshlrev_b64   v[13:14], 3, v[9:10]
/*00000000dd70*/ v_lshlrev_b64   v[11:12], 3, v[5:6]
/*00000000dd78*/ v_add_co_u32    v6, vcc, s4, v7
/*00000000dd80*/ v_add_nc_u32    v0, s0, v0
/*00000000dd84*/ v_add_co_ci_u32 v7, vcc, s5, v8, vcc
/*00000000dd88*/ v_subrev_nc_u32 v3, s3, v5
/*00000000dd8c*/ v_add_co_u32    v17, vcc, s4, v11
/*00000000dd94*/ v_add_co_ci_u32 v18, vcc, s5, v12, vcc
/*00000000dd98*/ global_store_dwordx2 v[6:7], v[0:1], off
/*00000000dda0*/ global_store_dwordx2 v[17:18], v[3:4], off
/*00000000dda8*/ v_add_co_u32    v1, vcc, s4, v13
/*00000000ddb0*/ v_subrev_nc_u32 v3, s3, v9
/*00000000ddb4*/ v_add_co_ci_u32 v2, vcc, s5, v14, vcc
/*00000000ddb8*/ global_store_dwordx2 v[1:2], v[3:4], off
/*00000000ddc0*/ s_endpgm
/*00000000ddc4*/ s_nop           0x0
/*00000000ddc8*/ s_nop           0x0
/*00000000ddcc*/ s_nop           0x0
/*00000000ddd0*/ s_nop           0x0
/*00000000ddd4*/ s_nop           0x0
/*00000000ddd8*/ s_nop           0x0
/*00000000dddc*/ s_nop           0x0
/*00000000dde0*/ s_nop           0x0
/*00000000dde4*/ s_nop           0x0
/*00000000dde8*/ s_nop           0x0
/*00000000ddec*/ s_nop           0x0
/*00000000ddf0*/ s_nop           0x0
/*00000000ddf4*/ s_nop           0x0
/*00000000ddf8*/ s_nop           0x0
/*00000000ddfc*/ s_nop           0x0
subtract_long_get_global_size_x:
.skip 256
/*00000000df00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000df08*/ s_waitcnt       lgkmcnt(0)
/*00000000df0c*/ s_clause        0x1
/*00000000df10*/ s_load_dword    s1, s[6:7], 0x20
/*00000000df18*/ s_load_dword    s3, s[6:7], 0x8
/*00000000df20*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000df28*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000000df30*/ v_mov_b32       v3, 0
/*00000000df34*/ s_lshl_b32      s6, s8, 4
/*00000000df38*/ s_lshl_b32      s7, s9, 1
/*00000000df3c*/ s_lshl_b32      s8, s10, 1
/*00000000df40*/ v_mov_b32       v5, v3
/*00000000df44*/ v_mov_b32       v7, v3
/*00000000df48*/ v_mov_b32       v9, v3
/*00000000df4c*/ s_waitcnt       lgkmcnt(0)
/*00000000df50*/ v_add3_u32      v8, s1, s8, v2
/*00000000df58*/ v_add3_u32      v4, s0, s6, v0
/*00000000df60*/ v_add3_u32      v6, s2, s7, v1
/*00000000df68*/ s_sub_i32       s0, s12, s3
/*00000000df6c*/ s_sub_i32       s1, s13, s3
/*00000000df70*/ v_mov_b32       v2, s0
/*00000000df74*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000df7c*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000df84*/ s_sub_i32       s0, s14, s3
/*00000000df88*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000df90*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000df94*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000df9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000dfa0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000dfa8*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000dfb0*/ v_mov_b32       v2, s1
/*00000000dfb4*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000dfbc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000dfc4*/ v_mov_b32       v2, s0
/*00000000dfc8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000dfcc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000dfd4*/ s_endpgm
/*00000000dfd8*/ s_nop           0x0
/*00000000dfdc*/ s_nop           0x0
/*00000000dfe0*/ s_nop           0x0
/*00000000dfe4*/ s_nop           0x0
/*00000000dfe8*/ s_nop           0x0
/*00000000dfec*/ s_nop           0x0
/*00000000dff0*/ s_nop           0x0
/*00000000dff4*/ s_nop           0x0
/*00000000dff8*/ s_nop           0x0
/*00000000dffc*/ s_nop           0x0
subtract_long_get_num_groups_x:
.skip 256
/*00000000e100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000e108*/ s_waitcnt       lgkmcnt(0)
/*00000000e10c*/ s_load_dword    s1, s[6:7], 0x20
/*00000000e114*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000e11c*/ s_clause        0x1
/*00000000e120*/ s_load_dword    s3, s[6:7], 0x0
/*00000000e128*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000e130*/ v_mov_b32       v3, 0
/*00000000e134*/ s_lshl_b32      s8, s8, 1
/*00000000e138*/ s_lshl_b32      s6, s9, 1
/*00000000e13c*/ s_lshl_b32      s7, s10, 2
/*00000000e140*/ v_mov_b32       v5, v3
/*00000000e144*/ v_mov_b32       v7, v3
/*00000000e148*/ s_waitcnt       lgkmcnt(0)
/*00000000e14c*/ v_add3_u32      v6, s1, s7, v2
/*00000000e154*/ v_add3_u32      v4, s2, s6, v1
/*00000000e15c*/ v_add3_u32      v0, s0, s8, v0
/*00000000e164*/ v_mov_b32       v1, v3
/*00000000e168*/ s_and_b32       s1, s12, -2
/*00000000e16c*/ s_lshr_b32      s0, s12, 1
/*00000000e170*/ v_cmp_gt_u32    s[1:2], s12, s1
/*00000000e178*/ s_and_b32       s6, s13, -2
/*00000000e17c*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*00000000e184*/ s_lshr_b32      s2, s13, 1
/*00000000e188*/ s_lshr_b32      s7, s14, 2
/*00000000e18c*/ s_and_b32       s8, s14, -4
/*00000000e190*/ s_sub_i32       s0, s0, s3
/*00000000e194*/ s_cmpk_lg_u32   s1, 0x0
/*00000000e198*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e1a0*/ s_addc_u32      s0, s0, 0
/*00000000e1a4*/ v_cmp_gt_u32    s[6:7], s13, s6
/*00000000e1ac*/ v_lshlrev_b64   v[4:5], 3, v[4:5]
/*00000000e1b4*/ v_mov_b32       v2, s0
/*00000000e1b8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e1bc*/ s_sub_i32       s0, s2, s3
/*00000000e1c0*/ s_cmpk_lg_u32   s6, 0x0
/*00000000e1c4*/ v_cmp_gt_u32    s[1:2], s14, s8
/*00000000e1cc*/ s_addc_u32      s0, s0, 0
/*00000000e1d0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e1d8*/ v_add_co_u32    v0, vcc, s4, v4
/*00000000e1e0*/ v_mov_b32       v2, s0
/*00000000e1e4*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*00000000e1e8*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000e1f0*/ s_sub_i32       s0, s7, s3
/*00000000e1f4*/ s_cmpk_lg_u32   s1, 0x0
/*00000000e1f8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e200*/ s_addc_u32      s0, s0, 0
/*00000000e204*/ v_add_co_u32    v0, vcc, s4, v4
/*00000000e20c*/ v_mov_b32       v2, s0
/*00000000e210*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*00000000e214*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e21c*/ s_endpgm
/*00000000e220*/ s_nop           0x0
/*00000000e224*/ s_nop           0x0
/*00000000e228*/ s_nop           0x0
/*00000000e22c*/ s_nop           0x0
/*00000000e230*/ s_nop           0x0
/*00000000e234*/ s_nop           0x0
/*00000000e238*/ s_nop           0x0
/*00000000e23c*/ s_nop           0x0
/*00000000e240*/ s_nop           0x0
/*00000000e244*/ s_nop           0x0
/*00000000e248*/ s_nop           0x0
/*00000000e24c*/ s_nop           0x0
/*00000000e250*/ s_nop           0x0
/*00000000e254*/ s_nop           0x0
/*00000000e258*/ s_nop           0x0
/*00000000e25c*/ s_nop           0x0
/*00000000e260*/ s_nop           0x0
/*00000000e264*/ s_nop           0x0
/*00000000e268*/ s_nop           0x0
/*00000000e26c*/ s_nop           0x0
/*00000000e270*/ s_nop           0x0
/*00000000e274*/ s_nop           0x0
/*00000000e278*/ s_nop           0x0
/*00000000e27c*/ s_nop           0x0
/*00000000e280*/ s_nop           0x0
/*00000000e284*/ s_nop           0x0
/*00000000e288*/ s_nop           0x0
/*00000000e28c*/ s_nop           0x0
/*00000000e290*/ s_nop           0x0
/*00000000e294*/ s_nop           0x0
/*00000000e298*/ s_nop           0x0
/*00000000e29c*/ s_nop           0x0
/*00000000e2a0*/ s_nop           0x0
/*00000000e2a4*/ s_nop           0x0
/*00000000e2a8*/ s_nop           0x0
/*00000000e2ac*/ s_nop           0x0
/*00000000e2b0*/ s_nop           0x0
/*00000000e2b4*/ s_nop           0x0
/*00000000e2b8*/ s_nop           0x0
/*00000000e2bc*/ s_nop           0x0
/*00000000e2c0*/ s_nop           0x0
/*00000000e2c4*/ s_nop           0x0
/*00000000e2c8*/ s_nop           0x0
/*00000000e2cc*/ s_nop           0x0
/*00000000e2d0*/ s_nop           0x0
/*00000000e2d4*/ s_nop           0x0
/*00000000e2d8*/ s_nop           0x0
/*00000000e2dc*/ s_nop           0x0
/*00000000e2e0*/ s_nop           0x0
/*00000000e2e4*/ s_nop           0x0
/*00000000e2e8*/ s_nop           0x0
/*00000000e2ec*/ s_nop           0x0
/*00000000e2f0*/ s_nop           0x0
/*00000000e2f4*/ s_nop           0x0
/*00000000e2f8*/ s_nop           0x0
/*00000000e2fc*/ s_nop           0x0
subtract_long_get_work_dim_x:
.skip 256
/*00000000e400*/ v_mov_b32       v1, s4
/*00000000e404*/ v_mov_b32       v2, s5
/*00000000e408*/ s_clause        0x2
/*00000000e40c*/ s_load_dword    s2, s[6:7], 0x10
/*00000000e414*/ s_load_dword    s3, s[6:7], 0x0
/*00000000e41c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000e424*/ s_lshl_b32      s4, s8, 1
/*00000000e428*/ global_load_ushort v4, v[1:2], off inst_offset:2
/*00000000e430*/ v_mov_b32       v1, 0
/*00000000e434*/ v_mov_b32       v3, v1
/*00000000e438*/ s_waitcnt       lgkmcnt(0)
/*00000000e43c*/ v_add3_u32      v2, s2, s4, v0
/*00000000e444*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000000e44c*/ v_add_co_u32    v2, vcc, s0, v2
/*00000000e454*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000e458*/ s_waitcnt       vmcnt(0)
/*00000000e45c*/ v_subrev_nc_u32 v0, s3, v4
/*00000000e460*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000000e468*/ s_endpgm
/*00000000e46c*/ s_nop           0x0
/*00000000e470*/ s_nop           0x0
/*00000000e474*/ s_nop           0x0
/*00000000e478*/ s_nop           0x0
/*00000000e47c*/ s_nop           0x0
/*00000000e480*/ s_nop           0x0
/*00000000e484*/ s_nop           0x0
/*00000000e488*/ s_nop           0x0
/*00000000e48c*/ s_nop           0x0
/*00000000e490*/ s_nop           0x0
/*00000000e494*/ s_nop           0x0
/*00000000e498*/ s_nop           0x0
/*00000000e49c*/ s_nop           0x0
/*00000000e4a0*/ s_nop           0x0
/*00000000e4a4*/ s_nop           0x0
/*00000000e4a8*/ s_nop           0x0
/*00000000e4ac*/ s_nop           0x0
/*00000000e4b0*/ s_nop           0x0
/*00000000e4b4*/ s_nop           0x0
/*00000000e4b8*/ s_nop           0x0
/*00000000e4bc*/ s_nop           0x0
/*00000000e4c0*/ s_nop           0x0
/*00000000e4c4*/ s_nop           0x0
/*00000000e4c8*/ s_nop           0x0
/*00000000e4cc*/ s_nop           0x0
/*00000000e4d0*/ s_nop           0x0
/*00000000e4d4*/ s_nop           0x0
/*00000000e4d8*/ s_nop           0x0
/*00000000e4dc*/ s_nop           0x0
/*00000000e4e0*/ s_nop           0x0
/*00000000e4e4*/ s_nop           0x0
/*00000000e4e8*/ s_nop           0x0
/*00000000e4ec*/ s_nop           0x0
/*00000000e4f0*/ s_nop           0x0
/*00000000e4f4*/ s_nop           0x0
/*00000000e4f8*/ s_nop           0x0
/*00000000e4fc*/ s_nop           0x0
subtract_long_x_get_global_offset:
.skip 256
/*00000000e600*/ s_clause        0x3
/*00000000e604*/ s_load_dword    s9, s[4:5], 0x8
/*00000000e60c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000e614*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000e61c*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000000e624*/ v_mov_b32       v4, 0
/*00000000e628*/ s_lshl_b32      s6, s6, 4
/*00000000e62c*/ s_lshl_b32      s7, s7, 1
/*00000000e630*/ s_lshl_b32      s8, s8, 1
/*00000000e634*/ v_mov_b32       v6, v4
/*00000000e638*/ v_mov_b32       v8, v4
/*00000000e63c*/ s_waitcnt       lgkmcnt(0)
/*00000000e640*/ s_ashr_i32      s12, s9, 31
/*00000000e644*/ v_add3_u32      v3, s0, s6, v0
/*00000000e64c*/ v_add3_u32      v5, s2, s7, v1
/*00000000e654*/ v_add3_u32      v7, s10, s8, v2
/*00000000e65c*/ s_sub_u32       s0, s9, s0
/*00000000e660*/ s_subb_u32      s1, s12, s1
/*00000000e664*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000e66c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000e674*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000e67c*/ s_sub_u32       s2, s9, s2
/*00000000e680*/ s_subb_u32      s3, s12, s3
/*00000000e684*/ v_mov_b32       v3, s1
/*00000000e688*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e690*/ v_mov_b32       v2, s0
/*00000000e694*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e698*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000e6a0*/ s_sub_u32       s0, s9, s10
/*00000000e6a4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000e6a8*/ s_subb_u32      s1, s12, s11
/*00000000e6ac*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000e6b4*/ v_mov_b32       v9, s3
/*00000000e6b8*/ v_mov_b32       v11, s1
/*00000000e6bc*/ v_mov_b32       v8, s2
/*00000000e6c0*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000e6c4*/ v_mov_b32       v10, s0
/*00000000e6c8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e6d0*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000e6d8*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000e6e0*/ s_endpgm
/*00000000e6e4*/ s_nop           0x0
/*00000000e6e8*/ s_nop           0x0
/*00000000e6ec*/ s_nop           0x0
/*00000000e6f0*/ s_nop           0x0
/*00000000e6f4*/ s_nop           0x0
/*00000000e6f8*/ s_nop           0x0
/*00000000e6fc*/ s_nop           0x0
subtract_long_get_global_offset_get_global_offset:
.skip 256
/*00000000e800*/ s_clause        0x2
/*00000000e804*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000e80c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000e814*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000e81c*/ v_mov_b32       v4, 0
/*00000000e820*/ s_lshl_b32      s9, s6, 1
/*00000000e824*/ s_lshl_b32      s7, s7, 4
/*00000000e828*/ s_lshl_b32      s8, s8, 1
/*00000000e82c*/ s_sub_u32       s6, 0, 0
/*00000000e830*/ v_mov_b32       v6, v4
/*00000000e834*/ v_mov_b32       v8, v4
/*00000000e838*/ s_waitcnt       lgkmcnt(0)
/*00000000e83c*/ v_add3_u32      v3, s0, s9, v0
/*00000000e844*/ v_add3_u32      v5, s2, s7, v1
/*00000000e84c*/ v_add3_u32      v7, s10, s8, v2
/*00000000e854*/ s_subb_u32      s7, 0, s1
/*00000000e858*/ s_sub_u32       s0, 0, 0
/*00000000e85c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000e864*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000e86c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000e874*/ s_subb_u32      s1, 0, s3
/*00000000e878*/ v_mov_b32       v2, s6
/*00000000e87c*/ v_mov_b32       v9, s1
/*00000000e880*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e888*/ v_mov_b32       v8, s0
/*00000000e88c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e890*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000e898*/ s_sub_u32       s0, 0, 0
/*00000000e89c*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000e8a0*/ s_subb_u32      s1, 0, s11
/*00000000e8a4*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000e8ac*/ v_mov_b32       v3, s7
/*00000000e8b0*/ v_mov_b32       v11, s1
/*00000000e8b4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000e8b8*/ v_mov_b32       v10, s0
/*00000000e8bc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e8c4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000e8cc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000e8d4*/ s_endpgm
/*00000000e8d8*/ s_nop           0x0
/*00000000e8dc*/ s_nop           0x0
/*00000000e8e0*/ s_nop           0x0
/*00000000e8e4*/ s_nop           0x0
/*00000000e8e8*/ s_nop           0x0
/*00000000e8ec*/ s_nop           0x0
/*00000000e8f0*/ s_nop           0x0
/*00000000e8f4*/ s_nop           0x0
/*00000000e8f8*/ s_nop           0x0
/*00000000e8fc*/ s_nop           0x0
subtract_long_get_local_id_get_global_offset:
.skip 256
/*00000000ea00*/ s_clause        0x2
/*00000000ea04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ea0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000ea14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ea1c*/ v_mov_b32       v4, 0
/*00000000ea20*/ s_lshl_b32      s6, s6, 3
/*00000000ea24*/ s_lshl_b32      s7, s7, 2
/*00000000ea28*/ s_lshl_b32      s8, s8, 1
/*00000000ea2c*/ v_mov_b32       v6, v4
/*00000000ea30*/ v_mov_b32       v8, v4
/*00000000ea34*/ s_waitcnt       lgkmcnt(0)
/*00000000ea38*/ v_add3_u32      v3, s0, s6, v0
/*00000000ea40*/ v_add3_u32      v5, s2, s7, v1
/*00000000ea48*/ v_add3_u32      v7, s10, s8, v2
/*00000000ea50*/ v_sub_co_u32    v9, s[0:1], v0, s0
/*00000000ea58*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000000ea60*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000ea68*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000ea70*/ v_sub_co_ci_u32 v10, s[0:1], 0, s1, s[0:1]
/*00000000ea78*/ v_sub_co_u32    v0, s[0:1], v1, s2
/*00000000ea80*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000ea88*/ v_sub_co_ci_u32 v1, s[0:1], 0, s3, s[0:1]
/*00000000ea90*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000ea94*/ v_add_co_u32    v14, vcc, s4, v5
/*00000000ea9c*/ v_sub_co_u32    v11, s[0:1], v2, s10
/*00000000eaa4*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*00000000eaa8*/ v_add_co_u32    v5, vcc, s4, v7
/*00000000eab0*/ v_sub_co_ci_u32 v12, s[0:1], 0, s11, s[0:1]
/*00000000eab8*/ v_add_co_ci_u32 v6, vcc, s5, v8, vcc
/*00000000eabc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*00000000eac4*/ global_store_dwordx2 v[14:15], v[0:1], off
/*00000000eacc*/ global_store_dwordx2 v[5:6], v[11:12], off
/*00000000ead4*/ s_endpgm
/*00000000ead8*/ s_nop           0x0
/*00000000eadc*/ s_nop           0x0
/*00000000eae0*/ s_nop           0x0
/*00000000eae4*/ s_nop           0x0
/*00000000eae8*/ s_nop           0x0
/*00000000eaec*/ s_nop           0x0
/*00000000eaf0*/ s_nop           0x0
/*00000000eaf4*/ s_nop           0x0
/*00000000eaf8*/ s_nop           0x0
/*00000000eafc*/ s_nop           0x0
subtract_long_get_group_id_get_global_offset:
.skip 256
/*00000000ec00*/ s_clause        0x2
/*00000000ec04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ec0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000ec14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ec1c*/ v_mov_b32       v4, 0
/*00000000ec20*/ s_lshl_b32      s9, s6, 1
/*00000000ec24*/ s_lshl_b32      s12, s7, 4
/*00000000ec28*/ s_lshl_b32      s13, s8, 1
/*00000000ec2c*/ v_mov_b32       v6, v4
/*00000000ec30*/ v_mov_b32       v8, v4
/*00000000ec34*/ s_waitcnt       lgkmcnt(0)
/*00000000ec38*/ v_add3_u32      v3, s0, s9, v0
/*00000000ec40*/ v_add3_u32      v5, s2, s12, v1
/*00000000ec48*/ v_add3_u32      v7, s10, s13, v2
/*00000000ec50*/ s_sub_u32       s0, s6, s0
/*00000000ec54*/ s_subb_u32      s1, 0, s1
/*00000000ec58*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000ec60*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000ec68*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000ec70*/ s_sub_u32       s2, s7, s2
/*00000000ec74*/ s_subb_u32      s3, 0, s3
/*00000000ec78*/ v_mov_b32       v3, s1
/*00000000ec7c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000ec84*/ v_mov_b32       v2, s0
/*00000000ec88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000ec8c*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000ec94*/ s_sub_u32       s0, s8, s10
/*00000000ec98*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000ec9c*/ s_subb_u32      s1, 0, s11
/*00000000eca0*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000eca8*/ v_mov_b32       v9, s3
/*00000000ecac*/ v_mov_b32       v11, s1
/*00000000ecb0*/ v_mov_b32       v8, s2
/*00000000ecb4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000ecb8*/ v_mov_b32       v10, s0
/*00000000ecbc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000ecc4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000eccc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000ecd4*/ s_endpgm
/*00000000ecd8*/ s_nop           0x0
/*00000000ecdc*/ s_nop           0x0
/*00000000ece0*/ s_nop           0x0
/*00000000ece4*/ s_nop           0x0
/*00000000ece8*/ s_nop           0x0
/*00000000ecec*/ s_nop           0x0
/*00000000ecf0*/ s_nop           0x0
/*00000000ecf4*/ s_nop           0x0
/*00000000ecf8*/ s_nop           0x0
/*00000000ecfc*/ s_nop           0x0
subtract_long_get_local_size_get_global_offset:
.skip 256
/*00000000ee00*/ s_clause        0x2
/*00000000ee04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ee0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000ee14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ee1c*/ v_mov_b32       v4, 0
/*00000000ee20*/ s_lshl_b32      s6, s6, 1
/*00000000ee24*/ s_lshl_b32      s7, s7, 1
/*00000000ee28*/ s_lshl_b32      s8, s8, 2
/*00000000ee2c*/ v_mov_b32       v6, v4
/*00000000ee30*/ v_mov_b32       v8, v4
/*00000000ee34*/ s_waitcnt       lgkmcnt(0)
/*00000000ee38*/ v_add3_u32      v3, s0, s6, v0
/*00000000ee40*/ v_add3_u32      v5, s2, s7, v1
/*00000000ee48*/ v_add3_u32      v7, s10, s8, v2
/*00000000ee50*/ s_sub_u32       s0, 2, s0
/*00000000ee54*/ s_subb_u32      s1, 0, s1
/*00000000ee58*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000ee60*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000ee68*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000ee70*/ s_sub_u32       s2, 2, s2
/*00000000ee74*/ s_subb_u32      s3, 0, s3
/*00000000ee78*/ v_mov_b32       v3, s1
/*00000000ee7c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000ee84*/ v_mov_b32       v2, s0
/*00000000ee88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000ee8c*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000ee94*/ s_sub_u32       s0, 4, s10
/*00000000ee98*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000ee9c*/ s_subb_u32      s1, 0, s11
/*00000000eea0*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000eea8*/ v_mov_b32       v9, s3
/*00000000eeac*/ v_mov_b32       v11, s1
/*00000000eeb0*/ v_mov_b32       v8, s2
/*00000000eeb4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000eeb8*/ v_mov_b32       v10, s0
/*00000000eebc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000eec4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000eecc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000eed4*/ s_endpgm
/*00000000eed8*/ s_nop           0x0
/*00000000eedc*/ s_nop           0x0
/*00000000eee0*/ s_nop           0x0
/*00000000eee4*/ s_nop           0x0
/*00000000eee8*/ s_nop           0x0
/*00000000eeec*/ s_nop           0x0
/*00000000eef0*/ s_nop           0x0
/*00000000eef4*/ s_nop           0x0
/*00000000eef8*/ s_nop           0x0
/*00000000eefc*/ s_nop           0x0
subtract_long_get_global_id_get_global_offset:
.skip 256
/*00000000f000*/ s_clause        0x2
/*00000000f004*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000f00c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000f014*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000f01c*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000000f024*/ v_mov_b32       v4, 0
/*00000000f028*/ s_lshl_b32      s6, s7, 1
/*00000000f02c*/ s_lshl_b32      s7, s8, 2
/*00000000f030*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*00000000f038*/ v_mov_b32       v8, v4
/*00000000f03c*/ s_waitcnt       lgkmcnt(0)
/*00000000f040*/ v_add_nc_u32    v9, s0, v3
/*00000000f044*/ v_add3_u32      v7, s2, s6, v1
/*00000000f04c*/ v_add3_u32      v3, s10, s7, v2
/*00000000f054*/ v_add_co_u32    v15, vcc, s4, v5
/*00000000f05c*/ v_sub_co_u32    v5, s[0:1], v9, s0
/*00000000f064*/ v_lshlrev_b64   v[8:9], 3, v[7:8]
/*00000000f06c*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*00000000f074*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*00000000f078*/ v_sub_co_ci_u32 v6, s[0:1], 0, s1, s[0:1]
/*00000000f080*/ v_sub_co_u32    v17, s[0:1], v7, s2
/*00000000f088*/ v_add_co_u32    v7, vcc, s4, v8
/*00000000f090*/ v_sub_co_ci_u32 v18, s[0:1], 0, s3, s[0:1]
/*00000000f098*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*00000000f09c*/ v_sub_co_u32    v2, s[0:1], v3, s10
/*00000000f0a4*/ v_add_co_u32    v12, vcc, s4, v12
/*00000000f0ac*/ v_sub_co_ci_u32 v3, s[0:1], 0, s11, s[0:1]
/*00000000f0b4*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*00000000f0b8*/ global_store_dwordx2 v[15:16], v[5:6], off
/*00000000f0c0*/ global_store_dwordx2 v[7:8], v[17:18], off
/*00000000f0c8*/ global_store_dwordx2 v[12:13], v[2:3], off
/*00000000f0d0*/ s_endpgm
/*00000000f0d4*/ s_nop           0x0
/*00000000f0d8*/ s_nop           0x0
/*00000000f0dc*/ s_nop           0x0
/*00000000f0e0*/ s_nop           0x0
/*00000000f0e4*/ s_nop           0x0
/*00000000f0e8*/ s_nop           0x0
/*00000000f0ec*/ s_nop           0x0
/*00000000f0f0*/ s_nop           0x0
/*00000000f0f4*/ s_nop           0x0
/*00000000f0f8*/ s_nop           0x0
/*00000000f0fc*/ s_nop           0x0
subtract_long_get_global_size_get_global_offset:
.skip 256
/*00000000f200*/ s_clause        0x1
/*00000000f204*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000f20c*/ s_load_dwordx2  s[16:17], s[6:7], 0x20
/*00000000f214*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000f21c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000000f224*/ v_mov_b32       v4, 0
/*00000000f228*/ s_lshl_b32      s6, s8, 4
/*00000000f22c*/ s_lshl_b32      s7, s9, 1
/*00000000f230*/ s_lshl_b32      s8, s10, 1
/*00000000f234*/ v_mov_b32       v6, v4
/*00000000f238*/ v_mov_b32       v8, v4
/*00000000f23c*/ s_waitcnt       lgkmcnt(0)
/*00000000f240*/ v_add3_u32      v3, s0, s6, v0
/*00000000f248*/ v_add3_u32      v5, s2, s7, v1
/*00000000f250*/ v_add3_u32      v7, s16, s8, v2
/*00000000f258*/ s_sub_u32       s0, s12, s0
/*00000000f25c*/ s_subb_u32      s1, 0, s1
/*00000000f260*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000f268*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000f270*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000f278*/ s_sub_u32       s2, s13, s2
/*00000000f27c*/ s_subb_u32      s3, 0, s3
/*00000000f280*/ v_mov_b32       v3, s1
/*00000000f284*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000f28c*/ v_mov_b32       v2, s0
/*00000000f290*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000f294*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000f29c*/ s_sub_u32       s0, s14, s16
/*00000000f2a0*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000f2a4*/ s_subb_u32      s1, 0, s17
/*00000000f2a8*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000f2b0*/ v_mov_b32       v9, s3
/*00000000f2b4*/ v_mov_b32       v11, s1
/*00000000f2b8*/ v_mov_b32       v8, s2
/*00000000f2bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000f2c0*/ v_mov_b32       v10, s0
/*00000000f2c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000f2cc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000f2d4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000f2dc*/ s_endpgm
/*00000000f2e0*/ s_nop           0x0
/*00000000f2e4*/ s_nop           0x0
/*00000000f2e8*/ s_nop           0x0
/*00000000f2ec*/ s_nop           0x0
/*00000000f2f0*/ s_nop           0x0
/*00000000f2f4*/ s_nop           0x0
/*00000000f2f8*/ s_nop           0x0
/*00000000f2fc*/ s_nop           0x0
subtract_long_get_num_groups_get_global_offset:
.skip 256
/*00000000f400*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000f408*/ s_clause        0x2
/*00000000f40c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000f414*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000000f41c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*00000000f424*/ s_lshl_b32      s8, s8, 1
/*00000000f428*/ s_lshl_b32      s9, s9, 1
/*00000000f42c*/ s_lshl_b32      s10, s10, 2
/*00000000f430*/ v_mov_b32       v4, 0
/*00000000f434*/ v_mov_b32       v6, v4
/*00000000f438*/ v_mov_b32       v8, v4
/*00000000f43c*/ s_waitcnt       lgkmcnt(0)
/*00000000f440*/ s_and_b32       s11, s12, -2
/*00000000f444*/ v_add3_u32      v3, s0, s8, v0
/*00000000f44c*/ v_cmp_gt_u32    s[11:12], s12, s11
/*00000000f454*/ s_lshr_b32      s12, s12, 1
/*00000000f458*/ v_add3_u32      v5, s2, s9, v1
/*00000000f460*/ v_add3_u32      v7, s4, s10, v2
/*00000000f468*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000f470*/ s_cmpk_lg_u32   s11, 0x0
/*00000000f474*/ s_addc_u32      s8, s12, 0
/*00000000f478*/ s_and_b32       s11, s13, -2
/*00000000f47c*/ s_lshr_b32      s9, s13, 1
/*00000000f480*/ v_cmp_gt_u32    s[11:12], s13, s11
/*00000000f488*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000f490*/ v_add_co_u32    v0, vcc, s6, v0
/*00000000f498*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*00000000f4a0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*00000000f4a4*/ s_cmpk_lg_u32   s11, 0x0
/*00000000f4a8*/ s_addc_u32      s9, s9, 0
/*00000000f4ac*/ s_and_b32       s10, s14, -4
/*00000000f4b0*/ s_lshr_b32      s11, s14, 2
/*00000000f4b4*/ v_cmp_gt_u32    s[10:11], s14, s10
/*00000000f4bc*/ v_add_co_u32    v2, vcc, s6, v2
/*00000000f4c4*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*00000000f4c8*/ v_add_co_u32    v4, vcc, s6, v4
/*00000000f4d0*/ s_cmpk_lg_u32   s10, 0x0
/*00000000f4d4*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*00000000f4d8*/ s_addc_u32      s10, s11, 0
/*00000000f4dc*/ s_sub_u32       s0, s8, s0
/*00000000f4e0*/ s_subb_u32      s1, 0, s1
/*00000000f4e4*/ s_sub_u32       s2, s9, s2
/*00000000f4e8*/ s_subb_u32      s3, 0, s3
/*00000000f4ec*/ v_mov_b32       v7, s1
/*00000000f4f0*/ v_mov_b32       v6, s0
/*00000000f4f4*/ s_sub_u32       s0, s10, s4
/*00000000f4f8*/ s_subb_u32      s1, 0, s5
/*00000000f4fc*/ v_mov_b32       v9, s3
/*00000000f500*/ v_mov_b32       v11, s1
/*00000000f504*/ v_mov_b32       v8, s2
/*00000000f508*/ v_mov_b32       v10, s0
/*00000000f50c*/ global_store_dwordx2 v[0:1], v[6:7], off
/*00000000f514*/ global_store_dwordx2 v[2:3], v[8:9], off
/*00000000f51c*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000f524*/ s_endpgm
/*00000000f528*/ s_nop           0x0
/*00000000f52c*/ s_nop           0x0
/*00000000f530*/ s_nop           0x0
/*00000000f534*/ s_nop           0x0
/*00000000f538*/ s_nop           0x0
/*00000000f53c*/ s_nop           0x0
/*00000000f540*/ s_nop           0x0
/*00000000f544*/ s_nop           0x0
/*00000000f548*/ s_nop           0x0
/*00000000f54c*/ s_nop           0x0
/*00000000f550*/ s_nop           0x0
/*00000000f554*/ s_nop           0x0
/*00000000f558*/ s_nop           0x0
/*00000000f55c*/ s_nop           0x0
/*00000000f560*/ s_nop           0x0
/*00000000f564*/ s_nop           0x0
/*00000000f568*/ s_nop           0x0
/*00000000f56c*/ s_nop           0x0
/*00000000f570*/ s_nop           0x0
/*00000000f574*/ s_nop           0x0
/*00000000f578*/ s_nop           0x0
/*00000000f57c*/ s_nop           0x0
/*00000000f580*/ s_nop           0x0
/*00000000f584*/ s_nop           0x0
/*00000000f588*/ s_nop           0x0
/*00000000f58c*/ s_nop           0x0
/*00000000f590*/ s_nop           0x0
/*00000000f594*/ s_nop           0x0
/*00000000f598*/ s_nop           0x0
/*00000000f59c*/ s_nop           0x0
/*00000000f5a0*/ s_nop           0x0
/*00000000f5a4*/ s_nop           0x0
/*00000000f5a8*/ s_nop           0x0
/*00000000f5ac*/ s_nop           0x0
/*00000000f5b0*/ s_nop           0x0
/*00000000f5b4*/ s_nop           0x0
/*00000000f5b8*/ s_nop           0x0
/*00000000f5bc*/ s_nop           0x0
/*00000000f5c0*/ s_nop           0x0
/*00000000f5c4*/ s_nop           0x0
/*00000000f5c8*/ s_nop           0x0
/*00000000f5cc*/ s_nop           0x0
/*00000000f5d0*/ s_nop           0x0
/*00000000f5d4*/ s_nop           0x0
/*00000000f5d8*/ s_nop           0x0
/*00000000f5dc*/ s_nop           0x0
/*00000000f5e0*/ s_nop           0x0
/*00000000f5e4*/ s_nop           0x0
/*00000000f5e8*/ s_nop           0x0
/*00000000f5ec*/ s_nop           0x0
/*00000000f5f0*/ s_nop           0x0
/*00000000f5f4*/ s_nop           0x0
/*00000000f5f8*/ s_nop           0x0
/*00000000f5fc*/ s_nop           0x0
subtract_long_get_work_dim_get_global_offset:
.skip 256
/*00000000f700*/ v_mov_b32       v3, s4
/*00000000f704*/ v_mov_b32       v4, s5
/*00000000f708*/ s_clause        0x2
/*00000000f70c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000f714*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000000f71c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*00000000f724*/ s_lshl_b32      s8, s8, 1
/*00000000f728*/ s_lshl_b32      s9, s9, 1
/*00000000f72c*/ s_lshl_b32      s10, s10, 2
/*00000000f730*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000f738*/ v_mov_b32       v4, 0
/*00000000f73c*/ v_mov_b32       v6, v4
/*00000000f740*/ v_mov_b32       v8, v4
/*00000000f744*/ s_waitcnt       lgkmcnt(0)
/*00000000f748*/ v_add3_u32      v3, s0, s8, v0
/*00000000f750*/ v_add3_u32      v5, s2, s9, v1
/*00000000f758*/ v_add3_u32      v7, s4, s10, v2
/*00000000f760*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000f768*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000f770*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*00000000f778*/ v_add_co_u32    v0, vcc, s6, v0
/*00000000f780*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*00000000f784*/ v_add_co_u32    v2, vcc, s6, v2
/*00000000f78c*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*00000000f790*/ v_add_co_u32    v4, vcc, s6, v4
/*00000000f798*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*00000000f79c*/ s_waitcnt       vmcnt(0)
/*00000000f7a0*/ v_and_b32       v10, 0xffff, v9
/*00000000f7a8*/ v_sub_co_u32    v6, s[0:1], v10, s0
/*00000000f7b0*/ v_sub_co_ci_u32 v7, s[0:1], 0, s1, s[0:1]
/*00000000f7b8*/ v_sub_co_u32    v8, s[0:1], v10, s2
/*00000000f7c0*/ v_sub_co_ci_u32 v9, s[0:1], 0, s3, s[0:1]
/*00000000f7c8*/ v_sub_co_u32    v10, s[0:1], v10, s4
/*00000000f7d0*/ v_sub_co_ci_u32 v11, s[0:1], 0, s5, s[0:1]
/*00000000f7d8*/ global_store_dwordx2 v[0:1], v[6:7], off
/*00000000f7e0*/ global_store_dwordx2 v[2:3], v[8:9], off
/*00000000f7e8*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000f7f0*/ s_endpgm
/*00000000f7f4*/ s_nop           0x0
/*00000000f7f8*/ s_nop           0x0
/*00000000f7fc*/ s_nop           0x0
subtract_long_x_get_local_id:
.skip 256
/*00000000f900*/ s_clause        0x1
/*00000000f904*/ s_load_dword    s9, s[4:5], 0x8
/*00000000f90c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000f914*/ s_waitcnt       lgkmcnt(0)
/*00000000f918*/ s_clause        0x1
/*00000000f91c*/ s_load_dword    s1, s[4:5], 0x20
/*00000000f924*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000000f92c*/ v_mov_b32       v4, 0
/*00000000f930*/ s_lshl_b32      s3, s6, 4
/*00000000f934*/ s_lshl_b32      s6, s7, 1
/*00000000f938*/ s_lshl_b32      s7, s8, 1
/*00000000f93c*/ v_mov_b32       v6, v4
/*00000000f940*/ v_mov_b32       v8, v4
/*00000000f944*/ s_ashr_i32      s8, s9, 31
/*00000000f948*/ v_add3_u32      v3, s0, s3, v0
/*00000000f950*/ v_add3_u32      v5, s2, s6, v1
/*00000000f958*/ s_waitcnt       lgkmcnt(0)
/*00000000f95c*/ v_add3_u32      v7, s1, s7, v2
/*00000000f964*/ v_sub_co_u32    v9, s[0:1], s9, v0
/*00000000f96c*/ v_lshlrev_b64   v[11:12], 3, v[3:4]
/*00000000f974*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000f97c*/ v_sub_co_ci_u32 v10, s[0:1], s8, 0, s[0:1]
/*00000000f984*/ v_sub_co_u32    v0, s[0:1], s9, v1
/*00000000f98c*/ v_sub_co_ci_u32 v1, s[0:1], s8, 0, s[0:1]
/*00000000f994*/ v_add_co_u32    v11, vcc, s4, v11
/*00000000f99c*/ v_add_co_ci_u32 v12, vcc, s5, v12, vcc
/*00000000f9a0*/ v_add_co_u32    v14, vcc, s4, v5
/*00000000f9a8*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*00000000f9ac*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*00000000f9b4*/ v_sub_co_u32    v7, s[0:1], s9, v2
/*00000000f9bc*/ v_sub_co_ci_u32 v8, s[0:1], s8, 0, s[0:1]
/*00000000f9c4*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000f9cc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000f9d0*/ global_store_dwordx2 v[11:12], v[9:10], off
/*00000000f9d8*/ global_store_dwordx2 v[14:15], v[0:1], off
/*00000000f9e0*/ global_store_dwordx2 v[5:6], v[7:8], off
/*00000000f9e8*/ s_endpgm
/*00000000f9ec*/ s_nop           0x0
/*00000000f9f0*/ s_nop           0x0
/*00000000f9f4*/ s_nop           0x0
/*00000000f9f8*/ s_nop           0x0
/*00000000f9fc*/ s_nop           0x0
subtract_long_get_global_offset_get_local_id:
.skip 256
/*00000000fb00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000fb08*/ s_waitcnt       lgkmcnt(0)
/*00000000fb0c*/ s_clause        0x1
/*00000000fb10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000fb18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000fb20*/ v_mov_b32       v4, 0
/*00000000fb24*/ s_lshl_b32      s3, s6, 1
/*00000000fb28*/ s_lshl_b32      s6, s7, 4
/*00000000fb2c*/ s_lshl_b32      s7, s8, 1
/*00000000fb30*/ v_mov_b32       v6, v4
/*00000000fb34*/ v_mov_b32       v8, v4
/*00000000fb38*/ v_add3_u32      v3, s0, s3, v0
/*00000000fb40*/ v_add3_u32      v5, s2, s6, v1
/*00000000fb48*/ s_waitcnt       lgkmcnt(0)
/*00000000fb4c*/ v_add3_u32      v7, s1, s7, v2
/*00000000fb54*/ v_sub_co_u32    v9, s[0:1], s0, v0
/*00000000fb5c*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000000fb64*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000fb6c*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000fb74*/ v_sub_co_ci_u32 v10, s[0:1], 0, 0, s[0:1]
/*00000000fb7c*/ v_sub_co_u32    v0, s[0:1], s2, v1
/*00000000fb84*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000fb8c*/ v_sub_co_ci_u32 v1, s[0:1], 0, 0, s[0:1]
/*00000000fb94*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000fb98*/ v_add_co_u32    v14, vcc, s4, v5
/*00000000fba0*/ v_sub_co_u32    v11, s[0:1], s1, v2
/*00000000fba8*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*00000000fbac*/ v_add_co_u32    v5, vcc, s4, v7
/*00000000fbb4*/ v_sub_co_ci_u32 v12, s[0:1], 0, 0, s[0:1]
/*00000000fbbc*/ v_add_co_ci_u32 v6, vcc, s5, v8, vcc
/*00000000fbc0*/ global_store_dwordx2 v[3:4], v[9:10], off
/*00000000fbc8*/ global_store_dwordx2 v[14:15], v[0:1], off
/*00000000fbd0*/ global_store_dwordx2 v[5:6], v[11:12], off
/*00000000fbd8*/ s_endpgm
/*00000000fbdc*/ s_nop           0x0
/*00000000fbe0*/ s_nop           0x0
/*00000000fbe4*/ s_nop           0x0
/*00000000fbe8*/ s_nop           0x0
/*00000000fbec*/ s_nop           0x0
/*00000000fbf0*/ s_nop           0x0
/*00000000fbf4*/ s_nop           0x0
/*00000000fbf8*/ s_nop           0x0
/*00000000fbfc*/ s_nop           0x0
subtract_long_get_local_id_get_local_id:
.skip 256
/*00000000fd00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000fd08*/ s_waitcnt       lgkmcnt(0)
/*00000000fd0c*/ s_clause        0x1
/*00000000fd10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000fd18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000fd20*/ v_mov_b32       v4, 0
/*00000000fd24*/ s_lshl_b32      s3, s6, 3
/*00000000fd28*/ s_lshl_b32      s6, s7, 2
/*00000000fd2c*/ s_lshl_b32      s7, s8, 1
/*00000000fd30*/ s_mov_b32       s10, 0
/*00000000fd34*/ v_mov_b32       v6, v4
/*00000000fd38*/ v_mov_b32       v8, v4
/*00000000fd3c*/ s_mov_b32       s11, s10
/*00000000fd40*/ v_add3_u32      v3, s0, s3, v0
/*00000000fd48*/ v_add3_u32      v5, s2, s6, v1
/*00000000fd50*/ s_waitcnt       lgkmcnt(0)
/*00000000fd54*/ v_add3_u32      v7, s1, s7, v2
/*00000000fd5c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000fd64*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000fd6c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000fd74*/ v_mov_b32       v2, s10
/*00000000fd78*/ v_mov_b32       v3, s11
/*00000000fd7c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000fd84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000fd88*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000fd90*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000fd94*/ v_add_co_u32    v8, vcc, s4, v6
/*00000000fd9c*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*00000000fda0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000fda8*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000fdb0*/ global_store_dwordx2 v[8:9], v[2:3], off
/*00000000fdb8*/ s_endpgm
/*00000000fdbc*/ s_nop           0x0
/*00000000fdc0*/ s_nop           0x0
/*00000000fdc4*/ s_nop           0x0
/*00000000fdc8*/ s_nop           0x0
/*00000000fdcc*/ s_nop           0x0
/*00000000fdd0*/ s_nop           0x0
/*00000000fdd4*/ s_nop           0x0
/*00000000fdd8*/ s_nop           0x0
/*00000000fddc*/ s_nop           0x0
/*00000000fde0*/ s_nop           0x0
/*00000000fde4*/ s_nop           0x0
/*00000000fde8*/ s_nop           0x0
/*00000000fdec*/ s_nop           0x0
/*00000000fdf0*/ s_nop           0x0
/*00000000fdf4*/ s_nop           0x0
/*00000000fdf8*/ s_nop           0x0
/*00000000fdfc*/ s_nop           0x0
subtract_long_get_group_id_get_local_id:
.skip 256
/*00000000ff00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ff08*/ s_waitcnt       lgkmcnt(0)
/*00000000ff0c*/ s_clause        0x1
/*00000000ff10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000ff18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ff20*/ v_mov_b32       v4, 0
/*00000000ff24*/ s_lshl_b32      s3, s6, 1
/*00000000ff28*/ s_lshl_b32      s9, s7, 4
/*00000000ff2c*/ v_mov_b32       v12, 0
/*00000000ff30*/ v_sub_co_u32    v5, vcc, s6, v0
/*00000000ff38*/ v_mov_b32       v8, v4
/*00000000ff3c*/ s_lshl_b32      s10, s8, 1
/*00000000ff40*/ v_sub_co_ci_u32 v6, vcc, 0, v12, vcc
/*00000000ff44*/ v_add3_u32      v3, s0, s3, v0
/*00000000ff4c*/ v_add3_u32      v7, s2, s9, v1
/*00000000ff54*/ v_sub_co_u32    v0, vcc, s7, v1
/*00000000ff5c*/ v_sub_co_ci_u32 v1, vcc, 0, v12, vcc
/*00000000ff60*/ v_lshlrev_b64   v[9:10], 3, v[3:4]
/*00000000ff68*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000ff70*/ s_waitcnt       lgkmcnt(0)
/*00000000ff74*/ v_add3_u32      v3, s1, s10, v2
/*00000000ff7c*/ v_add_co_u32    v15, vcc, s4, v9
/*00000000ff84*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000000ff8c*/ v_add_co_ci_u32 v16, vcc, s5, v10, vcc
/*00000000ff90*/ v_add_co_u32    v18, vcc, s4, v7
/*00000000ff98*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*00000000ff9c*/ v_sub_co_u32    v11, vcc, s8, v2
/*00000000ffa4*/ v_sub_co_ci_u32 v12, vcc, 0, v12, vcc
/*00000000ffa8*/ v_add_co_u32    v9, vcc, s4, v3
/*00000000ffb0*/ v_add_co_ci_u32 v10, vcc, s5, v4, vcc
/*00000000ffb4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*00000000ffbc*/ global_store_dwordx2 v[18:19], v[0:1], off
/*00000000ffc4*/ global_store_dwordx2 v[9:10], v[11:12], off
/*00000000ffcc*/ s_endpgm
/*00000000ffd0*/ s_nop           0x0
/*00000000ffd4*/ s_nop           0x0
/*00000000ffd8*/ s_nop           0x0
/*00000000ffdc*/ s_nop           0x0
/*00000000ffe0*/ s_nop           0x0
/*00000000ffe4*/ s_nop           0x0
/*00000000ffe8*/ s_nop           0x0
/*00000000ffec*/ s_nop           0x0
/*00000000fff0*/ s_nop           0x0
/*00000000fff4*/ s_nop           0x0
/*00000000fff8*/ s_nop           0x0
/*00000000fffc*/ s_nop           0x0
subtract_long_get_local_size_get_local_id:
.skip 256
/*000000010100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010108*/ s_waitcnt       lgkmcnt(0)
/*00000001010c*/ s_clause        0x1
/*000000010110*/ s_load_dword    s1, s[4:5], 0x20
/*000000010118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010120*/ s_lshl_b32      s3, s6, 1
/*000000010124*/ v_mov_b32       v4, 0
/*000000010128*/ s_lshl_b32      s6, s7, 1
/*00000001012c*/ s_lshl_b32      s7, s8, 2
/*000000010130*/ v_mov_b32       v8, v4
/*000000010134*/ v_add3_u32      v3, s0, s3, v0
/*00000001013c*/ v_add3_u32      v7, s2, s6, v1
/*000000010144*/ v_sub_co_u32    v5, s[0:1], 2, v0
/*00000001014c*/ v_sub_co_ci_u32 v6, s[0:1], 0, 0, s[0:1]
/*000000010154*/ v_lshlrev_b64   v[9:10], 3, v[3:4]
/*00000001015c*/ s_waitcnt       lgkmcnt(0)
/*000000010160*/ v_add3_u32      v3, s1, s7, v2
/*000000010168*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000010170*/ v_sub_co_u32    v0, s[0:1], 2, v1
/*000000010178*/ v_sub_co_ci_u32 v1, s[0:1], 0, 0, s[0:1]
/*000000010180*/ v_add_co_u32    v15, vcc, s4, v9
/*000000010188*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000010190*/ v_add_co_ci_u32 v16, vcc, s5, v10, vcc
/*000000010194*/ v_add_co_u32    v18, vcc, s4, v7
/*00000001019c*/ v_sub_co_u32    v11, s[0:1], 4, v2
/*0000000101a4*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*0000000101a8*/ v_sub_co_ci_u32 v12, s[0:1], 0, 0, s[0:1]
/*0000000101b0*/ v_add_co_u32    v9, vcc, s4, v3
/*0000000101b8*/ v_add_co_ci_u32 v10, vcc, s5, v4, vcc
/*0000000101bc*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000101c4*/ global_store_dwordx2 v[18:19], v[0:1], off
/*0000000101cc*/ global_store_dwordx2 v[9:10], v[11:12], off
/*0000000101d4*/ s_endpgm
/*0000000101d8*/ s_nop           0x0
/*0000000101dc*/ s_nop           0x0
/*0000000101e0*/ s_nop           0x0
/*0000000101e4*/ s_nop           0x0
/*0000000101e8*/ s_nop           0x0
/*0000000101ec*/ s_nop           0x0
/*0000000101f0*/ s_nop           0x0
/*0000000101f4*/ s_nop           0x0
/*0000000101f8*/ s_nop           0x0
/*0000000101fc*/ s_nop           0x0
subtract_long_get_global_id_get_local_id:
.skip 256
/*000000010300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010308*/ s_waitcnt       lgkmcnt(0)
/*00000001030c*/ s_clause        0x1
/*000000010310*/ s_load_dword    s1, s[4:5], 0x20
/*000000010318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010320*/ v_mov_b32       v4, 0
/*000000010324*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000001032c*/ s_lshl_b32      s3, s7, 1
/*000000010330*/ s_lshl_b32      s6, s8, 2
/*000000010334*/ v_mov_b32       v8, v4
/*000000010338*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000010340*/ v_add3_u32      v7, s2, s3, v1
/*000000010348*/ v_add_nc_u32    v9, s0, v3
/*00000001034c*/ s_waitcnt       lgkmcnt(0)
/*000000010350*/ v_add_co_u32    v15, vcc, s4, v5
/*000000010358*/ v_add3_u32      v3, s1, s6, v2
/*000000010360*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000010364*/ v_lshlrev_b64   v[11:12], 3, v[7:8]
/*00000001036c*/ v_sub_co_u32    v9, s[0:1], v9, v0
/*000000010374*/ v_sub_co_ci_u32 v10, s[0:1], 0, 0, s[0:1]
/*00000001037c*/ v_sub_co_u32    v0, s[0:1], v7, v1
/*000000010384*/ v_add_co_u32    v6, vcc, s4, v11
/*00000001038c*/ v_sub_co_ci_u32 v1, s[0:1], 0, 0, s[0:1]
/*000000010394*/ v_add_co_ci_u32 v7, vcc, s5, v12, vcc
/*000000010398*/ v_lshlrev_b64   v[11:12], 3, v[3:4]
/*0000000103a0*/ v_sub_co_u32    v13, s[0:1], v3, v2
/*0000000103a8*/ v_sub_co_ci_u32 v14, s[0:1], 0, 0, s[0:1]
/*0000000103b0*/ v_add_co_u32    v11, vcc, s4, v11
/*0000000103b8*/ v_add_co_ci_u32 v12, vcc, s5, v12, vcc
/*0000000103bc*/ global_store_dwordx2 v[15:16], v[9:10], off
/*0000000103c4*/ global_store_dwordx2 v[6:7], v[0:1], off
/*0000000103cc*/ global_store_dwordx2 v[11:12], v[13:14], off
/*0000000103d4*/ s_endpgm
/*0000000103d8*/ s_nop           0x0
/*0000000103dc*/ s_nop           0x0
/*0000000103e0*/ s_nop           0x0
/*0000000103e4*/ s_nop           0x0
/*0000000103e8*/ s_nop           0x0
/*0000000103ec*/ s_nop           0x0
/*0000000103f0*/ s_nop           0x0
/*0000000103f4*/ s_nop           0x0
/*0000000103f8*/ s_nop           0x0
/*0000000103fc*/ s_nop           0x0
subtract_long_get_global_size_get_local_id:
.skip 256
/*000000010500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000010508*/ s_waitcnt       lgkmcnt(0)
/*00000001050c*/ s_load_dword    s1, s[6:7], 0x20
/*000000010514*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001051c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000010524*/ s_lshl_b32      s3, s8, 4
/*000000010528*/ v_mov_b32       v4, 0
/*00000001052c*/ s_lshl_b32      s6, s9, 1
/*000000010530*/ v_mov_b32       v14, 0
/*000000010534*/ v_mov_b32       v6, v4
/*000000010538*/ v_add3_u32      v3, s0, s3, v0
/*000000010540*/ v_add3_u32      v5, s2, s6, v1
/*000000010548*/ s_waitcnt       lgkmcnt(0)
/*00000001054c*/ v_sub_co_u32    v10, vcc, s12, v0
/*000000010554*/ s_lshl_b32      s0, s10, 1
/*000000010558*/ v_sub_co_ci_u32 v11, vcc, 0, v14, vcc
/*00000001055c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000010564*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000001056c*/ v_add3_u32      v7, s1, s0, v2
/*000000010574*/ v_add_co_u32    v12, vcc, s4, v8
/*00000001057c*/ v_mov_b32       v8, v4
/*000000010580*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*000000010584*/ v_sub_co_u32    v0, vcc, s13, v1
/*00000001058c*/ v_sub_co_ci_u32 v1, vcc, 0, v14, vcc
/*000000010590*/ v_add_co_u32    v18, vcc, s4, v5
/*000000010598*/ v_add_co_ci_u32 v19, vcc, s5, v6, vcc
/*00000001059c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*0000000105a4*/ v_sub_co_u32    v7, vcc, s14, v2
/*0000000105ac*/ v_sub_co_ci_u32 v8, vcc, 0, v14, vcc
/*0000000105b0*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000105b8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000105bc*/ global_store_dwordx2 v[12:13], v[10:11], off
/*0000000105c4*/ global_store_dwordx2 v[18:19], v[0:1], off
/*0000000105cc*/ global_store_dwordx2 v[5:6], v[7:8], off
/*0000000105d4*/ s_endpgm
/*0000000105d8*/ s_nop           0x0
/*0000000105dc*/ s_nop           0x0
/*0000000105e0*/ s_nop           0x0
/*0000000105e4*/ s_nop           0x0
/*0000000105e8*/ s_nop           0x0
/*0000000105ec*/ s_nop           0x0
/*0000000105f0*/ s_nop           0x0
/*0000000105f4*/ s_nop           0x0
/*0000000105f8*/ s_nop           0x0
/*0000000105fc*/ s_nop           0x0
subtract_long_get_num_groups_get_local_id:
.skip 256
/*000000010700*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000010708*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000010710*/ s_waitcnt       lgkmcnt(0)
/*000000010714*/ s_clause        0x1
/*000000010718*/ s_load_dword    s3, s[6:7], 0x20
/*000000010720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000010728*/ s_lshl_b32      s7, s8, 1
/*00000001072c*/ s_lshl_b32      s8, s9, 1
/*000000010730*/ s_lshl_b32      s9, s10, 2
/*000000010734*/ v_mov_b32       v4, 0
/*000000010738*/ v_mov_b32       v14, 0
/*00000001073c*/ v_mov_b32       v6, v4
/*000000010740*/ s_and_b32       s6, s0, -2
/*000000010744*/ v_add3_u32      v3, s12, s7, v0
/*00000001074c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000010754*/ s_lshr_b32      s0, s0, 1
/*000000010758*/ v_add3_u32      v5, s14, s8, v1
/*000000010760*/ s_waitcnt       lgkmcnt(0)
/*000000010764*/ v_add3_u32      v7, s3, s9, v2
/*00000001076c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000010774*/ s_cmpk_lg_u32   s6, 0x0
/*000000010778*/ s_addc_u32      s0, s0, 0
/*00000001077c*/ s_and_b32       s6, s1, -2
/*000000010780*/ v_sub_co_u32    v10, vcc, s0, v0
/*000000010788*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000010790*/ s_lshr_b32      s1, s1, 1
/*000000010794*/ v_sub_co_ci_u32 v11, vcc, 0, v14, vcc
/*000000010798*/ v_add_co_u32    v12, vcc, s4, v8
/*0000000107a0*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*0000000107a8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000107ac*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*0000000107b0*/ s_addc_u32      s1, s1, 0
/*0000000107b4*/ s_and_b32       s3, s2, -4
/*0000000107b8*/ v_sub_co_u32    v0, vcc, s1, v1
/*0000000107c0*/ v_cmp_gt_u32    s[0:1], s2, s3
/*0000000107c8*/ v_mov_b32       v8, v4
/*0000000107cc*/ v_sub_co_ci_u32 v1, vcc, 0, v14, vcc
/*0000000107d0*/ v_add_co_u32    v18, vcc, s4, v5
/*0000000107d8*/ s_lshr_b32      s2, s2, 2
/*0000000107dc*/ s_cmpk_lg_u32   s0, 0x0
/*0000000107e0*/ v_add_co_ci_u32 v19, vcc, s5, v6, vcc
/*0000000107e4*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*0000000107ec*/ s_addc_u32      s0, s2, 0
/*0000000107f0*/ v_sub_co_u32    v7, vcc, s0, v2
/*0000000107f8*/ v_sub_co_ci_u32 v8, vcc, 0, v14, vcc
/*0000000107fc*/ v_add_co_u32    v5, vcc, s4, v5
/*000000010804*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000010808*/ global_store_dwordx2 v[12:13], v[10:11], off
/*000000010810*/ global_store_dwordx2 v[18:19], v[0:1], off
/*000000010818*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000010820*/ s_endpgm
/*000000010824*/ s_nop           0x0
/*000000010828*/ s_nop           0x0
/*00000001082c*/ s_nop           0x0
/*000000010830*/ s_nop           0x0
/*000000010834*/ s_nop           0x0
/*000000010838*/ s_nop           0x0
/*00000001083c*/ s_nop           0x0
/*000000010840*/ s_nop           0x0
/*000000010844*/ s_nop           0x0
/*000000010848*/ s_nop           0x0
/*00000001084c*/ s_nop           0x0
/*000000010850*/ s_nop           0x0
/*000000010854*/ s_nop           0x0
/*000000010858*/ s_nop           0x0
/*00000001085c*/ s_nop           0x0
/*000000010860*/ s_nop           0x0
/*000000010864*/ s_nop           0x0
/*000000010868*/ s_nop           0x0
/*00000001086c*/ s_nop           0x0
/*000000010870*/ s_nop           0x0
/*000000010874*/ s_nop           0x0
/*000000010878*/ s_nop           0x0
/*00000001087c*/ s_nop           0x0
/*000000010880*/ s_nop           0x0
/*000000010884*/ s_nop           0x0
/*000000010888*/ s_nop           0x0
/*00000001088c*/ s_nop           0x0
/*000000010890*/ s_nop           0x0
/*000000010894*/ s_nop           0x0
/*000000010898*/ s_nop           0x0
/*00000001089c*/ s_nop           0x0
/*0000000108a0*/ s_nop           0x0
/*0000000108a4*/ s_nop           0x0
/*0000000108a8*/ s_nop           0x0
/*0000000108ac*/ s_nop           0x0
/*0000000108b0*/ s_nop           0x0
/*0000000108b4*/ s_nop           0x0
/*0000000108b8*/ s_nop           0x0
/*0000000108bc*/ s_nop           0x0
/*0000000108c0*/ s_nop           0x0
/*0000000108c4*/ s_nop           0x0
/*0000000108c8*/ s_nop           0x0
/*0000000108cc*/ s_nop           0x0
/*0000000108d0*/ s_nop           0x0
/*0000000108d4*/ s_nop           0x0
/*0000000108d8*/ s_nop           0x0
/*0000000108dc*/ s_nop           0x0
/*0000000108e0*/ s_nop           0x0
/*0000000108e4*/ s_nop           0x0
/*0000000108e8*/ s_nop           0x0
/*0000000108ec*/ s_nop           0x0
/*0000000108f0*/ s_nop           0x0
/*0000000108f4*/ s_nop           0x0
/*0000000108f8*/ s_nop           0x0
/*0000000108fc*/ s_nop           0x0
subtract_long_get_work_dim_get_local_id:
.skip 256
/*000000010a00*/ v_mov_b32       v3, s4
/*000000010a04*/ v_mov_b32       v4, s5
/*000000010a08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000010a10*/ s_waitcnt       lgkmcnt(0)
/*000000010a14*/ s_clause        0x1
/*000000010a18*/ s_load_dword    s1, s[6:7], 0x20
/*000000010a20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000010a28*/ s_lshl_b32      s3, s8, 1
/*000000010a2c*/ s_lshl_b32      s6, s9, 1
/*000000010a30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000010a38*/ v_mov_b32       v4, 0
/*000000010a3c*/ s_lshl_b32      s7, s10, 2
/*000000010a40*/ v_mov_b32       v6, v4
/*000000010a44*/ v_mov_b32       v8, v4
/*000000010a48*/ v_add3_u32      v3, s0, s3, v0
/*000000010a50*/ v_add3_u32      v5, s2, s6, v1
/*000000010a58*/ s_waitcnt       lgkmcnt(0)
/*000000010a5c*/ v_add3_u32      v7, s1, s7, v2
/*000000010a64*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000010a6c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000010a74*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000010a7c*/ v_add_co_u32    v3, vcc, s4, v3
/*000000010a84*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000010a88*/ v_add_co_u32    v14, vcc, s4, v5
/*000000010a90*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*000000010a94*/ v_add_co_u32    v5, vcc, s4, v7
/*000000010a9c*/ v_add_co_ci_u32 v6, vcc, s5, v8, vcc
/*000000010aa0*/ s_waitcnt       vmcnt(0)
/*000000010aa4*/ v_and_b32       v11, 0xffff, v9
/*000000010aac*/ v_sub_co_u32    v9, s[0:1], v11, v0
/*000000010ab4*/ v_sub_co_ci_u32 v10, s[0:1], 0, 0, s[0:1]
/*000000010abc*/ v_sub_co_u32    v0, s[0:1], v11, v1
/*000000010ac4*/ v_sub_co_ci_u32 v1, s[0:1], 0, 0, s[0:1]
/*000000010acc*/ v_sub_co_u32    v11, s[0:1], v11, v2
/*000000010ad4*/ v_sub_co_ci_u32 v12, s[0:1], 0, 0, s[0:1]
/*000000010adc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000010ae4*/ global_store_dwordx2 v[14:15], v[0:1], off
/*000000010aec*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000010af4*/ s_endpgm
/*000000010af8*/ s_nop           0x0
/*000000010afc*/ s_nop           0x0
subtract_long_x_get_group_id:
.skip 256
/*000000010c00*/ s_clause        0x1
/*000000010c04*/ s_load_dword    s9, s[4:5], 0x8
/*000000010c0c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010c14*/ s_waitcnt       lgkmcnt(0)
/*000000010c18*/ s_clause        0x1
/*000000010c1c*/ s_load_dword    s1, s[4:5], 0x20
/*000000010c24*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000010c2c*/ v_mov_b32       v4, 0
/*000000010c30*/ s_lshl_b32      s3, s6, 4
/*000000010c34*/ s_lshl_b32      s10, s7, 1
/*000000010c38*/ s_lshl_b32      s11, s8, 1
/*000000010c3c*/ v_mov_b32       v6, v4
/*000000010c40*/ v_mov_b32       v8, v4
/*000000010c44*/ s_ashr_i32      s12, s9, 31
/*000000010c48*/ v_add3_u32      v3, s0, s3, v0
/*000000010c50*/ v_add3_u32      v5, s2, s10, v1
/*000000010c58*/ s_waitcnt       lgkmcnt(0)
/*000000010c5c*/ v_add3_u32      v7, s1, s11, v2
/*000000010c64*/ s_sub_u32       s0, s9, s6
/*000000010c68*/ s_subb_u32      s1, s12, 0
/*000000010c6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000010c74*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000010c7c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000010c84*/ s_sub_u32       s2, s9, s7
/*000000010c88*/ s_subb_u32      s3, s12, 0
/*000000010c8c*/ v_mov_b32       v3, s1
/*000000010c90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000010c98*/ v_mov_b32       v2, s0
/*000000010c9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000010ca0*/ v_add_co_u32    v14, vcc, s4, v4
/*000000010ca8*/ s_sub_u32       s0, s9, s8
/*000000010cac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000010cb0*/ s_subb_u32      s1, s12, 0
/*000000010cb4*/ v_add_co_u32    v4, vcc, s4, v6
/*000000010cbc*/ v_mov_b32       v9, s3
/*000000010cc0*/ v_mov_b32       v11, s1
/*000000010cc4*/ v_mov_b32       v8, s2
/*000000010cc8*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000010ccc*/ v_mov_b32       v10, s0
/*000000010cd0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000010cd8*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000010ce0*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000010ce8*/ s_endpgm
/*000000010cec*/ s_nop           0x0
/*000000010cf0*/ s_nop           0x0
/*000000010cf4*/ s_nop           0x0
/*000000010cf8*/ s_nop           0x0
/*000000010cfc*/ s_nop           0x0
subtract_long_get_global_offset_get_group_id:
.skip 256
/*000000010e00*/ s_clause        0x2
/*000000010e04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010e0c*/ s_load_dword    s9, s[4:5], 0x20
/*000000010e14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010e1c*/ v_mov_b32       v4, 0
/*000000010e20*/ s_waitcnt       lgkmcnt(0)
/*000000010e24*/ s_lshl_b32      s1, s6, 1
/*000000010e28*/ s_lshl_b32      s3, s7, 4
/*000000010e2c*/ s_lshl_b32      s10, s8, 1
/*000000010e30*/ v_mov_b32       v6, v4
/*000000010e34*/ v_mov_b32       v8, v4
/*000000010e38*/ v_add3_u32      v3, s0, s1, v0
/*000000010e40*/ v_add3_u32      v5, s2, s3, v1
/*000000010e48*/ v_add3_u32      v7, s9, s10, v2
/*000000010e50*/ s_sub_u32       s0, s0, s6
/*000000010e54*/ s_subb_u32      s1, 0, 0
/*000000010e58*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000010e60*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000010e68*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000010e70*/ s_sub_u32       s2, s2, s7
/*000000010e74*/ s_subb_u32      s3, 0, 0
/*000000010e78*/ v_mov_b32       v3, s1
/*000000010e7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000010e84*/ v_mov_b32       v2, s0
/*000000010e88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000010e8c*/ v_add_co_u32    v14, vcc, s4, v4
/*000000010e94*/ s_sub_u32       s0, s9, s8
/*000000010e98*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000010e9c*/ s_subb_u32      s1, 0, 0
/*000000010ea0*/ v_add_co_u32    v4, vcc, s4, v6
/*000000010ea8*/ v_mov_b32       v9, s3
/*000000010eac*/ v_mov_b32       v11, s1
/*000000010eb0*/ v_mov_b32       v8, s2
/*000000010eb4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000010eb8*/ v_mov_b32       v10, s0
/*000000010ebc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000010ec4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000010ecc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000010ed4*/ s_endpgm
/*000000010ed8*/ s_nop           0x0
/*000000010edc*/ s_nop           0x0
/*000000010ee0*/ s_nop           0x0
/*000000010ee4*/ s_nop           0x0
/*000000010ee8*/ s_nop           0x0
/*000000010eec*/ s_nop           0x0
/*000000010ef0*/ s_nop           0x0
/*000000010ef4*/ s_nop           0x0
/*000000010ef8*/ s_nop           0x0
/*000000010efc*/ s_nop           0x0
subtract_long_get_local_id_get_group_id:
.skip 256
/*000000011000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011008*/ s_waitcnt       lgkmcnt(0)
/*00000001100c*/ s_clause        0x1
/*000000011010*/ s_load_dword    s1, s[4:5], 0x20
/*000000011018*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011020*/ v_mov_b32       v4, 0
/*000000011024*/ s_lshl_b32      s3, s6, 3
/*000000011028*/ s_lshl_b32      s9, s7, 2
/*00000001102c*/ v_mov_b32       v12, 0
/*000000011030*/ v_sub_co_u32    v5, vcc, v0, s6
/*000000011038*/ v_mov_b32       v8, v4
/*00000001103c*/ s_lshl_b32      s10, s8, 1
/*000000011040*/ v_subrev_co_ci_u32 v6, vcc, 0, v12, vcc
/*000000011044*/ v_add3_u32      v3, s0, s3, v0
/*00000001104c*/ v_add3_u32      v7, s2, s9, v1
/*000000011054*/ v_sub_co_u32    v0, vcc, v1, s7
/*00000001105c*/ v_subrev_co_ci_u32 v1, vcc, 0, v12, vcc
/*000000011060*/ v_lshlrev_b64   v[9:10], 3, v[3:4]
/*000000011068*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000011070*/ s_waitcnt       lgkmcnt(0)
/*000000011074*/ v_add3_u32      v3, s1, s10, v2
/*00000001107c*/ v_add_co_u32    v15, vcc, s4, v9
/*000000011084*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001108c*/ v_add_co_ci_u32 v16, vcc, s5, v10, vcc
/*000000011090*/ v_add_co_u32    v18, vcc, s4, v7
/*000000011098*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*00000001109c*/ v_sub_co_u32    v11, vcc, v2, s8
/*0000000110a4*/ v_subrev_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000110a8*/ v_add_co_u32    v9, vcc, s4, v3
/*0000000110b0*/ v_add_co_ci_u32 v10, vcc, s5, v4, vcc
/*0000000110b4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000110bc*/ global_store_dwordx2 v[18:19], v[0:1], off
/*0000000110c4*/ global_store_dwordx2 v[9:10], v[11:12], off
/*0000000110cc*/ s_endpgm
/*0000000110d0*/ s_nop           0x0
/*0000000110d4*/ s_nop           0x0
/*0000000110d8*/ s_nop           0x0
/*0000000110dc*/ s_nop           0x0
/*0000000110e0*/ s_nop           0x0
/*0000000110e4*/ s_nop           0x0
/*0000000110e8*/ s_nop           0x0
/*0000000110ec*/ s_nop           0x0
/*0000000110f0*/ s_nop           0x0
/*0000000110f4*/ s_nop           0x0
/*0000000110f8*/ s_nop           0x0
/*0000000110fc*/ s_nop           0x0
subtract_long_get_group_id_get_group_id:
.skip 256
/*000000011200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011208*/ s_waitcnt       lgkmcnt(0)
/*00000001120c*/ s_clause        0x1
/*000000011210*/ s_load_dword    s1, s[4:5], 0x20
/*000000011218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011220*/ v_mov_b32       v4, 0
/*000000011224*/ s_lshl_b32      s3, s6, 1
/*000000011228*/ s_lshl_b32      s6, s7, 4
/*00000001122c*/ s_lshl_b32      s7, s8, 1
/*000000011230*/ s_mov_b32       s10, 0
/*000000011234*/ v_mov_b32       v6, v4
/*000000011238*/ v_mov_b32       v8, v4
/*00000001123c*/ s_mov_b32       s11, s10
/*000000011240*/ v_add3_u32      v3, s0, s3, v0
/*000000011248*/ v_add3_u32      v5, s2, s6, v1
/*000000011250*/ s_waitcnt       lgkmcnt(0)
/*000000011254*/ v_add3_u32      v7, s1, s7, v2
/*00000001125c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011264*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001126c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000011274*/ v_mov_b32       v2, s10
/*000000011278*/ v_mov_b32       v3, s11
/*00000001127c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011284*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011288*/ v_add_co_u32    v4, vcc, s4, v4
/*000000011290*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000011294*/ v_add_co_u32    v8, vcc, s4, v6
/*00000001129c*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000112a0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000112a8*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000112b0*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000112b8*/ s_endpgm
/*0000000112bc*/ s_nop           0x0
/*0000000112c0*/ s_nop           0x0
/*0000000112c4*/ s_nop           0x0
/*0000000112c8*/ s_nop           0x0
/*0000000112cc*/ s_nop           0x0
/*0000000112d0*/ s_nop           0x0
/*0000000112d4*/ s_nop           0x0
/*0000000112d8*/ s_nop           0x0
/*0000000112dc*/ s_nop           0x0
/*0000000112e0*/ s_nop           0x0
/*0000000112e4*/ s_nop           0x0
/*0000000112e8*/ s_nop           0x0
/*0000000112ec*/ s_nop           0x0
/*0000000112f0*/ s_nop           0x0
/*0000000112f4*/ s_nop           0x0
/*0000000112f8*/ s_nop           0x0
/*0000000112fc*/ s_nop           0x0
subtract_long_get_local_size_get_group_id:
.skip 256
/*000000011400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011408*/ s_waitcnt       lgkmcnt(0)
/*00000001140c*/ s_clause        0x1
/*000000011410*/ s_load_dword    s1, s[4:5], 0x20
/*000000011418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011420*/ v_mov_b32       v4, 0
/*000000011424*/ s_lshl_b32      s3, s6, 1
/*000000011428*/ s_lshl_b32      s9, s7, 1
/*00000001142c*/ s_lshl_b32      s12, s8, 2
/*000000011430*/ s_sub_u32       s10, 2, s6
/*000000011434*/ v_mov_b32       v6, v4
/*000000011438*/ v_mov_b32       v8, v4
/*00000001143c*/ s_subb_u32      s11, 0, 0
/*000000011440*/ s_sub_u32       s6, 2, s7
/*000000011444*/ s_subb_u32      s7, 0, 0
/*000000011448*/ v_add3_u32      v3, s0, s3, v0
/*000000011450*/ v_add3_u32      v5, s2, s9, v1
/*000000011458*/ s_waitcnt       lgkmcnt(0)
/*00000001145c*/ v_add3_u32      v7, s1, s12, v2
/*000000011464*/ s_sub_u32       s0, 4, s8
/*000000011468*/ s_subb_u32      s1, 0, 0
/*00000001146c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011474*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001147c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000011484*/ v_mov_b32       v2, s10
/*000000011488*/ v_mov_b32       v9, s7
/*00000001148c*/ v_mov_b32       v3, s11
/*000000011490*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011498*/ v_mov_b32       v11, s1
/*00000001149c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000114a0*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000114a8*/ v_mov_b32       v8, s6
/*0000000114ac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000114b0*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000114b8*/ v_mov_b32       v10, s0
/*0000000114bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000114c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000114c8*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000114d0*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000114d8*/ s_endpgm
/*0000000114dc*/ s_nop           0x0
/*0000000114e0*/ s_nop           0x0
/*0000000114e4*/ s_nop           0x0
/*0000000114e8*/ s_nop           0x0
/*0000000114ec*/ s_nop           0x0
/*0000000114f0*/ s_nop           0x0
/*0000000114f4*/ s_nop           0x0
/*0000000114f8*/ s_nop           0x0
/*0000000114fc*/ s_nop           0x0
subtract_long_get_global_id_get_group_id:
.skip 256
/*000000011600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011608*/ s_waitcnt       lgkmcnt(0)
/*00000001160c*/ s_clause        0x1
/*000000011610*/ s_load_dword    s1, s[4:5], 0x20
/*000000011618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011620*/ v_mov_b32       v4, 0
/*000000011624*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000001162c*/ s_lshl_b32      s3, s7, 1
/*000000011630*/ v_mov_b32       v14, 0
/*000000011634*/ s_lshl_b32      s9, s8, 2
/*000000011638*/ v_mov_b32       v8, v4
/*00000001163c*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000011644*/ v_add_nc_u32    v9, s0, v3
/*000000011648*/ v_add3_u32      v7, s2, s3, v1
/*000000011650*/ s_waitcnt       lgkmcnt(0)
/*000000011654*/ v_add_co_u32    v15, vcc, s4, v5
/*00000001165c*/ v_add3_u32      v3, s1, s9, v2
/*000000011664*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000011668*/ v_sub_co_u32    v5, vcc, v9, s6
/*000000011670*/ v_lshlrev_b64   v[8:9], 3, v[7:8]
/*000000011678*/ v_subrev_co_ci_u32 v6, vcc, 0, v14, vcc
/*00000001167c*/ v_sub_co_u32    v17, vcc, v7, s7
/*000000011684*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*00000001168c*/ v_subrev_co_ci_u32 v18, vcc, 0, v14, vcc
/*000000011690*/ v_add_co_u32    v7, vcc, s4, v8
/*000000011698*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*00000001169c*/ v_sub_co_u32    v2, vcc, v3, s8
/*0000000116a4*/ v_subrev_co_ci_u32 v3, vcc, 0, v14, vcc
/*0000000116a8*/ v_add_co_u32    v12, vcc, s4, v12
/*0000000116b0*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*0000000116b4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000116bc*/ global_store_dwordx2 v[7:8], v[17:18], off
/*0000000116c4*/ global_store_dwordx2 v[12:13], v[2:3], off
/*0000000116cc*/ s_endpgm
/*0000000116d0*/ s_nop           0x0
/*0000000116d4*/ s_nop           0x0
/*0000000116d8*/ s_nop           0x0
/*0000000116dc*/ s_nop           0x0
/*0000000116e0*/ s_nop           0x0
/*0000000116e4*/ s_nop           0x0
/*0000000116e8*/ s_nop           0x0
/*0000000116ec*/ s_nop           0x0
/*0000000116f0*/ s_nop           0x0
/*0000000116f4*/ s_nop           0x0
/*0000000116f8*/ s_nop           0x0
/*0000000116fc*/ s_nop           0x0
subtract_long_get_global_size_get_group_id:
.skip 256
/*000000011800*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000011808*/ s_waitcnt       lgkmcnt(0)
/*00000001180c*/ s_load_dword    s1, s[6:7], 0x20
/*000000011814*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001181c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000011824*/ v_mov_b32       v4, 0
/*000000011828*/ s_lshl_b32      s3, s8, 4
/*00000001182c*/ s_lshl_b32      s6, s9, 1
/*000000011830*/ s_lshl_b32      s7, s10, 1
/*000000011834*/ v_mov_b32       v6, v4
/*000000011838*/ v_mov_b32       v8, v4
/*00000001183c*/ s_waitcnt       lgkmcnt(0)
/*000000011840*/ v_add3_u32      v7, s1, s7, v2
/*000000011848*/ v_add3_u32      v3, s0, s3, v0
/*000000011850*/ v_add3_u32      v5, s2, s6, v1
/*000000011858*/ s_sub_u32       s0, s12, s8
/*00000001185c*/ s_subb_u32      s1, 0, 0
/*000000011860*/ s_sub_u32       s2, s13, s9
/*000000011864*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000001186c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000011874*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000001187c*/ s_subb_u32      s3, 0, 0
/*000000011880*/ v_mov_b32       v3, s1
/*000000011884*/ v_mov_b32       v2, s0
/*000000011888*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011890*/ s_sub_u32       s0, s14, s10
/*000000011894*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011898*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000118a0*/ s_subb_u32      s1, 0, 0
/*0000000118a4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000118a8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000118b0*/ v_mov_b32       v9, s3
/*0000000118b4*/ v_mov_b32       v11, s1
/*0000000118b8*/ v_mov_b32       v8, s2
/*0000000118bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000118c0*/ v_mov_b32       v10, s0
/*0000000118c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000118cc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000118d4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000118dc*/ s_endpgm
/*0000000118e0*/ s_nop           0x0
/*0000000118e4*/ s_nop           0x0
/*0000000118e8*/ s_nop           0x0
/*0000000118ec*/ s_nop           0x0
/*0000000118f0*/ s_nop           0x0
/*0000000118f4*/ s_nop           0x0
/*0000000118f8*/ s_nop           0x0
/*0000000118fc*/ s_nop           0x0
subtract_long_get_num_groups_get_group_id:
.skip 256
/*000000011a00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000011a08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000011a10*/ s_waitcnt       lgkmcnt(0)
/*000000011a14*/ s_clause        0x1
/*000000011a18*/ s_load_dword    s3, s[6:7], 0x20
/*000000011a20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000011a28*/ s_lshl_b32      s7, s8, 1
/*000000011a2c*/ s_lshl_b32      s11, s9, 1
/*000000011a30*/ s_lshl_b32      s13, s10, 2
/*000000011a34*/ v_mov_b32       v4, 0
/*000000011a38*/ v_mov_b32       v6, v4
/*000000011a3c*/ v_mov_b32       v8, v4
/*000000011a40*/ s_and_b32       s6, s0, -2
/*000000011a44*/ v_add3_u32      v3, s12, s7, v0
/*000000011a4c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000011a54*/ s_lshr_b32      s0, s0, 1
/*000000011a58*/ s_waitcnt       lgkmcnt(0)
/*000000011a5c*/ v_add3_u32      v7, s3, s13, v2
/*000000011a64*/ v_add3_u32      v5, s14, s11, v1
/*000000011a6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011a74*/ s_cmpk_lg_u32   s6, 0x0
/*000000011a78*/ s_addc_u32      s0, s0, 0
/*000000011a7c*/ s_and_b32       s6, s1, -2
/*000000011a80*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000011a88*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000011a90*/ s_lshr_b32      s1, s1, 1
/*000000011a94*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011a9c*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000011aa4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011aa8*/ s_cmpk_lg_u32   s6, 0x0
/*000000011aac*/ v_add_co_u32    v2, vcc, s4, v2
/*000000011ab4*/ s_addc_u32      s3, s1, 0
/*000000011ab8*/ s_and_b32       s1, s2, -4
/*000000011abc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000011ac0*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000011ac8*/ s_lshr_b32      s2, s2, 2
/*000000011acc*/ v_add_co_u32    v4, vcc, s4, v4
/*000000011ad4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000011ad8*/ s_cmpk_lg_u32   s1, 0x0
/*000000011adc*/ s_addc_u32      s6, s2, 0
/*000000011ae0*/ s_sub_u32       s0, s0, s8
/*000000011ae4*/ s_subb_u32      s1, 0, 0
/*000000011ae8*/ s_sub_u32       s2, s3, s9
/*000000011aec*/ s_subb_u32      s3, 0, 0
/*000000011af0*/ v_mov_b32       v7, s1
/*000000011af4*/ v_mov_b32       v6, s0
/*000000011af8*/ s_sub_u32       s0, s6, s10
/*000000011afc*/ s_subb_u32      s1, 0, 0
/*000000011b00*/ v_mov_b32       v9, s3
/*000000011b04*/ v_mov_b32       v11, s1
/*000000011b08*/ v_mov_b32       v8, s2
/*000000011b0c*/ v_mov_b32       v10, s0
/*000000011b10*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000011b18*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000011b20*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000011b28*/ s_endpgm
/*000000011b2c*/ s_nop           0x0
/*000000011b30*/ s_nop           0x0
/*000000011b34*/ s_nop           0x0
/*000000011b38*/ s_nop           0x0
/*000000011b3c*/ s_nop           0x0
/*000000011b40*/ s_nop           0x0
/*000000011b44*/ s_nop           0x0
/*000000011b48*/ s_nop           0x0
/*000000011b4c*/ s_nop           0x0
/*000000011b50*/ s_nop           0x0
/*000000011b54*/ s_nop           0x0
/*000000011b58*/ s_nop           0x0
/*000000011b5c*/ s_nop           0x0
/*000000011b60*/ s_nop           0x0
/*000000011b64*/ s_nop           0x0
/*000000011b68*/ s_nop           0x0
/*000000011b6c*/ s_nop           0x0
/*000000011b70*/ s_nop           0x0
/*000000011b74*/ s_nop           0x0
/*000000011b78*/ s_nop           0x0
/*000000011b7c*/ s_nop           0x0
/*000000011b80*/ s_nop           0x0
/*000000011b84*/ s_nop           0x0
/*000000011b88*/ s_nop           0x0
/*000000011b8c*/ s_nop           0x0
/*000000011b90*/ s_nop           0x0
/*000000011b94*/ s_nop           0x0
/*000000011b98*/ s_nop           0x0
/*000000011b9c*/ s_nop           0x0
/*000000011ba0*/ s_nop           0x0
/*000000011ba4*/ s_nop           0x0
/*000000011ba8*/ s_nop           0x0
/*000000011bac*/ s_nop           0x0
/*000000011bb0*/ s_nop           0x0
/*000000011bb4*/ s_nop           0x0
/*000000011bb8*/ s_nop           0x0
/*000000011bbc*/ s_nop           0x0
/*000000011bc0*/ s_nop           0x0
/*000000011bc4*/ s_nop           0x0
/*000000011bc8*/ s_nop           0x0
/*000000011bcc*/ s_nop           0x0
/*000000011bd0*/ s_nop           0x0
/*000000011bd4*/ s_nop           0x0
/*000000011bd8*/ s_nop           0x0
/*000000011bdc*/ s_nop           0x0
/*000000011be0*/ s_nop           0x0
/*000000011be4*/ s_nop           0x0
/*000000011be8*/ s_nop           0x0
/*000000011bec*/ s_nop           0x0
/*000000011bf0*/ s_nop           0x0
/*000000011bf4*/ s_nop           0x0
/*000000011bf8*/ s_nop           0x0
/*000000011bfc*/ s_nop           0x0
subtract_long_get_work_dim_get_group_id:
.skip 256
/*000000011d00*/ v_mov_b32       v3, s4
/*000000011d04*/ v_mov_b32       v4, s5
/*000000011d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000011d10*/ s_waitcnt       lgkmcnt(0)
/*000000011d14*/ s_clause        0x1
/*000000011d18*/ s_load_dword    s1, s[6:7], 0x20
/*000000011d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000011d28*/ s_lshl_b32      s3, s8, 1
/*000000011d2c*/ s_lshl_b32      s6, s9, 1
/*000000011d30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000011d38*/ v_mov_b32       v4, 0
/*000000011d3c*/ s_lshl_b32      s7, s10, 2
/*000000011d40*/ v_mov_b32       v11, 0
/*000000011d44*/ v_mov_b32       v6, v4
/*000000011d48*/ v_mov_b32       v8, v4
/*000000011d4c*/ v_add3_u32      v3, s0, s3, v0
/*000000011d54*/ v_add3_u32      v5, s2, s6, v1
/*000000011d5c*/ s_waitcnt       lgkmcnt(0)
/*000000011d60*/ v_add3_u32      v7, s1, s7, v2
/*000000011d68*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011d70*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000011d78*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000011d80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011d88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011d8c*/ v_add_co_u32    v2, vcc, s4, v2
/*000000011d94*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000011d98*/ v_add_co_u32    v4, vcc, s4, v4
/*000000011da0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000011da4*/ s_waitcnt       vmcnt(0)
/*000000011da8*/ v_and_b32       v10, 0xffff, v9
/*000000011db0*/ v_sub_co_u32    v6, vcc, v10, s8
/*000000011db8*/ v_subrev_co_ci_u32 v7, vcc, 0, v11, vcc
/*000000011dbc*/ v_sub_co_u32    v8, vcc, v10, s9
/*000000011dc4*/ v_subrev_co_ci_u32 v9, vcc, 0, v11, vcc
/*000000011dc8*/ v_sub_co_u32    v10, vcc, v10, s10
/*000000011dd0*/ v_subrev_co_ci_u32 v11, vcc, 0, v11, vcc
/*000000011dd4*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000011ddc*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000011de4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000011dec*/ s_endpgm
/*000000011df0*/ s_nop           0x0
/*000000011df4*/ s_nop           0x0
/*000000011df8*/ s_nop           0x0
/*000000011dfc*/ s_nop           0x0
subtract_long_x_get_local_size:
.skip 256
/*000000011f00*/ s_clause        0x1
/*000000011f04*/ s_load_dword    s9, s[4:5], 0x8
/*000000011f0c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011f14*/ s_waitcnt       lgkmcnt(0)
/*000000011f18*/ s_clause        0x1
/*000000011f1c*/ s_load_dword    s1, s[4:5], 0x20
/*000000011f24*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000011f2c*/ v_mov_b32       v4, 0
/*000000011f30*/ s_lshl_b32      s3, s6, 4
/*000000011f34*/ s_lshl_b32      s6, s7, 1
/*000000011f38*/ s_lshl_b32      s7, s8, 1
/*000000011f3c*/ v_mov_b32       v6, v4
/*000000011f40*/ v_mov_b32       v8, v4
/*000000011f44*/ s_ashr_i32      s8, s9, 31
/*000000011f48*/ v_add3_u32      v3, s0, s3, v0
/*000000011f50*/ v_add3_u32      v5, s2, s6, v1
/*000000011f58*/ s_waitcnt       lgkmcnt(0)
/*000000011f5c*/ v_add3_u32      v7, s1, s7, v2
/*000000011f64*/ s_add_u32       s0, s9, -16
/*000000011f68*/ s_addc_u32      s1, s8, -1
/*000000011f6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011f74*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000011f7c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000011f84*/ s_add_u32       s2, s9, -2
/*000000011f88*/ s_addc_u32      s3, s8, -1
/*000000011f8c*/ v_mov_b32       v3, s1
/*000000011f90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011f98*/ v_mov_b32       v9, s3
/*000000011f9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011fa0*/ v_add_co_u32    v10, vcc, s4, v4
/*000000011fa8*/ v_mov_b32       v2, s0
/*000000011fac*/ v_add_co_ci_u32 v11, vcc, s5, v5, vcc
/*000000011fb0*/ v_add_co_u32    v6, vcc, s4, v6
/*000000011fb8*/ v_mov_b32       v8, s2
/*000000011fbc*/ v_add_co_ci_u32 v7, vcc, s5, v7, vcc
/*000000011fc0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000011fc8*/ global_store_dwordx2 v[10:11], v[8:9], off
/*000000011fd0*/ global_store_dwordx2 v[6:7], v[8:9], off
/*000000011fd8*/ s_endpgm
/*000000011fdc*/ s_nop           0x0
/*000000011fe0*/ s_nop           0x0
/*000000011fe4*/ s_nop           0x0
/*000000011fe8*/ s_nop           0x0
/*000000011fec*/ s_nop           0x0
/*000000011ff0*/ s_nop           0x0
/*000000011ff4*/ s_nop           0x0
/*000000011ff8*/ s_nop           0x0
/*000000011ffc*/ s_nop           0x0
subtract_long_get_global_offset_get_local_size:
.skip 256
/*000000012100*/ s_clause        0x2
/*000000012104*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001210c*/ s_load_dword    s9, s[4:5], 0x20
/*000000012114*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001211c*/ v_mov_b32       v4, 0
/*000000012120*/ s_waitcnt       lgkmcnt(0)
/*000000012124*/ s_lshl_b32      s1, s6, 1
/*000000012128*/ s_lshl_b32      s3, s7, 4
/*00000001212c*/ s_lshl_b32      s6, s8, 1
/*000000012130*/ v_mov_b32       v6, v4
/*000000012134*/ v_mov_b32       v8, v4
/*000000012138*/ v_add3_u32      v3, s0, s1, v0
/*000000012140*/ v_add3_u32      v5, s2, s3, v1
/*000000012148*/ v_add3_u32      v7, s9, s6, v2
/*000000012150*/ s_add_u32       s0, s0, -2
/*000000012154*/ s_addc_u32      s1, 0, -1
/*000000012158*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012160*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000012168*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012170*/ s_add_u32       s2, s2, -16
/*000000012174*/ s_addc_u32      s3, 0, -1
/*000000012178*/ v_mov_b32       v3, s1
/*00000001217c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012184*/ v_mov_b32       v2, s0
/*000000012188*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000001218c*/ v_add_co_u32    v14, vcc, s4, v4
/*000000012194*/ s_add_u32       s0, s9, -2
/*000000012198*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000001219c*/ s_addc_u32      s1, 0, -1
/*0000000121a0*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000121a8*/ v_mov_b32       v9, s3
/*0000000121ac*/ v_mov_b32       v11, s1
/*0000000121b0*/ v_mov_b32       v8, s2
/*0000000121b4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000121b8*/ v_mov_b32       v10, s0
/*0000000121bc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000121c4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000121cc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000121d4*/ s_endpgm
/*0000000121d8*/ s_nop           0x0
/*0000000121dc*/ s_nop           0x0
/*0000000121e0*/ s_nop           0x0
/*0000000121e4*/ s_nop           0x0
/*0000000121e8*/ s_nop           0x0
/*0000000121ec*/ s_nop           0x0
/*0000000121f0*/ s_nop           0x0
/*0000000121f4*/ s_nop           0x0
/*0000000121f8*/ s_nop           0x0
/*0000000121fc*/ s_nop           0x0
subtract_long_get_local_id_get_local_size:
.skip 256
/*000000012300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012308*/ s_waitcnt       lgkmcnt(0)
/*00000001230c*/ s_clause        0x1
/*000000012310*/ s_load_dword    s1, s[4:5], 0x20
/*000000012318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012320*/ s_lshl_b32      s3, s6, 3
/*000000012324*/ v_mov_b32       v4, 0
/*000000012328*/ v_mov_b32       v6, -1
/*00000001232c*/ v_or_b32        v5, -8, v0
/*000000012330*/ v_mov_b32       v8, v4
/*000000012334*/ v_add3_u32      v3, s0, s3, v0
/*00000001233c*/ s_lshl_b32      s0, s7, 2
/*000000012340*/ s_lshl_b32      s3, s8, 1
/*000000012344*/ v_add3_u32      v7, s2, s0, v1
/*00000001234c*/ v_lshlrev_b64   v[9:10], 3, v[3:4]
/*000000012354*/ s_waitcnt       lgkmcnt(0)
/*000000012358*/ v_add3_u32      v3, s1, s3, v2
/*000000012360*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000012368*/ v_add_co_u32    v11, vcc, s4, v9
/*000000012370*/ v_add_co_ci_u32 v12, vcc, s5, v10, vcc
/*000000012374*/ v_add_co_u32    v7, vcc, s4, v7
/*00000001237c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000012380*/ global_store_dwordx2 v[11:12], v[5:6], off
/*000000012388*/ v_or_b32        v5, -4, v1
/*00000001238c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012394*/ global_store_dwordx2 v[7:8], v[5:6], off
/*00000001239c*/ v_or_b32        v5, -2, v2
/*0000000123a0*/ v_add_co_u32    v3, vcc, s4, v0
/*0000000123a8*/ v_add_co_ci_u32 v4, vcc, s5, v1, vcc
/*0000000123ac*/ global_store_dwordx2 v[3:4], v[5:6], off
/*0000000123b4*/ s_endpgm
/*0000000123b8*/ s_nop           0x0
/*0000000123bc*/ s_nop           0x0
/*0000000123c0*/ s_nop           0x0
/*0000000123c4*/ s_nop           0x0
/*0000000123c8*/ s_nop           0x0
/*0000000123cc*/ s_nop           0x0
/*0000000123d0*/ s_nop           0x0
/*0000000123d4*/ s_nop           0x0
/*0000000123d8*/ s_nop           0x0
/*0000000123dc*/ s_nop           0x0
/*0000000123e0*/ s_nop           0x0
/*0000000123e4*/ s_nop           0x0
/*0000000123e8*/ s_nop           0x0
/*0000000123ec*/ s_nop           0x0
/*0000000123f0*/ s_nop           0x0
/*0000000123f4*/ s_nop           0x0
/*0000000123f8*/ s_nop           0x0
/*0000000123fc*/ s_nop           0x0
subtract_long_get_group_id_get_local_size:
.skip 256
/*000000012500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012508*/ s_waitcnt       lgkmcnt(0)
/*00000001250c*/ s_clause        0x1
/*000000012510*/ s_load_dword    s1, s[4:5], 0x20
/*000000012518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012520*/ v_mov_b32       v4, 0
/*000000012524*/ s_lshl_b32      s3, s6, 1
/*000000012528*/ s_lshl_b32      s9, s7, 4
/*00000001252c*/ s_lshl_b32      s12, s8, 1
/*000000012530*/ s_add_u32       s10, s6, -2
/*000000012534*/ v_mov_b32       v6, v4
/*000000012538*/ v_mov_b32       v8, v4
/*00000001253c*/ s_addc_u32      s11, 0, -1
/*000000012540*/ s_add_u32       s6, s7, -16
/*000000012544*/ s_addc_u32      s7, 0, -1
/*000000012548*/ v_add3_u32      v3, s0, s3, v0
/*000000012550*/ v_add3_u32      v5, s2, s9, v1
/*000000012558*/ s_waitcnt       lgkmcnt(0)
/*00000001255c*/ v_add3_u32      v7, s1, s12, v2
/*000000012564*/ s_add_u32       s0, s8, -2
/*000000012568*/ s_addc_u32      s1, 0, -1
/*00000001256c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012574*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001257c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012584*/ v_mov_b32       v2, s10
/*000000012588*/ v_mov_b32       v9, s7
/*00000001258c*/ v_mov_b32       v3, s11
/*000000012590*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012598*/ v_mov_b32       v11, s1
/*00000001259c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000125a0*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000125a8*/ v_mov_b32       v8, s6
/*0000000125ac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000125b0*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000125b8*/ v_mov_b32       v10, s0
/*0000000125bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000125c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000125c8*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000125d0*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000125d8*/ s_endpgm
/*0000000125dc*/ s_nop           0x0
/*0000000125e0*/ s_nop           0x0
/*0000000125e4*/ s_nop           0x0
/*0000000125e8*/ s_nop           0x0
/*0000000125ec*/ s_nop           0x0
/*0000000125f0*/ s_nop           0x0
/*0000000125f4*/ s_nop           0x0
/*0000000125f8*/ s_nop           0x0
/*0000000125fc*/ s_nop           0x0
subtract_long_get_local_size_get_local_size:
.skip 256
/*000000012700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012708*/ s_waitcnt       lgkmcnt(0)
/*00000001270c*/ s_clause        0x1
/*000000012710*/ s_load_dword    s1, s[4:5], 0x20
/*000000012718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012720*/ v_mov_b32       v4, 0
/*000000012724*/ s_lshl_b32      s3, s6, 1
/*000000012728*/ s_lshl_b32      s6, s7, 1
/*00000001272c*/ s_lshl_b32      s7, s8, 2
/*000000012730*/ s_mov_b32       s10, 0
/*000000012734*/ v_mov_b32       v6, v4
/*000000012738*/ v_mov_b32       v8, v4
/*00000001273c*/ s_mov_b32       s11, s10
/*000000012740*/ v_add3_u32      v3, s0, s3, v0
/*000000012748*/ v_add3_u32      v5, s2, s6, v1
/*000000012750*/ s_waitcnt       lgkmcnt(0)
/*000000012754*/ v_add3_u32      v7, s1, s7, v2
/*00000001275c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012764*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001276c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012774*/ v_mov_b32       v2, s10
/*000000012778*/ v_mov_b32       v3, s11
/*00000001277c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012784*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012788*/ v_add_co_u32    v4, vcc, s4, v4
/*000000012790*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000012794*/ v_add_co_u32    v8, vcc, s4, v6
/*00000001279c*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000127a0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000127a8*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000127b0*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000127b8*/ s_endpgm
/*0000000127bc*/ s_nop           0x0
/*0000000127c0*/ s_nop           0x0
/*0000000127c4*/ s_nop           0x0
/*0000000127c8*/ s_nop           0x0
/*0000000127cc*/ s_nop           0x0
/*0000000127d0*/ s_nop           0x0
/*0000000127d4*/ s_nop           0x0
/*0000000127d8*/ s_nop           0x0
/*0000000127dc*/ s_nop           0x0
/*0000000127e0*/ s_nop           0x0
/*0000000127e4*/ s_nop           0x0
/*0000000127e8*/ s_nop           0x0
/*0000000127ec*/ s_nop           0x0
/*0000000127f0*/ s_nop           0x0
/*0000000127f4*/ s_nop           0x0
/*0000000127f8*/ s_nop           0x0
/*0000000127fc*/ s_nop           0x0
subtract_long_get_global_id_get_local_size:
.skip 256
/*000000012900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012908*/ s_waitcnt       lgkmcnt(0)
/*00000001290c*/ s_clause        0x1
/*000000012910*/ s_load_dword    s1, s[4:5], 0x20
/*000000012918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012920*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000012928*/ v_mov_b32       v4, 0
/*00000001292c*/ s_lshl_b32      s6, s7, 1
/*000000012930*/ s_lshl_b32      s7, s8, 2
/*000000012934*/ s_mov_b32       s3, 0
/*000000012938*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000012940*/ v_mov_b32       v8, v4
/*000000012944*/ v_add_nc_u32    v9, s0, v3
/*000000012948*/ v_add3_u32      v7, s2, s6, v1
/*000000012950*/ s_waitcnt       lgkmcnt(0)
/*000000012954*/ v_add3_u32      v3, s1, s7, v2
/*00000001295c*/ v_add_co_u32    v15, vcc, s4, v5
/*000000012964*/ v_add_co_u32    v5, s[0:1], v9, -2
/*00000001296c*/ v_lshlrev_b64   v[8:9], 3, v[7:8]
/*000000012974*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*00000001297c*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000012980*/ v_add_co_ci_u32 v6, s[0:1], s3, -1, s[0:1]
/*000000012988*/ v_add_co_u32    v17, s[0:1], v7, -2
/*000000012990*/ v_add_co_u32    v7, vcc, s4, v8
/*000000012998*/ v_add_co_ci_u32 v18, s[0:1], s3, -1, s[0:1]
/*0000000129a0*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*0000000129a4*/ v_add_co_u32    v2, s[0:1], v3, -4
/*0000000129ac*/ v_add_co_u32    v12, vcc, s4, v12
/*0000000129b4*/ v_add_co_ci_u32 v3, s[0:1], s3, -1, s[0:1]
/*0000000129bc*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*0000000129c0*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000129c8*/ global_store_dwordx2 v[7:8], v[17:18], off
/*0000000129d0*/ global_store_dwordx2 v[12:13], v[2:3], off
/*0000000129d8*/ s_endpgm
/*0000000129dc*/ s_nop           0x0
/*0000000129e0*/ s_nop           0x0
/*0000000129e4*/ s_nop           0x0
/*0000000129e8*/ s_nop           0x0
/*0000000129ec*/ s_nop           0x0
/*0000000129f0*/ s_nop           0x0
/*0000000129f4*/ s_nop           0x0
/*0000000129f8*/ s_nop           0x0
/*0000000129fc*/ s_nop           0x0
subtract_long_get_global_size_get_local_size:
.skip 256
/*000000012b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000012b08*/ s_waitcnt       lgkmcnt(0)
/*000000012b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000012b14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000012b1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000012b24*/ v_mov_b32       v4, 0
/*000000012b28*/ s_lshl_b32      s3, s8, 4
/*000000012b2c*/ s_lshl_b32      s6, s9, 1
/*000000012b30*/ s_lshl_b32      s7, s10, 1
/*000000012b34*/ v_mov_b32       v6, v4
/*000000012b38*/ v_mov_b32       v8, v4
/*000000012b3c*/ s_waitcnt       lgkmcnt(0)
/*000000012b40*/ v_add3_u32      v7, s1, s7, v2
/*000000012b48*/ v_add3_u32      v3, s0, s3, v0
/*000000012b50*/ v_add3_u32      v5, s2, s6, v1
/*000000012b58*/ s_add_u32       s0, s12, -16
/*000000012b5c*/ s_addc_u32      s1, 0, -1
/*000000012b60*/ s_add_u32       s2, s13, -2
/*000000012b64*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012b6c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000012b74*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012b7c*/ s_addc_u32      s3, 0, -1
/*000000012b80*/ v_mov_b32       v3, s1
/*000000012b84*/ v_mov_b32       v2, s0
/*000000012b88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012b90*/ s_add_u32       s0, s14, -2
/*000000012b94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012b98*/ v_add_co_u32    v14, vcc, s4, v4
/*000000012ba0*/ s_addc_u32      s1, 0, -1
/*000000012ba4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000012ba8*/ v_add_co_u32    v4, vcc, s4, v6
/*000000012bb0*/ v_mov_b32       v9, s3
/*000000012bb4*/ v_mov_b32       v11, s1
/*000000012bb8*/ v_mov_b32       v8, s2
/*000000012bbc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000012bc0*/ v_mov_b32       v10, s0
/*000000012bc4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000012bcc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000012bd4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000012bdc*/ s_endpgm
/*000000012be0*/ s_nop           0x0
/*000000012be4*/ s_nop           0x0
/*000000012be8*/ s_nop           0x0
/*000000012bec*/ s_nop           0x0
/*000000012bf0*/ s_nop           0x0
/*000000012bf4*/ s_nop           0x0
/*000000012bf8*/ s_nop           0x0
/*000000012bfc*/ s_nop           0x0
subtract_long_get_num_groups_get_local_size:
.skip 256
/*000000012d00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000012d08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000012d10*/ s_waitcnt       lgkmcnt(0)
/*000000012d14*/ s_clause        0x1
/*000000012d18*/ s_load_dword    s3, s[6:7], 0x20
/*000000012d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000012d28*/ s_lshl_b32      s7, s8, 1
/*000000012d2c*/ s_lshl_b32      s8, s9, 1
/*000000012d30*/ s_lshl_b32      s9, s10, 2
/*000000012d34*/ v_mov_b32       v4, 0
/*000000012d38*/ v_mov_b32       v6, v4
/*000000012d3c*/ v_mov_b32       v8, v4
/*000000012d40*/ s_and_b32       s6, s0, -2
/*000000012d44*/ v_add3_u32      v3, s12, s7, v0
/*000000012d4c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000012d54*/ s_lshr_b32      s0, s0, 1
/*000000012d58*/ s_waitcnt       lgkmcnt(0)
/*000000012d5c*/ v_add3_u32      v7, s3, s9, v2
/*000000012d64*/ v_add3_u32      v5, s14, s8, v1
/*000000012d6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012d74*/ s_cmpk_lg_u32   s6, 0x0
/*000000012d78*/ s_addc_u32      s0, s0, 0
/*000000012d7c*/ s_and_b32       s6, s1, -2
/*000000012d80*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000012d88*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000012d90*/ s_lshr_b32      s1, s1, 1
/*000000012d94*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012d9c*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000012da4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012da8*/ s_cmpk_lg_u32   s6, 0x0
/*000000012dac*/ v_add_co_u32    v2, vcc, s4, v2
/*000000012db4*/ s_addc_u32      s3, s1, 0
/*000000012db8*/ s_and_b32       s1, s2, -4
/*000000012dbc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000012dc0*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000012dc8*/ s_lshr_b32      s2, s2, 2
/*000000012dcc*/ v_add_co_u32    v4, vcc, s4, v4
/*000000012dd4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000012dd8*/ s_cmpk_lg_u32   s1, 0x0
/*000000012ddc*/ s_addc_u32      s6, s2, 0
/*000000012de0*/ s_add_u32       s0, s0, -2
/*000000012de4*/ s_addc_u32      s1, 0, -1
/*000000012de8*/ s_add_u32       s2, s3, -2
/*000000012dec*/ s_addc_u32      s3, 0, -1
/*000000012df0*/ v_mov_b32       v7, s1
/*000000012df4*/ v_mov_b32       v6, s0
/*000000012df8*/ s_add_u32       s0, s6, -4
/*000000012dfc*/ s_addc_u32      s1, 0, -1
/*000000012e00*/ v_mov_b32       v9, s3
/*000000012e04*/ v_mov_b32       v11, s1
/*000000012e08*/ v_mov_b32       v8, s2
/*000000012e0c*/ v_mov_b32       v10, s0
/*000000012e10*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000012e18*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000012e20*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000012e28*/ s_endpgm
/*000000012e2c*/ s_nop           0x0
/*000000012e30*/ s_nop           0x0
/*000000012e34*/ s_nop           0x0
/*000000012e38*/ s_nop           0x0
/*000000012e3c*/ s_nop           0x0
/*000000012e40*/ s_nop           0x0
/*000000012e44*/ s_nop           0x0
/*000000012e48*/ s_nop           0x0
/*000000012e4c*/ s_nop           0x0
/*000000012e50*/ s_nop           0x0
/*000000012e54*/ s_nop           0x0
/*000000012e58*/ s_nop           0x0
/*000000012e5c*/ s_nop           0x0
/*000000012e60*/ s_nop           0x0
/*000000012e64*/ s_nop           0x0
/*000000012e68*/ s_nop           0x0
/*000000012e6c*/ s_nop           0x0
/*000000012e70*/ s_nop           0x0
/*000000012e74*/ s_nop           0x0
/*000000012e78*/ s_nop           0x0
/*000000012e7c*/ s_nop           0x0
/*000000012e80*/ s_nop           0x0
/*000000012e84*/ s_nop           0x0
/*000000012e88*/ s_nop           0x0
/*000000012e8c*/ s_nop           0x0
/*000000012e90*/ s_nop           0x0
/*000000012e94*/ s_nop           0x0
/*000000012e98*/ s_nop           0x0
/*000000012e9c*/ s_nop           0x0
/*000000012ea0*/ s_nop           0x0
/*000000012ea4*/ s_nop           0x0
/*000000012ea8*/ s_nop           0x0
/*000000012eac*/ s_nop           0x0
/*000000012eb0*/ s_nop           0x0
/*000000012eb4*/ s_nop           0x0
/*000000012eb8*/ s_nop           0x0
/*000000012ebc*/ s_nop           0x0
/*000000012ec0*/ s_nop           0x0
/*000000012ec4*/ s_nop           0x0
/*000000012ec8*/ s_nop           0x0
/*000000012ecc*/ s_nop           0x0
/*000000012ed0*/ s_nop           0x0
/*000000012ed4*/ s_nop           0x0
/*000000012ed8*/ s_nop           0x0
/*000000012edc*/ s_nop           0x0
/*000000012ee0*/ s_nop           0x0
/*000000012ee4*/ s_nop           0x0
/*000000012ee8*/ s_nop           0x0
/*000000012eec*/ s_nop           0x0
/*000000012ef0*/ s_nop           0x0
/*000000012ef4*/ s_nop           0x0
/*000000012ef8*/ s_nop           0x0
/*000000012efc*/ s_nop           0x0
subtract_long_get_work_dim_get_local_size:
.skip 256
/*000000013000*/ v_mov_b32       v3, s4
/*000000013004*/ v_mov_b32       v4, s5
/*000000013008*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000013010*/ s_waitcnt       lgkmcnt(0)
/*000000013014*/ s_clause        0x1
/*000000013018*/ s_load_dword    s1, s[6:7], 0x20
/*000000013020*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000013028*/ s_lshl_b32      s3, s8, 1
/*00000001302c*/ s_lshl_b32      s6, s9, 1
/*000000013030*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000013038*/ v_mov_b32       v4, 0
/*00000001303c*/ s_lshl_b32      s7, s10, 2
/*000000013040*/ v_mov_b32       v6, v4
/*000000013044*/ v_mov_b32       v8, v4
/*000000013048*/ v_add3_u32      v3, s0, s3, v0
/*000000013050*/ v_add3_u32      v5, s2, s6, v1
/*000000013058*/ s_waitcnt       lgkmcnt(0)
/*00000001305c*/ v_add3_u32      v7, s1, s7, v2
/*000000013064*/ s_mov_b32       s0, 0
/*000000013068*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000013070*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000013078*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000013080*/ v_add_co_u32    v0, vcc, s4, v0
/*000000013088*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000001308c*/ v_add_co_u32    v12, vcc, s4, v2
/*000000013094*/ v_add_co_ci_u32 v13, vcc, s5, v3, vcc
/*000000013098*/ v_add_co_u32    v2, vcc, s4, v4
/*0000000130a0*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*0000000130a4*/ s_waitcnt       vmcnt(0)
/*0000000130a8*/ v_and_b32       v8, 0xffff, v9
/*0000000130b0*/ v_add_co_u32    v6, s[1:2], v8, -2
/*0000000130b8*/ v_add_co_ci_u32 v7, s[1:2], s0, -1, s[1:2]
/*0000000130c0*/ v_add_co_u32    v8, s[1:2], v8, -4
/*0000000130c8*/ v_add_co_ci_u32 v9, s[0:1], s0, -1, s[1:2]
/*0000000130d0*/ global_store_dwordx2 v[0:1], v[6:7], off
/*0000000130d8*/ global_store_dwordx2 v[12:13], v[6:7], off
/*0000000130e0*/ global_store_dwordx2 v[2:3], v[8:9], off
/*0000000130e8*/ s_endpgm
/*0000000130ec*/ s_nop           0x0
/*0000000130f0*/ s_nop           0x0
/*0000000130f4*/ s_nop           0x0
/*0000000130f8*/ s_nop           0x0
/*0000000130fc*/ s_nop           0x0
subtract_long_x_get_global_id:
.skip 256
/*000000013200*/ s_clause        0x3
/*000000013204*/ s_load_dword    s9, s[4:5], 0x8
/*00000001320c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013214*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000001321c*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000013224*/ v_lshl_or_b32   v0, s6, 4, v0
/*00000001322c*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000013234*/ v_lshl_or_b32   v3, s8, 1, v2
/*00000001323c*/ s_waitcnt       lgkmcnt(0)
/*000000013240*/ s_ashr_i32      s6, s9, 31
/*000000013244*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001324c*/ v_add_co_ci_u32 v8, s[0:1], s1, 0, s[0:1]
/*000000013254*/ v_add_co_u32    v2, s[0:1], s2, v1
/*00000001325c*/ v_mov_b32       v1, 0
/*000000013260*/ v_add_co_ci_u32 v13, s[0:1], s3, 0, s[0:1]
/*000000013268*/ v_add_co_u32    v4, s[0:1], s10, v3
/*000000013270*/ v_sub_co_u32    v7, vcc, s9, v0
/*000000013278*/ v_add_co_ci_u32 v14, s[0:1], s11, 0, s[0:1]
/*000000013280*/ v_lshlrev_b64   v[5:6], 3, v[0:1]
/*000000013288*/ v_mov_b32       v3, v1
/*00000001328c*/ v_sub_co_ci_u32 v8, vcc, s6, v8, vcc
/*000000013290*/ v_add_co_u32    v9, vcc, s4, v5
/*000000013298*/ v_lshlrev_b64   v[11:12], 3, v[2:3]
/*0000000132a0*/ v_mov_b32       v5, v1
/*0000000132a4*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*0000000132a8*/ v_sub_co_u32    v2, vcc, s9, v2
/*0000000132b0*/ v_sub_co_ci_u32 v3, vcc, s6, v13, vcc
/*0000000132b4*/ v_add_co_u32    v0, vcc, s4, v11
/*0000000132bc*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*0000000132c4*/ v_add_co_ci_u32 v1, vcc, s5, v12, vcc
/*0000000132c8*/ v_sub_co_u32    v11, vcc, s9, v4
/*0000000132d0*/ v_sub_co_ci_u32 v12, vcc, s6, v14, vcc
/*0000000132d4*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000132dc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000132e0*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000132e8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000132f0*/ global_store_dwordx2 v[5:6], v[11:12], off
/*0000000132f8*/ s_endpgm
/*0000000132fc*/ s_nop           0x0
subtract_long_get_global_offset_get_global_id:
.skip 256
/*000000013400*/ s_clause        0x2
/*000000013404*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001340c*/ s_load_dwordx2  s[14:15], s[4:5], 0x20
/*000000013414*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001341c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000013424*/ v_mov_b32       v5, 0
/*000000013428*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000013430*/ v_lshl_or_b32   v4, s8, 1, v2
/*000000013438*/ v_mov_b32       v3, 0
/*00000001343c*/ s_waitcnt       lgkmcnt(0)
/*000000013440*/ v_add_co_u32    v2, vcc, s0, v0
/*000000013448*/ v_add_co_ci_u32 v8, vcc, s1, v5, vcc
/*00000001344c*/ v_add_co_u32    v0, vcc, s2, v1
/*000000013454*/ v_mov_b32       v1, v3
/*000000013458*/ v_add_co_ci_u32 v12, vcc, s3, v5, vcc
/*00000001345c*/ v_add_co_u32    v4, vcc, s14, v4
/*000000013464*/ v_add_co_ci_u32 v13, vcc, s15, v5, vcc
/*000000013468*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000013470*/ v_sub_co_u32    v7, vcc, s0, v2
/*000000013478*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013480*/ v_sub_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013484*/ v_add_co_u32    v9, vcc, s4, v5
/*00000001348c*/ v_mov_b32       v5, v3
/*000000013490*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000013494*/ v_sub_co_u32    v11, vcc, s2, v0
/*00000001349c*/ v_sub_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000134a0*/ v_add_co_u32    v17, vcc, s4, v1
/*0000000134a8*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*0000000134ac*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*0000000134b4*/ v_sub_co_u32    v4, vcc, s14, v4
/*0000000134bc*/ v_sub_co_ci_u32 v5, vcc, 0, v13, vcc
/*0000000134c0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000134c8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000134cc*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000134d4*/ global_store_dwordx2 v[17:18], v[11:12], off
/*0000000134dc*/ global_store_dwordx2 v[2:3], v[4:5], off
/*0000000134e4*/ s_endpgm
/*0000000134e8*/ s_nop           0x0
/*0000000134ec*/ s_nop           0x0
/*0000000134f0*/ s_nop           0x0
/*0000000134f4*/ s_nop           0x0
/*0000000134f8*/ s_nop           0x0
/*0000000134fc*/ s_nop           0x0
subtract_long_get_local_id_get_global_id:
.skip 256
/*000000013600*/ s_clause        0x2
/*000000013604*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001360c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013614*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001361c*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000013624*/ v_mov_b32       v4, 0
/*000000013628*/ v_lshl_or_b32   v5, s7, 2, v1
/*000000013630*/ v_lshl_or_b32   v7, s8, 1, v2
/*000000013638*/ v_mov_b32       v20, v4
/*00000001363c*/ s_waitcnt       lgkmcnt(0)
/*000000013640*/ v_add_co_u32    v3, s[0:1], s0, v3
/*000000013648*/ v_add_co_ci_u32 v11, s[0:1], s1, 0, s[0:1]
/*000000013650*/ v_add_co_u32    v19, s[0:1], s2, v5
/*000000013658*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000013660*/ v_sub_co_u32    v10, vcc, v0, v3
/*000000013668*/ v_add_co_ci_u32 v16, s[0:1], s3, 0, s[0:1]
/*000000013670*/ v_sub_co_ci_u32 v11, vcc, 0, v11, vcc
/*000000013674*/ v_lshlrev_b64   v[14:15], 3, v[19:20]
/*00000001367c*/ v_add_co_u32    v7, s[0:1], s10, v7
/*000000013684*/ v_add_co_u32    v12, vcc, s4, v8
/*00000001368c*/ v_mov_b32       v8, v4
/*000000013690*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*000000013694*/ v_sub_co_u32    v0, vcc, v1, v19
/*00000001369c*/ v_add_co_ci_u32 v17, s[0:1], s11, 0, s[0:1]
/*0000000136a4*/ v_sub_co_ci_u32 v1, vcc, 0, v16, vcc
/*0000000136a8*/ v_add_co_u32    v14, vcc, s4, v14
/*0000000136b0*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*0000000136b8*/ v_add_co_ci_u32 v15, vcc, s5, v15, vcc
/*0000000136bc*/ v_sub_co_u32    v7, vcc, v2, v7
/*0000000136c4*/ v_sub_co_ci_u32 v8, vcc, 0, v17, vcc
/*0000000136c8*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000136d0*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000136d4*/ global_store_dwordx2 v[12:13], v[10:11], off
/*0000000136dc*/ global_store_dwordx2 v[14:15], v[0:1], off
/*0000000136e4*/ global_store_dwordx2 v[5:6], v[7:8], off
/*0000000136ec*/ s_endpgm
/*0000000136f0*/ s_nop           0x0
/*0000000136f4*/ s_nop           0x0
/*0000000136f8*/ s_nop           0x0
/*0000000136fc*/ s_nop           0x0
subtract_long_get_group_id_get_global_id:
.skip 256
/*000000013800*/ s_clause        0x2
/*000000013804*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001380c*/ s_load_dwordx2  s[14:15], s[4:5], 0x20
/*000000013814*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001381c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000013824*/ v_mov_b32       v5, 0
/*000000013828*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000013830*/ v_lshl_or_b32   v4, s8, 1, v2
/*000000013838*/ v_mov_b32       v3, 0
/*00000001383c*/ s_waitcnt       lgkmcnt(0)
/*000000013840*/ v_add_co_u32    v2, vcc, s0, v0
/*000000013848*/ v_add_co_ci_u32 v8, vcc, s1, v5, vcc
/*00000001384c*/ v_add_co_u32    v0, vcc, s2, v1
/*000000013854*/ v_mov_b32       v1, v3
/*000000013858*/ v_add_co_ci_u32 v12, vcc, s3, v5, vcc
/*00000001385c*/ v_add_co_u32    v4, vcc, s14, v4
/*000000013864*/ v_add_co_ci_u32 v13, vcc, s15, v5, vcc
/*000000013868*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000013870*/ v_sub_co_u32    v7, vcc, s6, v2
/*000000013878*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013880*/ v_sub_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013884*/ v_add_co_u32    v9, vcc, s4, v5
/*00000001388c*/ v_mov_b32       v5, v3
/*000000013890*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000013894*/ v_sub_co_u32    v11, vcc, s7, v0
/*00000001389c*/ v_sub_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000138a0*/ v_add_co_u32    v17, vcc, s4, v1
/*0000000138a8*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*0000000138ac*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*0000000138b4*/ v_sub_co_u32    v4, vcc, s8, v4
/*0000000138bc*/ v_sub_co_ci_u32 v5, vcc, 0, v13, vcc
/*0000000138c0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000138c8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000138cc*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000138d4*/ global_store_dwordx2 v[17:18], v[11:12], off
/*0000000138dc*/ global_store_dwordx2 v[2:3], v[4:5], off
/*0000000138e4*/ s_endpgm
/*0000000138e8*/ s_nop           0x0
/*0000000138ec*/ s_nop           0x0
/*0000000138f0*/ s_nop           0x0
/*0000000138f4*/ s_nop           0x0
/*0000000138f8*/ s_nop           0x0
/*0000000138fc*/ s_nop           0x0
subtract_long_get_local_size_get_global_id:
.skip 256
/*000000013a00*/ s_clause        0x2
/*000000013a04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013a0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013a14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000013a1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000013a24*/ v_lshl_or_b32   v4, s7, 1, v1
/*000000013a2c*/ v_lshl_or_b32   v5, s8, 2, v2
/*000000013a34*/ v_mov_b32       v3, 0
/*000000013a38*/ v_mov_b32       v1, v3
/*000000013a3c*/ s_waitcnt       lgkmcnt(0)
/*000000013a40*/ v_add_co_u32    v2, s[0:1], s0, v0
/*000000013a48*/ v_add_co_ci_u32 v8, s[0:1], s1, 0, s[0:1]
/*000000013a50*/ v_add_co_u32    v0, s[0:1], s2, v4
/*000000013a58*/ v_add_co_ci_u32 v12, s[0:1], s3, 0, s[0:1]
/*000000013a60*/ v_add_co_u32    v4, s[0:1], s10, v5
/*000000013a68*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000013a70*/ v_sub_co_u32    v7, vcc, 2, v2
/*000000013a78*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013a80*/ v_sub_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013a84*/ v_add_co_ci_u32 v13, s[0:1], s11, 0, s[0:1]
/*000000013a8c*/ v_add_co_u32    v9, vcc, s4, v5
/*000000013a94*/ v_mov_b32       v5, v3
/*000000013a98*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000013a9c*/ v_sub_co_u32    v11, vcc, 2, v0
/*000000013aa4*/ v_sub_co_ci_u32 v12, vcc, 0, v12, vcc
/*000000013aa8*/ v_add_co_u32    v17, vcc, s4, v1
/*000000013ab0*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*000000013ab4*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*000000013abc*/ v_sub_co_u32    v4, vcc, 4, v4
/*000000013ac4*/ v_sub_co_ci_u32 v5, vcc, 0, v13, vcc
/*000000013ac8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000013ad0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000013ad4*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000013adc*/ global_store_dwordx2 v[17:18], v[11:12], off
/*000000013ae4*/ global_store_dwordx2 v[2:3], v[4:5], off
/*000000013aec*/ s_endpgm
/*000000013af0*/ s_nop           0x0
/*000000013af4*/ s_nop           0x0
/*000000013af8*/ s_nop           0x0
/*000000013afc*/ s_nop           0x0
subtract_long_get_global_id_get_global_id:
.skip 256
/*000000013c00*/ s_clause        0x2
/*000000013c04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013c0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013c14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000013c1c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000013c24*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000013c2c*/ v_mov_b32       v4, 0
/*000000013c30*/ v_lshl_or_b32   v1, s8, 2, v2
/*000000013c38*/ v_sub_co_u32    v7, vcc, 0, 0
/*000000013c40*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000013c48*/ s_waitcnt       lgkmcnt(0)
/*000000013c4c*/ v_add_co_u32    v2, s[0:1], s0, v3
/*000000013c54*/ v_mov_b32       v3, v4
/*000000013c58*/ v_add_co_ci_u32 v8, s[0:1], s1, 0, s[0:1]
/*000000013c60*/ v_add_co_u32    v0, s[0:1], s2, v0
/*000000013c68*/ v_add_co_ci_u32 v11, s[0:1], s3, 0, s[0:1]
/*000000013c70*/ v_add_co_u32    v2, s[0:1], s10, v1
/*000000013c78*/ v_mov_b32       v1, v4
/*000000013c7c*/ v_sub_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013c80*/ v_add_co_u32    v5, vcc, s4, v5
/*000000013c88*/ v_add_co_ci_u32 v12, s[0:1], s11, 0, s[0:1]
/*000000013c90*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000013c94*/ v_lshlrev_b64   v[9:10], 3, v[0:1]
/*000000013c9c*/ v_sub_co_u32    v0, vcc, v0, v0
/*000000013ca4*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000013cac*/ v_sub_co_ci_u32 v1, vcc, 0, v11, vcc
/*000000013cb0*/ v_add_co_u32    v14, vcc, s4, v9
/*000000013cb8*/ v_add_co_ci_u32 v15, vcc, s5, v10, vcc
/*000000013cbc*/ v_sub_co_u32    v11, vcc, v2, v2
/*000000013cc4*/ v_sub_co_ci_u32 v12, vcc, 0, v12, vcc
/*000000013cc8*/ v_add_co_u32    v9, vcc, s4, v3
/*000000013cd0*/ v_add_co_ci_u32 v10, vcc, s5, v4, vcc
/*000000013cd4*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000013cdc*/ global_store_dwordx2 v[14:15], v[0:1], off
/*000000013ce4*/ global_store_dwordx2 v[9:10], v[11:12], off
/*000000013cec*/ s_endpgm
/*000000013cf0*/ s_nop           0x0
/*000000013cf4*/ s_nop           0x0
/*000000013cf8*/ s_nop           0x0
/*000000013cfc*/ s_nop           0x0
subtract_long_get_global_size_get_global_id:
.skip 256
/*000000013e00*/ s_clause        0x2
/*000000013e04*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000013e0c*/ s_load_dwordx2  s[12:13], s[6:7], 0x20
/*000000013e14*/ s_load_dwordx2  s[14:15], s[6:7], 0x0
/*000000013e1c*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000013e24*/ v_lshl_or_b32   v0, s8, 4, v0
/*000000013e2c*/ v_mov_b32       v3, 0
/*000000013e30*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000013e38*/ v_lshl_or_b32   v4, s10, 1, v2
/*000000013e40*/ s_waitcnt       lgkmcnt(0)
/*000000013e44*/ v_add_co_u32    v0, vcc, s0, v0
/*000000013e4c*/ v_add_co_ci_u32 v8, vcc, s1, v3, vcc
/*000000013e50*/ v_add_co_u32    v2, vcc, s2, v1
/*000000013e58*/ v_mov_b32       v1, 0
/*000000013e5c*/ v_add_co_ci_u32 v13, vcc, s3, v3, vcc
/*000000013e60*/ v_add_co_u32    v4, vcc, s12, v4
/*000000013e68*/ v_add_co_ci_u32 v14, vcc, s13, v3, vcc
/*000000013e6c*/ v_lshlrev_b64   v[5:6], 3, v[0:1]
/*000000013e74*/ v_mov_b32       v3, v1
/*000000013e78*/ v_sub_co_u32    v7, vcc, s4, v0
/*000000013e80*/ v_sub_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013e84*/ v_add_co_u32    v9, vcc, s14, v5
/*000000013e8c*/ v_lshlrev_b64   v[11:12], 3, v[2:3]
/*000000013e94*/ v_mov_b32       v5, v1
/*000000013e98*/ v_add_co_ci_u32 v10, vcc, s15, v6, vcc
/*000000013e9c*/ v_sub_co_u32    v2, vcc, s5, v2
/*000000013ea4*/ v_sub_co_ci_u32 v3, vcc, 0, v13, vcc
/*000000013ea8*/ v_add_co_u32    v0, vcc, s14, v11
/*000000013eb0*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*000000013eb8*/ v_add_co_ci_u32 v1, vcc, s15, v12, vcc
/*000000013ebc*/ v_sub_co_u32    v11, vcc, s6, v4
/*000000013ec4*/ v_sub_co_ci_u32 v12, vcc, 0, v14, vcc
/*000000013ec8*/ v_add_co_u32    v5, vcc, s14, v5
/*000000013ed0*/ v_add_co_ci_u32 v6, vcc, s15, v6, vcc
/*000000013ed4*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000013edc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000013ee4*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000013eec*/ s_endpgm
/*000000013ef0*/ s_nop           0x0
/*000000013ef4*/ s_nop           0x0
/*000000013ef8*/ s_nop           0x0
/*000000013efc*/ s_nop           0x0
subtract_long_get_num_groups_get_global_id:
.skip 256
/*000000014000*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000014008*/ s_clause        0x2
/*00000001400c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000014014*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001401c*/ s_load_dwordx2  s[6:7], s[6:7], 0x20
/*000000014024*/ v_lshl_or_b32   v0, s8, 1, v0
/*00000001402c*/ v_mov_b32       v5, 0
/*000000014030*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000014038*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000014040*/ v_mov_b32       v3, 0
/*000000014044*/ v_mov_b32       v1, v3
/*000000014048*/ s_waitcnt       lgkmcnt(0)
/*00000001404c*/ s_and_b32       s3, s0, -2
/*000000014050*/ v_add_co_u32    v2, vcc, s12, v0
/*000000014058*/ v_cmp_gt_u32    s[3:4], s0, s3
/*000000014060*/ v_add_co_ci_u32 v8, vcc, s13, v5, vcc
/*000000014064*/ s_lshr_b32      s0, s0, 1
/*000000014068*/ v_add_co_u32    v0, vcc, s14, v4
/*000000014070*/ s_cmpk_lg_u32   s3, 0x0
/*000000014074*/ v_add_co_ci_u32 v12, vcc, s15, v5, vcc
/*000000014078*/ s_addc_u32      s0, s0, 0
/*00000001407c*/ s_and_b32       s3, s1, -2
/*000000014080*/ v_add_co_u32    v4, vcc, s6, v6
/*000000014088*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000014090*/ v_add_co_ci_u32 v13, vcc, s7, v5, vcc
/*000000014094*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*00000001409c*/ v_sub_co_u32    v7, vcc, s0, v2
/*0000000140a4*/ s_lshr_b32      s1, s1, 1
/*0000000140a8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000140ac*/ v_sub_co_ci_u32 v8, vcc, 0, v8, vcc
/*0000000140b0*/ s_addc_u32      s1, s1, 0
/*0000000140b4*/ v_add_co_u32    v9, vcc, s4, v5
/*0000000140bc*/ s_and_b32       s3, s2, -4
/*0000000140c0*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*0000000140c8*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*0000000140cc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000140d4*/ v_sub_co_u32    v11, vcc, s1, v0
/*0000000140dc*/ v_mov_b32       v5, v3
/*0000000140e0*/ v_sub_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000140e4*/ v_add_co_u32    v17, vcc, s4, v1
/*0000000140ec*/ s_lshr_b32      s2, s2, 2
/*0000000140f0*/ s_cmpk_lg_u32   s3, 0x0
/*0000000140f4*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*0000000140f8*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*000000014100*/ s_addc_u32      s0, s2, 0
/*000000014104*/ v_sub_co_u32    v4, vcc, s0, v4
/*00000001410c*/ v_sub_co_ci_u32 v5, vcc, 0, v13, vcc
/*000000014110*/ v_add_co_u32    v2, vcc, s4, v2
/*000000014118*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000001411c*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000014124*/ global_store_dwordx2 v[17:18], v[11:12], off
/*00000001412c*/ global_store_dwordx2 v[2:3], v[4:5], off
/*000000014134*/ s_endpgm
/*000000014138*/ s_nop           0x0
/*00000001413c*/ s_nop           0x0
/*000000014140*/ s_nop           0x0
/*000000014144*/ s_nop           0x0
/*000000014148*/ s_nop           0x0
/*00000001414c*/ s_nop           0x0
/*000000014150*/ s_nop           0x0
/*000000014154*/ s_nop           0x0
/*000000014158*/ s_nop           0x0
/*00000001415c*/ s_nop           0x0
/*000000014160*/ s_nop           0x0
/*000000014164*/ s_nop           0x0
/*000000014168*/ s_nop           0x0
/*00000001416c*/ s_nop           0x0
/*000000014170*/ s_nop           0x0
/*000000014174*/ s_nop           0x0
/*000000014178*/ s_nop           0x0
/*00000001417c*/ s_nop           0x0
/*000000014180*/ s_nop           0x0
/*000000014184*/ s_nop           0x0
/*000000014188*/ s_nop           0x0
/*00000001418c*/ s_nop           0x0
/*000000014190*/ s_nop           0x0
/*000000014194*/ s_nop           0x0
/*000000014198*/ s_nop           0x0
/*00000001419c*/ s_nop           0x0
/*0000000141a0*/ s_nop           0x0
/*0000000141a4*/ s_nop           0x0
/*0000000141a8*/ s_nop           0x0
/*0000000141ac*/ s_nop           0x0
/*0000000141b0*/ s_nop           0x0
/*0000000141b4*/ s_nop           0x0
/*0000000141b8*/ s_nop           0x0
/*0000000141bc*/ s_nop           0x0
/*0000000141c0*/ s_nop           0x0
/*0000000141c4*/ s_nop           0x0
/*0000000141c8*/ s_nop           0x0
/*0000000141cc*/ s_nop           0x0
/*0000000141d0*/ s_nop           0x0
/*0000000141d4*/ s_nop           0x0
/*0000000141d8*/ s_nop           0x0
/*0000000141dc*/ s_nop           0x0
/*0000000141e0*/ s_nop           0x0
/*0000000141e4*/ s_nop           0x0
/*0000000141e8*/ s_nop           0x0
/*0000000141ec*/ s_nop           0x0
/*0000000141f0*/ s_nop           0x0
/*0000000141f4*/ s_nop           0x0
/*0000000141f8*/ s_nop           0x0
/*0000000141fc*/ s_nop           0x0
subtract_long_get_work_dim_get_global_id:
.skip 256
/*000000014300*/ v_mov_b32       v3, s4
/*000000014304*/ v_mov_b32       v4, s5
/*000000014308*/ s_clause        0x2
/*00000001430c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014314*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000001431c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000014324*/ v_lshl_or_b32   v0, s8, 1, v0
/*00000001432c*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000014334*/ global_load_ushort v12, v[3:4], off inst_offset:2
/*00000001433c*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000014344*/ v_mov_b32       v3, 0
/*000000014348*/ v_mov_b32       v1, v3
/*00000001434c*/ v_mov_b32       v5, v3
/*000000014350*/ s_waitcnt       lgkmcnt(0)
/*000000014354*/ v_add_co_u32    v2, s[0:1], s0, v0
/*00000001435c*/ v_add_co_ci_u32 v13, s[0:1], s1, 0, s[0:1]
/*000000014364*/ v_add_co_u32    v0, s[0:1], s2, v4
/*00000001436c*/ v_add_co_ci_u32 v14, s[0:1], s3, 0, s[0:1]
/*000000014374*/ v_add_co_u32    v4, s[0:1], s4, v6
/*00000001437c*/ v_lshlrev_b64   v[6:7], 3, v[2:3]
/*000000014384*/ v_lshlrev_b64   v[8:9], 3, v[0:1]
/*00000001438c*/ v_add_co_ci_u32 v15, s[0:1], s5, 0, s[0:1]
/*000000014394*/ v_lshlrev_b64   v[10:11], 3, v[4:5]
/*00000001439c*/ v_add_co_u32    v19, vcc, s6, v6
/*0000000143a4*/ v_add_co_ci_u32 v20, vcc, s7, v7, vcc
/*0000000143a8*/ v_add_co_u32    v5, vcc, s6, v8
/*0000000143b0*/ v_add_co_ci_u32 v6, vcc, s7, v9, vcc
/*0000000143b4*/ v_add_co_u32    v9, vcc, s6, v10
/*0000000143bc*/ v_add_co_ci_u32 v10, vcc, s7, v11, vcc
/*0000000143c0*/ s_waitcnt       vmcnt(0)
/*0000000143c4*/ v_and_b32       v3, 0xffff, v12
/*0000000143cc*/ v_sub_co_u32    v1, vcc, v3, v2
/*0000000143d4*/ v_sub_co_ci_u32 v2, vcc, 0, v13, vcc
/*0000000143d8*/ v_sub_co_u32    v11, vcc, v3, v0
/*0000000143e0*/ v_sub_co_ci_u32 v12, vcc, 0, v14, vcc
/*0000000143e4*/ v_sub_co_u32    v3, vcc, v3, v4
/*0000000143ec*/ v_sub_co_ci_u32 v4, vcc, 0, v15, vcc
/*0000000143f0*/ global_store_dwordx2 v[19:20], v[1:2], off
/*0000000143f8*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000014400*/ global_store_dwordx2 v[9:10], v[3:4], off
/*000000014408*/ s_endpgm
/*00000001440c*/ s_nop           0x0
/*000000014410*/ s_nop           0x0
/*000000014414*/ s_nop           0x0
/*000000014418*/ s_nop           0x0
/*00000001441c*/ s_nop           0x0
/*000000014420*/ s_nop           0x0
/*000000014424*/ s_nop           0x0
/*000000014428*/ s_nop           0x0
/*00000001442c*/ s_nop           0x0
/*000000014430*/ s_nop           0x0
/*000000014434*/ s_nop           0x0
/*000000014438*/ s_nop           0x0
/*00000001443c*/ s_nop           0x0
/*000000014440*/ s_nop           0x0
/*000000014444*/ s_nop           0x0
/*000000014448*/ s_nop           0x0
/*00000001444c*/ s_nop           0x0
/*000000014450*/ s_nop           0x0
/*000000014454*/ s_nop           0x0
/*000000014458*/ s_nop           0x0
/*00000001445c*/ s_nop           0x0
/*000000014460*/ s_nop           0x0
/*000000014464*/ s_nop           0x0
/*000000014468*/ s_nop           0x0
/*00000001446c*/ s_nop           0x0
/*000000014470*/ s_nop           0x0
/*000000014474*/ s_nop           0x0
/*000000014478*/ s_nop           0x0
/*00000001447c*/ s_nop           0x0
/*000000014480*/ s_nop           0x0
/*000000014484*/ s_nop           0x0
/*000000014488*/ s_nop           0x0
/*00000001448c*/ s_nop           0x0
/*000000014490*/ s_nop           0x0
/*000000014494*/ s_nop           0x0
/*000000014498*/ s_nop           0x0
/*00000001449c*/ s_nop           0x0
/*0000000144a0*/ s_nop           0x0
/*0000000144a4*/ s_nop           0x0
/*0000000144a8*/ s_nop           0x0
/*0000000144ac*/ s_nop           0x0
/*0000000144b0*/ s_nop           0x0
/*0000000144b4*/ s_nop           0x0
/*0000000144b8*/ s_nop           0x0
/*0000000144bc*/ s_nop           0x0
/*0000000144c0*/ s_nop           0x0
/*0000000144c4*/ s_nop           0x0
/*0000000144c8*/ s_nop           0x0
/*0000000144cc*/ s_nop           0x0
/*0000000144d0*/ s_nop           0x0
/*0000000144d4*/ s_nop           0x0
/*0000000144d8*/ s_nop           0x0
/*0000000144dc*/ s_nop           0x0
/*0000000144e0*/ s_nop           0x0
/*0000000144e4*/ s_nop           0x0
/*0000000144e8*/ s_nop           0x0
/*0000000144ec*/ s_nop           0x0
/*0000000144f0*/ s_nop           0x0
/*0000000144f4*/ s_nop           0x0
/*0000000144f8*/ s_nop           0x0
/*0000000144fc*/ s_nop           0x0
subtract_long_x_get_global_size:
.skip 256
/*000000014600*/ s_clause        0x1
/*000000014604*/ s_load_dword    s11, s[6:7], 0x8
/*00000001460c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014614*/ s_waitcnt       lgkmcnt(0)
/*000000014618*/ s_load_dword    s1, s[6:7], 0x20
/*000000014620*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014628*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000014630*/ v_mov_b32       v4, 0
/*000000014634*/ s_lshl_b32      s3, s8, 4
/*000000014638*/ s_lshl_b32      s6, s9, 1
/*00000001463c*/ s_lshl_b32      s7, s10, 1
/*000000014640*/ v_mov_b32       v6, v4
/*000000014644*/ v_mov_b32       v8, v4
/*000000014648*/ s_waitcnt       lgkmcnt(0)
/*00000001464c*/ v_add3_u32      v7, s1, s7, v2
/*000000014654*/ v_add3_u32      v3, s0, s3, v0
/*00000001465c*/ v_add3_u32      v5, s2, s6, v1
/*000000014664*/ s_ashr_i32      s8, s11, 31
/*000000014668*/ s_sub_u32       s0, s11, s12
/*00000001466c*/ s_subb_u32      s1, s8, 0
/*000000014670*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014678*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014680*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014688*/ s_sub_u32       s2, s11, s13
/*00000001468c*/ s_subb_u32      s3, s8, 0
/*000000014690*/ v_mov_b32       v3, s1
/*000000014694*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001469c*/ v_mov_b32       v2, s0
/*0000000146a0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000146a4*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000146ac*/ s_sub_u32       s0, s11, s14
/*0000000146b0*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000146b4*/ s_subb_u32      s1, s8, 0
/*0000000146b8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000146c0*/ v_mov_b32       v9, s3
/*0000000146c4*/ v_mov_b32       v11, s1
/*0000000146c8*/ v_mov_b32       v8, s2
/*0000000146cc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000146d0*/ v_mov_b32       v10, s0
/*0000000146d4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000146dc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000146e4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000146ec*/ s_endpgm
/*0000000146f0*/ s_nop           0x0
/*0000000146f4*/ s_nop           0x0
/*0000000146f8*/ s_nop           0x0
/*0000000146fc*/ s_nop           0x0
subtract_long_get_global_offset_get_global_size:
.skip 256
/*000000014800*/ s_clause        0x1
/*000000014804*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001480c*/ s_load_dword    s11, s[6:7], 0x20
/*000000014814*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001481c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014824*/ v_mov_b32       v4, 0
/*000000014828*/ s_waitcnt       lgkmcnt(0)
/*00000001482c*/ s_lshl_b32      s1, s8, 1
/*000000014830*/ s_lshl_b32      s3, s9, 4
/*000000014834*/ s_lshl_b32      s6, s10, 1
/*000000014838*/ v_mov_b32       v6, v4
/*00000001483c*/ v_mov_b32       v8, v4
/*000000014840*/ v_add3_u32      v3, s0, s1, v0
/*000000014848*/ v_add3_u32      v5, s2, s3, v1
/*000000014850*/ v_add3_u32      v7, s11, s6, v2
/*000000014858*/ s_sub_u32       s0, s0, s12
/*00000001485c*/ s_subb_u32      s1, 0, 0
/*000000014860*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014868*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014870*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014878*/ s_sub_u32       s2, s2, s13
/*00000001487c*/ s_subb_u32      s3, 0, 0
/*000000014880*/ v_mov_b32       v3, s1
/*000000014884*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001488c*/ v_mov_b32       v2, s0
/*000000014890*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000014894*/ v_add_co_u32    v14, vcc, s4, v4
/*00000001489c*/ s_sub_u32       s0, s11, s14
/*0000000148a0*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000148a4*/ s_subb_u32      s1, 0, 0
/*0000000148a8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000148b0*/ v_mov_b32       v9, s3
/*0000000148b4*/ v_mov_b32       v11, s1
/*0000000148b8*/ v_mov_b32       v8, s2
/*0000000148bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000148c0*/ v_mov_b32       v10, s0
/*0000000148c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000148cc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000148d4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000148dc*/ s_endpgm
/*0000000148e0*/ s_nop           0x0
/*0000000148e4*/ s_nop           0x0
/*0000000148e8*/ s_nop           0x0
/*0000000148ec*/ s_nop           0x0
/*0000000148f0*/ s_nop           0x0
/*0000000148f4*/ s_nop           0x0
/*0000000148f8*/ s_nop           0x0
/*0000000148fc*/ s_nop           0x0
subtract_long_get_local_id_get_global_size:
.skip 256
/*000000014a00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014a08*/ s_waitcnt       lgkmcnt(0)
/*000000014a0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000014a14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014a1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014a24*/ s_lshl_b32      s3, s8, 3
/*000000014a28*/ v_mov_b32       v4, 0
/*000000014a2c*/ s_lshl_b32      s6, s9, 2
/*000000014a30*/ v_mov_b32       v14, 0
/*000000014a34*/ v_mov_b32       v6, v4
/*000000014a38*/ v_add3_u32      v3, s0, s3, v0
/*000000014a40*/ v_add3_u32      v5, s2, s6, v1
/*000000014a48*/ s_waitcnt       lgkmcnt(0)
/*000000014a4c*/ v_sub_co_u32    v10, vcc, v0, s12
/*000000014a54*/ s_lshl_b32      s0, s10, 1
/*000000014a58*/ v_subrev_co_ci_u32 v11, vcc, 0, v14, vcc
/*000000014a5c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000014a64*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000014a6c*/ v_add3_u32      v7, s1, s0, v2
/*000000014a74*/ v_add_co_u32    v12, vcc, s4, v8
/*000000014a7c*/ v_mov_b32       v8, v4
/*000000014a80*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*000000014a84*/ v_sub_co_u32    v0, vcc, v1, s13
/*000000014a8c*/ v_subrev_co_ci_u32 v1, vcc, 0, v14, vcc
/*000000014a90*/ v_add_co_u32    v18, vcc, s4, v5
/*000000014a98*/ v_add_co_ci_u32 v19, vcc, s5, v6, vcc
/*000000014a9c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000014aa4*/ v_sub_co_u32    v7, vcc, v2, s14
/*000000014aac*/ v_subrev_co_ci_u32 v8, vcc, 0, v14, vcc
/*000000014ab0*/ v_add_co_u32    v5, vcc, s4, v5
/*000000014ab8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000014abc*/ global_store_dwordx2 v[12:13], v[10:11], off
/*000000014ac4*/ global_store_dwordx2 v[18:19], v[0:1], off
/*000000014acc*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000014ad4*/ s_endpgm
/*000000014ad8*/ s_nop           0x0
/*000000014adc*/ s_nop           0x0
/*000000014ae0*/ s_nop           0x0
/*000000014ae4*/ s_nop           0x0
/*000000014ae8*/ s_nop           0x0
/*000000014aec*/ s_nop           0x0
/*000000014af0*/ s_nop           0x0
/*000000014af4*/ s_nop           0x0
/*000000014af8*/ s_nop           0x0
/*000000014afc*/ s_nop           0x0
subtract_long_get_group_id_get_global_size:
.skip 256
/*000000014c00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014c08*/ s_waitcnt       lgkmcnt(0)
/*000000014c0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000014c14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014c1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014c24*/ v_mov_b32       v4, 0
/*000000014c28*/ s_lshl_b32      s3, s8, 1
/*000000014c2c*/ s_lshl_b32      s6, s9, 4
/*000000014c30*/ s_lshl_b32      s7, s10, 1
/*000000014c34*/ v_mov_b32       v6, v4
/*000000014c38*/ v_mov_b32       v8, v4
/*000000014c3c*/ s_waitcnt       lgkmcnt(0)
/*000000014c40*/ v_add3_u32      v7, s1, s7, v2
/*000000014c48*/ v_add3_u32      v3, s0, s3, v0
/*000000014c50*/ v_add3_u32      v5, s2, s6, v1
/*000000014c58*/ s_sub_u32       s0, s8, s12
/*000000014c5c*/ s_subb_u32      s1, 0, 0
/*000000014c60*/ s_sub_u32       s2, s9, s13
/*000000014c64*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014c6c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014c74*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014c7c*/ s_subb_u32      s3, 0, 0
/*000000014c80*/ v_mov_b32       v3, s1
/*000000014c84*/ v_mov_b32       v2, s0
/*000000014c88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000014c90*/ s_sub_u32       s0, s10, s14
/*000000014c94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000014c98*/ v_add_co_u32    v14, vcc, s4, v4
/*000000014ca0*/ s_subb_u32      s1, 0, 0
/*000000014ca4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000014ca8*/ v_add_co_u32    v4, vcc, s4, v6
/*000000014cb0*/ v_mov_b32       v9, s3
/*000000014cb4*/ v_mov_b32       v11, s1
/*000000014cb8*/ v_mov_b32       v8, s2
/*000000014cbc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000014cc0*/ v_mov_b32       v10, s0
/*000000014cc4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000014ccc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000014cd4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000014cdc*/ s_endpgm
/*000000014ce0*/ s_nop           0x0
/*000000014ce4*/ s_nop           0x0
/*000000014ce8*/ s_nop           0x0
/*000000014cec*/ s_nop           0x0
/*000000014cf0*/ s_nop           0x0
/*000000014cf4*/ s_nop           0x0
/*000000014cf8*/ s_nop           0x0
/*000000014cfc*/ s_nop           0x0
subtract_long_get_local_size_get_global_size:
.skip 256
/*000000014e00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014e08*/ s_waitcnt       lgkmcnt(0)
/*000000014e0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000014e14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014e1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014e24*/ v_mov_b32       v4, 0
/*000000014e28*/ s_lshl_b32      s3, s8, 1
/*000000014e2c*/ s_lshl_b32      s6, s9, 1
/*000000014e30*/ s_lshl_b32      s7, s10, 2
/*000000014e34*/ v_mov_b32       v6, v4
/*000000014e38*/ v_mov_b32       v8, v4
/*000000014e3c*/ s_waitcnt       lgkmcnt(0)
/*000000014e40*/ v_add3_u32      v7, s1, s7, v2
/*000000014e48*/ v_add3_u32      v3, s0, s3, v0
/*000000014e50*/ v_add3_u32      v5, s2, s6, v1
/*000000014e58*/ s_sub_u32       s0, 2, s12
/*000000014e5c*/ s_subb_u32      s1, 0, 0
/*000000014e60*/ s_sub_u32       s2, 2, s13
/*000000014e64*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014e6c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014e74*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014e7c*/ s_subb_u32      s3, 0, 0
/*000000014e80*/ v_mov_b32       v3, s1
/*000000014e84*/ v_mov_b32       v2, s0
/*000000014e88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000014e90*/ s_sub_u32       s0, 4, s14
/*000000014e94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000014e98*/ v_add_co_u32    v14, vcc, s4, v4
/*000000014ea0*/ s_subb_u32      s1, 0, 0
/*000000014ea4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000014ea8*/ v_add_co_u32    v4, vcc, s4, v6
/*000000014eb0*/ v_mov_b32       v9, s3
/*000000014eb4*/ v_mov_b32       v11, s1
/*000000014eb8*/ v_mov_b32       v8, s2
/*000000014ebc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000014ec0*/ v_mov_b32       v10, s0
/*000000014ec4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000014ecc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000014ed4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000014edc*/ s_endpgm
/*000000014ee0*/ s_nop           0x0
/*000000014ee4*/ s_nop           0x0
/*000000014ee8*/ s_nop           0x0
/*000000014eec*/ s_nop           0x0
/*000000014ef0*/ s_nop           0x0
/*000000014ef4*/ s_nop           0x0
/*000000014ef8*/ s_nop           0x0
/*000000014efc*/ s_nop           0x0
subtract_long_get_global_id_get_global_size:
.skip 256
/*000000015000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015008*/ s_waitcnt       lgkmcnt(0)
/*00000001500c*/ s_load_dword    s1, s[6:7], 0x20
/*000000015014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001501c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015024*/ v_lshl_or_b32   v3, s8, 1, v0
/*00000001502c*/ v_mov_b32       v4, 0
/*000000015030*/ s_lshl_b32      s3, s9, 1
/*000000015034*/ v_mov_b32       v13, 0
/*000000015038*/ s_lshl_b32      s6, s10, 2
/*00000001503c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000015044*/ v_mov_b32       v6, v4
/*000000015048*/ v_add_nc_u32    v0, s0, v3
/*00000001504c*/ v_add3_u32      v5, s2, s3, v1
/*000000015054*/ s_waitcnt       lgkmcnt(0)
/*000000015058*/ v_add3_u32      v3, s1, s6, v2
/*000000015060*/ v_sub_co_u32    v0, vcc, v0, s12
/*000000015068*/ v_lshlrev_b64   v[9:10], 3, v[5:6]
/*000000015070*/ v_subrev_co_ci_u32 v1, vcc, 0, v13, vcc
/*000000015074*/ v_add_co_u32    v14, vcc, s4, v7
/*00000001507c*/ v_lshlrev_b64   v[11:12], 3, v[3:4]
/*000000015084*/ v_add_co_ci_u32 v15, vcc, s5, v8, vcc
/*000000015088*/ v_sub_co_u32    v5, vcc, v5, s13
/*000000015090*/ v_subrev_co_ci_u32 v6, vcc, 0, v13, vcc
/*000000015094*/ v_add_co_u32    v7, vcc, s4, v9
/*00000001509c*/ v_add_co_ci_u32 v8, vcc, s5, v10, vcc
/*0000000150a0*/ v_sub_co_u32    v9, vcc, v3, s14
/*0000000150a8*/ v_subrev_co_ci_u32 v10, vcc, 0, v13, vcc
/*0000000150ac*/ v_add_co_u32    v11, vcc, s4, v11
/*0000000150b4*/ v_add_co_ci_u32 v12, vcc, s5, v12, vcc
/*0000000150b8*/ global_store_dwordx2 v[14:15], v[0:1], off
/*0000000150c0*/ global_store_dwordx2 v[7:8], v[5:6], off
/*0000000150c8*/ global_store_dwordx2 v[11:12], v[9:10], off
/*0000000150d0*/ s_endpgm
/*0000000150d4*/ s_nop           0x0
/*0000000150d8*/ s_nop           0x0
/*0000000150dc*/ s_nop           0x0
/*0000000150e0*/ s_nop           0x0
/*0000000150e4*/ s_nop           0x0
/*0000000150e8*/ s_nop           0x0
/*0000000150ec*/ s_nop           0x0
/*0000000150f0*/ s_nop           0x0
/*0000000150f4*/ s_nop           0x0
/*0000000150f8*/ s_nop           0x0
/*0000000150fc*/ s_nop           0x0
subtract_long_get_global_size_get_global_size:
.skip 256
/*000000015200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000015208*/ s_waitcnt       lgkmcnt(0)
/*00000001520c*/ s_clause        0x1
/*000000015210*/ s_load_dword    s1, s[4:5], 0x20
/*000000015218*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000015220*/ v_mov_b32       v4, 0
/*000000015224*/ s_lshl_b32      s3, s6, 4
/*000000015228*/ s_lshl_b32      s6, s7, 1
/*00000001522c*/ s_lshl_b32      s7, s8, 1
/*000000015230*/ s_mov_b32       s10, 0
/*000000015234*/ v_mov_b32       v6, v4
/*000000015238*/ v_mov_b32       v8, v4
/*00000001523c*/ s_mov_b32       s11, s10
/*000000015240*/ v_add3_u32      v3, s0, s3, v0
/*000000015248*/ v_add3_u32      v5, s2, s6, v1
/*000000015250*/ s_waitcnt       lgkmcnt(0)
/*000000015254*/ v_add3_u32      v7, s1, s7, v2
/*00000001525c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015264*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001526c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000015274*/ v_mov_b32       v2, s10
/*000000015278*/ v_mov_b32       v3, s11
/*00000001527c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000015284*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000015288*/ v_add_co_u32    v4, vcc, s4, v4
/*000000015290*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000015294*/ v_add_co_u32    v8, vcc, s4, v6
/*00000001529c*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000152a0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000152a8*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000152b0*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000152b8*/ s_endpgm
/*0000000152bc*/ s_nop           0x0
/*0000000152c0*/ s_nop           0x0
/*0000000152c4*/ s_nop           0x0
/*0000000152c8*/ s_nop           0x0
/*0000000152cc*/ s_nop           0x0
/*0000000152d0*/ s_nop           0x0
/*0000000152d4*/ s_nop           0x0
/*0000000152d8*/ s_nop           0x0
/*0000000152dc*/ s_nop           0x0
/*0000000152e0*/ s_nop           0x0
/*0000000152e4*/ s_nop           0x0
/*0000000152e8*/ s_nop           0x0
/*0000000152ec*/ s_nop           0x0
/*0000000152f0*/ s_nop           0x0
/*0000000152f4*/ s_nop           0x0
/*0000000152f8*/ s_nop           0x0
/*0000000152fc*/ s_nop           0x0
subtract_long_get_num_groups_get_global_size:
.skip 256
/*000000015400*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000015408*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000015410*/ s_waitcnt       lgkmcnt(0)
/*000000015414*/ s_clause        0x1
/*000000015418*/ s_load_dword    s3, s[6:7], 0x20
/*000000015420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015428*/ s_lshl_b32      s7, s8, 1
/*00000001542c*/ s_lshl_b32      s8, s9, 1
/*000000015430*/ s_lshl_b32      s9, s10, 2
/*000000015434*/ v_mov_b32       v4, 0
/*000000015438*/ v_mov_b32       v6, v4
/*00000001543c*/ v_mov_b32       v8, v4
/*000000015440*/ s_and_b32       s6, s0, -2
/*000000015444*/ s_lshr_b32      s10, s0, 1
/*000000015448*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000015450*/ v_add3_u32      v3, s12, s7, v0
/*000000015458*/ s_waitcnt       lgkmcnt(0)
/*00000001545c*/ v_add3_u32      v7, s3, s9, v2
/*000000015464*/ v_add3_u32      v5, s14, s8, v1
/*00000001546c*/ s_cmpk_lg_u32   s6, 0x0
/*000000015470*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015478*/ s_addc_u32      s6, s10, 0
/*00000001547c*/ s_and_b32       s7, s1, -2
/*000000015480*/ s_lshr_b32      s3, s1, 1
/*000000015484*/ v_cmp_gt_u32    s[7:8], s1, s7
/*00000001548c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015494*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001549c*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000154a4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000154a8*/ s_cmpk_lg_u32   s7, 0x0
/*0000000154ac*/ s_addc_u32      s3, s3, 0
/*0000000154b0*/ s_and_b32       s7, s2, -4
/*0000000154b4*/ s_lshr_b32      s8, s2, 2
/*0000000154b8*/ v_cmp_gt_u32    s[7:8], s2, s7
/*0000000154c0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000154c8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000154cc*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000154d4*/ s_cmpk_lg_u32   s7, 0x0
/*0000000154d8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000154dc*/ s_addc_u32      s8, s8, 0
/*0000000154e0*/ s_sub_u32       s6, s6, s0
/*0000000154e4*/ s_subb_u32      s7, 0, 0
/*0000000154e8*/ s_sub_u32       s0, s3, s1
/*0000000154ec*/ s_subb_u32      s1, 0, 0
/*0000000154f0*/ s_sub_u32       s2, s8, s2
/*0000000154f4*/ s_subb_u32      s3, 0, 0
/*0000000154f8*/ v_mov_b32       v6, s6
/*0000000154fc*/ v_mov_b32       v9, s1
/*000000015500*/ v_mov_b32       v7, s7
/*000000015504*/ v_mov_b32       v11, s3
/*000000015508*/ v_mov_b32       v8, s0
/*00000001550c*/ v_mov_b32       v10, s2
/*000000015510*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000015518*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000015520*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015528*/ s_endpgm
/*00000001552c*/ s_nop           0x0
/*000000015530*/ s_nop           0x0
/*000000015534*/ s_nop           0x0
/*000000015538*/ s_nop           0x0
/*00000001553c*/ s_nop           0x0
/*000000015540*/ s_nop           0x0
/*000000015544*/ s_nop           0x0
/*000000015548*/ s_nop           0x0
/*00000001554c*/ s_nop           0x0
/*000000015550*/ s_nop           0x0
/*000000015554*/ s_nop           0x0
/*000000015558*/ s_nop           0x0
/*00000001555c*/ s_nop           0x0
/*000000015560*/ s_nop           0x0
/*000000015564*/ s_nop           0x0
/*000000015568*/ s_nop           0x0
/*00000001556c*/ s_nop           0x0
/*000000015570*/ s_nop           0x0
/*000000015574*/ s_nop           0x0
/*000000015578*/ s_nop           0x0
/*00000001557c*/ s_nop           0x0
/*000000015580*/ s_nop           0x0
/*000000015584*/ s_nop           0x0
/*000000015588*/ s_nop           0x0
/*00000001558c*/ s_nop           0x0
/*000000015590*/ s_nop           0x0
/*000000015594*/ s_nop           0x0
/*000000015598*/ s_nop           0x0
/*00000001559c*/ s_nop           0x0
/*0000000155a0*/ s_nop           0x0
/*0000000155a4*/ s_nop           0x0
/*0000000155a8*/ s_nop           0x0
/*0000000155ac*/ s_nop           0x0
/*0000000155b0*/ s_nop           0x0
/*0000000155b4*/ s_nop           0x0
/*0000000155b8*/ s_nop           0x0
/*0000000155bc*/ s_nop           0x0
/*0000000155c0*/ s_nop           0x0
/*0000000155c4*/ s_nop           0x0
/*0000000155c8*/ s_nop           0x0
/*0000000155cc*/ s_nop           0x0
/*0000000155d0*/ s_nop           0x0
/*0000000155d4*/ s_nop           0x0
/*0000000155d8*/ s_nop           0x0
/*0000000155dc*/ s_nop           0x0
/*0000000155e0*/ s_nop           0x0
/*0000000155e4*/ s_nop           0x0
/*0000000155e8*/ s_nop           0x0
/*0000000155ec*/ s_nop           0x0
/*0000000155f0*/ s_nop           0x0
/*0000000155f4*/ s_nop           0x0
/*0000000155f8*/ s_nop           0x0
/*0000000155fc*/ s_nop           0x0
subtract_long_get_work_dim_get_global_size:
.skip 256
/*000000015700*/ v_mov_b32       v3, s4
/*000000015704*/ v_mov_b32       v4, s5
/*000000015708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015710*/ s_waitcnt       lgkmcnt(0)
/*000000015714*/ s_clause        0x1
/*000000015718*/ s_load_dword    s1, s[6:7], 0x20
/*000000015720*/ s_load_dwordx2  s[12:13], s[6:7], 0x8
/*000000015728*/ s_lshl_b32      s3, s8, 1
/*00000001572c*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000015734*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000001573c*/ v_mov_b32       v4, 0
/*000000015740*/ s_lshl_b32      s8, s9, 1
/*000000015744*/ s_lshl_b32      s9, s10, 2
/*000000015748*/ v_mov_b32       v11, 0
/*00000001574c*/ v_mov_b32       v6, v4
/*000000015750*/ v_mov_b32       v8, v4
/*000000015754*/ v_add3_u32      v3, s0, s3, v0
/*00000001575c*/ v_add3_u32      v5, s2, s8, v1
/*000000015764*/ s_waitcnt       lgkmcnt(0)
/*000000015768*/ v_add3_u32      v7, s1, s9, v2
/*000000015770*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015778*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015780*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000015788*/ v_add_co_u32    v0, vcc, s12, v0
/*000000015790*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*000000015794*/ v_add_co_u32    v2, vcc, s12, v2
/*00000001579c*/ v_add_co_ci_u32 v3, vcc, s13, v3, vcc
/*0000000157a0*/ v_add_co_u32    v4, vcc, s12, v4
/*0000000157a8*/ v_add_co_ci_u32 v5, vcc, s13, v5, vcc
/*0000000157ac*/ s_waitcnt       vmcnt(0)
/*0000000157b0*/ v_and_b32       v10, 0xffff, v9
/*0000000157b8*/ v_sub_co_u32    v6, vcc, v10, s4
/*0000000157c0*/ v_subrev_co_ci_u32 v7, vcc, 0, v11, vcc
/*0000000157c4*/ v_sub_co_u32    v8, vcc, v10, s5
/*0000000157cc*/ v_subrev_co_ci_u32 v9, vcc, 0, v11, vcc
/*0000000157d0*/ v_sub_co_u32    v10, vcc, v10, s6
/*0000000157d8*/ v_subrev_co_ci_u32 v11, vcc, 0, v11, vcc
/*0000000157dc*/ global_store_dwordx2 v[0:1], v[6:7], off
/*0000000157e4*/ global_store_dwordx2 v[2:3], v[8:9], off
/*0000000157ec*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000157f4*/ s_endpgm
/*0000000157f8*/ s_nop           0x0
/*0000000157fc*/ s_nop           0x0
subtract_long_x_get_num_groups:
.skip 256
/*000000015900*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000015908*/ s_waitcnt       lgkmcnt(0)
/*00000001590c*/ s_clause        0x3
/*000000015910*/ s_load_dword    s3, s[6:7], 0x8
/*000000015918*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000015920*/ s_load_dword    s11, s[6:7], 0x20
/*000000015928*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000015930*/ s_lshl_b32      s7, s8, 4
/*000000015934*/ s_lshl_b32      s8, s9, 1
/*000000015938*/ s_lshl_b32      s9, s10, 1
/*00000001593c*/ v_mov_b32       v4, 0
/*000000015940*/ v_mov_b32       v6, v4
/*000000015944*/ v_mov_b32       v8, v4
/*000000015948*/ s_waitcnt       lgkmcnt(0)
/*00000001594c*/ s_ashr_i32      s10, s3, 31
/*000000015950*/ v_add3_u32      v3, s12, s7, v0
/*000000015958*/ s_and_b32       s6, s0, -16
/*00000001595c*/ v_add3_u32      v5, s14, s8, v1
/*000000015964*/ v_cmp_gt_u32    s[6:7], s0, s6
/*00000001596c*/ s_lshr_b32      s0, s0, 4
/*000000015970*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015978*/ v_add3_u32      v7, s11, s9, v2
/*000000015980*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015988*/ s_cmpk_lg_u32   s6, 0x0
/*00000001598c*/ s_addc_u32      s0, s0, 0
/*000000015990*/ v_add_co_u32    v0, vcc, s4, v0
/*000000015998*/ s_sub_u32       s6, s3, s0
/*00000001599c*/ s_subb_u32      s7, s10, 0
/*0000000159a0*/ s_and_b32       s0, s1, -2
/*0000000159a4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000159ac*/ v_cmp_gt_u32    s[0:1], s1, s0
/*0000000159b4*/ s_lshr_b32      s1, s1, 1
/*0000000159b8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000159bc*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000159c4*/ v_mov_b32       v6, s6
/*0000000159c8*/ s_cmpk_lg_u32   s0, 0x0
/*0000000159cc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000159d0*/ s_addc_u32      s0, s1, 0
/*0000000159d4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000159dc*/ s_sub_u32       s0, s3, s0
/*0000000159e0*/ s_subb_u32      s1, s10, 0
/*0000000159e4*/ s_and_b32       s8, s2, -2
/*0000000159e8*/ v_mov_b32       v9, s1
/*0000000159ec*/ v_cmp_gt_u32    s[8:9], s2, s8
/*0000000159f4*/ s_lshr_b32      s2, s2, 1
/*0000000159f8*/ v_mov_b32       v8, s0
/*0000000159fc*/ v_mov_b32       v7, s7
/*000000015a00*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000015a04*/ s_cmpk_lg_u32   s8, 0x0
/*000000015a08*/ s_addc_u32      s2, s2, 0
/*000000015a0c*/ s_sub_u32       s0, s3, s2
/*000000015a10*/ s_subb_u32      s1, s10, 0
/*000000015a14*/ v_mov_b32       v11, s1
/*000000015a18*/ v_mov_b32       v10, s0
/*000000015a1c*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000015a24*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000015a2c*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015a34*/ s_endpgm
/*000000015a38*/ s_nop           0x0
/*000000015a3c*/ s_nop           0x0
/*000000015a40*/ s_nop           0x0
/*000000015a44*/ s_nop           0x0
/*000000015a48*/ s_nop           0x0
/*000000015a4c*/ s_nop           0x0
/*000000015a50*/ s_nop           0x0
/*000000015a54*/ s_nop           0x0
/*000000015a58*/ s_nop           0x0
/*000000015a5c*/ s_nop           0x0
/*000000015a60*/ s_nop           0x0
/*000000015a64*/ s_nop           0x0
/*000000015a68*/ s_nop           0x0
/*000000015a6c*/ s_nop           0x0
/*000000015a70*/ s_nop           0x0
/*000000015a74*/ s_nop           0x0
/*000000015a78*/ s_nop           0x0
/*000000015a7c*/ s_nop           0x0
/*000000015a80*/ s_nop           0x0
/*000000015a84*/ s_nop           0x0
/*000000015a88*/ s_nop           0x0
/*000000015a8c*/ s_nop           0x0
/*000000015a90*/ s_nop           0x0
/*000000015a94*/ s_nop           0x0
/*000000015a98*/ s_nop           0x0
/*000000015a9c*/ s_nop           0x0
/*000000015aa0*/ s_nop           0x0
/*000000015aa4*/ s_nop           0x0
/*000000015aa8*/ s_nop           0x0
/*000000015aac*/ s_nop           0x0
/*000000015ab0*/ s_nop           0x0
/*000000015ab4*/ s_nop           0x0
/*000000015ab8*/ s_nop           0x0
/*000000015abc*/ s_nop           0x0
/*000000015ac0*/ s_nop           0x0
/*000000015ac4*/ s_nop           0x0
/*000000015ac8*/ s_nop           0x0
/*000000015acc*/ s_nop           0x0
/*000000015ad0*/ s_nop           0x0
/*000000015ad4*/ s_nop           0x0
/*000000015ad8*/ s_nop           0x0
/*000000015adc*/ s_nop           0x0
/*000000015ae0*/ s_nop           0x0
/*000000015ae4*/ s_nop           0x0
/*000000015ae8*/ s_nop           0x0
/*000000015aec*/ s_nop           0x0
/*000000015af0*/ s_nop           0x0
/*000000015af4*/ s_nop           0x0
/*000000015af8*/ s_nop           0x0
/*000000015afc*/ s_nop           0x0
subtract_long_get_global_offset_get_num_groups:
.skip 256
/*000000015c00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000015c08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000015c10*/ s_waitcnt       lgkmcnt(0)
/*000000015c14*/ s_clause        0x1
/*000000015c18*/ s_load_dword    s3, s[6:7], 0x20
/*000000015c20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015c28*/ s_lshl_b32      s7, s8, 1
/*000000015c2c*/ s_lshl_b32      s8, s9, 4
/*000000015c30*/ s_lshl_b32      s9, s10, 1
/*000000015c34*/ v_mov_b32       v4, 0
/*000000015c38*/ v_mov_b32       v6, v4
/*000000015c3c*/ v_mov_b32       v8, v4
/*000000015c40*/ s_and_b32       s6, s0, -2
/*000000015c44*/ v_add3_u32      v3, s12, s7, v0
/*000000015c4c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000015c54*/ s_lshr_b32      s0, s0, 1
/*000000015c58*/ v_add3_u32      v5, s14, s8, v1
/*000000015c60*/ s_waitcnt       lgkmcnt(0)
/*000000015c64*/ v_add3_u32      v7, s3, s9, v2
/*000000015c6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015c74*/ s_cmpk_lg_u32   s6, 0x0
/*000000015c78*/ s_addc_u32      s0, s0, 0
/*000000015c7c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015c84*/ s_sub_u32       s6, s12, s0
/*000000015c88*/ s_subb_u32      s7, 0, 0
/*000000015c8c*/ s_and_b32       s0, s1, -16
/*000000015c90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000015c98*/ v_cmp_gt_u32    s[0:1], s1, s0
/*000000015ca0*/ s_lshr_b32      s1, s1, 4
/*000000015ca4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000015cac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000015cb0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000015cb8*/ s_cmpk_lg_u32   s0, 0x0
/*000000015cbc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000015cc0*/ s_addc_u32      s0, s1, 0
/*000000015cc4*/ v_mov_b32       v6, s6
/*000000015cc8*/ s_sub_u32       s0, s14, s0
/*000000015ccc*/ s_subb_u32      s1, 0, 0
/*000000015cd0*/ s_and_b32       s8, s2, -2
/*000000015cd4*/ v_mov_b32       v9, s1
/*000000015cd8*/ v_cmp_gt_u32    s[8:9], s2, s8
/*000000015ce0*/ s_lshr_b32      s2, s2, 1
/*000000015ce4*/ v_mov_b32       v8, s0
/*000000015ce8*/ v_add_co_u32    v4, vcc, s4, v4
/*000000015cf0*/ v_mov_b32       v7, s7
/*000000015cf4*/ s_cmpk_lg_u32   s8, 0x0
/*000000015cf8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000015cfc*/ s_addc_u32      s2, s2, 0
/*000000015d00*/ s_sub_u32       s0, s3, s2
/*000000015d04*/ s_subb_u32      s1, 0, 0
/*000000015d08*/ v_mov_b32       v11, s1
/*000000015d0c*/ v_mov_b32       v10, s0
/*000000015d10*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000015d18*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000015d20*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015d28*/ s_endpgm
/*000000015d2c*/ s_nop           0x0
/*000000015d30*/ s_nop           0x0
/*000000015d34*/ s_nop           0x0
/*000000015d38*/ s_nop           0x0
/*000000015d3c*/ s_nop           0x0
/*000000015d40*/ s_nop           0x0
/*000000015d44*/ s_nop           0x0
/*000000015d48*/ s_nop           0x0
/*000000015d4c*/ s_nop           0x0
/*000000015d50*/ s_nop           0x0
/*000000015d54*/ s_nop           0x0
/*000000015d58*/ s_nop           0x0
/*000000015d5c*/ s_nop           0x0
/*000000015d60*/ s_nop           0x0
/*000000015d64*/ s_nop           0x0
/*000000015d68*/ s_nop           0x0
/*000000015d6c*/ s_nop           0x0
/*000000015d70*/ s_nop           0x0
/*000000015d74*/ s_nop           0x0
/*000000015d78*/ s_nop           0x0
/*000000015d7c*/ s_nop           0x0
/*000000015d80*/ s_nop           0x0
/*000000015d84*/ s_nop           0x0
/*000000015d88*/ s_nop           0x0
/*000000015d8c*/ s_nop           0x0
/*000000015d90*/ s_nop           0x0
/*000000015d94*/ s_nop           0x0
/*000000015d98*/ s_nop           0x0
/*000000015d9c*/ s_nop           0x0
/*000000015da0*/ s_nop           0x0
/*000000015da4*/ s_nop           0x0
/*000000015da8*/ s_nop           0x0
/*000000015dac*/ s_nop           0x0
/*000000015db0*/ s_nop           0x0
/*000000015db4*/ s_nop           0x0
/*000000015db8*/ s_nop           0x0
/*000000015dbc*/ s_nop           0x0
/*000000015dc0*/ s_nop           0x0
/*000000015dc4*/ s_nop           0x0
/*000000015dc8*/ s_nop           0x0
/*000000015dcc*/ s_nop           0x0
/*000000015dd0*/ s_nop           0x0
/*000000015dd4*/ s_nop           0x0
/*000000015dd8*/ s_nop           0x0
/*000000015ddc*/ s_nop           0x0
/*000000015de0*/ s_nop           0x0
/*000000015de4*/ s_nop           0x0
/*000000015de8*/ s_nop           0x0
/*000000015dec*/ s_nop           0x0
/*000000015df0*/ s_nop           0x0
/*000000015df4*/ s_nop           0x0
/*000000015df8*/ s_nop           0x0
/*000000015dfc*/ s_nop           0x0
subtract_long_get_local_id_get_num_groups:
.skip 256
/*000000015f00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000015f08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000015f10*/ s_waitcnt       lgkmcnt(0)
/*000000015f14*/ s_clause        0x1
/*000000015f18*/ s_load_dword    s3, s[6:7], 0x20
/*000000015f20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015f28*/ s_lshl_b32      s6, s8, 3
/*000000015f2c*/ s_lshl_b32      s8, s9, 2
/*000000015f30*/ s_lshl_b32      s9, s10, 1
/*000000015f34*/ v_mov_b32       v4, 0
/*000000015f38*/ v_mov_b32       v14, 0
/*000000015f3c*/ v_mov_b32       v6, v4
/*000000015f40*/ s_and_b32       s7, s0, -8
/*000000015f44*/ v_add3_u32      v3, s12, s6, v0
/*000000015f4c*/ v_cmp_gt_u32    s[7:8], s0, s7
/*000000015f54*/ s_lshr_b32      s0, s0, 3
/*000000015f58*/ v_add3_u32      v5, s14, s8, v1
/*000000015f60*/ s_waitcnt       lgkmcnt(0)
/*000000015f64*/ v_add3_u32      v7, s3, s9, v2
/*000000015f6c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000015f74*/ s_cmpk_lg_u32   s7, 0x0
/*000000015f78*/ s_addc_u32      s0, s0, 0
/*000000015f7c*/ s_and_b32       s6, s1, -4
/*000000015f80*/ v_sub_co_u32    v10, vcc, v0, s0
/*000000015f88*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000015f90*/ s_lshr_b32      s1, s1, 2
/*000000015f94*/ v_subrev_co_ci_u32 v11, vcc, 0, v14, vcc
/*000000015f98*/ v_add_co_u32    v12, vcc, s4, v8
/*000000015fa0*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000015fa8*/ s_cmpk_lg_u32   s6, 0x0
/*000000015fac*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*000000015fb0*/ s_addc_u32      s0, s1, 0
/*000000015fb4*/ s_and_b32       s1, s2, -2
/*000000015fb8*/ v_sub_co_u32    v0, vcc, v1, s0
/*000000015fc0*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000015fc8*/ v_mov_b32       v8, v4
/*000000015fcc*/ v_subrev_co_ci_u32 v1, vcc, 0, v14, vcc
/*000000015fd0*/ v_add_co_u32    v18, vcc, s4, v5
/*000000015fd8*/ s_lshr_b32      s0, s2, 1
/*000000015fdc*/ s_cmpk_lg_u32   s1, 0x0
/*000000015fe0*/ v_add_co_ci_u32 v19, vcc, s5, v6, vcc
/*000000015fe4*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000015fec*/ s_addc_u32      s0, s0, 0
/*000000015ff0*/ v_sub_co_u32    v7, vcc, v2, s0
/*000000015ff8*/ v_subrev_co_ci_u32 v8, vcc, 0, v14, vcc
/*000000015ffc*/ v_add_co_u32    v5, vcc, s4, v5
/*000000016004*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000016008*/ global_store_dwordx2 v[12:13], v[10:11], off
/*000000016010*/ global_store_dwordx2 v[18:19], v[0:1], off
/*000000016018*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000016020*/ s_endpgm
/*000000016024*/ s_nop           0x0
/*000000016028*/ s_nop           0x0
/*00000001602c*/ s_nop           0x0
/*000000016030*/ s_nop           0x0
/*000000016034*/ s_nop           0x0
/*000000016038*/ s_nop           0x0
/*00000001603c*/ s_nop           0x0
/*000000016040*/ s_nop           0x0
/*000000016044*/ s_nop           0x0
/*000000016048*/ s_nop           0x0
/*00000001604c*/ s_nop           0x0
/*000000016050*/ s_nop           0x0
/*000000016054*/ s_nop           0x0
/*000000016058*/ s_nop           0x0
/*00000001605c*/ s_nop           0x0
/*000000016060*/ s_nop           0x0
/*000000016064*/ s_nop           0x0
/*000000016068*/ s_nop           0x0
/*00000001606c*/ s_nop           0x0
/*000000016070*/ s_nop           0x0
/*000000016074*/ s_nop           0x0
/*000000016078*/ s_nop           0x0
/*00000001607c*/ s_nop           0x0
/*000000016080*/ s_nop           0x0
/*000000016084*/ s_nop           0x0
/*000000016088*/ s_nop           0x0
/*00000001608c*/ s_nop           0x0
/*000000016090*/ s_nop           0x0
/*000000016094*/ s_nop           0x0
/*000000016098*/ s_nop           0x0
/*00000001609c*/ s_nop           0x0
/*0000000160a0*/ s_nop           0x0
/*0000000160a4*/ s_nop           0x0
/*0000000160a8*/ s_nop           0x0
/*0000000160ac*/ s_nop           0x0
/*0000000160b0*/ s_nop           0x0
/*0000000160b4*/ s_nop           0x0
/*0000000160b8*/ s_nop           0x0
/*0000000160bc*/ s_nop           0x0
/*0000000160c0*/ s_nop           0x0
/*0000000160c4*/ s_nop           0x0
/*0000000160c8*/ s_nop           0x0
/*0000000160cc*/ s_nop           0x0
/*0000000160d0*/ s_nop           0x0
/*0000000160d4*/ s_nop           0x0
/*0000000160d8*/ s_nop           0x0
/*0000000160dc*/ s_nop           0x0
/*0000000160e0*/ s_nop           0x0
/*0000000160e4*/ s_nop           0x0
/*0000000160e8*/ s_nop           0x0
/*0000000160ec*/ s_nop           0x0
/*0000000160f0*/ s_nop           0x0
/*0000000160f4*/ s_nop           0x0
/*0000000160f8*/ s_nop           0x0
/*0000000160fc*/ s_nop           0x0
subtract_long_get_group_id_get_num_groups:
.skip 256
/*000000016200*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016208*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016210*/ s_waitcnt       lgkmcnt(0)
/*000000016214*/ s_clause        0x1
/*000000016218*/ s_load_dword    s3, s[6:7], 0x20
/*000000016220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016228*/ s_lshl_b32      s7, s8, 1
/*00000001622c*/ s_lshl_b32      s11, s9, 4
/*000000016230*/ s_lshl_b32      s13, s10, 1
/*000000016234*/ v_mov_b32       v4, 0
/*000000016238*/ v_mov_b32       v6, v4
/*00000001623c*/ v_mov_b32       v8, v4
/*000000016240*/ s_and_b32       s6, s0, -2
/*000000016244*/ v_add3_u32      v3, s12, s7, v0
/*00000001624c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000016254*/ s_lshr_b32      s0, s0, 1
/*000000016258*/ v_add3_u32      v5, s14, s11, v1
/*000000016260*/ s_waitcnt       lgkmcnt(0)
/*000000016264*/ v_add3_u32      v7, s3, s13, v2
/*00000001626c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016274*/ s_cmpk_lg_u32   s6, 0x0
/*000000016278*/ s_addc_u32      s0, s0, 0
/*00000001627c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000016284*/ s_sub_u32       s6, s8, s0
/*000000016288*/ s_subb_u32      s7, 0, 0
/*00000001628c*/ s_and_b32       s0, s1, -16
/*000000016290*/ v_add_co_u32    v0, vcc, s4, v0
/*000000016298*/ v_cmp_gt_u32    s[0:1], s1, s0
/*0000000162a0*/ s_lshr_b32      s1, s1, 4
/*0000000162a4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000162ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000162b0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000162b8*/ s_cmpk_lg_u32   s0, 0x0
/*0000000162bc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000162c0*/ s_addc_u32      s0, s1, 0
/*0000000162c4*/ v_mov_b32       v6, s6
/*0000000162c8*/ s_sub_u32       s0, s9, s0
/*0000000162cc*/ s_subb_u32      s1, 0, 0
/*0000000162d0*/ s_and_b32       s3, s2, -2
/*0000000162d4*/ v_mov_b32       v9, s1
/*0000000162d8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000162e0*/ s_lshr_b32      s2, s2, 1
/*0000000162e4*/ v_mov_b32       v8, s0
/*0000000162e8*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000162f0*/ v_mov_b32       v7, s7
/*0000000162f4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000162f8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000162fc*/ s_addc_u32      s2, s2, 0
/*000000016300*/ s_sub_u32       s0, s10, s2
/*000000016304*/ s_subb_u32      s1, 0, 0
/*000000016308*/ v_mov_b32       v11, s1
/*00000001630c*/ v_mov_b32       v10, s0
/*000000016310*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000016318*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000016320*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000016328*/ s_endpgm
/*00000001632c*/ s_nop           0x0
/*000000016330*/ s_nop           0x0
/*000000016334*/ s_nop           0x0
/*000000016338*/ s_nop           0x0
/*00000001633c*/ s_nop           0x0
/*000000016340*/ s_nop           0x0
/*000000016344*/ s_nop           0x0
/*000000016348*/ s_nop           0x0
/*00000001634c*/ s_nop           0x0
/*000000016350*/ s_nop           0x0
/*000000016354*/ s_nop           0x0
/*000000016358*/ s_nop           0x0
/*00000001635c*/ s_nop           0x0
/*000000016360*/ s_nop           0x0
/*000000016364*/ s_nop           0x0
/*000000016368*/ s_nop           0x0
/*00000001636c*/ s_nop           0x0
/*000000016370*/ s_nop           0x0
/*000000016374*/ s_nop           0x0
/*000000016378*/ s_nop           0x0
/*00000001637c*/ s_nop           0x0
/*000000016380*/ s_nop           0x0
/*000000016384*/ s_nop           0x0
/*000000016388*/ s_nop           0x0
/*00000001638c*/ s_nop           0x0
/*000000016390*/ s_nop           0x0
/*000000016394*/ s_nop           0x0
/*000000016398*/ s_nop           0x0
/*00000001639c*/ s_nop           0x0
/*0000000163a0*/ s_nop           0x0
/*0000000163a4*/ s_nop           0x0
/*0000000163a8*/ s_nop           0x0
/*0000000163ac*/ s_nop           0x0
/*0000000163b0*/ s_nop           0x0
/*0000000163b4*/ s_nop           0x0
/*0000000163b8*/ s_nop           0x0
/*0000000163bc*/ s_nop           0x0
/*0000000163c0*/ s_nop           0x0
/*0000000163c4*/ s_nop           0x0
/*0000000163c8*/ s_nop           0x0
/*0000000163cc*/ s_nop           0x0
/*0000000163d0*/ s_nop           0x0
/*0000000163d4*/ s_nop           0x0
/*0000000163d8*/ s_nop           0x0
/*0000000163dc*/ s_nop           0x0
/*0000000163e0*/ s_nop           0x0
/*0000000163e4*/ s_nop           0x0
/*0000000163e8*/ s_nop           0x0
/*0000000163ec*/ s_nop           0x0
/*0000000163f0*/ s_nop           0x0
/*0000000163f4*/ s_nop           0x0
/*0000000163f8*/ s_nop           0x0
/*0000000163fc*/ s_nop           0x0
subtract_long_get_local_size_get_num_groups:
.skip 256
/*000000016500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016508*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016510*/ s_waitcnt       lgkmcnt(0)
/*000000016514*/ s_clause        0x1
/*000000016518*/ s_load_dword    s3, s[6:7], 0x20
/*000000016520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016528*/ s_lshl_b32      s7, s8, 1
/*00000001652c*/ s_lshl_b32      s8, s9, 1
/*000000016530*/ s_lshl_b32      s9, s10, 2
/*000000016534*/ v_mov_b32       v4, 0
/*000000016538*/ v_mov_b32       v6, v4
/*00000001653c*/ v_mov_b32       v8, v4
/*000000016540*/ s_and_b32       s6, s0, -2
/*000000016544*/ v_add3_u32      v3, s12, s7, v0
/*00000001654c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000016554*/ s_lshr_b32      s0, s0, 1
/*000000016558*/ v_add3_u32      v5, s14, s8, v1
/*000000016560*/ s_waitcnt       lgkmcnt(0)
/*000000016564*/ v_add3_u32      v7, s3, s9, v2
/*00000001656c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016574*/ s_cmpk_lg_u32   s6, 0x0
/*000000016578*/ s_addc_u32      s0, s0, 0
/*00000001657c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000016584*/ s_sub_u32       s6, 2, s0
/*000000016588*/ s_subb_u32      s7, 0, 0
/*00000001658c*/ s_and_b32       s0, s1, -2
/*000000016590*/ v_add_co_u32    v0, vcc, s4, v0
/*000000016598*/ v_cmp_gt_u32    s[0:1], s1, s0
/*0000000165a0*/ s_lshr_b32      s1, s1, 1
/*0000000165a4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000165ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000165b0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000165b8*/ s_cmpk_lg_u32   s0, 0x0
/*0000000165bc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000165c0*/ s_addc_u32      s0, s1, 0
/*0000000165c4*/ v_mov_b32       v6, s6
/*0000000165c8*/ s_sub_u32       s0, 2, s0
/*0000000165cc*/ s_subb_u32      s1, 0, 0
/*0000000165d0*/ s_and_b32       s3, s2, -4
/*0000000165d4*/ v_mov_b32       v9, s1
/*0000000165d8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000165e0*/ s_lshr_b32      s2, s2, 2
/*0000000165e4*/ v_mov_b32       v8, s0
/*0000000165e8*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000165f0*/ v_mov_b32       v7, s7
/*0000000165f4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000165f8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000165fc*/ s_addc_u32      s2, s2, 0
/*000000016600*/ s_sub_u32       s0, 4, s2
/*000000016604*/ s_subb_u32      s1, 0, 0
/*000000016608*/ v_mov_b32       v11, s1
/*00000001660c*/ v_mov_b32       v10, s0
/*000000016610*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000016618*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000016620*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000016628*/ s_endpgm
/*00000001662c*/ s_nop           0x0
/*000000016630*/ s_nop           0x0
/*000000016634*/ s_nop           0x0
/*000000016638*/ s_nop           0x0
/*00000001663c*/ s_nop           0x0
/*000000016640*/ s_nop           0x0
/*000000016644*/ s_nop           0x0
/*000000016648*/ s_nop           0x0
/*00000001664c*/ s_nop           0x0
/*000000016650*/ s_nop           0x0
/*000000016654*/ s_nop           0x0
/*000000016658*/ s_nop           0x0
/*00000001665c*/ s_nop           0x0
/*000000016660*/ s_nop           0x0
/*000000016664*/ s_nop           0x0
/*000000016668*/ s_nop           0x0
/*00000001666c*/ s_nop           0x0
/*000000016670*/ s_nop           0x0
/*000000016674*/ s_nop           0x0
/*000000016678*/ s_nop           0x0
/*00000001667c*/ s_nop           0x0
/*000000016680*/ s_nop           0x0
/*000000016684*/ s_nop           0x0
/*000000016688*/ s_nop           0x0
/*00000001668c*/ s_nop           0x0
/*000000016690*/ s_nop           0x0
/*000000016694*/ s_nop           0x0
/*000000016698*/ s_nop           0x0
/*00000001669c*/ s_nop           0x0
/*0000000166a0*/ s_nop           0x0
/*0000000166a4*/ s_nop           0x0
/*0000000166a8*/ s_nop           0x0
/*0000000166ac*/ s_nop           0x0
/*0000000166b0*/ s_nop           0x0
/*0000000166b4*/ s_nop           0x0
/*0000000166b8*/ s_nop           0x0
/*0000000166bc*/ s_nop           0x0
/*0000000166c0*/ s_nop           0x0
/*0000000166c4*/ s_nop           0x0
/*0000000166c8*/ s_nop           0x0
/*0000000166cc*/ s_nop           0x0
/*0000000166d0*/ s_nop           0x0
/*0000000166d4*/ s_nop           0x0
/*0000000166d8*/ s_nop           0x0
/*0000000166dc*/ s_nop           0x0
/*0000000166e0*/ s_nop           0x0
/*0000000166e4*/ s_nop           0x0
/*0000000166e8*/ s_nop           0x0
/*0000000166ec*/ s_nop           0x0
/*0000000166f0*/ s_nop           0x0
/*0000000166f4*/ s_nop           0x0
/*0000000166f8*/ s_nop           0x0
/*0000000166fc*/ s_nop           0x0
subtract_long_get_global_id_get_num_groups:
.skip 256
/*000000016800*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016808*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016810*/ s_waitcnt       lgkmcnt(0)
/*000000016814*/ s_clause        0x1
/*000000016818*/ s_load_dword    s3, s[6:7], 0x20
/*000000016820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016828*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000016830*/ v_mov_b32       v4, 0
/*000000016834*/ s_lshl_b32      s6, s9, 1
/*000000016838*/ s_lshl_b32      s8, s10, 2
/*00000001683c*/ v_mov_b32       v14, 0
/*000000016840*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000016848*/ v_mov_b32       v6, v4
/*00000001684c*/ s_and_b32       s7, s0, -2
/*000000016850*/ v_add3_u32      v5, s14, s6, v1
/*000000016858*/ v_cmp_gt_u32    s[7:8], s0, s7
/*000000016860*/ s_lshr_b32      s0, s0, 1
/*000000016864*/ v_add_nc_u32    v9, s12, v3
/*000000016868*/ s_waitcnt       lgkmcnt(0)
/*00000001686c*/ v_add3_u32      v3, s3, s8, v2
/*000000016874*/ v_add_co_u32    v18, vcc, s4, v7
/*00000001687c*/ s_cmpk_lg_u32   s7, 0x0
/*000000016880*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*000000016884*/ s_addc_u32      s0, s0, 0
/*000000016888*/ s_and_b32       s6, s1, -2
/*00000001688c*/ v_sub_co_u32    v8, vcc, v9, s0
/*000000016894*/ v_cmp_gt_u32    s[3:4], s1, s6
/*00000001689c*/ s_lshr_b32      s1, s1, 1
/*0000000168a0*/ v_lshlrev_b64   v[6:7], 3, v[5:6]
/*0000000168a8*/ v_subrev_co_ci_u32 v9, vcc, 0, v14, vcc
/*0000000168ac*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*0000000168b4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000168b8*/ s_addc_u32      s1, s1, 0
/*0000000168bc*/ s_and_b32       s3, s2, -4
/*0000000168c0*/ v_sub_co_u32    v10, vcc, v5, s1
/*0000000168c8*/ v_cmp_gt_u32    s[0:1], s2, s3
/*0000000168d0*/ s_lshr_b32      s1, s2, 2
/*0000000168d4*/ v_subrev_co_ci_u32 v11, vcc, 0, v14, vcc
/*0000000168d8*/ v_add_co_u32    v0, vcc, s4, v6
/*0000000168e0*/ s_cmpk_lg_u32   s0, 0x0
/*0000000168e4*/ v_add_co_ci_u32 v1, vcc, s5, v7, vcc
/*0000000168e8*/ s_addc_u32      s0, s1, 0
/*0000000168ec*/ v_sub_co_u32    v2, vcc, v3, s0
/*0000000168f4*/ v_subrev_co_ci_u32 v3, vcc, 0, v14, vcc
/*0000000168f8*/ v_add_co_u32    v12, vcc, s4, v12
/*000000016900*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*000000016904*/ global_store_dwordx2 v[18:19], v[8:9], off
/*00000001690c*/ global_store_dwordx2 v[0:1], v[10:11], off
/*000000016914*/ global_store_dwordx2 v[12:13], v[2:3], off
/*00000001691c*/ s_endpgm
/*000000016920*/ s_nop           0x0
/*000000016924*/ s_nop           0x0
/*000000016928*/ s_nop           0x0
/*00000001692c*/ s_nop           0x0
/*000000016930*/ s_nop           0x0
/*000000016934*/ s_nop           0x0
/*000000016938*/ s_nop           0x0
/*00000001693c*/ s_nop           0x0
/*000000016940*/ s_nop           0x0
/*000000016944*/ s_nop           0x0
/*000000016948*/ s_nop           0x0
/*00000001694c*/ s_nop           0x0
/*000000016950*/ s_nop           0x0
/*000000016954*/ s_nop           0x0
/*000000016958*/ s_nop           0x0
/*00000001695c*/ s_nop           0x0
/*000000016960*/ s_nop           0x0
/*000000016964*/ s_nop           0x0
/*000000016968*/ s_nop           0x0
/*00000001696c*/ s_nop           0x0
/*000000016970*/ s_nop           0x0
/*000000016974*/ s_nop           0x0
/*000000016978*/ s_nop           0x0
/*00000001697c*/ s_nop           0x0
/*000000016980*/ s_nop           0x0
/*000000016984*/ s_nop           0x0
/*000000016988*/ s_nop           0x0
/*00000001698c*/ s_nop           0x0
/*000000016990*/ s_nop           0x0
/*000000016994*/ s_nop           0x0
/*000000016998*/ s_nop           0x0
/*00000001699c*/ s_nop           0x0
/*0000000169a0*/ s_nop           0x0
/*0000000169a4*/ s_nop           0x0
/*0000000169a8*/ s_nop           0x0
/*0000000169ac*/ s_nop           0x0
/*0000000169b0*/ s_nop           0x0
/*0000000169b4*/ s_nop           0x0
/*0000000169b8*/ s_nop           0x0
/*0000000169bc*/ s_nop           0x0
/*0000000169c0*/ s_nop           0x0
/*0000000169c4*/ s_nop           0x0
/*0000000169c8*/ s_nop           0x0
/*0000000169cc*/ s_nop           0x0
/*0000000169d0*/ s_nop           0x0
/*0000000169d4*/ s_nop           0x0
/*0000000169d8*/ s_nop           0x0
/*0000000169dc*/ s_nop           0x0
/*0000000169e0*/ s_nop           0x0
/*0000000169e4*/ s_nop           0x0
/*0000000169e8*/ s_nop           0x0
/*0000000169ec*/ s_nop           0x0
/*0000000169f0*/ s_nop           0x0
/*0000000169f4*/ s_nop           0x0
/*0000000169f8*/ s_nop           0x0
/*0000000169fc*/ s_nop           0x0
subtract_long_get_global_size_get_num_groups:
.skip 256
/*000000016b00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016b08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016b10*/ s_waitcnt       lgkmcnt(0)
/*000000016b14*/ s_clause        0x1
/*000000016b18*/ s_load_dword    s3, s[6:7], 0x20
/*000000016b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000016b28*/ s_lshl_b32      s7, s8, 4
/*000000016b2c*/ s_lshl_b32      s8, s9, 1
/*000000016b30*/ s_lshl_b32      s9, s10, 1
/*000000016b34*/ v_mov_b32       v4, 0
/*000000016b38*/ v_mov_b32       v6, v4
/*000000016b3c*/ v_mov_b32       v8, v4
/*000000016b40*/ s_and_b32       s6, s0, -16
/*000000016b44*/ s_lshr_b32      s10, s0, 4
/*000000016b48*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000016b50*/ v_add3_u32      v3, s12, s7, v0
/*000000016b58*/ s_waitcnt       lgkmcnt(0)
/*000000016b5c*/ v_add3_u32      v7, s3, s9, v2
/*000000016b64*/ v_add3_u32      v5, s14, s8, v1
/*000000016b6c*/ s_cmpk_lg_u32   s6, 0x0
/*000000016b70*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016b78*/ s_addc_u32      s6, s10, 0
/*000000016b7c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000016b84*/ s_sub_u32       s6, s0, s6
/*000000016b88*/ s_subb_u32      s7, 0, 0
/*000000016b8c*/ s_and_b32       s0, s1, -2
/*000000016b90*/ s_lshr_b32      s3, s1, 1
/*000000016b94*/ v_cmp_gt_u32    s[0:1], s1, s0
/*000000016b9c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000016ba4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000016bac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000016bb0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000016bb8*/ s_cmpk_lg_u32   s0, 0x0
/*000000016bbc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000016bc0*/ s_addc_u32      s0, s3, 0
/*000000016bc4*/ v_mov_b32       v6, s6
/*000000016bc8*/ s_sub_u32       s0, s1, s0
/*000000016bcc*/ s_subb_u32      s1, 0, 0
/*000000016bd0*/ s_and_b32       s3, s2, -2
/*000000016bd4*/ s_lshr_b32      s8, s2, 1
/*000000016bd8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000016be0*/ v_mov_b32       v9, s1
/*000000016be4*/ v_mov_b32       v8, s0
/*000000016be8*/ v_add_co_u32    v4, vcc, s4, v4
/*000000016bf0*/ v_mov_b32       v7, s7
/*000000016bf4*/ s_cmpk_lg_u32   s3, 0x0
/*000000016bf8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000016bfc*/ s_addc_u32      s3, s8, 0
/*000000016c00*/ s_sub_u32       s0, s2, s3
/*000000016c04*/ s_subb_u32      s1, 0, 0
/*000000016c08*/ v_mov_b32       v11, s1
/*000000016c0c*/ v_mov_b32       v10, s0
/*000000016c10*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000016c18*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000016c20*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000016c28*/ s_endpgm
/*000000016c2c*/ s_nop           0x0
/*000000016c30*/ s_nop           0x0
/*000000016c34*/ s_nop           0x0
/*000000016c38*/ s_nop           0x0
/*000000016c3c*/ s_nop           0x0
/*000000016c40*/ s_nop           0x0
/*000000016c44*/ s_nop           0x0
/*000000016c48*/ s_nop           0x0
/*000000016c4c*/ s_nop           0x0
/*000000016c50*/ s_nop           0x0
/*000000016c54*/ s_nop           0x0
/*000000016c58*/ s_nop           0x0
/*000000016c5c*/ s_nop           0x0
/*000000016c60*/ s_nop           0x0
/*000000016c64*/ s_nop           0x0
/*000000016c68*/ s_nop           0x0
/*000000016c6c*/ s_nop           0x0
/*000000016c70*/ s_nop           0x0
/*000000016c74*/ s_nop           0x0
/*000000016c78*/ s_nop           0x0
/*000000016c7c*/ s_nop           0x0
/*000000016c80*/ s_nop           0x0
/*000000016c84*/ s_nop           0x0
/*000000016c88*/ s_nop           0x0
/*000000016c8c*/ s_nop           0x0
/*000000016c90*/ s_nop           0x0
/*000000016c94*/ s_nop           0x0
/*000000016c98*/ s_nop           0x0
/*000000016c9c*/ s_nop           0x0
/*000000016ca0*/ s_nop           0x0
/*000000016ca4*/ s_nop           0x0
/*000000016ca8*/ s_nop           0x0
/*000000016cac*/ s_nop           0x0
/*000000016cb0*/ s_nop           0x0
/*000000016cb4*/ s_nop           0x0
/*000000016cb8*/ s_nop           0x0
/*000000016cbc*/ s_nop           0x0
/*000000016cc0*/ s_nop           0x0
/*000000016cc4*/ s_nop           0x0
/*000000016cc8*/ s_nop           0x0
/*000000016ccc*/ s_nop           0x0
/*000000016cd0*/ s_nop           0x0
/*000000016cd4*/ s_nop           0x0
/*000000016cd8*/ s_nop           0x0
/*000000016cdc*/ s_nop           0x0
/*000000016ce0*/ s_nop           0x0
/*000000016ce4*/ s_nop           0x0
/*000000016ce8*/ s_nop           0x0
/*000000016cec*/ s_nop           0x0
/*000000016cf0*/ s_nop           0x0
/*000000016cf4*/ s_nop           0x0
/*000000016cf8*/ s_nop           0x0
/*000000016cfc*/ s_nop           0x0
subtract_long_get_num_groups_get_num_groups:
.skip 256
/*000000016e00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000016e08*/ s_waitcnt       lgkmcnt(0)
/*000000016e0c*/ s_clause        0x1
/*000000016e10*/ s_load_dword    s1, s[4:5], 0x20
/*000000016e18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000016e20*/ v_mov_b32       v4, 0
/*000000016e24*/ s_lshl_b32      s3, s6, 1
/*000000016e28*/ s_lshl_b32      s6, s7, 1
/*000000016e2c*/ s_lshl_b32      s7, s8, 2
/*000000016e30*/ s_mov_b32       s10, 0
/*000000016e34*/ v_mov_b32       v6, v4
/*000000016e38*/ v_mov_b32       v8, v4
/*000000016e3c*/ s_mov_b32       s11, s10
/*000000016e40*/ v_add3_u32      v3, s0, s3, v0
/*000000016e48*/ v_add3_u32      v5, s2, s6, v1
/*000000016e50*/ s_waitcnt       lgkmcnt(0)
/*000000016e54*/ v_add3_u32      v7, s1, s7, v2
/*000000016e5c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016e64*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000016e6c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000016e74*/ v_mov_b32       v2, s10
/*000000016e78*/ v_mov_b32       v3, s11
/*000000016e7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000016e84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000016e88*/ v_add_co_u32    v4, vcc, s4, v4
/*000000016e90*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000016e94*/ v_add_co_u32    v8, vcc, s4, v6
/*000000016e9c*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*000000016ea0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000016ea8*/ global_store_dwordx2 v[4:5], v[2:3], off
/*000000016eb0*/ global_store_dwordx2 v[8:9], v[2:3], off
/*000000016eb8*/ s_endpgm
/*000000016ebc*/ s_nop           0x0
/*000000016ec0*/ s_nop           0x0
/*000000016ec4*/ s_nop           0x0
/*000000016ec8*/ s_nop           0x0
/*000000016ecc*/ s_nop           0x0
/*000000016ed0*/ s_nop           0x0
/*000000016ed4*/ s_nop           0x0
/*000000016ed8*/ s_nop           0x0
/*000000016edc*/ s_nop           0x0
/*000000016ee0*/ s_nop           0x0
/*000000016ee4*/ s_nop           0x0
/*000000016ee8*/ s_nop           0x0
/*000000016eec*/ s_nop           0x0
/*000000016ef0*/ s_nop           0x0
/*000000016ef4*/ s_nop           0x0
/*000000016ef8*/ s_nop           0x0
/*000000016efc*/ s_nop           0x0
subtract_long_get_work_dim_get_num_groups:
.skip 256
/*000000017000*/ v_mov_b32       v3, s4
/*000000017004*/ v_mov_b32       v4, s5
/*000000017008*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000017010*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000017018*/ s_waitcnt       lgkmcnt(0)
/*00000001701c*/ s_clause        0x1
/*000000017020*/ s_load_dword    s3, s[6:7], 0x20
/*000000017028*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017030*/ s_lshl_b32      s6, s8, 1
/*000000017034*/ s_lshl_b32      s8, s9, 1
/*000000017038*/ global_load_ushort v7, v[3:4], off inst_offset:2
/*000000017040*/ v_mov_b32       v4, 0
/*000000017044*/ s_lshl_b32      s9, s10, 2
/*000000017048*/ v_mov_b32       v11, 0
/*00000001704c*/ v_mov_b32       v6, v4
/*000000017050*/ s_and_b32       s7, s0, -2
/*000000017054*/ v_add3_u32      v3, s12, s6, v0
/*00000001705c*/ v_cmp_gt_u32    s[7:8], s0, s7
/*000000017064*/ s_lshr_b32      s0, s0, 1
/*000000017068*/ v_add3_u32      v5, s14, s8, v1
/*000000017070*/ s_waitcnt       lgkmcnt(0)
/*000000017074*/ v_add3_u32      v0, s3, s9, v2
/*00000001707c*/ v_lshlrev_b64   v[2:3], 3, v[3:4]
/*000000017084*/ s_cmpk_lg_u32   s7, 0x0
/*000000017088*/ v_mov_b32       v1, v4
/*00000001708c*/ s_addc_u32      s0, s0, 0
/*000000017090*/ s_and_b32       s6, s1, -2
/*000000017094*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001709c*/ v_cmp_gt_u32    s[6:7], s1, s6
/*0000000170a4*/ v_add_co_u32    v12, vcc, s4, v2
/*0000000170ac*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*0000000170b4*/ s_lshr_b32      s1, s1, 1
/*0000000170b8*/ v_add_co_ci_u32 v13, vcc, s5, v3, vcc
/*0000000170bc*/ s_cmpk_lg_u32   s6, 0x0
/*0000000170c0*/ v_add_co_u32    v2, vcc, s4, v4
/*0000000170c8*/ s_addc_u32      s1, s1, 0
/*0000000170cc*/ s_and_b32       s3, s2, -4
/*0000000170d0*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*0000000170d4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000170dc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000170e4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000170e8*/ s_lshr_b32      s2, s2, 2
/*0000000170ec*/ s_cmpk_lg_u32   s3, 0x0
/*0000000170f0*/ s_addc_u32      s2, s2, 0
/*0000000170f4*/ s_waitcnt       vmcnt(0)
/*0000000170f8*/ v_and_b32       v10, 0xffff, v7
/*000000017100*/ v_sub_co_u32    v6, vcc, v10, s0
/*000000017108*/ v_subrev_co_ci_u32 v7, vcc, 0, v11, vcc
/*00000001710c*/ v_sub_co_u32    v8, vcc, v10, s1
/*000000017114*/ v_subrev_co_ci_u32 v9, vcc, 0, v11, vcc
/*000000017118*/ v_sub_co_u32    v10, vcc, v10, s2
/*000000017120*/ v_subrev_co_ci_u32 v11, vcc, 0, v11, vcc
/*000000017124*/ global_store_dwordx2 v[12:13], v[6:7], off
/*00000001712c*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000017134*/ global_store_dwordx2 v[0:1], v[10:11], off
/*00000001713c*/ s_endpgm
/*000000017140*/ s_nop           0x0
/*000000017144*/ s_nop           0x0
/*000000017148*/ s_nop           0x0
/*00000001714c*/ s_nop           0x0
/*000000017150*/ s_nop           0x0
/*000000017154*/ s_nop           0x0
/*000000017158*/ s_nop           0x0
/*00000001715c*/ s_nop           0x0
/*000000017160*/ s_nop           0x0
/*000000017164*/ s_nop           0x0
/*000000017168*/ s_nop           0x0
/*00000001716c*/ s_nop           0x0
/*000000017170*/ s_nop           0x0
/*000000017174*/ s_nop           0x0
/*000000017178*/ s_nop           0x0
/*00000001717c*/ s_nop           0x0
/*000000017180*/ s_nop           0x0
/*000000017184*/ s_nop           0x0
/*000000017188*/ s_nop           0x0
/*00000001718c*/ s_nop           0x0
/*000000017190*/ s_nop           0x0
/*000000017194*/ s_nop           0x0
/*000000017198*/ s_nop           0x0
/*00000001719c*/ s_nop           0x0
/*0000000171a0*/ s_nop           0x0
/*0000000171a4*/ s_nop           0x0
/*0000000171a8*/ s_nop           0x0
/*0000000171ac*/ s_nop           0x0
/*0000000171b0*/ s_nop           0x0
/*0000000171b4*/ s_nop           0x0
/*0000000171b8*/ s_nop           0x0
/*0000000171bc*/ s_nop           0x0
/*0000000171c0*/ s_nop           0x0
/*0000000171c4*/ s_nop           0x0
/*0000000171c8*/ s_nop           0x0
/*0000000171cc*/ s_nop           0x0
/*0000000171d0*/ s_nop           0x0
/*0000000171d4*/ s_nop           0x0
/*0000000171d8*/ s_nop           0x0
/*0000000171dc*/ s_nop           0x0
/*0000000171e0*/ s_nop           0x0
/*0000000171e4*/ s_nop           0x0
/*0000000171e8*/ s_nop           0x0
/*0000000171ec*/ s_nop           0x0
/*0000000171f0*/ s_nop           0x0
/*0000000171f4*/ s_nop           0x0
/*0000000171f8*/ s_nop           0x0
/*0000000171fc*/ s_nop           0x0
subtract_long_x_get_work_dim:
.skip 256
/*000000017300*/ v_mov_b32       v3, s4
/*000000017304*/ v_mov_b32       v4, s5
/*000000017308*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017310*/ s_waitcnt       lgkmcnt(0)
/*000000017314*/ s_clause        0x2
/*000000017318*/ s_load_dword    s1, s[6:7], 0x20
/*000000017320*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000017328*/ s_load_dword    s6, s[6:7], 0x8
/*000000017330*/ s_lshl_b32      s3, s8, 4
/*000000017334*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*00000001733c*/ v_mov_b32       v3, 0
/*000000017340*/ s_lshl_b32      s7, s9, 1
/*000000017344*/ s_lshl_b32      s8, s10, 1
/*000000017348*/ v_mov_b32       v5, v3
/*00000001734c*/ v_mov_b32       v7, v3
/*000000017350*/ v_mov_b32       v9, v3
/*000000017354*/ v_add3_u32      v4, s0, s3, v0
/*00000001735c*/ v_add3_u32      v6, s2, s7, v1
/*000000017364*/ s_waitcnt       lgkmcnt(0)
/*000000017368*/ v_add3_u32      v8, s1, s8, v2
/*000000017370*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017378*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000017380*/ v_lshlrev_b64   v[6:7], 3, v[8:9]
/*000000017388*/ v_add_co_u32    v0, vcc, s4, v0
/*000000017390*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017394*/ v_add_co_u32    v4, vcc, s4, v4
/*00000001739c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000173a0*/ v_add_co_u32    v8, vcc, s4, v6
/*0000000173a8*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000173ac*/ s_waitcnt       vmcnt(0)
/*0000000173b0*/ v_sub_nc_u32    v2, s6, v10
/*0000000173b4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000173bc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000173c4*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000173cc*/ s_endpgm
/*0000000173d0*/ s_nop           0x0
/*0000000173d4*/ s_nop           0x0
/*0000000173d8*/ s_nop           0x0
/*0000000173dc*/ s_nop           0x0
/*0000000173e0*/ s_nop           0x0
/*0000000173e4*/ s_nop           0x0
/*0000000173e8*/ s_nop           0x0
/*0000000173ec*/ s_nop           0x0
/*0000000173f0*/ s_nop           0x0
/*0000000173f4*/ s_nop           0x0
/*0000000173f8*/ s_nop           0x0
/*0000000173fc*/ s_nop           0x0
subtract_long_get_global_offset_get_work_dim:
.skip 256
/*000000017500*/ v_mov_b32       v3, s4
/*000000017504*/ v_mov_b32       v4, s5
/*000000017508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017510*/ s_waitcnt       lgkmcnt(0)
/*000000017514*/ s_clause        0x1
/*000000017518*/ s_load_dword    s1, s[6:7], 0x20
/*000000017520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017528*/ s_lshl_b32      s3, s8, 1
/*00000001752c*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000017534*/ v_mov_b32       v3, 0
/*000000017538*/ v_mov_b32       v5, v3
/*00000001753c*/ v_mov_b32       v7, v3
/*000000017540*/ v_add3_u32      v4, s0, s3, v0
/*000000017548*/ s_lshl_b32      s3, s9, 4
/*00000001754c*/ v_add3_u32      v6, s2, s3, v1
/*000000017554*/ s_lshl_b32      s3, s10, 1
/*000000017558*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017560*/ s_waitcnt       lgkmcnt(0)
/*000000017564*/ v_add3_u32      v4, s1, s3, v2
/*00000001756c*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*000000017574*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001757c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017580*/ v_add_co_u32    v12, vcc, s4, v6
/*000000017588*/ v_add_co_ci_u32 v13, vcc, s5, v7, vcc
/*00000001758c*/ s_waitcnt       vmcnt(0)
/*000000017590*/ v_sub_nc_u32    v2, s0, v8
/*000000017594*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000001759c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*0000000175a4*/ v_sub_nc_u32    v2, s2, v8
/*0000000175a8*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000175b0*/ global_store_dwordx2 v[12:13], v[2:3], off
/*0000000175b8*/ v_sub_nc_u32    v2, s1, v8
/*0000000175bc*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000175c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000175c8*/ s_endpgm
/*0000000175cc*/ s_nop           0x0
/*0000000175d0*/ s_nop           0x0
/*0000000175d4*/ s_nop           0x0
/*0000000175d8*/ s_nop           0x0
/*0000000175dc*/ s_nop           0x0
/*0000000175e0*/ s_nop           0x0
/*0000000175e4*/ s_nop           0x0
/*0000000175e8*/ s_nop           0x0
/*0000000175ec*/ s_nop           0x0
/*0000000175f0*/ s_nop           0x0
/*0000000175f4*/ s_nop           0x0
/*0000000175f8*/ s_nop           0x0
/*0000000175fc*/ s_nop           0x0
subtract_long_get_local_id_get_work_dim:
.skip 256
/*000000017700*/ v_mov_b32       v3, s4
/*000000017704*/ v_mov_b32       v4, s5
/*000000017708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017710*/ s_waitcnt       lgkmcnt(0)
/*000000017714*/ s_clause        0x1
/*000000017718*/ s_load_dword    s1, s[6:7], 0x20
/*000000017720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017728*/ v_mov_b32       v15, 0
/*00000001772c*/ s_lshl_b32      s3, s8, 3
/*000000017730*/ global_load_ushort v11, v[3:4], off inst_offset:2
/*000000017738*/ v_mov_b32       v6, v15
/*00000001773c*/ v_mov_b32       v8, v15
/*000000017740*/ v_mov_b32       v10, v15
/*000000017744*/ v_add3_u32      v5, s0, s3, v0
/*00000001774c*/ s_lshl_b32      s0, s9, 2
/*000000017750*/ v_add3_u32      v7, s2, s0, v1
/*000000017758*/ s_lshl_b32      s0, s10, 1
/*00000001775c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000017764*/ s_waitcnt       lgkmcnt(0)
/*000000017768*/ v_add3_u32      v9, s1, s0, v2
/*000000017770*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000017778*/ v_add_co_u32    v4, vcc, s4, v5
/*000000017780*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000017784*/ v_add_co_u32    v7, vcc, s4, v7
/*00000001778c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000017790*/ s_waitcnt       vmcnt(0)
/*000000017794*/ v_sub_nc_u32    v14, v0, v11
/*000000017798*/ global_store_dwordx2 v[4:5], v[14:15], off
/*0000000177a0*/ v_sub_nc_u32    v14, v1, v11
/*0000000177a4*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*0000000177ac*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000177b4*/ v_sub_nc_u32    v14, v2, v11
/*0000000177b8*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000177c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000177c4*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000177cc*/ s_endpgm
/*0000000177d0*/ s_nop           0x0
/*0000000177d4*/ s_nop           0x0
/*0000000177d8*/ s_nop           0x0
/*0000000177dc*/ s_nop           0x0
/*0000000177e0*/ s_nop           0x0
/*0000000177e4*/ s_nop           0x0
/*0000000177e8*/ s_nop           0x0
/*0000000177ec*/ s_nop           0x0
/*0000000177f0*/ s_nop           0x0
/*0000000177f4*/ s_nop           0x0
/*0000000177f8*/ s_nop           0x0
/*0000000177fc*/ s_nop           0x0
subtract_long_get_group_id_get_work_dim:
.skip 256
/*000000017900*/ v_mov_b32       v3, s4
/*000000017904*/ v_mov_b32       v4, s5
/*000000017908*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017910*/ s_waitcnt       lgkmcnt(0)
/*000000017914*/ s_clause        0x1
/*000000017918*/ s_load_dword    s1, s[6:7], 0x20
/*000000017920*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017928*/ s_lshl_b32      s3, s8, 1
/*00000001792c*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000017934*/ v_mov_b32       v3, 0
/*000000017938*/ v_mov_b32       v5, v3
/*00000001793c*/ v_mov_b32       v7, v3
/*000000017940*/ v_add3_u32      v4, s0, s3, v0
/*000000017948*/ s_lshl_b32      s0, s9, 4
/*00000001794c*/ v_add3_u32      v6, s2, s0, v1
/*000000017954*/ s_lshl_b32      s0, s10, 1
/*000000017958*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017960*/ s_waitcnt       lgkmcnt(0)
/*000000017964*/ v_add3_u32      v4, s1, s0, v2
/*00000001796c*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*000000017974*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001797c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017980*/ v_add_co_u32    v12, vcc, s4, v6
/*000000017988*/ v_add_co_ci_u32 v13, vcc, s5, v7, vcc
/*00000001798c*/ s_waitcnt       vmcnt(0)
/*000000017990*/ v_sub_nc_u32    v2, s8, v8
/*000000017994*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000001799c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*0000000179a4*/ v_sub_nc_u32    v2, s9, v8
/*0000000179a8*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000179b0*/ global_store_dwordx2 v[12:13], v[2:3], off
/*0000000179b8*/ v_sub_nc_u32    v2, s10, v8
/*0000000179bc*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000179c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000179c8*/ s_endpgm
/*0000000179cc*/ s_nop           0x0
/*0000000179d0*/ s_nop           0x0
/*0000000179d4*/ s_nop           0x0
/*0000000179d8*/ s_nop           0x0
/*0000000179dc*/ s_nop           0x0
/*0000000179e0*/ s_nop           0x0
/*0000000179e4*/ s_nop           0x0
/*0000000179e8*/ s_nop           0x0
/*0000000179ec*/ s_nop           0x0
/*0000000179f0*/ s_nop           0x0
/*0000000179f4*/ s_nop           0x0
/*0000000179f8*/ s_nop           0x0
/*0000000179fc*/ s_nop           0x0
subtract_long_get_local_size_get_work_dim:
.skip 256
/*000000017b00*/ v_mov_b32       v3, s4
/*000000017b04*/ v_mov_b32       v4, s5
/*000000017b08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017b10*/ s_waitcnt       lgkmcnt(0)
/*000000017b14*/ s_clause        0x1
/*000000017b18*/ s_load_dword    s1, s[6:7], 0x20
/*000000017b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017b28*/ s_lshl_b32      s3, s8, 1
/*000000017b2c*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000017b34*/ v_mov_b32       v3, 0
/*000000017b38*/ v_mov_b32       v5, v3
/*000000017b3c*/ v_mov_b32       v7, v3
/*000000017b40*/ v_add3_u32      v4, s0, s3, v0
/*000000017b48*/ s_lshl_b32      s0, s9, 1
/*000000017b4c*/ v_add3_u32      v6, s2, s0, v1
/*000000017b54*/ s_lshl_b32      s0, s10, 2
/*000000017b58*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017b60*/ s_waitcnt       lgkmcnt(0)
/*000000017b64*/ v_add3_u32      v4, s1, s0, v2
/*000000017b6c*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*000000017b74*/ v_add_co_u32    v0, vcc, s4, v0
/*000000017b7c*/ v_lshlrev_b64   v[4:5], 3, v[4:5]
/*000000017b84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017b88*/ v_add_co_u32    v12, vcc, s4, v6
/*000000017b90*/ v_add_co_ci_u32 v13, vcc, s5, v7, vcc
/*000000017b94*/ s_waitcnt       vmcnt(0)
/*000000017b98*/ v_sub_nc_u32    v2, 2, v8
/*000000017b9c*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017ba4*/ global_store_dwordx2 v[12:13], v[2:3], off
/*000000017bac*/ v_add_co_u32    v0, vcc, s4, v4
/*000000017bb4*/ v_sub_nc_u32    v2, 4, v8
/*000000017bb8*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*000000017bbc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017bc4*/ s_endpgm
/*000000017bc8*/ s_nop           0x0
/*000000017bcc*/ s_nop           0x0
/*000000017bd0*/ s_nop           0x0
/*000000017bd4*/ s_nop           0x0
/*000000017bd8*/ s_nop           0x0
/*000000017bdc*/ s_nop           0x0
/*000000017be0*/ s_nop           0x0
/*000000017be4*/ s_nop           0x0
/*000000017be8*/ s_nop           0x0
/*000000017bec*/ s_nop           0x0
/*000000017bf0*/ s_nop           0x0
/*000000017bf4*/ s_nop           0x0
/*000000017bf8*/ s_nop           0x0
/*000000017bfc*/ s_nop           0x0
subtract_long_get_global_id_get_work_dim:
.skip 256
/*000000017d00*/ v_mov_b32       v3, s4
/*000000017d04*/ v_mov_b32       v4, s5
/*000000017d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017d10*/ s_waitcnt       lgkmcnt(0)
/*000000017d14*/ s_clause        0x1
/*000000017d18*/ s_load_dword    s1, s[6:7], 0x20
/*000000017d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017d28*/ v_lshl_or_b32   v5, s9, 1, v1
/*000000017d30*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000017d38*/ v_mov_b32       v4, 0
/*000000017d3c*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000017d44*/ v_lshl_or_b32   v0, s10, 2, v2
/*000000017d4c*/ v_mov_b32       v6, v4
/*000000017d50*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000017d58*/ v_mov_b32       v10, v4
/*000000017d5c*/ v_mov_b32       v1, v4
/*000000017d60*/ v_add_nc_u32    v5, s2, v5
/*000000017d64*/ v_add_nc_u32    v13, s0, v3
/*000000017d68*/ s_waitcnt       lgkmcnt(0)
/*000000017d6c*/ v_add_nc_u32    v9, s1, v0
/*000000017d70*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000017d78*/ v_add_co_u32    v6, vcc, s4, v7
/*000000017d80*/ v_add_co_ci_u32 v7, vcc, s5, v8, vcc
/*000000017d84*/ v_add_co_u32    v17, vcc, s4, v2
/*000000017d8c*/ v_add_co_ci_u32 v18, vcc, s5, v3, vcc
/*000000017d90*/ s_waitcnt       vmcnt(0)
/*000000017d94*/ v_sub_nc_u32    v0, v13, v15
/*000000017d98*/ v_lshlrev_b64   v[13:14], 3, v[9:10]
/*000000017da0*/ v_sub_nc_u32    v3, v5, v15
/*000000017da4*/ global_store_dwordx2 v[6:7], v[0:1], off
/*000000017dac*/ global_store_dwordx2 v[17:18], v[3:4], off
/*000000017db4*/ v_add_co_u32    v1, vcc, s4, v13
/*000000017dbc*/ v_sub_nc_u32    v3, v9, v15
/*000000017dc0*/ v_add_co_ci_u32 v2, vcc, s5, v14, vcc
/*000000017dc4*/ global_store_dwordx2 v[1:2], v[3:4], off
/*000000017dcc*/ s_endpgm
/*000000017dd0*/ s_nop           0x0
/*000000017dd4*/ s_nop           0x0
/*000000017dd8*/ s_nop           0x0
/*000000017ddc*/ s_nop           0x0
/*000000017de0*/ s_nop           0x0
/*000000017de4*/ s_nop           0x0
/*000000017de8*/ s_nop           0x0
/*000000017dec*/ s_nop           0x0
/*000000017df0*/ s_nop           0x0
/*000000017df4*/ s_nop           0x0
/*000000017df8*/ s_nop           0x0
/*000000017dfc*/ s_nop           0x0
subtract_long_get_global_size_get_work_dim:
.skip 256
/*000000017f00*/ v_mov_b32       v3, s4
/*000000017f04*/ v_mov_b32       v4, s5
/*000000017f08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017f10*/ s_waitcnt       lgkmcnt(0)
/*000000017f14*/ s_clause        0x1
/*000000017f18*/ s_load_dword    s1, s[6:7], 0x20
/*000000017f20*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*000000017f28*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000017f30*/ s_lshl_b32      s3, s8, 4
/*000000017f34*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000017f3c*/ v_mov_b32       v3, 0
/*000000017f40*/ v_mov_b32       v5, v3
/*000000017f44*/ v_mov_b32       v7, v3
/*000000017f48*/ v_add3_u32      v4, s0, s3, v0
/*000000017f50*/ s_lshl_b32      s0, s9, 1
/*000000017f54*/ v_add3_u32      v6, s2, s0, v1
/*000000017f5c*/ s_lshl_b32      s0, s10, 1
/*000000017f60*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017f68*/ s_waitcnt       lgkmcnt(0)
/*000000017f6c*/ v_add3_u32      v4, s1, s0, v2
/*000000017f74*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*000000017f7c*/ v_add_co_u32    v0, vcc, s12, v0
/*000000017f84*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*000000017f88*/ v_add_co_u32    v12, vcc, s12, v6
/*000000017f90*/ v_add_co_ci_u32 v13, vcc, s13, v7, vcc
/*000000017f94*/ s_waitcnt       vmcnt(0)
/*000000017f98*/ v_sub_nc_u32    v2, s4, v8
/*000000017f9c*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017fa4*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017fac*/ v_sub_nc_u32    v2, s5, v8
/*000000017fb0*/ v_add_co_u32    v0, vcc, s12, v0
/*000000017fb8*/ global_store_dwordx2 v[12:13], v[2:3], off
/*000000017fc0*/ v_sub_nc_u32    v2, s6, v8
/*000000017fc4*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*000000017fc8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017fd0*/ s_endpgm
/*000000017fd4*/ s_nop           0x0
/*000000017fd8*/ s_nop           0x0
/*000000017fdc*/ s_nop           0x0
/*000000017fe0*/ s_nop           0x0
/*000000017fe4*/ s_nop           0x0
/*000000017fe8*/ s_nop           0x0
/*000000017fec*/ s_nop           0x0
/*000000017ff0*/ s_nop           0x0
/*000000017ff4*/ s_nop           0x0
/*000000017ff8*/ s_nop           0x0
/*000000017ffc*/ s_nop           0x0
subtract_long_get_num_groups_get_work_dim:
.skip 256
/*000000018100*/ v_mov_b32       v3, s4
/*000000018104*/ v_mov_b32       v4, s5
/*000000018108*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000018110*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000018118*/ s_waitcnt       lgkmcnt(0)
/*00000001811c*/ s_clause        0x1
/*000000018120*/ s_load_dword    s3, s[6:7], 0x20
/*000000018128*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000018130*/ s_lshl_b32      s7, s9, 1
/*000000018134*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*00000001813c*/ v_mov_b32       v3, 0
/*000000018140*/ s_lshl_b32      s6, s8, 1
/*000000018144*/ s_lshl_b32      s8, s10, 2
/*000000018148*/ v_mov_b32       v5, v3
/*00000001814c*/ v_mov_b32       v7, v3
/*000000018150*/ v_mov_b32       v9, v3
/*000000018154*/ s_and_b32       s9, s0, -2
/*000000018158*/ v_add3_u32      v4, s12, s6, v0
/*000000018160*/ v_cmp_gt_u32    s[6:7], s0, s9
/*000000018168*/ s_lshr_b32      s0, s0, 1
/*00000001816c*/ v_add3_u32      v6, s14, s7, v1
/*000000018174*/ s_waitcnt       lgkmcnt(0)
/*000000018178*/ v_add3_u32      v8, s3, s8, v2
/*000000018180*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000018188*/ s_cmpk_lg_u32   s6, 0x0
/*00000001818c*/ s_addc_u32      s0, s0, 0
/*000000018190*/ s_and_b32       s3, s1, -2
/*000000018194*/ s_lshr_b32      s6, s1, 1
/*000000018198*/ v_cmp_gt_u32    s[1:2], s1, s3
/*0000000181a0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000181a8*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*0000000181b0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000181b4*/ s_cmpk_lg_u32   s1, 0x0
/*0000000181b8*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000181c0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000181c4*/ s_waitcnt       vmcnt(0)
/*0000000181c8*/ v_sub_nc_u32    v2, s0, v10
/*0000000181cc*/ s_addc_u32      s0, s6, 0
/*0000000181d0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000181d8*/ v_sub_nc_u32    v2, s0, v10
/*0000000181dc*/ s_lshr_b32      s0, s2, 2
/*0000000181e0*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*0000000181e8*/ v_sub_nc_u32    v6, s0, v10
/*0000000181ec*/ s_and_b32       s0, s2, -4
/*0000000181f0*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000181f8*/ v_cmp_gt_u32    vcc, s2, s0
/*000000018200*/ v_add_co_ci_u32 v2, vcc, 0, v6, vcc
/*000000018204*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001820c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000018210*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000018218*/ s_endpgm
/*00000001821c*/ s_nop           0x0
/*000000018220*/ s_nop           0x0
/*000000018224*/ s_nop           0x0
/*000000018228*/ s_nop           0x0
/*00000001822c*/ s_nop           0x0
/*000000018230*/ s_nop           0x0
/*000000018234*/ s_nop           0x0
/*000000018238*/ s_nop           0x0
/*00000001823c*/ s_nop           0x0
/*000000018240*/ s_nop           0x0
/*000000018244*/ s_nop           0x0
/*000000018248*/ s_nop           0x0
/*00000001824c*/ s_nop           0x0
/*000000018250*/ s_nop           0x0
/*000000018254*/ s_nop           0x0
/*000000018258*/ s_nop           0x0
/*00000001825c*/ s_nop           0x0
/*000000018260*/ s_nop           0x0
/*000000018264*/ s_nop           0x0
/*000000018268*/ s_nop           0x0
/*00000001826c*/ s_nop           0x0
/*000000018270*/ s_nop           0x0
/*000000018274*/ s_nop           0x0
/*000000018278*/ s_nop           0x0
/*00000001827c*/ s_nop           0x0
/*000000018280*/ s_nop           0x0
/*000000018284*/ s_nop           0x0
/*000000018288*/ s_nop           0x0
/*00000001828c*/ s_nop           0x0
/*000000018290*/ s_nop           0x0
/*000000018294*/ s_nop           0x0
/*000000018298*/ s_nop           0x0
/*00000001829c*/ s_nop           0x0
/*0000000182a0*/ s_nop           0x0
/*0000000182a4*/ s_nop           0x0
/*0000000182a8*/ s_nop           0x0
/*0000000182ac*/ s_nop           0x0
/*0000000182b0*/ s_nop           0x0
/*0000000182b4*/ s_nop           0x0
/*0000000182b8*/ s_nop           0x0
/*0000000182bc*/ s_nop           0x0
/*0000000182c0*/ s_nop           0x0
/*0000000182c4*/ s_nop           0x0
/*0000000182c8*/ s_nop           0x0
/*0000000182cc*/ s_nop           0x0
/*0000000182d0*/ s_nop           0x0
/*0000000182d4*/ s_nop           0x0
/*0000000182d8*/ s_nop           0x0
/*0000000182dc*/ s_nop           0x0
/*0000000182e0*/ s_nop           0x0
/*0000000182e4*/ s_nop           0x0
/*0000000182e8*/ s_nop           0x0
/*0000000182ec*/ s_nop           0x0
/*0000000182f0*/ s_nop           0x0
/*0000000182f4*/ s_nop           0x0
/*0000000182f8*/ s_nop           0x0
/*0000000182fc*/ s_nop           0x0
subtract_long_get_work_dim_get_work_dim:
.skip 256
/*000000018400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000018408*/ s_waitcnt       lgkmcnt(0)
/*00000001840c*/ s_clause        0x1
/*000000018410*/ s_load_dword    s1, s[4:5], 0x20
/*000000018418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000018420*/ v_mov_b32       v4, 0
/*000000018424*/ s_lshl_b32      s3, s6, 1
/*000000018428*/ s_lshl_b32      s6, s7, 1
/*00000001842c*/ s_lshl_b32      s7, s8, 2
/*000000018430*/ s_mov_b32       s10, 0
/*000000018434*/ v_mov_b32       v6, v4
/*000000018438*/ v_mov_b32       v8, v4
/*00000001843c*/ s_mov_b32       s11, s10
/*000000018440*/ v_add3_u32      v3, s0, s3, v0
/*000000018448*/ v_add3_u32      v5, s2, s6, v1
/*000000018450*/ s_waitcnt       lgkmcnt(0)
/*000000018454*/ v_add3_u32      v7, s1, s7, v2
/*00000001845c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000018464*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001846c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000018474*/ v_mov_b32       v2, s10
/*000000018478*/ v_mov_b32       v3, s11
/*00000001847c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000018484*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000018488*/ v_add_co_u32    v4, vcc, s4, v4
/*000000018490*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000018494*/ v_add_co_u32    v8, vcc, s4, v6
/*00000001849c*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000184a0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000184a8*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000184b0*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000184b8*/ s_endpgm
/*0000000184bc*/ s_nop           0x0
/*0000000184c0*/ s_nop           0x0
/*0000000184c4*/ s_nop           0x0
/*0000000184c8*/ s_nop           0x0
/*0000000184cc*/ s_nop           0x0
/*0000000184d0*/ s_nop           0x0
/*0000000184d4*/ s_nop           0x0
/*0000000184d8*/ s_nop           0x0
/*0000000184dc*/ s_nop           0x0
/*0000000184e0*/ s_nop           0x0
/*0000000184e4*/ s_nop           0x0
/*0000000184e8*/ s_nop           0x0
/*0000000184ec*/ s_nop           0x0
/*0000000184f0*/ s_nop           0x0
/*0000000184f4*/ s_nop           0x0
/*0000000184f8*/ s_nop           0x0
/*0000000184fc*/ s_nop           0x0
subtract_long_x_64:
.skip 256
/*000000018600*/ s_clause        0x2
/*000000018604*/ s_load_dword    s2, s[4:5], 0x10
/*00000001860c*/ s_load_dword    s3, s[4:5], 0x0
/*000000018614*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001861c*/ v_mov_b32       v1, 0
/*000000018620*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000018628*/ v_mov_b32       v3, v1
/*00000001862c*/ s_waitcnt       lgkmcnt(0)
/*000000018630*/ v_add_nc_u32    v2, s2, v0
/*000000018634*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*00000001863c*/ v_sub_nc_u32    v0, s3, v2
/*000000018640*/ v_add_co_u32    v2, vcc, s0, v3
/*000000018648*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*00000001864c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000018654*/ s_endpgm
/*000000018658*/ s_nop           0x0
/*00000001865c*/ s_nop           0x0
/*000000018660*/ s_nop           0x0
/*000000018664*/ s_nop           0x0
/*000000018668*/ s_nop           0x0
/*00000001866c*/ s_nop           0x0
/*000000018670*/ s_nop           0x0
/*000000018674*/ s_nop           0x0
/*000000018678*/ s_nop           0x0
/*00000001867c*/ s_nop           0x0
/*000000018680*/ s_nop           0x0
/*000000018684*/ s_nop           0x0
/*000000018688*/ s_nop           0x0
/*00000001868c*/ s_nop           0x0
/*000000018690*/ s_nop           0x0
/*000000018694*/ s_nop           0x0
/*000000018698*/ s_nop           0x0
/*00000001869c*/ s_nop           0x0
/*0000000186a0*/ s_nop           0x0
/*0000000186a4*/ s_nop           0x0
/*0000000186a8*/ s_nop           0x0
/*0000000186ac*/ s_nop           0x0
/*0000000186b0*/ s_nop           0x0
/*0000000186b4*/ s_nop           0x0
/*0000000186b8*/ s_nop           0x0
/*0000000186bc*/ s_nop           0x0
/*0000000186c0*/ s_nop           0x0
/*0000000186c4*/ s_nop           0x0
/*0000000186c8*/ s_nop           0x0
/*0000000186cc*/ s_nop           0x0
/*0000000186d0*/ s_nop           0x0
/*0000000186d4*/ s_nop           0x0
/*0000000186d8*/ s_nop           0x0
/*0000000186dc*/ s_nop           0x0
/*0000000186e0*/ s_nop           0x0
/*0000000186e4*/ s_nop           0x0
/*0000000186e8*/ s_nop           0x0
/*0000000186ec*/ s_nop           0x0
/*0000000186f0*/ s_nop           0x0
/*0000000186f4*/ s_nop           0x0
/*0000000186f8*/ s_nop           0x0
/*0000000186fc*/ s_nop           0x0
subtract_long_get_global_offset_64:
.skip 256
/*000000018800*/ s_clause        0x1
/*000000018804*/ s_load_dword    s2, s[4:5], 0x10
/*00000001880c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000018814*/ v_mov_b32       v1, 0
/*000000018818*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000018820*/ v_mov_b32       v3, v1
/*000000018824*/ s_waitcnt       lgkmcnt(0)
/*000000018828*/ v_add_nc_u32    v2, s2, v0
/*00000001882c*/ v_sub_nc_u32    v0, 0, v0
/*000000018830*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000018838*/ v_add_co_u32    v2, vcc, s0, v2
/*000000018840*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000018844*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001884c*/ s_endpgm
/*000000018850*/ s_nop           0x0
/*000000018854*/ s_nop           0x0
/*000000018858*/ s_nop           0x0
/*00000001885c*/ s_nop           0x0
/*000000018860*/ s_nop           0x0
/*000000018864*/ s_nop           0x0
/*000000018868*/ s_nop           0x0
/*00000001886c*/ s_nop           0x0
/*000000018870*/ s_nop           0x0
/*000000018874*/ s_nop           0x0
/*000000018878*/ s_nop           0x0
/*00000001887c*/ s_nop           0x0
/*000000018880*/ s_nop           0x0
/*000000018884*/ s_nop           0x0
/*000000018888*/ s_nop           0x0
/*00000001888c*/ s_nop           0x0
/*000000018890*/ s_nop           0x0
/*000000018894*/ s_nop           0x0
/*000000018898*/ s_nop           0x0
/*00000001889c*/ s_nop           0x0
/*0000000188a0*/ s_nop           0x0
/*0000000188a4*/ s_nop           0x0
/*0000000188a8*/ s_nop           0x0
/*0000000188ac*/ s_nop           0x0
/*0000000188b0*/ s_nop           0x0
/*0000000188b4*/ s_nop           0x0
/*0000000188b8*/ s_nop           0x0
/*0000000188bc*/ s_nop           0x0
/*0000000188c0*/ s_nop           0x0
/*0000000188c4*/ s_nop           0x0
/*0000000188c8*/ s_nop           0x0
/*0000000188cc*/ s_nop           0x0
/*0000000188d0*/ s_nop           0x0
/*0000000188d4*/ s_nop           0x0
/*0000000188d8*/ s_nop           0x0
/*0000000188dc*/ s_nop           0x0
/*0000000188e0*/ s_nop           0x0
/*0000000188e4*/ s_nop           0x0
/*0000000188e8*/ s_nop           0x0
/*0000000188ec*/ s_nop           0x0
/*0000000188f0*/ s_nop           0x0
/*0000000188f4*/ s_nop           0x0
/*0000000188f8*/ s_nop           0x0
/*0000000188fc*/ s_nop           0x0
subtract_long_get_local_id_64:
.skip 256
/*000000018a00*/ s_clause        0x1
/*000000018a04*/ s_load_dword    s2, s[4:5], 0x10
/*000000018a0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000018a14*/ v_lshl_or_b32   v2, s6, 6, v0
/*000000018a1c*/ v_mov_b32       v1, 0
/*000000018a20*/ v_mov_b32       v3, v1
/*000000018a24*/ s_waitcnt       lgkmcnt(0)
/*000000018a28*/ v_add_nc_u32    v2, s2, v2
/*000000018a2c*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000018a34*/ v_sub_nc_u32    v0, v0, v2
/*000000018a38*/ v_add_co_u32    v2, vcc, s0, v3
/*000000018a40*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*000000018a44*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000018a4c*/ s_endpgm
/*000000018a50*/ s_nop           0x0
/*000000018a54*/ s_nop           0x0
/*000000018a58*/ s_nop           0x0
/*000000018a5c*/ s_nop           0x0
/*000000018a60*/ s_nop           0x0
/*000000018a64*/ s_nop           0x0
/*000000018a68*/ s_nop           0x0
/*000000018a6c*/ s_nop           0x0
/*000000018a70*/ s_nop           0x0
/*000000018a74*/ s_nop           0x0
/*000000018a78*/ s_nop           0x0
/*000000018a7c*/ s_nop           0x0
/*000000018a80*/ s_nop           0x0
/*000000018a84*/ s_nop           0x0
/*000000018a88*/ s_nop           0x0
/*000000018a8c*/ s_nop           0x0
/*000000018a90*/ s_nop           0x0
/*000000018a94*/ s_nop           0x0
/*000000018a98*/ s_nop           0x0
/*000000018a9c*/ s_nop           0x0
/*000000018aa0*/ s_nop           0x0
/*000000018aa4*/ s_nop           0x0
/*000000018aa8*/ s_nop           0x0
/*000000018aac*/ s_nop           0x0
/*000000018ab0*/ s_nop           0x0
/*000000018ab4*/ s_nop           0x0
/*000000018ab8*/ s_nop           0x0
/*000000018abc*/ s_nop           0x0
/*000000018ac0*/ s_nop           0x0
/*000000018ac4*/ s_nop           0x0
/*000000018ac8*/ s_nop           0x0
/*000000018acc*/ s_nop           0x0
/*000000018ad0*/ s_nop           0x0
/*000000018ad4*/ s_nop           0x0
/*000000018ad8*/ s_nop           0x0
/*000000018adc*/ s_nop           0x0
/*000000018ae0*/ s_nop           0x0
/*000000018ae4*/ s_nop           0x0
/*000000018ae8*/ s_nop           0x0
/*000000018aec*/ s_nop           0x0
/*000000018af0*/ s_nop           0x0
/*000000018af4*/ s_nop           0x0
/*000000018af8*/ s_nop           0x0
/*000000018afc*/ s_nop           0x0
subtract_long_get_group_id_64:
.skip 256
/*000000018c00*/ s_clause        0x1
/*000000018c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000018c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000018c14*/ v_mov_b32       v1, 0
/*000000018c18*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000018c20*/ v_mov_b32       v3, v1
/*000000018c24*/ s_waitcnt       lgkmcnt(0)
/*000000018c28*/ v_add_nc_u32    v2, s2, v0
/*000000018c2c*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000018c34*/ v_sub_nc_u32    v0, s6, v2
/*000000018c38*/ v_add_co_u32    v2, vcc, s0, v3
/*000000018c40*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*000000018c44*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000018c4c*/ s_endpgm
/*000000018c50*/ s_nop           0x0
/*000000018c54*/ s_nop           0x0
/*000000018c58*/ s_nop           0x0
/*000000018c5c*/ s_nop           0x0
/*000000018c60*/ s_nop           0x0
/*000000018c64*/ s_nop           0x0
/*000000018c68*/ s_nop           0x0
/*000000018c6c*/ s_nop           0x0
/*000000018c70*/ s_nop           0x0
/*000000018c74*/ s_nop           0x0
/*000000018c78*/ s_nop           0x0
/*000000018c7c*/ s_nop           0x0
/*000000018c80*/ s_nop           0x0
/*000000018c84*/ s_nop           0x0
/*000000018c88*/ s_nop           0x0
/*000000018c8c*/ s_nop           0x0
/*000000018c90*/ s_nop           0x0
/*000000018c94*/ s_nop           0x0
/*000000018c98*/ s_nop           0x0
/*000000018c9c*/ s_nop           0x0
/*000000018ca0*/ s_nop           0x0
/*000000018ca4*/ s_nop           0x0
/*000000018ca8*/ s_nop           0x0
/*000000018cac*/ s_nop           0x0
/*000000018cb0*/ s_nop           0x0
/*000000018cb4*/ s_nop           0x0
/*000000018cb8*/ s_nop           0x0
/*000000018cbc*/ s_nop           0x0
/*000000018cc0*/ s_nop           0x0
/*000000018cc4*/ s_nop           0x0
/*000000018cc8*/ s_nop           0x0
/*000000018ccc*/ s_nop           0x0
/*000000018cd0*/ s_nop           0x0
/*000000018cd4*/ s_nop           0x0
/*000000018cd8*/ s_nop           0x0
/*000000018cdc*/ s_nop           0x0
/*000000018ce0*/ s_nop           0x0
/*000000018ce4*/ s_nop           0x0
/*000000018ce8*/ s_nop           0x0
/*000000018cec*/ s_nop           0x0
/*000000018cf0*/ s_nop           0x0
/*000000018cf4*/ s_nop           0x0
/*000000018cf8*/ s_nop           0x0
/*000000018cfc*/ s_nop           0x0
subtract_long_get_local_size_64:
.skip 256
/*000000018e00*/ s_clause        0x1
/*000000018e04*/ s_load_dword    s2, s[4:5], 0x10
/*000000018e0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000018e14*/ v_mov_b32       v1, 0
/*000000018e18*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000018e20*/ v_mov_b32       v3, v1
/*000000018e24*/ s_waitcnt       lgkmcnt(0)
/*000000018e28*/ v_add_nc_u32    v2, s2, v0
/*000000018e2c*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000018e34*/ v_sub_nc_u32    v0, 64, v2
/*000000018e38*/ v_add_co_u32    v2, vcc, s0, v3
/*000000018e40*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*000000018e44*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000018e4c*/ s_endpgm
/*000000018e50*/ s_nop           0x0
/*000000018e54*/ s_nop           0x0
/*000000018e58*/ s_nop           0x0
/*000000018e5c*/ s_nop           0x0
/*000000018e60*/ s_nop           0x0
/*000000018e64*/ s_nop           0x0
/*000000018e68*/ s_nop           0x0
/*000000018e6c*/ s_nop           0x0
/*000000018e70*/ s_nop           0x0
/*000000018e74*/ s_nop           0x0
/*000000018e78*/ s_nop           0x0
/*000000018e7c*/ s_nop           0x0
/*000000018e80*/ s_nop           0x0
/*000000018e84*/ s_nop           0x0
/*000000018e88*/ s_nop           0x0
/*000000018e8c*/ s_nop           0x0
/*000000018e90*/ s_nop           0x0
/*000000018e94*/ s_nop           0x0
/*000000018e98*/ s_nop           0x0
/*000000018e9c*/ s_nop           0x0
/*000000018ea0*/ s_nop           0x0
/*000000018ea4*/ s_nop           0x0
/*000000018ea8*/ s_nop           0x0
/*000000018eac*/ s_nop           0x0
/*000000018eb0*/ s_nop           0x0
/*000000018eb4*/ s_nop           0x0
/*000000018eb8*/ s_nop           0x0
/*000000018ebc*/ s_nop           0x0
/*000000018ec0*/ s_nop           0x0
/*000000018ec4*/ s_nop           0x0
/*000000018ec8*/ s_nop           0x0
/*000000018ecc*/ s_nop           0x0
/*000000018ed0*/ s_nop           0x0
/*000000018ed4*/ s_nop           0x0
/*000000018ed8*/ s_nop           0x0
/*000000018edc*/ s_nop           0x0
/*000000018ee0*/ s_nop           0x0
/*000000018ee4*/ s_nop           0x0
/*000000018ee8*/ s_nop           0x0
/*000000018eec*/ s_nop           0x0
/*000000018ef0*/ s_nop           0x0
/*000000018ef4*/ s_nop           0x0
/*000000018ef8*/ s_nop           0x0
/*000000018efc*/ s_nop           0x0
subtract_long_get_global_id_64:
.skip 256
/*000000019000*/ s_clause        0x1
/*000000019004*/ s_load_dword    s2, s[4:5], 0x10
/*00000001900c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019014*/ s_lshl_b32      s3, s6, 6
/*000000019018*/ v_mov_b32       v1, 0
/*00000001901c*/ s_waitcnt       lgkmcnt(0)
/*000000019020*/ v_add3_u32      v0, s2, s3, v0
/*000000019028*/ v_lshlrev_b64   v[2:3], 3, v[0:1]
/*000000019030*/ v_mov_b32       v0, v1
/*000000019034*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001903c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019040*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019048*/ s_endpgm
/*00000001904c*/ s_nop           0x0
/*000000019050*/ s_nop           0x0
/*000000019054*/ s_nop           0x0
/*000000019058*/ s_nop           0x0
/*00000001905c*/ s_nop           0x0
/*000000019060*/ s_nop           0x0
/*000000019064*/ s_nop           0x0
/*000000019068*/ s_nop           0x0
/*00000001906c*/ s_nop           0x0
/*000000019070*/ s_nop           0x0
/*000000019074*/ s_nop           0x0
/*000000019078*/ s_nop           0x0
/*00000001907c*/ s_nop           0x0
/*000000019080*/ s_nop           0x0
/*000000019084*/ s_nop           0x0
/*000000019088*/ s_nop           0x0
/*00000001908c*/ s_nop           0x0
/*000000019090*/ s_nop           0x0
/*000000019094*/ s_nop           0x0
/*000000019098*/ s_nop           0x0
/*00000001909c*/ s_nop           0x0
/*0000000190a0*/ s_nop           0x0
/*0000000190a4*/ s_nop           0x0
/*0000000190a8*/ s_nop           0x0
/*0000000190ac*/ s_nop           0x0
/*0000000190b0*/ s_nop           0x0
/*0000000190b4*/ s_nop           0x0
/*0000000190b8*/ s_nop           0x0
/*0000000190bc*/ s_nop           0x0
/*0000000190c0*/ s_nop           0x0
/*0000000190c4*/ s_nop           0x0
/*0000000190c8*/ s_nop           0x0
/*0000000190cc*/ s_nop           0x0
/*0000000190d0*/ s_nop           0x0
/*0000000190d4*/ s_nop           0x0
/*0000000190d8*/ s_nop           0x0
/*0000000190dc*/ s_nop           0x0
/*0000000190e0*/ s_nop           0x0
/*0000000190e4*/ s_nop           0x0
/*0000000190e8*/ s_nop           0x0
/*0000000190ec*/ s_nop           0x0
/*0000000190f0*/ s_nop           0x0
/*0000000190f4*/ s_nop           0x0
/*0000000190f8*/ s_nop           0x0
/*0000000190fc*/ s_nop           0x0
subtract_long_get_global_size_64:
.skip 256
/*000000019200*/ s_load_dword    s2, s[6:7], 0x10
/*000000019208*/ s_load_dword    s3, s[4:5], 0xc
/*000000019210*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000019218*/ v_mov_b32       v1, 0
/*00000001921c*/ v_lshl_or_b32   v0, s8, 6, v0
/*000000019224*/ v_mov_b32       v3, v1
/*000000019228*/ s_waitcnt       lgkmcnt(0)
/*00000001922c*/ v_add_nc_u32    v2, s2, v0
/*000000019230*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000019238*/ v_sub_nc_u32    v0, s3, v2
/*00000001923c*/ v_add_co_u32    v2, vcc, s0, v3
/*000000019244*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*000000019248*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019250*/ s_endpgm
/*000000019254*/ s_nop           0x0
/*000000019258*/ s_nop           0x0
/*00000001925c*/ s_nop           0x0
/*000000019260*/ s_nop           0x0
/*000000019264*/ s_nop           0x0
/*000000019268*/ s_nop           0x0
/*00000001926c*/ s_nop           0x0
/*000000019270*/ s_nop           0x0
/*000000019274*/ s_nop           0x0
/*000000019278*/ s_nop           0x0
/*00000001927c*/ s_nop           0x0
/*000000019280*/ s_nop           0x0
/*000000019284*/ s_nop           0x0
/*000000019288*/ s_nop           0x0
/*00000001928c*/ s_nop           0x0
/*000000019290*/ s_nop           0x0
/*000000019294*/ s_nop           0x0
/*000000019298*/ s_nop           0x0
/*00000001929c*/ s_nop           0x0
/*0000000192a0*/ s_nop           0x0
/*0000000192a4*/ s_nop           0x0
/*0000000192a8*/ s_nop           0x0
/*0000000192ac*/ s_nop           0x0
/*0000000192b0*/ s_nop           0x0
/*0000000192b4*/ s_nop           0x0
/*0000000192b8*/ s_nop           0x0
/*0000000192bc*/ s_nop           0x0
/*0000000192c0*/ s_nop           0x0
/*0000000192c4*/ s_nop           0x0
/*0000000192c8*/ s_nop           0x0
/*0000000192cc*/ s_nop           0x0
/*0000000192d0*/ s_nop           0x0
/*0000000192d4*/ s_nop           0x0
/*0000000192d8*/ s_nop           0x0
/*0000000192dc*/ s_nop           0x0
/*0000000192e0*/ s_nop           0x0
/*0000000192e4*/ s_nop           0x0
/*0000000192e8*/ s_nop           0x0
/*0000000192ec*/ s_nop           0x0
/*0000000192f0*/ s_nop           0x0
/*0000000192f4*/ s_nop           0x0
/*0000000192f8*/ s_nop           0x0
/*0000000192fc*/ s_nop           0x0
subtract_long_get_num_groups_64:
.skip 256
/*000000019400*/ s_load_dword    s2, s[4:5], 0xc
/*000000019408*/ s_clause        0x1
/*00000001940c*/ s_load_dword    s3, s[6:7], 0x10
/*000000019414*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001941c*/ v_mov_b32       v1, 0
/*000000019420*/ v_lshl_or_b32   v0, s8, 6, v0
/*000000019428*/ v_mov_b32       v3, v1
/*00000001942c*/ s_waitcnt       lgkmcnt(0)
/*000000019430*/ s_and_b32       s4, s2, 0xffffffc0
/*000000019438*/ v_add_nc_u32    v2, s3, v0
/*00000001943c*/ v_cmp_gt_u32    s[3:4], s2, s4
/*000000019444*/ s_lshr_b32      s2, s2, 6
/*000000019448*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000019450*/ s_cmpk_lg_u32   s3, 0x0
/*000000019454*/ s_addc_u32      s2, s2, 0
/*000000019458*/ v_sub_nc_u32    v0, s2, v2
/*00000001945c*/ v_add_co_u32    v2, vcc, s0, v3
/*000000019464*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*000000019468*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019470*/ s_endpgm
/*000000019474*/ s_nop           0x0
/*000000019478*/ s_nop           0x0
/*00000001947c*/ s_nop           0x0
/*000000019480*/ s_nop           0x0
/*000000019484*/ s_nop           0x0
/*000000019488*/ s_nop           0x0
/*00000001948c*/ s_nop           0x0
/*000000019490*/ s_nop           0x0
/*000000019494*/ s_nop           0x0
/*000000019498*/ s_nop           0x0
/*00000001949c*/ s_nop           0x0
/*0000000194a0*/ s_nop           0x0
/*0000000194a4*/ s_nop           0x0
/*0000000194a8*/ s_nop           0x0
/*0000000194ac*/ s_nop           0x0
/*0000000194b0*/ s_nop           0x0
/*0000000194b4*/ s_nop           0x0
/*0000000194b8*/ s_nop           0x0
/*0000000194bc*/ s_nop           0x0
/*0000000194c0*/ s_nop           0x0
/*0000000194c4*/ s_nop           0x0
/*0000000194c8*/ s_nop           0x0
/*0000000194cc*/ s_nop           0x0
/*0000000194d0*/ s_nop           0x0
/*0000000194d4*/ s_nop           0x0
/*0000000194d8*/ s_nop           0x0
/*0000000194dc*/ s_nop           0x0
/*0000000194e0*/ s_nop           0x0
/*0000000194e4*/ s_nop           0x0
/*0000000194e8*/ s_nop           0x0
/*0000000194ec*/ s_nop           0x0
/*0000000194f0*/ s_nop           0x0
/*0000000194f4*/ s_nop           0x0
/*0000000194f8*/ s_nop           0x0
/*0000000194fc*/ s_nop           0x0
subtract_long_get_work_dim:
.skip 256
/*000000019600*/ v_mov_b32       v1, s4
/*000000019604*/ v_mov_b32       v2, s5
/*000000019608*/ s_clause        0x1
/*00000001960c*/ s_load_dword    s2, s[6:7], 0x10
/*000000019614*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001961c*/ v_lshl_or_b32   v0, s8, 6, v0
/*000000019624*/ global_load_ushort v5, v[1:2], off inst_offset:2
/*00000001962c*/ v_mov_b32       v1, 0
/*000000019630*/ v_mov_b32       v3, v1
/*000000019634*/ s_waitcnt       lgkmcnt(0)
/*000000019638*/ v_add_nc_u32    v2, s2, v0
/*00000001963c*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000019644*/ s_waitcnt       vmcnt(0)
/*000000019648*/ v_sub_nc_u32    v0, v5, v2
/*00000001964c*/ v_add_co_u32    v2, vcc, s0, v3
/*000000019654*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*000000019658*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019660*/ s_endpgm
/*000000019664*/ s_nop           0x0
/*000000019668*/ s_nop           0x0
/*00000001966c*/ s_nop           0x0
/*000000019670*/ s_nop           0x0
/*000000019674*/ s_nop           0x0
/*000000019678*/ s_nop           0x0
/*00000001967c*/ s_nop           0x0
/*000000019680*/ s_nop           0x0
/*000000019684*/ s_nop           0x0
/*000000019688*/ s_nop           0x0
/*00000001968c*/ s_nop           0x0
/*000000019690*/ s_nop           0x0
/*000000019694*/ s_nop           0x0
/*000000019698*/ s_nop           0x0
/*00000001969c*/ s_nop           0x0
/*0000000196a0*/ s_nop           0x0
/*0000000196a4*/ s_nop           0x0
/*0000000196a8*/ s_nop           0x0
/*0000000196ac*/ s_nop           0x0
/*0000000196b0*/ s_nop           0x0
/*0000000196b4*/ s_nop           0x0
/*0000000196b8*/ s_nop           0x0
/*0000000196bc*/ s_nop           0x0
/*0000000196c0*/ s_nop           0x0
/*0000000196c4*/ s_nop           0x0
/*0000000196c8*/ s_nop           0x0
/*0000000196cc*/ s_nop           0x0
/*0000000196d0*/ s_nop           0x0
/*0000000196d4*/ s_nop           0x0
/*0000000196d8*/ s_nop           0x0
/*0000000196dc*/ s_nop           0x0
/*0000000196e0*/ s_nop           0x0
/*0000000196e4*/ s_nop           0x0
/*0000000196e8*/ s_nop           0x0
/*0000000196ec*/ s_nop           0x0
/*0000000196f0*/ s_nop           0x0
/*0000000196f4*/ s_nop           0x0
/*0000000196f8*/ s_nop           0x0
/*0000000196fc*/ s_nop           0x0
subtract_long_x_8_8:
.skip 256
/*000000019800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000019808*/ s_waitcnt       lgkmcnt(0)
/*00000001980c*/ s_clause        0x1
/*000000019810*/ s_load_dword    s1, s[4:5], 0x0
/*000000019818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000019820*/ v_mov_b32       v2, 0
/*000000019824*/ s_lshl_b32      s3, s6, 3
/*000000019828*/ v_mov_b32       v4, v2
/*00000001982c*/ v_add3_u32      v3, s0, s3, v0
/*000000019834*/ v_add_nc_u32    v0, s2, v1
/*000000019838*/ s_lshl_b32      s0, s7, 3
/*00000001983c*/ s_waitcnt       lgkmcnt(0)
/*000000019840*/ s_sub_i32       s0, s1, s0
/*000000019844*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001984c*/ v_sub_nc_u32    v1, s0, v0
/*000000019850*/ v_add_co_u32    v3, vcc, s4, v3
/*000000019858*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000001985c*/ global_store_dwordx2 v[3:4], v[1:2], off
/*000000019864*/ s_endpgm
/*000000019868*/ s_nop           0x0
/*00000001986c*/ s_nop           0x0
/*000000019870*/ s_nop           0x0
/*000000019874*/ s_nop           0x0
/*000000019878*/ s_nop           0x0
/*00000001987c*/ s_nop           0x0
/*000000019880*/ s_nop           0x0
/*000000019884*/ s_nop           0x0
/*000000019888*/ s_nop           0x0
/*00000001988c*/ s_nop           0x0
/*000000019890*/ s_nop           0x0
/*000000019894*/ s_nop           0x0
/*000000019898*/ s_nop           0x0
/*00000001989c*/ s_nop           0x0
/*0000000198a0*/ s_nop           0x0
/*0000000198a4*/ s_nop           0x0
/*0000000198a8*/ s_nop           0x0
/*0000000198ac*/ s_nop           0x0
/*0000000198b0*/ s_nop           0x0
/*0000000198b4*/ s_nop           0x0
/*0000000198b8*/ s_nop           0x0
/*0000000198bc*/ s_nop           0x0
/*0000000198c0*/ s_nop           0x0
/*0000000198c4*/ s_nop           0x0
/*0000000198c8*/ s_nop           0x0
/*0000000198cc*/ s_nop           0x0
/*0000000198d0*/ s_nop           0x0
/*0000000198d4*/ s_nop           0x0
/*0000000198d8*/ s_nop           0x0
/*0000000198dc*/ s_nop           0x0
/*0000000198e0*/ s_nop           0x0
/*0000000198e4*/ s_nop           0x0
/*0000000198e8*/ s_nop           0x0
/*0000000198ec*/ s_nop           0x0
/*0000000198f0*/ s_nop           0x0
/*0000000198f4*/ s_nop           0x0
/*0000000198f8*/ s_nop           0x0
/*0000000198fc*/ s_nop           0x0
subtract_long_get_global_offset_8_8:
.skip 256
/*000000019a00*/ s_clause        0x1
/*000000019a04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000019a0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000019a14*/ v_mov_b32       v1, 0
/*000000019a18*/ s_waitcnt       lgkmcnt(0)
/*000000019a1c*/ s_lshl_b32      s1, s6, 3
/*000000019a20*/ v_mov_b32       v3, v1
/*000000019a24*/ v_add3_u32      v2, s0, s1, v0
/*000000019a2c*/ s_sub_i32       s0, s0, s2
/*000000019a30*/ v_mov_b32       v0, s0
/*000000019a34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019a3c*/ v_add_co_u32    v2, vcc, s4, v2
/*000000019a44*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000019a48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019a50*/ s_endpgm
/*000000019a54*/ s_nop           0x0
/*000000019a58*/ s_nop           0x0
/*000000019a5c*/ s_nop           0x0
/*000000019a60*/ s_nop           0x0
/*000000019a64*/ s_nop           0x0
/*000000019a68*/ s_nop           0x0
/*000000019a6c*/ s_nop           0x0
/*000000019a70*/ s_nop           0x0
/*000000019a74*/ s_nop           0x0
/*000000019a78*/ s_nop           0x0
/*000000019a7c*/ s_nop           0x0
/*000000019a80*/ s_nop           0x0
/*000000019a84*/ s_nop           0x0
/*000000019a88*/ s_nop           0x0
/*000000019a8c*/ s_nop           0x0
/*000000019a90*/ s_nop           0x0
/*000000019a94*/ s_nop           0x0
/*000000019a98*/ s_nop           0x0
/*000000019a9c*/ s_nop           0x0
/*000000019aa0*/ s_nop           0x0
/*000000019aa4*/ s_nop           0x0
/*000000019aa8*/ s_nop           0x0
/*000000019aac*/ s_nop           0x0
/*000000019ab0*/ s_nop           0x0
/*000000019ab4*/ s_nop           0x0
/*000000019ab8*/ s_nop           0x0
/*000000019abc*/ s_nop           0x0
/*000000019ac0*/ s_nop           0x0
/*000000019ac4*/ s_nop           0x0
/*000000019ac8*/ s_nop           0x0
/*000000019acc*/ s_nop           0x0
/*000000019ad0*/ s_nop           0x0
/*000000019ad4*/ s_nop           0x0
/*000000019ad8*/ s_nop           0x0
/*000000019adc*/ s_nop           0x0
/*000000019ae0*/ s_nop           0x0
/*000000019ae4*/ s_nop           0x0
/*000000019ae8*/ s_nop           0x0
/*000000019aec*/ s_nop           0x0
/*000000019af0*/ s_nop           0x0
/*000000019af4*/ s_nop           0x0
/*000000019af8*/ s_nop           0x0
/*000000019afc*/ s_nop           0x0
subtract_long_get_local_id_8_8:
.skip 256
/*000000019c00*/ s_clause        0x1
/*000000019c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000019c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019c14*/ v_mov_b32       v2, 0
/*000000019c18*/ s_lshl_b32      s3, s6, 3
/*000000019c1c*/ v_sub_nc_u32    v1, v0, v1
/*000000019c20*/ v_mov_b32       v4, v2
/*000000019c24*/ s_waitcnt       lgkmcnt(0)
/*000000019c28*/ v_add3_u32      v3, s2, s3, v0
/*000000019c30*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000019c38*/ v_add_co_u32    v3, vcc, s0, v3
/*000000019c40*/ v_add_co_ci_u32 v4, vcc, s1, v4, vcc
/*000000019c44*/ global_store_dwordx2 v[3:4], v[1:2], off
/*000000019c4c*/ s_endpgm
/*000000019c50*/ s_nop           0x0
/*000000019c54*/ s_nop           0x0
/*000000019c58*/ s_nop           0x0
/*000000019c5c*/ s_nop           0x0
/*000000019c60*/ s_nop           0x0
/*000000019c64*/ s_nop           0x0
/*000000019c68*/ s_nop           0x0
/*000000019c6c*/ s_nop           0x0
/*000000019c70*/ s_nop           0x0
/*000000019c74*/ s_nop           0x0
/*000000019c78*/ s_nop           0x0
/*000000019c7c*/ s_nop           0x0
/*000000019c80*/ s_nop           0x0
/*000000019c84*/ s_nop           0x0
/*000000019c88*/ s_nop           0x0
/*000000019c8c*/ s_nop           0x0
/*000000019c90*/ s_nop           0x0
/*000000019c94*/ s_nop           0x0
/*000000019c98*/ s_nop           0x0
/*000000019c9c*/ s_nop           0x0
/*000000019ca0*/ s_nop           0x0
/*000000019ca4*/ s_nop           0x0
/*000000019ca8*/ s_nop           0x0
/*000000019cac*/ s_nop           0x0
/*000000019cb0*/ s_nop           0x0
/*000000019cb4*/ s_nop           0x0
/*000000019cb8*/ s_nop           0x0
/*000000019cbc*/ s_nop           0x0
/*000000019cc0*/ s_nop           0x0
/*000000019cc4*/ s_nop           0x0
/*000000019cc8*/ s_nop           0x0
/*000000019ccc*/ s_nop           0x0
/*000000019cd0*/ s_nop           0x0
/*000000019cd4*/ s_nop           0x0
/*000000019cd8*/ s_nop           0x0
/*000000019cdc*/ s_nop           0x0
/*000000019ce0*/ s_nop           0x0
/*000000019ce4*/ s_nop           0x0
/*000000019ce8*/ s_nop           0x0
/*000000019cec*/ s_nop           0x0
/*000000019cf0*/ s_nop           0x0
/*000000019cf4*/ s_nop           0x0
/*000000019cf8*/ s_nop           0x0
/*000000019cfc*/ s_nop           0x0
subtract_long_get_group_id_8_8:
.skip 256
/*000000019e00*/ s_clause        0x1
/*000000019e04*/ s_load_dword    s2, s[4:5], 0x10
/*000000019e0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019e14*/ v_mov_b32       v1, 0
/*000000019e18*/ s_lshl_b32      s3, s6, 3
/*000000019e1c*/ v_mov_b32       v3, v1
/*000000019e20*/ s_waitcnt       lgkmcnt(0)
/*000000019e24*/ v_add3_u32      v2, s2, s3, v0
/*000000019e2c*/ s_sub_i32       s2, s6, s7
/*000000019e30*/ v_mov_b32       v0, s2
/*000000019e34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019e3c*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019e44*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019e48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019e50*/ s_endpgm
/*000000019e54*/ s_nop           0x0
/*000000019e58*/ s_nop           0x0
/*000000019e5c*/ s_nop           0x0
/*000000019e60*/ s_nop           0x0
/*000000019e64*/ s_nop           0x0
/*000000019e68*/ s_nop           0x0
/*000000019e6c*/ s_nop           0x0
/*000000019e70*/ s_nop           0x0
/*000000019e74*/ s_nop           0x0
/*000000019e78*/ s_nop           0x0
/*000000019e7c*/ s_nop           0x0
/*000000019e80*/ s_nop           0x0
/*000000019e84*/ s_nop           0x0
/*000000019e88*/ s_nop           0x0
/*000000019e8c*/ s_nop           0x0
/*000000019e90*/ s_nop           0x0
/*000000019e94*/ s_nop           0x0
/*000000019e98*/ s_nop           0x0
/*000000019e9c*/ s_nop           0x0
/*000000019ea0*/ s_nop           0x0
/*000000019ea4*/ s_nop           0x0
/*000000019ea8*/ s_nop           0x0
/*000000019eac*/ s_nop           0x0
/*000000019eb0*/ s_nop           0x0
/*000000019eb4*/ s_nop           0x0
/*000000019eb8*/ s_nop           0x0
/*000000019ebc*/ s_nop           0x0
/*000000019ec0*/ s_nop           0x0
/*000000019ec4*/ s_nop           0x0
/*000000019ec8*/ s_nop           0x0
/*000000019ecc*/ s_nop           0x0
/*000000019ed0*/ s_nop           0x0
/*000000019ed4*/ s_nop           0x0
/*000000019ed8*/ s_nop           0x0
/*000000019edc*/ s_nop           0x0
/*000000019ee0*/ s_nop           0x0
/*000000019ee4*/ s_nop           0x0
/*000000019ee8*/ s_nop           0x0
/*000000019eec*/ s_nop           0x0
/*000000019ef0*/ s_nop           0x0
/*000000019ef4*/ s_nop           0x0
/*000000019ef8*/ s_nop           0x0
/*000000019efc*/ s_nop           0x0
subtract_long_get_local_size_8_8:
.skip 256
/*00000001a000*/ s_clause        0x1
/*00000001a004*/ s_load_dword    s2, s[4:5], 0x10
/*00000001a00c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001a014*/ s_lshl_b32      s3, s6, 3
/*00000001a018*/ v_mov_b32       v1, 0
/*00000001a01c*/ s_waitcnt       lgkmcnt(0)
/*00000001a020*/ v_add3_u32      v0, s2, s3, v0
/*00000001a028*/ v_lshlrev_b64   v[2:3], 3, v[0:1]
/*00000001a030*/ v_mov_b32       v0, v1
/*00000001a034*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001a03c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001a040*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a048*/ s_endpgm
/*00000001a04c*/ s_nop           0x0
/*00000001a050*/ s_nop           0x0
/*00000001a054*/ s_nop           0x0
/*00000001a058*/ s_nop           0x0
/*00000001a05c*/ s_nop           0x0
/*00000001a060*/ s_nop           0x0
/*00000001a064*/ s_nop           0x0
/*00000001a068*/ s_nop           0x0
/*00000001a06c*/ s_nop           0x0
/*00000001a070*/ s_nop           0x0
/*00000001a074*/ s_nop           0x0
/*00000001a078*/ s_nop           0x0
/*00000001a07c*/ s_nop           0x0
/*00000001a080*/ s_nop           0x0
/*00000001a084*/ s_nop           0x0
/*00000001a088*/ s_nop           0x0
/*00000001a08c*/ s_nop           0x0
/*00000001a090*/ s_nop           0x0
/*00000001a094*/ s_nop           0x0
/*00000001a098*/ s_nop           0x0
/*00000001a09c*/ s_nop           0x0
/*00000001a0a0*/ s_nop           0x0
/*00000001a0a4*/ s_nop           0x0
/*00000001a0a8*/ s_nop           0x0
/*00000001a0ac*/ s_nop           0x0
/*00000001a0b0*/ s_nop           0x0
/*00000001a0b4*/ s_nop           0x0
/*00000001a0b8*/ s_nop           0x0
/*00000001a0bc*/ s_nop           0x0
/*00000001a0c0*/ s_nop           0x0
/*00000001a0c4*/ s_nop           0x0
/*00000001a0c8*/ s_nop           0x0
/*00000001a0cc*/ s_nop           0x0
/*00000001a0d0*/ s_nop           0x0
/*00000001a0d4*/ s_nop           0x0
/*00000001a0d8*/ s_nop           0x0
/*00000001a0dc*/ s_nop           0x0
/*00000001a0e0*/ s_nop           0x0
/*00000001a0e4*/ s_nop           0x0
/*00000001a0e8*/ s_nop           0x0
/*00000001a0ec*/ s_nop           0x0
/*00000001a0f0*/ s_nop           0x0
/*00000001a0f4*/ s_nop           0x0
/*00000001a0f8*/ s_nop           0x0
/*00000001a0fc*/ s_nop           0x0
subtract_long_get_global_id_8_8:
.skip 256
/*00000001a200*/ s_clause        0x1
/*00000001a204*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001a20c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001a214*/ v_mov_b32       v2, 0
/*00000001a218*/ v_lshl_or_b32   v0, s6, 3, v0
/*00000001a220*/ v_mov_b32       v4, v2
/*00000001a224*/ s_waitcnt       lgkmcnt(0)
/*00000001a228*/ v_add_nc_u32    v3, s0, v0
/*00000001a22c*/ s_lshl_b32      s0, s7, 3
/*00000001a230*/ v_add3_u32      v0, s2, s0, v1
/*00000001a238*/ v_lshlrev_b64   v[4:5], 3, v[3:4]
/*00000001a240*/ v_sub_nc_u32    v1, v3, v0
/*00000001a244*/ v_add_co_u32    v3, vcc, s4, v4
/*00000001a24c*/ v_add_co_ci_u32 v4, vcc, s5, v5, vcc
/*00000001a250*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001a258*/ s_endpgm
/*00000001a25c*/ s_nop           0x0
/*00000001a260*/ s_nop           0x0
/*00000001a264*/ s_nop           0x0
/*00000001a268*/ s_nop           0x0
/*00000001a26c*/ s_nop           0x0
/*00000001a270*/ s_nop           0x0
/*00000001a274*/ s_nop           0x0
/*00000001a278*/ s_nop           0x0
/*00000001a27c*/ s_nop           0x0
/*00000001a280*/ s_nop           0x0
/*00000001a284*/ s_nop           0x0
/*00000001a288*/ s_nop           0x0
/*00000001a28c*/ s_nop           0x0
/*00000001a290*/ s_nop           0x0
/*00000001a294*/ s_nop           0x0
/*00000001a298*/ s_nop           0x0
/*00000001a29c*/ s_nop           0x0
/*00000001a2a0*/ s_nop           0x0
/*00000001a2a4*/ s_nop           0x0
/*00000001a2a8*/ s_nop           0x0
/*00000001a2ac*/ s_nop           0x0
/*00000001a2b0*/ s_nop           0x0
/*00000001a2b4*/ s_nop           0x0
/*00000001a2b8*/ s_nop           0x0
/*00000001a2bc*/ s_nop           0x0
/*00000001a2c0*/ s_nop           0x0
/*00000001a2c4*/ s_nop           0x0
/*00000001a2c8*/ s_nop           0x0
/*00000001a2cc*/ s_nop           0x0
/*00000001a2d0*/ s_nop           0x0
/*00000001a2d4*/ s_nop           0x0
/*00000001a2d8*/ s_nop           0x0
/*00000001a2dc*/ s_nop           0x0
/*00000001a2e0*/ s_nop           0x0
/*00000001a2e4*/ s_nop           0x0
/*00000001a2e8*/ s_nop           0x0
/*00000001a2ec*/ s_nop           0x0
/*00000001a2f0*/ s_nop           0x0
/*00000001a2f4*/ s_nop           0x0
/*00000001a2f8*/ s_nop           0x0
/*00000001a2fc*/ s_nop           0x0
subtract_long_get_global_size_8_8:
.skip 256
/*00000001a400*/ s_load_dword    s9, s[6:7], 0x10
/*00000001a408*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000001a410*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000001a418*/ v_mov_b32       v1, 0
/*00000001a41c*/ s_lshl_b32      s4, s8, 3
/*00000001a420*/ v_mov_b32       v3, v1
/*00000001a424*/ s_waitcnt       lgkmcnt(0)
/*00000001a428*/ v_add3_u32      v2, s9, s4, v0
/*00000001a430*/ s_sub_i32       s0, s0, s1
/*00000001a434*/ v_mov_b32       v0, s0
/*00000001a438*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a440*/ v_add_co_u32    v2, vcc, s2, v2
/*00000001a448*/ v_add_co_ci_u32 v3, vcc, s3, v3, vcc
/*00000001a44c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a454*/ s_endpgm
/*00000001a458*/ s_nop           0x0
/*00000001a45c*/ s_nop           0x0
/*00000001a460*/ s_nop           0x0
/*00000001a464*/ s_nop           0x0
/*00000001a468*/ s_nop           0x0
/*00000001a46c*/ s_nop           0x0
/*00000001a470*/ s_nop           0x0
/*00000001a474*/ s_nop           0x0
/*00000001a478*/ s_nop           0x0
/*00000001a47c*/ s_nop           0x0
/*00000001a480*/ s_nop           0x0
/*00000001a484*/ s_nop           0x0
/*00000001a488*/ s_nop           0x0
/*00000001a48c*/ s_nop           0x0
/*00000001a490*/ s_nop           0x0
/*00000001a494*/ s_nop           0x0
/*00000001a498*/ s_nop           0x0
/*00000001a49c*/ s_nop           0x0
/*00000001a4a0*/ s_nop           0x0
/*00000001a4a4*/ s_nop           0x0
/*00000001a4a8*/ s_nop           0x0
/*00000001a4ac*/ s_nop           0x0
/*00000001a4b0*/ s_nop           0x0
/*00000001a4b4*/ s_nop           0x0
/*00000001a4b8*/ s_nop           0x0
/*00000001a4bc*/ s_nop           0x0
/*00000001a4c0*/ s_nop           0x0
/*00000001a4c4*/ s_nop           0x0
/*00000001a4c8*/ s_nop           0x0
/*00000001a4cc*/ s_nop           0x0
/*00000001a4d0*/ s_nop           0x0
/*00000001a4d4*/ s_nop           0x0
/*00000001a4d8*/ s_nop           0x0
/*00000001a4dc*/ s_nop           0x0
/*00000001a4e0*/ s_nop           0x0
/*00000001a4e4*/ s_nop           0x0
/*00000001a4e8*/ s_nop           0x0
/*00000001a4ec*/ s_nop           0x0
/*00000001a4f0*/ s_nop           0x0
/*00000001a4f4*/ s_nop           0x0
/*00000001a4f8*/ s_nop           0x0
/*00000001a4fc*/ s_nop           0x0
subtract_long_get_num_groups_8_8:
.skip 256
/*00000001a600*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000001a608*/ s_load_dword    s4, s[6:7], 0x10
/*00000001a610*/ v_mov_b32       v1, 0
/*00000001a614*/ v_mov_b32       v3, v1
/*00000001a618*/ s_waitcnt       lgkmcnt(0)
/*00000001a61c*/ s_and_b32       s2, s0, -8
/*00000001a620*/ v_cmp_gt_u32    s[5:6], s0, s2
/*00000001a628*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000001a630*/ s_lshl_b32      s6, s8, 3
/*00000001a634*/ s_lshr_b32      s0, s0, 3
/*00000001a638*/ v_add3_u32      v2, s4, s6, v0
/*00000001a640*/ s_cmpk_lg_u32   s5, 0x0
/*00000001a644*/ s_addc_u32      s0, s0, 0
/*00000001a648*/ s_and_b32       s5, s1, -8
/*00000001a64c*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a654*/ v_cmp_gt_u32    s[5:6], s1, s5
/*00000001a65c*/ s_lshr_b32      s1, s1, 3
/*00000001a660*/ s_cmpk_lg_u32   s5, 0x0
/*00000001a664*/ s_addc_u32      s1, s1, 0
/*00000001a668*/ s_sub_i32       s0, s0, s1
/*00000001a66c*/ s_waitcnt       lgkmcnt(0)
/*00000001a670*/ v_add_co_u32    v2, vcc, s2, v2
/*00000001a678*/ v_mov_b32       v0, s0
/*00000001a67c*/ v_add_co_ci_u32 v3, vcc, s3, v3, vcc
/*00000001a680*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a688*/ s_endpgm
/*00000001a68c*/ s_nop           0x0
/*00000001a690*/ s_nop           0x0
/*00000001a694*/ s_nop           0x0
/*00000001a698*/ s_nop           0x0
/*00000001a69c*/ s_nop           0x0
/*00000001a6a0*/ s_nop           0x0
/*00000001a6a4*/ s_nop           0x0
/*00000001a6a8*/ s_nop           0x0
/*00000001a6ac*/ s_nop           0x0
/*00000001a6b0*/ s_nop           0x0
/*00000001a6b4*/ s_nop           0x0
/*00000001a6b8*/ s_nop           0x0
/*00000001a6bc*/ s_nop           0x0
/*00000001a6c0*/ s_nop           0x0
/*00000001a6c4*/ s_nop           0x0
/*00000001a6c8*/ s_nop           0x0
/*00000001a6cc*/ s_nop           0x0
/*00000001a6d0*/ s_nop           0x0
/*00000001a6d4*/ s_nop           0x0
/*00000001a6d8*/ s_nop           0x0
/*00000001a6dc*/ s_nop           0x0
/*00000001a6e0*/ s_nop           0x0
/*00000001a6e4*/ s_nop           0x0
/*00000001a6e8*/ s_nop           0x0
/*00000001a6ec*/ s_nop           0x0
/*00000001a6f0*/ s_nop           0x0
/*00000001a6f4*/ s_nop           0x0
/*00000001a6f8*/ s_nop           0x0
/*00000001a6fc*/ s_nop           0x0
subtract_long_get_work_dim_8_8:
.skip 256
/*00000001a800*/ v_mov_b32       v2, s4
/*00000001a804*/ v_mov_b32       v3, s5
/*00000001a808*/ s_clause        0x1
/*00000001a80c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001a814*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001a81c*/ s_waitcnt       lgkmcnt(0)
/*00000001a820*/ s_lshl_b32      s1, s8, 3
/*00000001a824*/ global_load_ushort v5, v[2:3], off inst_offset:2
/*00000001a82c*/ v_mov_b32       v2, 0
/*00000001a830*/ v_lshl_or_b32   v3, s9, 3, v1
/*00000001a838*/ v_mov_b32       v1, v2
/*00000001a83c*/ v_add3_u32      v0, s0, s1, v0
/*00000001a844*/ v_add_nc_u32    v6, s2, v3
/*00000001a848*/ v_lshlrev_b64   v[3:4], 3, v[0:1]
/*00000001a850*/ v_add_co_u32    v3, vcc, s4, v3
/*00000001a858*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000001a85c*/ s_waitcnt       vmcnt(0)
/*00000001a860*/ v_sub_nc_u32    v1, v5, v6
/*00000001a864*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001a86c*/ s_endpgm
/*00000001a870*/ s_nop           0x0
/*00000001a874*/ s_nop           0x0
/*00000001a878*/ s_nop           0x0
/*00000001a87c*/ s_nop           0x0
/*00000001a880*/ s_nop           0x0
/*00000001a884*/ s_nop           0x0
/*00000001a888*/ s_nop           0x0
/*00000001a88c*/ s_nop           0x0
/*00000001a890*/ s_nop           0x0
/*00000001a894*/ s_nop           0x0
/*00000001a898*/ s_nop           0x0
/*00000001a89c*/ s_nop           0x0
/*00000001a8a0*/ s_nop           0x0
/*00000001a8a4*/ s_nop           0x0
/*00000001a8a8*/ s_nop           0x0
/*00000001a8ac*/ s_nop           0x0
/*00000001a8b0*/ s_nop           0x0
/*00000001a8b4*/ s_nop           0x0
/*00000001a8b8*/ s_nop           0x0
/*00000001a8bc*/ s_nop           0x0
/*00000001a8c0*/ s_nop           0x0
/*00000001a8c4*/ s_nop           0x0
/*00000001a8c8*/ s_nop           0x0
/*00000001a8cc*/ s_nop           0x0
/*00000001a8d0*/ s_nop           0x0
/*00000001a8d4*/ s_nop           0x0
/*00000001a8d8*/ s_nop           0x0
/*00000001a8dc*/ s_nop           0x0
/*00000001a8e0*/ s_nop           0x0
/*00000001a8e4*/ s_nop           0x0
/*00000001a8e8*/ s_nop           0x0
/*00000001a8ec*/ s_nop           0x0
/*00000001a8f0*/ s_nop           0x0
/*00000001a8f4*/ s_nop           0x0
/*00000001a8f8*/ s_nop           0x0
/*00000001a8fc*/ s_nop           0x0
subtract_char_x_x:
.skip 256
/*00000001aa00*/ s_clause        0x1
/*00000001aa04*/ s_load_dword    s2, s[4:5], 0x10
/*00000001aa0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000001aa14*/ s_lshl_b32      s3, s6, 6
/*00000001aa18*/ v_mov_b32       v2, 0
/*00000001aa1c*/ s_waitcnt       lgkmcnt(0)
/*00000001aa20*/ v_add3_u32      v0, s2, s3, v0
/*00000001aa28*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001aa30*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000001aa38*/ global_store_byte v[0:1], v2, off
/*00000001aa40*/ s_endpgm
/*00000001aa44*/ s_nop           0x0
/*00000001aa48*/ s_nop           0x0
/*00000001aa4c*/ s_nop           0x0
/*00000001aa50*/ s_nop           0x0
/*00000001aa54*/ s_nop           0x0
/*00000001aa58*/ s_nop           0x0
/*00000001aa5c*/ s_nop           0x0
/*00000001aa60*/ s_nop           0x0
/*00000001aa64*/ s_nop           0x0
/*00000001aa68*/ s_nop           0x0
/*00000001aa6c*/ s_nop           0x0
/*00000001aa70*/ s_nop           0x0
/*00000001aa74*/ s_nop           0x0
/*00000001aa78*/ s_nop           0x0
/*00000001aa7c*/ s_nop           0x0
/*00000001aa80*/ s_nop           0x0
/*00000001aa84*/ s_nop           0x0
/*00000001aa88*/ s_nop           0x0
/*00000001aa8c*/ s_nop           0x0
/*00000001aa90*/ s_nop           0x0
/*00000001aa94*/ s_nop           0x0
/*00000001aa98*/ s_nop           0x0
/*00000001aa9c*/ s_nop           0x0
/*00000001aaa0*/ s_nop           0x0
/*00000001aaa4*/ s_nop           0x0
/*00000001aaa8*/ s_nop           0x0
/*00000001aaac*/ s_nop           0x0
/*00000001aab0*/ s_nop           0x0
/*00000001aab4*/ s_nop           0x0
/*00000001aab8*/ s_nop           0x0
/*00000001aabc*/ s_nop           0x0
/*00000001aac0*/ s_nop           0x0
/*00000001aac4*/ s_nop           0x0
/*00000001aac8*/ s_nop           0x0
/*00000001aacc*/ s_nop           0x0
/*00000001aad0*/ s_nop           0x0
/*00000001aad4*/ s_nop           0x0
/*00000001aad8*/ s_nop           0x0
/*00000001aadc*/ s_nop           0x0
/*00000001aae0*/ s_nop           0x0
/*00000001aae4*/ s_nop           0x0
/*00000001aae8*/ s_nop           0x0
/*00000001aaec*/ s_nop           0x0
/*00000001aaf0*/ s_nop           0x0
/*00000001aaf4*/ s_nop           0x0
/*00000001aaf8*/ s_nop           0x0
/*00000001aafc*/ s_nop           0x0
subtract_char_get_global_offset_x:
.skip 256
/*00000001ac00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001ac08*/ s_waitcnt       lgkmcnt(0)
/*00000001ac0c*/ s_clause        0x2
/*00000001ac10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001ac18*/ s_load_dword    s3, s[4:5], 0x0
/*00000001ac20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001ac28*/ s_lshl_b32      s6, s6, 1
/*00000001ac2c*/ s_lshl_b32      s7, s7, 4
/*00000001ac30*/ s_lshl_b32      s8, s8, 1
/*00000001ac34*/ s_waitcnt       lgkmcnt(0)
/*00000001ac38*/ v_add3_u32      v4, s1, s8, v2
/*00000001ac40*/ v_add3_u32      v0, s0, s6, v0
/*00000001ac48*/ v_add3_u32      v3, s2, s7, v1
/*00000001ac50*/ s_sub_i32       s0, s0, s3
/*00000001ac54*/ s_sub_i32       s2, s2, s3
/*00000001ac58*/ v_mov_b32       v6, s0
/*00000001ac5c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ac64*/ v_mov_b32       v9, s2
/*00000001ac68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ac70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ac78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ac80*/ s_sub_i32       s0, s1, s3
/*00000001ac84*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ac8c*/ v_mov_b32       v11, s0
/*00000001ac90*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ac98*/ global_store_byte v[0:1], v6, off
/*00000001aca0*/ global_store_byte v[2:3], v9, off
/*00000001aca8*/ global_store_byte v[4:5], v11, off
/*00000001acb0*/ s_endpgm
/*00000001acb4*/ s_nop           0x0
/*00000001acb8*/ s_nop           0x0
/*00000001acbc*/ s_nop           0x0
/*00000001acc0*/ s_nop           0x0
/*00000001acc4*/ s_nop           0x0
/*00000001acc8*/ s_nop           0x0
/*00000001accc*/ s_nop           0x0
/*00000001acd0*/ s_nop           0x0
/*00000001acd4*/ s_nop           0x0
/*00000001acd8*/ s_nop           0x0
/*00000001acdc*/ s_nop           0x0
/*00000001ace0*/ s_nop           0x0
/*00000001ace4*/ s_nop           0x0
/*00000001ace8*/ s_nop           0x0
/*00000001acec*/ s_nop           0x0
/*00000001acf0*/ s_nop           0x0
/*00000001acf4*/ s_nop           0x0
/*00000001acf8*/ s_nop           0x0
/*00000001acfc*/ s_nop           0x0
subtract_char_get_local_id_x:
.skip 256
/*00000001ae00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001ae08*/ s_waitcnt       lgkmcnt(0)
/*00000001ae0c*/ s_clause        0x2
/*00000001ae10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001ae18*/ s_load_dword    s3, s[4:5], 0x0
/*00000001ae20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001ae28*/ s_lshl_b32      s6, s6, 3
/*00000001ae2c*/ s_lshl_b32      s7, s7, 2
/*00000001ae30*/ s_lshl_b32      s8, s8, 1
/*00000001ae34*/ s_waitcnt       lgkmcnt(0)
/*00000001ae38*/ v_add3_u32      v5, s1, s8, v2
/*00000001ae40*/ v_add3_u32      v3, s0, s6, v0
/*00000001ae48*/ v_add3_u32      v4, s2, s7, v1
/*00000001ae50*/ v_subrev_nc_u32 v6, s3, v0
/*00000001ae54*/ v_subrev_nc_u32 v9, s3, v1
/*00000001ae58*/ v_subrev_nc_u32 v11, s3, v2
/*00000001ae5c*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001ae64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ae6c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001ae74*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ae7c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001ae84*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001ae8c*/ global_store_byte v[0:1], v6, off
/*00000001ae94*/ global_store_byte v[2:3], v9, off
/*00000001ae9c*/ global_store_byte v[4:5], v11, off
/*00000001aea4*/ s_endpgm
/*00000001aea8*/ s_nop           0x0
/*00000001aeac*/ s_nop           0x0
/*00000001aeb0*/ s_nop           0x0
/*00000001aeb4*/ s_nop           0x0
/*00000001aeb8*/ s_nop           0x0
/*00000001aebc*/ s_nop           0x0
/*00000001aec0*/ s_nop           0x0
/*00000001aec4*/ s_nop           0x0
/*00000001aec8*/ s_nop           0x0
/*00000001aecc*/ s_nop           0x0
/*00000001aed0*/ s_nop           0x0
/*00000001aed4*/ s_nop           0x0
/*00000001aed8*/ s_nop           0x0
/*00000001aedc*/ s_nop           0x0
/*00000001aee0*/ s_nop           0x0
/*00000001aee4*/ s_nop           0x0
/*00000001aee8*/ s_nop           0x0
/*00000001aeec*/ s_nop           0x0
/*00000001aef0*/ s_nop           0x0
/*00000001aef4*/ s_nop           0x0
/*00000001aef8*/ s_nop           0x0
/*00000001aefc*/ s_nop           0x0
subtract_char_get_group_id_x:
.skip 256
/*00000001b000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b008*/ s_waitcnt       lgkmcnt(0)
/*00000001b00c*/ s_clause        0x2
/*00000001b010*/ s_load_dword    s1, s[4:5], 0x20
/*00000001b018*/ s_load_dword    s3, s[4:5], 0x0
/*00000001b020*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b028*/ s_lshl_b32      s9, s6, 1
/*00000001b02c*/ s_lshl_b32      s10, s7, 4
/*00000001b030*/ s_lshl_b32      s11, s8, 1
/*00000001b034*/ s_waitcnt       lgkmcnt(0)
/*00000001b038*/ v_add3_u32      v4, s1, s11, v2
/*00000001b040*/ v_add3_u32      v0, s0, s9, v0
/*00000001b048*/ s_sub_i32       s0, s6, s3
/*00000001b04c*/ v_add3_u32      v3, s2, s10, v1
/*00000001b054*/ v_mov_b32       v6, s0
/*00000001b058*/ s_sub_i32       s1, s7, s3
/*00000001b05c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001b064*/ v_mov_b32       v9, s1
/*00000001b068*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b070*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001b078*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001b080*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001b088*/ s_sub_i32       s0, s8, s3
/*00000001b08c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001b094*/ v_mov_b32       v11, s0
/*00000001b098*/ global_store_byte v[0:1], v6, off
/*00000001b0a0*/ global_store_byte v[2:3], v9, off
/*00000001b0a8*/ global_store_byte v[4:5], v11, off
/*00000001b0b0*/ s_endpgm
/*00000001b0b4*/ s_nop           0x0
/*00000001b0b8*/ s_nop           0x0
/*00000001b0bc*/ s_nop           0x0
/*00000001b0c0*/ s_nop           0x0
/*00000001b0c4*/ s_nop           0x0
/*00000001b0c8*/ s_nop           0x0
/*00000001b0cc*/ s_nop           0x0
/*00000001b0d0*/ s_nop           0x0
/*00000001b0d4*/ s_nop           0x0
/*00000001b0d8*/ s_nop           0x0
/*00000001b0dc*/ s_nop           0x0
/*00000001b0e0*/ s_nop           0x0
/*00000001b0e4*/ s_nop           0x0
/*00000001b0e8*/ s_nop           0x0
/*00000001b0ec*/ s_nop           0x0
/*00000001b0f0*/ s_nop           0x0
/*00000001b0f4*/ s_nop           0x0
/*00000001b0f8*/ s_nop           0x0
/*00000001b0fc*/ s_nop           0x0
subtract_char_get_local_size_x:
.skip 256
/*00000001b200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b208*/ s_waitcnt       lgkmcnt(0)
/*00000001b20c*/ s_clause        0x2
/*00000001b210*/ s_load_dword    s1, s[4:5], 0x20
/*00000001b218*/ s_load_dword    s3, s[4:5], 0x0
/*00000001b220*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b228*/ s_lshl_b32      s6, s6, 1
/*00000001b22c*/ s_lshl_b32      s7, s7, 1
/*00000001b230*/ s_lshl_b32      s8, s8, 2
/*00000001b234*/ s_waitcnt       lgkmcnt(0)
/*00000001b238*/ v_add3_u32      v4, s1, s8, v2
/*00000001b240*/ v_add3_u32      v0, s0, s6, v0
/*00000001b248*/ s_sub_i32       s0, 4, s3
/*00000001b24c*/ v_add3_u32      v3, s2, s7, v1
/*00000001b254*/ v_mov_b32       v7, s0
/*00000001b258*/ v_sub_nc_u16    v6, 2, s3
/*00000001b260*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001b268*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b270*/ v_add_co_u32    v11, s[0:1], s4, v3
/*00000001b278*/ v_add_co_ci_u32 v12, s[0:1], s5, 0, s[0:1]
/*00000001b280*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001b288*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001b290*/ global_store_byte v[0:1], v6, off
/*00000001b298*/ global_store_byte v[11:12], v6, off
/*00000001b2a0*/ global_store_byte v[4:5], v7, off
/*00000001b2a8*/ s_endpgm
/*00000001b2ac*/ s_nop           0x0
/*00000001b2b0*/ s_nop           0x0
/*00000001b2b4*/ s_nop           0x0
/*00000001b2b8*/ s_nop           0x0
/*00000001b2bc*/ s_nop           0x0
/*00000001b2c0*/ s_nop           0x0
/*00000001b2c4*/ s_nop           0x0
/*00000001b2c8*/ s_nop           0x0
/*00000001b2cc*/ s_nop           0x0
/*00000001b2d0*/ s_nop           0x0
/*00000001b2d4*/ s_nop           0x0
/*00000001b2d8*/ s_nop           0x0
/*00000001b2dc*/ s_nop           0x0
/*00000001b2e0*/ s_nop           0x0
/*00000001b2e4*/ s_nop           0x0
/*00000001b2e8*/ s_nop           0x0
/*00000001b2ec*/ s_nop           0x0
/*00000001b2f0*/ s_nop           0x0
/*00000001b2f4*/ s_nop           0x0
/*00000001b2f8*/ s_nop           0x0
/*00000001b2fc*/ s_nop           0x0
subtract_char_get_global_id_x:
.skip 256
/*00000001b400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b408*/ s_waitcnt       lgkmcnt(0)
/*00000001b40c*/ s_clause        0x2
/*00000001b410*/ s_load_dword    s1, s[4:5], 0x20
/*00000001b418*/ s_load_dword    s3, s[4:5], 0x0
/*00000001b420*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b428*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001b430*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001b438*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001b440*/ s_waitcnt       lgkmcnt(0)
/*00000001b444*/ v_add_nc_u32    v4, s1, v2
/*00000001b448*/ v_subrev_nc_u32 v2, s3, v0
/*00000001b44c*/ v_add_nc_u32    v3, s2, v1
/*00000001b450*/ v_add_co_u32    v0, s[1:2], s4, v0
/*00000001b458*/ v_add_co_ci_u32 v1, s[1:2], s5, 0, s[1:2]
/*00000001b460*/ v_add_nc_u32    v6, s0, v2
/*00000001b464*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001b46c*/ v_subrev_nc_u32 v9, s3, v3
/*00000001b470*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001b478*/ v_subrev_nc_u32 v11, s3, v4
/*00000001b47c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001b484*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001b48c*/ global_store_byte v[0:1], v6, off
/*00000001b494*/ global_store_byte v[2:3], v9, off
/*00000001b49c*/ global_store_byte v[4:5], v11, off
/*00000001b4a4*/ s_endpgm
/*00000001b4a8*/ s_nop           0x0
/*00000001b4ac*/ s_nop           0x0
/*00000001b4b0*/ s_nop           0x0
/*00000001b4b4*/ s_nop           0x0
/*00000001b4b8*/ s_nop           0x0
/*00000001b4bc*/ s_nop           0x0
/*00000001b4c0*/ s_nop           0x0
/*00000001b4c4*/ s_nop           0x0
/*00000001b4c8*/ s_nop           0x0
/*00000001b4cc*/ s_nop           0x0
/*00000001b4d0*/ s_nop           0x0
/*00000001b4d4*/ s_nop           0x0
/*00000001b4d8*/ s_nop           0x0
/*00000001b4dc*/ s_nop           0x0
/*00000001b4e0*/ s_nop           0x0
/*00000001b4e4*/ s_nop           0x0
/*00000001b4e8*/ s_nop           0x0
/*00000001b4ec*/ s_nop           0x0
/*00000001b4f0*/ s_nop           0x0
/*00000001b4f4*/ s_nop           0x0
/*00000001b4f8*/ s_nop           0x0
/*00000001b4fc*/ s_nop           0x0
subtract_char_get_global_size_x:
.skip 256
/*00000001b600*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001b608*/ s_waitcnt       lgkmcnt(0)
/*00000001b60c*/ s_clause        0x1
/*00000001b610*/ s_load_dword    s1, s[6:7], 0x8
/*00000001b618*/ s_load_dword    s3, s[6:7], 0x20
/*00000001b620*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001b628*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001b630*/ s_lshl_b32      s6, s8, 4
/*00000001b634*/ s_lshl_b32      s7, s9, 1
/*00000001b638*/ s_lshl_b32      s8, s10, 1
/*00000001b63c*/ s_waitcnt       lgkmcnt(0)
/*00000001b640*/ v_add3_u32      v4, s3, s8, v2
/*00000001b648*/ v_add3_u32      v0, s0, s6, v0
/*00000001b650*/ v_add3_u32      v3, s2, s7, v1
/*00000001b658*/ s_sub_i32       s0, s12, s1
/*00000001b65c*/ s_sub_i32       s2, s13, s1
/*00000001b660*/ v_mov_b32       v6, s0
/*00000001b664*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001b66c*/ v_mov_b32       v9, s2
/*00000001b670*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b678*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001b680*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001b688*/ s_sub_i32       s0, s14, s1
/*00000001b68c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001b694*/ v_mov_b32       v11, s0
/*00000001b698*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001b6a0*/ global_store_byte v[0:1], v6, off
/*00000001b6a8*/ global_store_byte v[2:3], v9, off
/*00000001b6b0*/ global_store_byte v[4:5], v11, off
/*00000001b6b8*/ s_endpgm
/*00000001b6bc*/ s_nop           0x0
/*00000001b6c0*/ s_nop           0x0
/*00000001b6c4*/ s_nop           0x0
/*00000001b6c8*/ s_nop           0x0
/*00000001b6cc*/ s_nop           0x0
/*00000001b6d0*/ s_nop           0x0
/*00000001b6d4*/ s_nop           0x0
/*00000001b6d8*/ s_nop           0x0
/*00000001b6dc*/ s_nop           0x0
/*00000001b6e0*/ s_nop           0x0
/*00000001b6e4*/ s_nop           0x0
/*00000001b6e8*/ s_nop           0x0
/*00000001b6ec*/ s_nop           0x0
/*00000001b6f0*/ s_nop           0x0
/*00000001b6f4*/ s_nop           0x0
/*00000001b6f8*/ s_nop           0x0
/*00000001b6fc*/ s_nop           0x0
subtract_char_get_num_groups_x:
.skip 256
/*00000001b800*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001b808*/ s_waitcnt       lgkmcnt(0)
/*00000001b80c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001b814*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001b81c*/ s_clause        0x1
/*00000001b820*/ s_load_dword    s3, s[6:7], 0x0
/*00000001b828*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001b830*/ s_lshl_b32      s6, s8, 1
/*00000001b834*/ s_lshl_b32      s8, s10, 2
/*00000001b838*/ s_lshl_b32      s7, s9, 1
/*00000001b83c*/ s_waitcnt       lgkmcnt(0)
/*00000001b840*/ v_add3_u32      v4, s1, s8, v2
/*00000001b848*/ s_and_b32       s1, s12, -2
/*00000001b84c*/ v_add3_u32      v0, s0, s6, v0
/*00000001b854*/ v_cmp_gt_u32    s[1:2], s12, s1
/*00000001b85c*/ s_and_b32       s6, s13, -2
/*00000001b860*/ s_lshr_b32      s0, s12, 1
/*00000001b864*/ v_cmp_gt_u32    s[6:7], s13, s6
/*00000001b86c*/ v_add3_u32      v3, s2, s7, v1
/*00000001b874*/ s_lshr_b32      s2, s13, 1
/*00000001b878*/ s_lshr_b32      s7, s14, 2
/*00000001b87c*/ s_and_b32       s8, s14, -4
/*00000001b880*/ s_sub_i32       s0, s0, s3
/*00000001b884*/ s_cmpk_lg_u32   s1, 0x0
/*00000001b888*/ v_cmp_gt_u32    s[1:2], s14, s8
/*00000001b890*/ s_addc_u32      s0, s0, 0
/*00000001b894*/ s_sub_i32       s2, s2, s3
/*00000001b898*/ s_cmpk_lg_u32   s6, 0x0
/*00000001b89c*/ v_mov_b32       v6, s0
/*00000001b8a0*/ s_addc_u32      s0, s2, 0
/*00000001b8a4*/ v_add_co_u32    v2, s[2:3], s4, v3
/*00000001b8ac*/ v_add_co_u32    v0, s[8:9], s4, v0
/*00000001b8b4*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*00000001b8bc*/ s_sub_i32       s2, s7, s3
/*00000001b8c0*/ s_cmpk_lg_u32   s1, 0x0
/*00000001b8c4*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001b8cc*/ v_mov_b32       v9, s0
/*00000001b8d0*/ s_addc_u32      s0, s2, 0
/*00000001b8d4*/ v_add_co_ci_u32 v1, s[8:9], s5, 0, s[8:9]
/*00000001b8dc*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001b8e4*/ v_mov_b32       v11, s0
/*00000001b8e8*/ global_store_byte v[0:1], v6, off
/*00000001b8f0*/ global_store_byte v[2:3], v9, off
/*00000001b8f8*/ global_store_byte v[4:5], v11, off
/*00000001b900*/ s_endpgm
/*00000001b904*/ s_nop           0x0
/*00000001b908*/ s_nop           0x0
/*00000001b90c*/ s_nop           0x0
/*00000001b910*/ s_nop           0x0
/*00000001b914*/ s_nop           0x0
/*00000001b918*/ s_nop           0x0
/*00000001b91c*/ s_nop           0x0
/*00000001b920*/ s_nop           0x0
/*00000001b924*/ s_nop           0x0
/*00000001b928*/ s_nop           0x0
/*00000001b92c*/ s_nop           0x0
/*00000001b930*/ s_nop           0x0
/*00000001b934*/ s_nop           0x0
/*00000001b938*/ s_nop           0x0
/*00000001b93c*/ s_nop           0x0
/*00000001b940*/ s_nop           0x0
/*00000001b944*/ s_nop           0x0
/*00000001b948*/ s_nop           0x0
/*00000001b94c*/ s_nop           0x0
/*00000001b950*/ s_nop           0x0
/*00000001b954*/ s_nop           0x0
/*00000001b958*/ s_nop           0x0
/*00000001b95c*/ s_nop           0x0
/*00000001b960*/ s_nop           0x0
/*00000001b964*/ s_nop           0x0
/*00000001b968*/ s_nop           0x0
/*00000001b96c*/ s_nop           0x0
/*00000001b970*/ s_nop           0x0
/*00000001b974*/ s_nop           0x0
/*00000001b978*/ s_nop           0x0
/*00000001b97c*/ s_nop           0x0
/*00000001b980*/ s_nop           0x0
/*00000001b984*/ s_nop           0x0
/*00000001b988*/ s_nop           0x0
/*00000001b98c*/ s_nop           0x0
/*00000001b990*/ s_nop           0x0
/*00000001b994*/ s_nop           0x0
/*00000001b998*/ s_nop           0x0
/*00000001b99c*/ s_nop           0x0
/*00000001b9a0*/ s_nop           0x0
/*00000001b9a4*/ s_nop           0x0
/*00000001b9a8*/ s_nop           0x0
/*00000001b9ac*/ s_nop           0x0
/*00000001b9b0*/ s_nop           0x0
/*00000001b9b4*/ s_nop           0x0
/*00000001b9b8*/ s_nop           0x0
/*00000001b9bc*/ s_nop           0x0
/*00000001b9c0*/ s_nop           0x0
/*00000001b9c4*/ s_nop           0x0
/*00000001b9c8*/ s_nop           0x0
/*00000001b9cc*/ s_nop           0x0
/*00000001b9d0*/ s_nop           0x0
/*00000001b9d4*/ s_nop           0x0
/*00000001b9d8*/ s_nop           0x0
/*00000001b9dc*/ s_nop           0x0
/*00000001b9e0*/ s_nop           0x0
/*00000001b9e4*/ s_nop           0x0
/*00000001b9e8*/ s_nop           0x0
/*00000001b9ec*/ s_nop           0x0
/*00000001b9f0*/ s_nop           0x0
/*00000001b9f4*/ s_nop           0x0
/*00000001b9f8*/ s_nop           0x0
/*00000001b9fc*/ s_nop           0x0
subtract_char_get_work_dim_x:
.skip 256
/*00000001bb00*/ v_mov_b32       v1, s4
/*00000001bb04*/ v_mov_b32       v2, s5
/*00000001bb08*/ s_clause        0x2
/*00000001bb0c*/ s_load_dword    s2, s[6:7], 0x10
/*00000001bb14*/ s_load_dword    s3, s[6:7], 0x0
/*00000001bb1c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001bb24*/ s_lshl_b32      s4, s8, 1
/*00000001bb28*/ global_load_ushort v1, v[1:2], off inst_offset:2
/*00000001bb30*/ s_waitcnt       lgkmcnt(0)
/*00000001bb34*/ v_add3_u32      v0, s2, s4, v0
/*00000001bb3c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001bb44*/ s_waitcnt       vmcnt(0)
/*00000001bb48*/ v_subrev_nc_u32 v2, s3, v1
/*00000001bb4c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000001bb54*/ global_store_byte v[0:1], v2, off
/*00000001bb5c*/ s_endpgm
/*00000001bb60*/ s_nop           0x0
/*00000001bb64*/ s_nop           0x0
/*00000001bb68*/ s_nop           0x0
/*00000001bb6c*/ s_nop           0x0
/*00000001bb70*/ s_nop           0x0
/*00000001bb74*/ s_nop           0x0
/*00000001bb78*/ s_nop           0x0
/*00000001bb7c*/ s_nop           0x0
/*00000001bb80*/ s_nop           0x0
/*00000001bb84*/ s_nop           0x0
/*00000001bb88*/ s_nop           0x0
/*00000001bb8c*/ s_nop           0x0
/*00000001bb90*/ s_nop           0x0
/*00000001bb94*/ s_nop           0x0
/*00000001bb98*/ s_nop           0x0
/*00000001bb9c*/ s_nop           0x0
/*00000001bba0*/ s_nop           0x0
/*00000001bba4*/ s_nop           0x0
/*00000001bba8*/ s_nop           0x0
/*00000001bbac*/ s_nop           0x0
/*00000001bbb0*/ s_nop           0x0
/*00000001bbb4*/ s_nop           0x0
/*00000001bbb8*/ s_nop           0x0
/*00000001bbbc*/ s_nop           0x0
/*00000001bbc0*/ s_nop           0x0
/*00000001bbc4*/ s_nop           0x0
/*00000001bbc8*/ s_nop           0x0
/*00000001bbcc*/ s_nop           0x0
/*00000001bbd0*/ s_nop           0x0
/*00000001bbd4*/ s_nop           0x0
/*00000001bbd8*/ s_nop           0x0
/*00000001bbdc*/ s_nop           0x0
/*00000001bbe0*/ s_nop           0x0
/*00000001bbe4*/ s_nop           0x0
/*00000001bbe8*/ s_nop           0x0
/*00000001bbec*/ s_nop           0x0
/*00000001bbf0*/ s_nop           0x0
/*00000001bbf4*/ s_nop           0x0
/*00000001bbf8*/ s_nop           0x0
/*00000001bbfc*/ s_nop           0x0
subtract_char_x_get_global_offset:
.skip 256
/*00000001bd00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001bd08*/ s_waitcnt       lgkmcnt(0)
/*00000001bd0c*/ s_clause        0x2
/*00000001bd10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001bd18*/ s_load_dword    s3, s[4:5], 0x8
/*00000001bd20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001bd28*/ s_lshl_b32      s6, s6, 4
/*00000001bd2c*/ s_lshl_b32      s7, s7, 1
/*00000001bd30*/ s_lshl_b32      s8, s8, 1
/*00000001bd34*/ s_waitcnt       lgkmcnt(0)
/*00000001bd38*/ v_add3_u32      v4, s1, s8, v2
/*00000001bd40*/ v_add3_u32      v0, s0, s6, v0
/*00000001bd48*/ v_add3_u32      v3, s2, s7, v1
/*00000001bd50*/ s_sub_i32       s0, s3, s0
/*00000001bd54*/ s_sub_i32       s2, s3, s2
/*00000001bd58*/ v_mov_b32       v6, s0
/*00000001bd5c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001bd64*/ v_mov_b32       v9, s2
/*00000001bd68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001bd70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001bd78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001bd80*/ s_sub_i32       s0, s3, s1
/*00000001bd84*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001bd8c*/ v_mov_b32       v11, s0
/*00000001bd90*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001bd98*/ global_store_byte v[0:1], v6, off
/*00000001bda0*/ global_store_byte v[2:3], v9, off
/*00000001bda8*/ global_store_byte v[4:5], v11, off
/*00000001bdb0*/ s_endpgm
/*00000001bdb4*/ s_nop           0x0
/*00000001bdb8*/ s_nop           0x0
/*00000001bdbc*/ s_nop           0x0
/*00000001bdc0*/ s_nop           0x0
/*00000001bdc4*/ s_nop           0x0
/*00000001bdc8*/ s_nop           0x0
/*00000001bdcc*/ s_nop           0x0
/*00000001bdd0*/ s_nop           0x0
/*00000001bdd4*/ s_nop           0x0
/*00000001bdd8*/ s_nop           0x0
/*00000001bddc*/ s_nop           0x0
/*00000001bde0*/ s_nop           0x0
/*00000001bde4*/ s_nop           0x0
/*00000001bde8*/ s_nop           0x0
/*00000001bdec*/ s_nop           0x0
/*00000001bdf0*/ s_nop           0x0
/*00000001bdf4*/ s_nop           0x0
/*00000001bdf8*/ s_nop           0x0
/*00000001bdfc*/ s_nop           0x0
subtract_char_get_global_offset_get_global_offset:
.skip 256
/*00000001bf00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001bf08*/ s_waitcnt       lgkmcnt(0)
/*00000001bf0c*/ s_clause        0x1
/*00000001bf10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001bf18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001bf20*/ s_lshl_b32      s3, s6, 1
/*00000001bf24*/ s_lshl_b32      s6, s7, 4
/*00000001bf28*/ v_mov_b32       v6, 0
/*00000001bf2c*/ v_add3_u32      v0, s0, s3, v0
/*00000001bf34*/ s_lshl_b32      s0, s8, 1
/*00000001bf38*/ v_add3_u32      v3, s2, s6, v1
/*00000001bf40*/ s_waitcnt       lgkmcnt(0)
/*00000001bf44*/ v_add3_u32      v4, s1, s0, v2
/*00000001bf4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001bf54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001bf5c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*00000001bf64*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000001bf6c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001bf74*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001bf7c*/ global_store_byte v[0:1], v6, off
/*00000001bf84*/ global_store_byte v[7:8], v6, off
/*00000001bf8c*/ global_store_byte v[4:5], v6, off
/*00000001bf94*/ s_endpgm
/*00000001bf98*/ s_nop           0x0
/*00000001bf9c*/ s_nop           0x0
/*00000001bfa0*/ s_nop           0x0
/*00000001bfa4*/ s_nop           0x0
/*00000001bfa8*/ s_nop           0x0
/*00000001bfac*/ s_nop           0x0
/*00000001bfb0*/ s_nop           0x0
/*00000001bfb4*/ s_nop           0x0
/*00000001bfb8*/ s_nop           0x0
/*00000001bfbc*/ s_nop           0x0
/*00000001bfc0*/ s_nop           0x0
/*00000001bfc4*/ s_nop           0x0
/*00000001bfc8*/ s_nop           0x0
/*00000001bfcc*/ s_nop           0x0
/*00000001bfd0*/ s_nop           0x0
/*00000001bfd4*/ s_nop           0x0
/*00000001bfd8*/ s_nop           0x0
/*00000001bfdc*/ s_nop           0x0
/*00000001bfe0*/ s_nop           0x0
/*00000001bfe4*/ s_nop           0x0
/*00000001bfe8*/ s_nop           0x0
/*00000001bfec*/ s_nop           0x0
/*00000001bff0*/ s_nop           0x0
/*00000001bff4*/ s_nop           0x0
/*00000001bff8*/ s_nop           0x0
/*00000001bffc*/ s_nop           0x0
subtract_char_get_local_id_get_global_offset:
.skip 256
/*00000001c100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c108*/ s_waitcnt       lgkmcnt(0)
/*00000001c10c*/ s_clause        0x1
/*00000001c110*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c120*/ s_lshl_b32      s3, s6, 3
/*00000001c124*/ s_lshl_b32      s6, s7, 2
/*00000001c128*/ s_lshl_b32      s7, s8, 1
/*00000001c12c*/ v_add3_u32      v3, s0, s3, v0
/*00000001c134*/ v_add3_u32      v4, s2, s6, v1
/*00000001c13c*/ v_subrev_nc_u32 v6, s0, v0
/*00000001c140*/ s_waitcnt       lgkmcnt(0)
/*00000001c144*/ v_add3_u32      v5, s1, s7, v2
/*00000001c14c*/ v_subrev_nc_u32 v9, s2, v1
/*00000001c150*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001c158*/ v_subrev_nc_u32 v11, s1, v2
/*00000001c15c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c164*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001c16c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c174*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001c17c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001c184*/ global_store_byte v[0:1], v6, off
/*00000001c18c*/ global_store_byte v[2:3], v9, off
/*00000001c194*/ global_store_byte v[4:5], v11, off
/*00000001c19c*/ s_endpgm
/*00000001c1a0*/ s_nop           0x0
/*00000001c1a4*/ s_nop           0x0
/*00000001c1a8*/ s_nop           0x0
/*00000001c1ac*/ s_nop           0x0
/*00000001c1b0*/ s_nop           0x0
/*00000001c1b4*/ s_nop           0x0
/*00000001c1b8*/ s_nop           0x0
/*00000001c1bc*/ s_nop           0x0
/*00000001c1c0*/ s_nop           0x0
/*00000001c1c4*/ s_nop           0x0
/*00000001c1c8*/ s_nop           0x0
/*00000001c1cc*/ s_nop           0x0
/*00000001c1d0*/ s_nop           0x0
/*00000001c1d4*/ s_nop           0x0
/*00000001c1d8*/ s_nop           0x0
/*00000001c1dc*/ s_nop           0x0
/*00000001c1e0*/ s_nop           0x0
/*00000001c1e4*/ s_nop           0x0
/*00000001c1e8*/ s_nop           0x0
/*00000001c1ec*/ s_nop           0x0
/*00000001c1f0*/ s_nop           0x0
/*00000001c1f4*/ s_nop           0x0
/*00000001c1f8*/ s_nop           0x0
/*00000001c1fc*/ s_nop           0x0
subtract_char_get_group_id_get_global_offset:
.skip 256
/*00000001c300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c308*/ s_waitcnt       lgkmcnt(0)
/*00000001c30c*/ s_clause        0x1
/*00000001c310*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c320*/ s_lshl_b32      s3, s6, 1
/*00000001c324*/ s_lshl_b32      s9, s7, 4
/*00000001c328*/ s_lshl_b32      s10, s8, 1
/*00000001c32c*/ v_add3_u32      v0, s0, s3, v0
/*00000001c334*/ v_add3_u32      v3, s2, s9, v1
/*00000001c33c*/ s_sub_i32       s0, s6, s0
/*00000001c340*/ s_waitcnt       lgkmcnt(0)
/*00000001c344*/ v_add3_u32      v4, s1, s10, v2
/*00000001c34c*/ v_mov_b32       v6, s0
/*00000001c350*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c358*/ s_sub_i32       s2, s7, s2
/*00000001c35c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c364*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c36c*/ v_mov_b32       v9, s2
/*00000001c370*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c378*/ s_sub_i32       s0, s8, s1
/*00000001c37c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c384*/ v_mov_b32       v11, s0
/*00000001c388*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c390*/ global_store_byte v[0:1], v6, off
/*00000001c398*/ global_store_byte v[2:3], v9, off
/*00000001c3a0*/ global_store_byte v[4:5], v11, off
/*00000001c3a8*/ s_endpgm
/*00000001c3ac*/ s_nop           0x0
/*00000001c3b0*/ s_nop           0x0
/*00000001c3b4*/ s_nop           0x0
/*00000001c3b8*/ s_nop           0x0
/*00000001c3bc*/ s_nop           0x0
/*00000001c3c0*/ s_nop           0x0
/*00000001c3c4*/ s_nop           0x0
/*00000001c3c8*/ s_nop           0x0
/*00000001c3cc*/ s_nop           0x0
/*00000001c3d0*/ s_nop           0x0
/*00000001c3d4*/ s_nop           0x0
/*00000001c3d8*/ s_nop           0x0
/*00000001c3dc*/ s_nop           0x0
/*00000001c3e0*/ s_nop           0x0
/*00000001c3e4*/ s_nop           0x0
/*00000001c3e8*/ s_nop           0x0
/*00000001c3ec*/ s_nop           0x0
/*00000001c3f0*/ s_nop           0x0
/*00000001c3f4*/ s_nop           0x0
/*00000001c3f8*/ s_nop           0x0
/*00000001c3fc*/ s_nop           0x0
subtract_char_get_local_size_get_global_offset:
.skip 256
/*00000001c500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c508*/ s_waitcnt       lgkmcnt(0)
/*00000001c50c*/ s_clause        0x1
/*00000001c510*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c520*/ s_lshl_b32      s3, s6, 1
/*00000001c524*/ s_lshl_b32      s6, s7, 1
/*00000001c528*/ s_lshl_b32      s7, s8, 2
/*00000001c52c*/ v_add3_u32      v0, s0, s3, v0
/*00000001c534*/ v_add3_u32      v3, s2, s6, v1
/*00000001c53c*/ s_sub_i32       s0, 2, s0
/*00000001c540*/ s_waitcnt       lgkmcnt(0)
/*00000001c544*/ v_add3_u32      v4, s1, s7, v2
/*00000001c54c*/ v_mov_b32       v6, s0
/*00000001c550*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c558*/ s_sub_i32       s2, 2, s2
/*00000001c55c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c564*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c56c*/ v_mov_b32       v9, s2
/*00000001c570*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c578*/ s_sub_i32       s0, 4, s1
/*00000001c57c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c584*/ v_mov_b32       v11, s0
/*00000001c588*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c590*/ global_store_byte v[0:1], v6, off
/*00000001c598*/ global_store_byte v[2:3], v9, off
/*00000001c5a0*/ global_store_byte v[4:5], v11, off
/*00000001c5a8*/ s_endpgm
/*00000001c5ac*/ s_nop           0x0
/*00000001c5b0*/ s_nop           0x0
/*00000001c5b4*/ s_nop           0x0
/*00000001c5b8*/ s_nop           0x0
/*00000001c5bc*/ s_nop           0x0
/*00000001c5c0*/ s_nop           0x0
/*00000001c5c4*/ s_nop           0x0
/*00000001c5c8*/ s_nop           0x0
/*00000001c5cc*/ s_nop           0x0
/*00000001c5d0*/ s_nop           0x0
/*00000001c5d4*/ s_nop           0x0
/*00000001c5d8*/ s_nop           0x0
/*00000001c5dc*/ s_nop           0x0
/*00000001c5e0*/ s_nop           0x0
/*00000001c5e4*/ s_nop           0x0
/*00000001c5e8*/ s_nop           0x0
/*00000001c5ec*/ s_nop           0x0
/*00000001c5f0*/ s_nop           0x0
/*00000001c5f4*/ s_nop           0x0
/*00000001c5f8*/ s_nop           0x0
/*00000001c5fc*/ s_nop           0x0
subtract_char_get_global_id_get_global_offset:
.skip 256
/*00000001c700*/ s_clause        0x1
/*00000001c704*/ s_load_dwordx4  s[0:3], s[4:5], 0x18
/*00000001c70c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c714*/ v_lshl_or_b32   v9, s7, 1, v1
/*00000001c71c*/ v_lshl_or_b32   v11, s6, 1, v0
/*00000001c724*/ v_lshl_or_b32   v7, s8, 2, v2
/*00000001c72c*/ s_waitcnt       lgkmcnt(0)
/*00000001c730*/ v_add_nc_u32    v2, s0, v9
/*00000001c734*/ v_add_co_u32    v0, s[0:1], s4, v11
/*00000001c73c*/ v_add_nc_u32    v4, s2, v7
/*00000001c740*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c748*/ v_add_co_u32    v2, s[0:1], s4, v2
/*00000001c750*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c758*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001c760*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001c768*/ global_store_byte v[0:1], v11, off
/*00000001c770*/ global_store_byte v[2:3], v9, off
/*00000001c778*/ global_store_byte v[4:5], v7, off
/*00000001c780*/ s_endpgm
/*00000001c784*/ s_nop           0x0
/*00000001c788*/ s_nop           0x0
/*00000001c78c*/ s_nop           0x0
/*00000001c790*/ s_nop           0x0
/*00000001c794*/ s_nop           0x0
/*00000001c798*/ s_nop           0x0
/*00000001c79c*/ s_nop           0x0
/*00000001c7a0*/ s_nop           0x0
/*00000001c7a4*/ s_nop           0x0
/*00000001c7a8*/ s_nop           0x0
/*00000001c7ac*/ s_nop           0x0
/*00000001c7b0*/ s_nop           0x0
/*00000001c7b4*/ s_nop           0x0
/*00000001c7b8*/ s_nop           0x0
/*00000001c7bc*/ s_nop           0x0
/*00000001c7c0*/ s_nop           0x0
/*00000001c7c4*/ s_nop           0x0
/*00000001c7c8*/ s_nop           0x0
/*00000001c7cc*/ s_nop           0x0
/*00000001c7d0*/ s_nop           0x0
/*00000001c7d4*/ s_nop           0x0
/*00000001c7d8*/ s_nop           0x0
/*00000001c7dc*/ s_nop           0x0
/*00000001c7e0*/ s_nop           0x0
/*00000001c7e4*/ s_nop           0x0
/*00000001c7e8*/ s_nop           0x0
/*00000001c7ec*/ s_nop           0x0
/*00000001c7f0*/ s_nop           0x0
/*00000001c7f4*/ s_nop           0x0
/*00000001c7f8*/ s_nop           0x0
/*00000001c7fc*/ s_nop           0x0
subtract_char_get_global_size_get_global_offset:
.skip 256
/*00000001c900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001c908*/ s_waitcnt       lgkmcnt(0)
/*00000001c90c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001c914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001c91c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001c924*/ s_lshl_b32      s3, s8, 4
/*00000001c928*/ s_lshl_b32      s6, s9, 1
/*00000001c92c*/ s_lshl_b32      s7, s10, 1
/*00000001c930*/ s_waitcnt       lgkmcnt(0)
/*00000001c934*/ v_add3_u32      v4, s1, s7, v2
/*00000001c93c*/ v_add3_u32      v0, s0, s3, v0
/*00000001c944*/ v_add3_u32      v3, s2, s6, v1
/*00000001c94c*/ s_sub_i32       s0, s12, s0
/*00000001c950*/ s_sub_i32       s2, s13, s2
/*00000001c954*/ v_mov_b32       v6, s0
/*00000001c958*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c960*/ v_mov_b32       v9, s2
/*00000001c964*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c96c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c974*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c97c*/ s_sub_i32       s0, s14, s1
/*00000001c980*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c988*/ v_mov_b32       v11, s0
/*00000001c98c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c994*/ global_store_byte v[0:1], v6, off
/*00000001c99c*/ global_store_byte v[2:3], v9, off
/*00000001c9a4*/ global_store_byte v[4:5], v11, off
/*00000001c9ac*/ s_endpgm
/*00000001c9b0*/ s_nop           0x0
/*00000001c9b4*/ s_nop           0x0
/*00000001c9b8*/ s_nop           0x0
/*00000001c9bc*/ s_nop           0x0
/*00000001c9c0*/ s_nop           0x0
/*00000001c9c4*/ s_nop           0x0
/*00000001c9c8*/ s_nop           0x0
/*00000001c9cc*/ s_nop           0x0
/*00000001c9d0*/ s_nop           0x0
/*00000001c9d4*/ s_nop           0x0
/*00000001c9d8*/ s_nop           0x0
/*00000001c9dc*/ s_nop           0x0
/*00000001c9e0*/ s_nop           0x0
/*00000001c9e4*/ s_nop           0x0
/*00000001c9e8*/ s_nop           0x0
/*00000001c9ec*/ s_nop           0x0
/*00000001c9f0*/ s_nop           0x0
/*00000001c9f4*/ s_nop           0x0
/*00000001c9f8*/ s_nop           0x0
/*00000001c9fc*/ s_nop           0x0
subtract_char_get_num_groups_get_global_offset:
.skip 256
/*00000001cb00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001cb08*/ s_clause        0x2
/*00000001cb0c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001cb14*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001cb1c*/ s_load_dword    s6, s[6:7], 0x20
/*00000001cb24*/ s_lshl_b32      s7, s8, 1
/*00000001cb28*/ s_lshl_b32      s8, s9, 1
/*00000001cb2c*/ s_lshl_b32      s9, s10, 2
/*00000001cb30*/ s_waitcnt       lgkmcnt(0)
/*00000001cb34*/ s_and_b32       s3, s0, -2
/*00000001cb38*/ v_add3_u32      v0, s12, s7, v0
/*00000001cb40*/ v_cmp_gt_u32    s[3:4], s0, s3
/*00000001cb48*/ s_lshr_b32      s0, s0, 1
/*00000001cb4c*/ v_add3_u32      v3, s14, s8, v1
/*00000001cb54*/ v_add3_u32      v4, s6, s9, v2
/*00000001cb5c*/ v_add_co_u32    v0, s[7:8], s4, v0
/*00000001cb64*/ s_cmpk_lg_u32   s3, 0x0
/*00000001cb68*/ v_add_co_ci_u32 v1, s[7:8], s5, 0, s[7:8]
/*00000001cb70*/ s_addc_u32      s0, s0, 0
/*00000001cb74*/ s_and_b32       s3, s1, -2
/*00000001cb78*/ v_cmp_gt_u32    s[3:4], s1, s3
/*00000001cb80*/ s_lshr_b32      s1, s1, 1
/*00000001cb84*/ s_cmpk_lg_u32   s3, 0x0
/*00000001cb88*/ s_addc_u32      s1, s1, 0
/*00000001cb8c*/ s_and_b32       s3, s2, -4
/*00000001cb90*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000001cb98*/ s_lshr_b32      s2, s2, 2
/*00000001cb9c*/ s_cmpk_lg_u32   s3, 0x0
/*00000001cba0*/ v_add_co_u32    v2, s[3:4], s4, v3
/*00000001cba8*/ s_addc_u32      s2, s2, 0
/*00000001cbac*/ s_sub_i32       s0, s0, s12
/*00000001cbb0*/ s_sub_i32       s1, s1, s14
/*00000001cbb4*/ v_mov_b32       v6, s0
/*00000001cbb8*/ v_mov_b32       v9, s1
/*00000001cbbc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001cbc4*/ s_sub_i32       s0, s2, s6
/*00000001cbc8*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*00000001cbd0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001cbd8*/ v_mov_b32       v11, s0
/*00000001cbdc*/ global_store_byte v[0:1], v6, off
/*00000001cbe4*/ global_store_byte v[2:3], v9, off
/*00000001cbec*/ global_store_byte v[4:5], v11, off
/*00000001cbf4*/ s_endpgm
/*00000001cbf8*/ s_nop           0x0
/*00000001cbfc*/ s_nop           0x0
subtract_char_get_work_dim_get_global_offset:
.skip 256
/*00000001cd00*/ v_mov_b32       v3, s4
/*00000001cd04*/ v_mov_b32       v4, s5
/*00000001cd08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001cd10*/ s_waitcnt       lgkmcnt(0)
/*00000001cd14*/ s_clause        0x1
/*00000001cd18*/ s_load_dword    s1, s[6:7], 0x20
/*00000001cd20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001cd28*/ s_lshl_b32      s3, s8, 1
/*00000001cd2c*/ s_lshl_b32      s6, s9, 1
/*00000001cd30*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*00000001cd38*/ v_add3_u32      v0, s0, s3, v0
/*00000001cd40*/ s_lshl_b32      s3, s10, 2
/*00000001cd44*/ v_add3_u32      v3, s2, s6, v1
/*00000001cd4c*/ s_waitcnt       lgkmcnt(0)
/*00000001cd50*/ v_add3_u32      v4, s1, s3, v2
/*00000001cd58*/ v_add_co_u32    v0, s[3:4], s4, v0
/*00000001cd60*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*00000001cd68*/ v_add_co_u32    v2, s[3:4], s4, v3
/*00000001cd70*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*00000001cd78*/ v_add_co_u32    v4, s[3:4], s4, v4
/*00000001cd80*/ v_add_co_ci_u32 v5, s[3:4], s5, 0, s[3:4]
/*00000001cd88*/ s_waitcnt       vmcnt(0)
/*00000001cd8c*/ v_subrev_nc_u32 v7, s0, v6
/*00000001cd90*/ v_subrev_nc_u32 v8, s2, v6
/*00000001cd94*/ v_subrev_nc_u32 v6, s1, v6
/*00000001cd98*/ global_store_byte v[0:1], v7, off
/*00000001cda0*/ global_store_byte v[2:3], v8, off
/*00000001cda8*/ global_store_byte v[4:5], v6, off
/*00000001cdb0*/ s_endpgm
/*00000001cdb4*/ s_nop           0x0
/*00000001cdb8*/ s_nop           0x0
/*00000001cdbc*/ s_nop           0x0
/*00000001cdc0*/ s_nop           0x0
/*00000001cdc4*/ s_nop           0x0
/*00000001cdc8*/ s_nop           0x0
/*00000001cdcc*/ s_nop           0x0
/*00000001cdd0*/ s_nop           0x0
/*00000001cdd4*/ s_nop           0x0
/*00000001cdd8*/ s_nop           0x0
/*00000001cddc*/ s_nop           0x0
/*00000001cde0*/ s_nop           0x0
/*00000001cde4*/ s_nop           0x0
/*00000001cde8*/ s_nop           0x0
/*00000001cdec*/ s_nop           0x0
/*00000001cdf0*/ s_nop           0x0
/*00000001cdf4*/ s_nop           0x0
/*00000001cdf8*/ s_nop           0x0
/*00000001cdfc*/ s_nop           0x0
subtract_char_x_get_local_id:
.skip 256
/*00000001cf00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001cf08*/ s_waitcnt       lgkmcnt(0)
/*00000001cf0c*/ s_clause        0x2
/*00000001cf10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001cf18*/ s_load_dword    s3, s[4:5], 0x8
/*00000001cf20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001cf28*/ s_lshl_b32      s6, s6, 4
/*00000001cf2c*/ s_lshl_b32      s7, s7, 1
/*00000001cf30*/ s_lshl_b32      s8, s8, 1
/*00000001cf34*/ s_waitcnt       lgkmcnt(0)
/*00000001cf38*/ v_add3_u32      v5, s1, s8, v2
/*00000001cf40*/ v_add3_u32      v3, s0, s6, v0
/*00000001cf48*/ v_add3_u32      v4, s2, s7, v1
/*00000001cf50*/ v_sub_nc_u32    v6, s3, v0
/*00000001cf54*/ v_sub_nc_u32    v9, s3, v1
/*00000001cf58*/ v_sub_nc_u32    v11, s3, v2
/*00000001cf5c*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001cf64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001cf6c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001cf74*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001cf7c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001cf84*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001cf8c*/ global_store_byte v[0:1], v6, off
/*00000001cf94*/ global_store_byte v[2:3], v9, off
/*00000001cf9c*/ global_store_byte v[4:5], v11, off
/*00000001cfa4*/ s_endpgm
/*00000001cfa8*/ s_nop           0x0
/*00000001cfac*/ s_nop           0x0
/*00000001cfb0*/ s_nop           0x0
/*00000001cfb4*/ s_nop           0x0
/*00000001cfb8*/ s_nop           0x0
/*00000001cfbc*/ s_nop           0x0
/*00000001cfc0*/ s_nop           0x0
/*00000001cfc4*/ s_nop           0x0
/*00000001cfc8*/ s_nop           0x0
/*00000001cfcc*/ s_nop           0x0
/*00000001cfd0*/ s_nop           0x0
/*00000001cfd4*/ s_nop           0x0
/*00000001cfd8*/ s_nop           0x0
/*00000001cfdc*/ s_nop           0x0
/*00000001cfe0*/ s_nop           0x0
/*00000001cfe4*/ s_nop           0x0
/*00000001cfe8*/ s_nop           0x0
/*00000001cfec*/ s_nop           0x0
/*00000001cff0*/ s_nop           0x0
/*00000001cff4*/ s_nop           0x0
/*00000001cff8*/ s_nop           0x0
/*00000001cffc*/ s_nop           0x0
subtract_char_get_global_offset_get_local_id:
.skip 256
/*00000001d100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d108*/ s_waitcnt       lgkmcnt(0)
/*00000001d10c*/ s_clause        0x1
/*00000001d110*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d120*/ s_lshl_b32      s3, s6, 1
/*00000001d124*/ s_lshl_b32      s6, s7, 4
/*00000001d128*/ s_lshl_b32      s7, s8, 1
/*00000001d12c*/ v_add3_u32      v3, s0, s3, v0
/*00000001d134*/ v_add3_u32      v4, s2, s6, v1
/*00000001d13c*/ v_sub_nc_u32    v6, s0, v0
/*00000001d140*/ s_waitcnt       lgkmcnt(0)
/*00000001d144*/ v_add3_u32      v5, s1, s7, v2
/*00000001d14c*/ v_sub_nc_u32    v9, s2, v1
/*00000001d150*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001d158*/ v_sub_nc_u32    v11, s1, v2
/*00000001d15c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d164*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001d16c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d174*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001d17c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d184*/ global_store_byte v[0:1], v6, off
/*00000001d18c*/ global_store_byte v[2:3], v9, off
/*00000001d194*/ global_store_byte v[4:5], v11, off
/*00000001d19c*/ s_endpgm
/*00000001d1a0*/ s_nop           0x0
/*00000001d1a4*/ s_nop           0x0
/*00000001d1a8*/ s_nop           0x0
/*00000001d1ac*/ s_nop           0x0
/*00000001d1b0*/ s_nop           0x0
/*00000001d1b4*/ s_nop           0x0
/*00000001d1b8*/ s_nop           0x0
/*00000001d1bc*/ s_nop           0x0
/*00000001d1c0*/ s_nop           0x0
/*00000001d1c4*/ s_nop           0x0
/*00000001d1c8*/ s_nop           0x0
/*00000001d1cc*/ s_nop           0x0
/*00000001d1d0*/ s_nop           0x0
/*00000001d1d4*/ s_nop           0x0
/*00000001d1d8*/ s_nop           0x0
/*00000001d1dc*/ s_nop           0x0
/*00000001d1e0*/ s_nop           0x0
/*00000001d1e4*/ s_nop           0x0
/*00000001d1e8*/ s_nop           0x0
/*00000001d1ec*/ s_nop           0x0
/*00000001d1f0*/ s_nop           0x0
/*00000001d1f4*/ s_nop           0x0
/*00000001d1f8*/ s_nop           0x0
/*00000001d1fc*/ s_nop           0x0
subtract_char_get_local_id_get_local_id:
.skip 256
/*00000001d300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d308*/ s_waitcnt       lgkmcnt(0)
/*00000001d30c*/ s_clause        0x1
/*00000001d310*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d320*/ s_lshl_b32      s3, s6, 3
/*00000001d324*/ s_lshl_b32      s6, s7, 2
/*00000001d328*/ v_mov_b32       v6, 0
/*00000001d32c*/ v_add3_u32      v0, s0, s3, v0
/*00000001d334*/ s_lshl_b32      s0, s8, 1
/*00000001d338*/ v_add3_u32      v3, s2, s6, v1
/*00000001d340*/ s_waitcnt       lgkmcnt(0)
/*00000001d344*/ v_add3_u32      v4, s1, s0, v2
/*00000001d34c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d354*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d35c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*00000001d364*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000001d36c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001d374*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d37c*/ global_store_byte v[0:1], v6, off
/*00000001d384*/ global_store_byte v[7:8], v6, off
/*00000001d38c*/ global_store_byte v[4:5], v6, off
/*00000001d394*/ s_endpgm
/*00000001d398*/ s_nop           0x0
/*00000001d39c*/ s_nop           0x0
/*00000001d3a0*/ s_nop           0x0
/*00000001d3a4*/ s_nop           0x0
/*00000001d3a8*/ s_nop           0x0
/*00000001d3ac*/ s_nop           0x0
/*00000001d3b0*/ s_nop           0x0
/*00000001d3b4*/ s_nop           0x0
/*00000001d3b8*/ s_nop           0x0
/*00000001d3bc*/ s_nop           0x0
/*00000001d3c0*/ s_nop           0x0
/*00000001d3c4*/ s_nop           0x0
/*00000001d3c8*/ s_nop           0x0
/*00000001d3cc*/ s_nop           0x0
/*00000001d3d0*/ s_nop           0x0
/*00000001d3d4*/ s_nop           0x0
/*00000001d3d8*/ s_nop           0x0
/*00000001d3dc*/ s_nop           0x0
/*00000001d3e0*/ s_nop           0x0
/*00000001d3e4*/ s_nop           0x0
/*00000001d3e8*/ s_nop           0x0
/*00000001d3ec*/ s_nop           0x0
/*00000001d3f0*/ s_nop           0x0
/*00000001d3f4*/ s_nop           0x0
/*00000001d3f8*/ s_nop           0x0
/*00000001d3fc*/ s_nop           0x0
subtract_char_get_group_id_get_local_id:
.skip 256
/*00000001d500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d508*/ s_waitcnt       lgkmcnt(0)
/*00000001d50c*/ s_clause        0x1
/*00000001d510*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d520*/ s_lshl_b32      s3, s6, 1
/*00000001d524*/ v_sub_nc_u16    v6, s6, v0
/*00000001d52c*/ s_lshl_b32      s9, s7, 4
/*00000001d530*/ s_lshl_b32      s10, s8, 1
/*00000001d534*/ v_sub_nc_u16    v9, s7, v1
/*00000001d53c*/ v_sub_nc_u16    v11, s8, v2
/*00000001d544*/ v_add3_u32      v0, s0, s3, v0
/*00000001d54c*/ v_add3_u32      v3, s2, s9, v1
/*00000001d554*/ s_waitcnt       lgkmcnt(0)
/*00000001d558*/ v_add3_u32      v4, s1, s10, v2
/*00000001d560*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d568*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d570*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d578*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d580*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001d588*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d590*/ global_store_byte v[0:1], v6, off
/*00000001d598*/ global_store_byte v[2:3], v9, off
/*00000001d5a0*/ global_store_byte v[4:5], v11, off
/*00000001d5a8*/ s_endpgm
/*00000001d5ac*/ s_nop           0x0
/*00000001d5b0*/ s_nop           0x0
/*00000001d5b4*/ s_nop           0x0
/*00000001d5b8*/ s_nop           0x0
/*00000001d5bc*/ s_nop           0x0
/*00000001d5c0*/ s_nop           0x0
/*00000001d5c4*/ s_nop           0x0
/*00000001d5c8*/ s_nop           0x0
/*00000001d5cc*/ s_nop           0x0
/*00000001d5d0*/ s_nop           0x0
/*00000001d5d4*/ s_nop           0x0
/*00000001d5d8*/ s_nop           0x0
/*00000001d5dc*/ s_nop           0x0
/*00000001d5e0*/ s_nop           0x0
/*00000001d5e4*/ s_nop           0x0
/*00000001d5e8*/ s_nop           0x0
/*00000001d5ec*/ s_nop           0x0
/*00000001d5f0*/ s_nop           0x0
/*00000001d5f4*/ s_nop           0x0
/*00000001d5f8*/ s_nop           0x0
/*00000001d5fc*/ s_nop           0x0
subtract_char_get_local_size_get_local_id:
.skip 256
/*00000001d700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d708*/ s_waitcnt       lgkmcnt(0)
/*00000001d70c*/ s_clause        0x1
/*00000001d710*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d720*/ s_lshl_b32      s3, s6, 1
/*00000001d724*/ v_sub_nc_u16    v6, 2, v0
/*00000001d72c*/ s_lshl_b32      s6, s7, 1
/*00000001d730*/ s_lshl_b32      s7, s8, 2
/*00000001d734*/ v_sub_nc_u16    v9, 2, v1
/*00000001d73c*/ v_sub_nc_u16    v11, 4, v2
/*00000001d744*/ v_add3_u32      v0, s0, s3, v0
/*00000001d74c*/ v_add3_u32      v3, s2, s6, v1
/*00000001d754*/ s_waitcnt       lgkmcnt(0)
/*00000001d758*/ v_add3_u32      v4, s1, s7, v2
/*00000001d760*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d768*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d770*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d778*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d780*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001d788*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d790*/ global_store_byte v[0:1], v6, off
/*00000001d798*/ global_store_byte v[2:3], v9, off
/*00000001d7a0*/ global_store_byte v[4:5], v11, off
/*00000001d7a8*/ s_endpgm
/*00000001d7ac*/ s_nop           0x0
/*00000001d7b0*/ s_nop           0x0
/*00000001d7b4*/ s_nop           0x0
/*00000001d7b8*/ s_nop           0x0
/*00000001d7bc*/ s_nop           0x0
/*00000001d7c0*/ s_nop           0x0
/*00000001d7c4*/ s_nop           0x0
/*00000001d7c8*/ s_nop           0x0
/*00000001d7cc*/ s_nop           0x0
/*00000001d7d0*/ s_nop           0x0
/*00000001d7d4*/ s_nop           0x0
/*00000001d7d8*/ s_nop           0x0
/*00000001d7dc*/ s_nop           0x0
/*00000001d7e0*/ s_nop           0x0
/*00000001d7e4*/ s_nop           0x0
/*00000001d7e8*/ s_nop           0x0
/*00000001d7ec*/ s_nop           0x0
/*00000001d7f0*/ s_nop           0x0
/*00000001d7f4*/ s_nop           0x0
/*00000001d7f8*/ s_nop           0x0
/*00000001d7fc*/ s_nop           0x0
subtract_char_get_global_id_get_local_id:
.skip 256
/*00000001d900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d908*/ s_waitcnt       lgkmcnt(0)
/*00000001d90c*/ s_clause        0x1
/*00000001d910*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d920*/ v_lshl_or_b32   v3, s7, 1, v1
/*00000001d928*/ s_lshl_b32      s3, s6, 1
/*00000001d92c*/ v_lshl_or_b32   v4, s8, 2, v2
/*00000001d934*/ v_or_b32        v0, s3, v0
/*00000001d938*/ v_add_nc_u32    v7, s2, v3
/*00000001d93c*/ s_waitcnt       lgkmcnt(0)
/*00000001d940*/ v_add_nc_u32    v19, s1, v4
/*00000001d944*/ s_add_i32       s0, s3, s0
/*00000001d948*/ v_add_co_u32    v3, s[1:2], s4, v0
/*00000001d950*/ v_mov_b32       v10, s0
/*00000001d954*/ v_add_co_u32    v0, s[0:1], s4, v7
/*00000001d95c*/ v_sub_nc_u32    v15, v7, v1
/*00000001d960*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d968*/ v_add_co_u32    v5, s[0:1], s4, v19
/*00000001d970*/ v_add_co_ci_u32 v4, s[1:2], s5, 0, s[1:2]
/*00000001d978*/ v_sub_nc_u32    v11, v19, v2
/*00000001d97c*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001d984*/ global_store_byte v[3:4], v10, off
/*00000001d98c*/ global_store_byte v[0:1], v15, off
/*00000001d994*/ global_store_byte v[5:6], v11, off
/*00000001d99c*/ s_endpgm
/*00000001d9a0*/ s_nop           0x0
/*00000001d9a4*/ s_nop           0x0
/*00000001d9a8*/ s_nop           0x0
/*00000001d9ac*/ s_nop           0x0
/*00000001d9b0*/ s_nop           0x0
/*00000001d9b4*/ s_nop           0x0
/*00000001d9b8*/ s_nop           0x0
/*00000001d9bc*/ s_nop           0x0
/*00000001d9c0*/ s_nop           0x0
/*00000001d9c4*/ s_nop           0x0
/*00000001d9c8*/ s_nop           0x0
/*00000001d9cc*/ s_nop           0x0
/*00000001d9d0*/ s_nop           0x0
/*00000001d9d4*/ s_nop           0x0
/*00000001d9d8*/ s_nop           0x0
/*00000001d9dc*/ s_nop           0x0
/*00000001d9e0*/ s_nop           0x0
/*00000001d9e4*/ s_nop           0x0
/*00000001d9e8*/ s_nop           0x0
/*00000001d9ec*/ s_nop           0x0
/*00000001d9f0*/ s_nop           0x0
/*00000001d9f4*/ s_nop           0x0
/*00000001d9f8*/ s_nop           0x0
/*00000001d9fc*/ s_nop           0x0
subtract_char_get_global_size_get_local_id:
.skip 256
/*00000001db00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001db08*/ s_waitcnt       lgkmcnt(0)
/*00000001db0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001db14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001db1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001db24*/ s_lshl_b32      s3, s8, 4
/*00000001db28*/ s_lshl_b32      s6, s9, 1
/*00000001db2c*/ s_lshl_b32      s7, s10, 1
/*00000001db30*/ s_waitcnt       lgkmcnt(0)
/*00000001db34*/ v_add3_u32      v5, s1, s7, v2
/*00000001db3c*/ v_add3_u32      v3, s0, s3, v0
/*00000001db44*/ v_add3_u32      v4, s2, s6, v1
/*00000001db4c*/ v_sub_nc_u16    v7, s12, v0
/*00000001db54*/ v_sub_nc_u16    v10, s13, v1
/*00000001db5c*/ v_sub_nc_u16    v11, s14, v2
/*00000001db64*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001db6c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001db74*/ v_add_co_u32    v3, s[0:1], s4, v4
/*00000001db7c*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001db84*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000001db8c*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001db94*/ global_store_byte v[0:1], v7, off
/*00000001db9c*/ global_store_byte v[3:4], v10, off
/*00000001dba4*/ global_store_byte v[5:6], v11, off
/*00000001dbac*/ s_endpgm
/*00000001dbb0*/ s_nop           0x0
/*00000001dbb4*/ s_nop           0x0
/*00000001dbb8*/ s_nop           0x0
/*00000001dbbc*/ s_nop           0x0
/*00000001dbc0*/ s_nop           0x0
/*00000001dbc4*/ s_nop           0x0
/*00000001dbc8*/ s_nop           0x0
/*00000001dbcc*/ s_nop           0x0
/*00000001dbd0*/ s_nop           0x0
/*00000001dbd4*/ s_nop           0x0
/*00000001dbd8*/ s_nop           0x0
/*00000001dbdc*/ s_nop           0x0
/*00000001dbe0*/ s_nop           0x0
/*00000001dbe4*/ s_nop           0x0
/*00000001dbe8*/ s_nop           0x0
/*00000001dbec*/ s_nop           0x0
/*00000001dbf0*/ s_nop           0x0
/*00000001dbf4*/ s_nop           0x0
/*00000001dbf8*/ s_nop           0x0
/*00000001dbfc*/ s_nop           0x0
subtract_char_get_num_groups_get_local_id:
.skip 256
/*00000001dd00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001dd08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001dd10*/ s_waitcnt       lgkmcnt(0)
/*00000001dd14*/ s_clause        0x1
/*00000001dd18*/ s_load_dword    s3, s[6:7], 0x20
/*00000001dd20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001dd28*/ s_lshl_b32      s7, s8, 1
/*00000001dd2c*/ s_lshl_b32      s8, s9, 1
/*00000001dd30*/ s_lshl_b32      s9, s10, 2
/*00000001dd34*/ s_and_b32       s11, s0, -2
/*00000001dd38*/ v_add3_u32      v3, s12, s7, v0
/*00000001dd40*/ v_cmp_gt_u32    s[6:7], s0, s11
/*00000001dd48*/ s_lshr_b32      s0, s0, 1
/*00000001dd4c*/ s_waitcnt       lgkmcnt(0)
/*00000001dd50*/ v_add3_u32      v7, s3, s9, v2
/*00000001dd58*/ v_add3_u32      v5, s14, s8, v1
/*00000001dd60*/ s_cmpk_lg_u32   s6, 0x0
/*00000001dd64*/ s_addc_u32      s0, s0, 0
/*00000001dd68*/ s_and_b32       s6, s1, -2
/*00000001dd6c*/ v_sub_nc_u16    v10, s0, v0
/*00000001dd74*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000001dd7c*/ s_lshr_b32      s1, s1, 1
/*00000001dd80*/ s_cmpk_lg_u32   s6, 0x0
/*00000001dd84*/ v_add_co_u32    v3, s[6:7], s4, v3
/*00000001dd8c*/ s_addc_u32      s1, s1, 0
/*00000001dd90*/ s_and_b32       s3, s2, -4
/*00000001dd94*/ v_add_co_ci_u32 v4, s[6:7], s5, 0, s[6:7]
/*00000001dd9c*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000001dda4*/ s_lshr_b32      s2, s2, 2
/*00000001dda8*/ v_add_co_u32    v5, s[6:7], s4, v5
/*00000001ddb0*/ v_sub_nc_u16    v11, s1, v1
/*00000001ddb8*/ v_add_co_ci_u32 v6, s[6:7], s5, 0, s[6:7]
/*00000001ddc0*/ s_cmpk_lg_u32   s3, 0x0
/*00000001ddc4*/ s_addc_u32      s0, s2, 0
/*00000001ddc8*/ v_sub_nc_u16    v2, s0, v2
/*00000001ddd0*/ v_add_co_u32    v0, s[0:1], s4, v7
/*00000001ddd8*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001dde0*/ global_store_byte v[3:4], v10, off
/*00000001dde8*/ global_store_byte v[5:6], v11, off
/*00000001ddf0*/ global_store_byte v[0:1], v2, off
/*00000001ddf8*/ s_endpgm
/*00000001ddfc*/ s_nop           0x0
subtract_char_get_work_dim_get_local_id:
.skip 256
/*00000001df00*/ v_mov_b32       v3, s4
/*00000001df04*/ v_mov_b32       v4, s5
/*00000001df08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001df10*/ s_waitcnt       lgkmcnt(0)
/*00000001df14*/ s_clause        0x1
/*00000001df18*/ s_load_dword    s1, s[6:7], 0x20
/*00000001df20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001df28*/ s_lshl_b32      s3, s8, 1
/*00000001df2c*/ s_lshl_b32      s6, s9, 1
/*00000001df30*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*00000001df38*/ v_add3_u32      v3, s0, s3, v0
/*00000001df40*/ s_lshl_b32      s0, s10, 2
/*00000001df44*/ v_add3_u32      v5, s2, s6, v1
/*00000001df4c*/ s_waitcnt       lgkmcnt(0)
/*00000001df50*/ v_add3_u32      v7, s1, s0, v2
/*00000001df58*/ v_add_co_u32    v3, s[0:1], s4, v3
/*00000001df60*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001df68*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000001df70*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001df78*/ v_add_co_u32    v7, s[0:1], s4, v7
/*00000001df80*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000001df88*/ s_waitcnt       vmcnt(0)
/*00000001df8c*/ v_sub_nc_u16    v10, v15, v0
/*00000001df94*/ v_sub_nc_u16    v11, v15, v1
/*00000001df9c*/ v_sub_nc_u16    v2, v15, v2
/*00000001dfa4*/ global_store_byte v[3:4], v10, off
/*00000001dfac*/ global_store_byte v[5:6], v11, off
/*00000001dfb4*/ global_store_byte v[7:8], v2, off
/*00000001dfbc*/ s_endpgm
/*00000001dfc0*/ s_nop           0x0
/*00000001dfc4*/ s_nop           0x0
/*00000001dfc8*/ s_nop           0x0
/*00000001dfcc*/ s_nop           0x0
/*00000001dfd0*/ s_nop           0x0
/*00000001dfd4*/ s_nop           0x0
/*00000001dfd8*/ s_nop           0x0
/*00000001dfdc*/ s_nop           0x0
/*00000001dfe0*/ s_nop           0x0
/*00000001dfe4*/ s_nop           0x0
/*00000001dfe8*/ s_nop           0x0
/*00000001dfec*/ s_nop           0x0
/*00000001dff0*/ s_nop           0x0
/*00000001dff4*/ s_nop           0x0
/*00000001dff8*/ s_nop           0x0
/*00000001dffc*/ s_nop           0x0
subtract_char_x_get_group_id:
.skip 256
/*00000001e100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e108*/ s_waitcnt       lgkmcnt(0)
/*00000001e10c*/ s_clause        0x2
/*00000001e110*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e118*/ s_load_dword    s3, s[4:5], 0x8
/*00000001e120*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001e128*/ s_lshl_b32      s9, s6, 4
/*00000001e12c*/ s_lshl_b32      s10, s7, 1
/*00000001e130*/ s_lshl_b32      s11, s8, 1
/*00000001e134*/ s_waitcnt       lgkmcnt(0)
/*00000001e138*/ v_add3_u32      v4, s1, s11, v2
/*00000001e140*/ v_add3_u32      v0, s0, s9, v0
/*00000001e148*/ s_sub_i32       s0, s3, s6
/*00000001e14c*/ v_add3_u32      v3, s2, s10, v1
/*00000001e154*/ v_mov_b32       v6, s0
/*00000001e158*/ s_sub_i32       s1, s3, s7
/*00000001e15c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e164*/ v_mov_b32       v9, s1
/*00000001e168*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e170*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e178*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001e180*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e188*/ s_sub_i32       s0, s3, s8
/*00000001e18c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001e194*/ v_mov_b32       v11, s0
/*00000001e198*/ global_store_byte v[0:1], v6, off
/*00000001e1a0*/ global_store_byte v[2:3], v9, off
/*00000001e1a8*/ global_store_byte v[4:5], v11, off
/*00000001e1b0*/ s_endpgm
/*00000001e1b4*/ s_nop           0x0
/*00000001e1b8*/ s_nop           0x0
/*00000001e1bc*/ s_nop           0x0
/*00000001e1c0*/ s_nop           0x0
/*00000001e1c4*/ s_nop           0x0
/*00000001e1c8*/ s_nop           0x0
/*00000001e1cc*/ s_nop           0x0
/*00000001e1d0*/ s_nop           0x0
/*00000001e1d4*/ s_nop           0x0
/*00000001e1d8*/ s_nop           0x0
/*00000001e1dc*/ s_nop           0x0
/*00000001e1e0*/ s_nop           0x0
/*00000001e1e4*/ s_nop           0x0
/*00000001e1e8*/ s_nop           0x0
/*00000001e1ec*/ s_nop           0x0
/*00000001e1f0*/ s_nop           0x0
/*00000001e1f4*/ s_nop           0x0
/*00000001e1f8*/ s_nop           0x0
/*00000001e1fc*/ s_nop           0x0
subtract_char_get_global_offset_get_group_id:
.skip 256
/*00000001e300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e308*/ s_waitcnt       lgkmcnt(0)
/*00000001e30c*/ s_clause        0x1
/*00000001e310*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e320*/ s_lshl_b32      s3, s6, 1
/*00000001e324*/ s_lshl_b32      s9, s7, 4
/*00000001e328*/ s_lshl_b32      s10, s8, 1
/*00000001e32c*/ v_add3_u32      v0, s0, s3, v0
/*00000001e334*/ v_add3_u32      v3, s2, s9, v1
/*00000001e33c*/ s_sub_i32       s0, s0, s6
/*00000001e340*/ s_waitcnt       lgkmcnt(0)
/*00000001e344*/ v_add3_u32      v4, s1, s10, v2
/*00000001e34c*/ v_mov_b32       v6, s0
/*00000001e350*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e358*/ s_sub_i32       s2, s2, s7
/*00000001e35c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e364*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e36c*/ v_mov_b32       v9, s2
/*00000001e370*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e378*/ s_sub_i32       s0, s1, s8
/*00000001e37c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001e384*/ v_mov_b32       v11, s0
/*00000001e388*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001e390*/ global_store_byte v[0:1], v6, off
/*00000001e398*/ global_store_byte v[2:3], v9, off
/*00000001e3a0*/ global_store_byte v[4:5], v11, off
/*00000001e3a8*/ s_endpgm
/*00000001e3ac*/ s_nop           0x0
/*00000001e3b0*/ s_nop           0x0
/*00000001e3b4*/ s_nop           0x0
/*00000001e3b8*/ s_nop           0x0
/*00000001e3bc*/ s_nop           0x0
/*00000001e3c0*/ s_nop           0x0
/*00000001e3c4*/ s_nop           0x0
/*00000001e3c8*/ s_nop           0x0
/*00000001e3cc*/ s_nop           0x0
/*00000001e3d0*/ s_nop           0x0
/*00000001e3d4*/ s_nop           0x0
/*00000001e3d8*/ s_nop           0x0
/*00000001e3dc*/ s_nop           0x0
/*00000001e3e0*/ s_nop           0x0
/*00000001e3e4*/ s_nop           0x0
/*00000001e3e8*/ s_nop           0x0
/*00000001e3ec*/ s_nop           0x0
/*00000001e3f0*/ s_nop           0x0
/*00000001e3f4*/ s_nop           0x0
/*00000001e3f8*/ s_nop           0x0
/*00000001e3fc*/ s_nop           0x0
subtract_char_get_local_id_get_group_id:
.skip 256
/*00000001e500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e508*/ s_waitcnt       lgkmcnt(0)
/*00000001e50c*/ s_clause        0x1
/*00000001e510*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e520*/ s_lshl_b32      s3, s6, 3
/*00000001e524*/ v_sub_nc_u16    v6, v0, s6
/*00000001e52c*/ s_lshl_b32      s9, s7, 2
/*00000001e530*/ s_lshl_b32      s10, s8, 1
/*00000001e534*/ v_sub_nc_u16    v9, v1, s7
/*00000001e53c*/ v_sub_nc_u16    v11, v2, s8
/*00000001e544*/ v_add3_u32      v0, s0, s3, v0
/*00000001e54c*/ v_add3_u32      v3, s2, s9, v1
/*00000001e554*/ s_waitcnt       lgkmcnt(0)
/*00000001e558*/ v_add3_u32      v4, s1, s10, v2
/*00000001e560*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e568*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e570*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e578*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e580*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001e588*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e590*/ global_store_byte v[0:1], v6, off
/*00000001e598*/ global_store_byte v[2:3], v9, off
/*00000001e5a0*/ global_store_byte v[4:5], v11, off
/*00000001e5a8*/ s_endpgm
/*00000001e5ac*/ s_nop           0x0
/*00000001e5b0*/ s_nop           0x0
/*00000001e5b4*/ s_nop           0x0
/*00000001e5b8*/ s_nop           0x0
/*00000001e5bc*/ s_nop           0x0
/*00000001e5c0*/ s_nop           0x0
/*00000001e5c4*/ s_nop           0x0
/*00000001e5c8*/ s_nop           0x0
/*00000001e5cc*/ s_nop           0x0
/*00000001e5d0*/ s_nop           0x0
/*00000001e5d4*/ s_nop           0x0
/*00000001e5d8*/ s_nop           0x0
/*00000001e5dc*/ s_nop           0x0
/*00000001e5e0*/ s_nop           0x0
/*00000001e5e4*/ s_nop           0x0
/*00000001e5e8*/ s_nop           0x0
/*00000001e5ec*/ s_nop           0x0
/*00000001e5f0*/ s_nop           0x0
/*00000001e5f4*/ s_nop           0x0
/*00000001e5f8*/ s_nop           0x0
/*00000001e5fc*/ s_nop           0x0
subtract_char_get_group_id_get_group_id:
.skip 256
/*00000001e700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e708*/ s_waitcnt       lgkmcnt(0)
/*00000001e70c*/ s_clause        0x1
/*00000001e710*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e720*/ s_lshl_b32      s3, s6, 1
/*00000001e724*/ s_lshl_b32      s6, s7, 4
/*00000001e728*/ v_mov_b32       v6, 0
/*00000001e72c*/ v_add3_u32      v0, s0, s3, v0
/*00000001e734*/ s_lshl_b32      s0, s8, 1
/*00000001e738*/ v_add3_u32      v3, s2, s6, v1
/*00000001e740*/ s_waitcnt       lgkmcnt(0)
/*00000001e744*/ v_add3_u32      v4, s1, s0, v2
/*00000001e74c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e754*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e75c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*00000001e764*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000001e76c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001e774*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e77c*/ global_store_byte v[0:1], v6, off
/*00000001e784*/ global_store_byte v[7:8], v6, off
/*00000001e78c*/ global_store_byte v[4:5], v6, off
/*00000001e794*/ s_endpgm
/*00000001e798*/ s_nop           0x0
/*00000001e79c*/ s_nop           0x0
/*00000001e7a0*/ s_nop           0x0
/*00000001e7a4*/ s_nop           0x0
/*00000001e7a8*/ s_nop           0x0
/*00000001e7ac*/ s_nop           0x0
/*00000001e7b0*/ s_nop           0x0
/*00000001e7b4*/ s_nop           0x0
/*00000001e7b8*/ s_nop           0x0
/*00000001e7bc*/ s_nop           0x0
/*00000001e7c0*/ s_nop           0x0
/*00000001e7c4*/ s_nop           0x0
/*00000001e7c8*/ s_nop           0x0
/*00000001e7cc*/ s_nop           0x0
/*00000001e7d0*/ s_nop           0x0
/*00000001e7d4*/ s_nop           0x0
/*00000001e7d8*/ s_nop           0x0
/*00000001e7dc*/ s_nop           0x0
/*00000001e7e0*/ s_nop           0x0
/*00000001e7e4*/ s_nop           0x0
/*00000001e7e8*/ s_nop           0x0
/*00000001e7ec*/ s_nop           0x0
/*00000001e7f0*/ s_nop           0x0
/*00000001e7f4*/ s_nop           0x0
/*00000001e7f8*/ s_nop           0x0
/*00000001e7fc*/ s_nop           0x0
subtract_char_get_local_size_get_group_id:
.skip 256
/*00000001e900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e908*/ s_waitcnt       lgkmcnt(0)
/*00000001e90c*/ s_clause        0x1
/*00000001e910*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e920*/ s_lshl_b32      s3, s6, 1
/*00000001e924*/ s_lshl_b32      s9, s7, 1
/*00000001e928*/ s_lshl_b32      s10, s8, 2
/*00000001e92c*/ s_sub_i32       s6, 2, s6
/*00000001e930*/ s_sub_i32       s7, 2, s7
/*00000001e934*/ v_mov_b32       v6, s6
/*00000001e938*/ v_mov_b32       v9, s7
/*00000001e93c*/ v_add3_u32      v0, s0, s3, v0
/*00000001e944*/ v_add3_u32      v3, s2, s9, v1
/*00000001e94c*/ s_waitcnt       lgkmcnt(0)
/*00000001e950*/ v_add3_u32      v4, s1, s10, v2
/*00000001e958*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e960*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e968*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e970*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001e978*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e980*/ s_sub_i32       s0, 4, s8
/*00000001e984*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001e98c*/ v_mov_b32       v11, s0
/*00000001e990*/ global_store_byte v[0:1], v6, off
/*00000001e998*/ global_store_byte v[2:3], v9, off
/*00000001e9a0*/ global_store_byte v[4:5], v11, off
/*00000001e9a8*/ s_endpgm
/*00000001e9ac*/ s_nop           0x0
/*00000001e9b0*/ s_nop           0x0
/*00000001e9b4*/ s_nop           0x0
/*00000001e9b8*/ s_nop           0x0
/*00000001e9bc*/ s_nop           0x0
/*00000001e9c0*/ s_nop           0x0
/*00000001e9c4*/ s_nop           0x0
/*00000001e9c8*/ s_nop           0x0
/*00000001e9cc*/ s_nop           0x0
/*00000001e9d0*/ s_nop           0x0
/*00000001e9d4*/ s_nop           0x0
/*00000001e9d8*/ s_nop           0x0
/*00000001e9dc*/ s_nop           0x0
/*00000001e9e0*/ s_nop           0x0
/*00000001e9e4*/ s_nop           0x0
/*00000001e9e8*/ s_nop           0x0
/*00000001e9ec*/ s_nop           0x0
/*00000001e9f0*/ s_nop           0x0
/*00000001e9f4*/ s_nop           0x0
/*00000001e9f8*/ s_nop           0x0
/*00000001e9fc*/ s_nop           0x0
subtract_char_get_global_id_get_group_id:
.skip 256
/*00000001eb00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001eb08*/ s_waitcnt       lgkmcnt(0)
/*00000001eb0c*/ s_clause        0x1
/*00000001eb10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001eb18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001eb20*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001eb28*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001eb30*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001eb38*/ v_subrev_nc_u32 v3, s6, v0
/*00000001eb3c*/ v_add_nc_u32    v4, s2, v1
/*00000001eb40*/ v_add_nc_u32    v6, s0, v3
/*00000001eb44*/ s_waitcnt       lgkmcnt(0)
/*00000001eb48*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001eb50*/ v_add_nc_u32    v5, s1, v2
/*00000001eb54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001eb5c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001eb64*/ v_subrev_nc_u32 v9, s7, v4
/*00000001eb68*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001eb70*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001eb78*/ v_subrev_nc_u32 v11, s8, v5
/*00000001eb7c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001eb84*/ global_store_byte v[0:1], v6, off
/*00000001eb8c*/ global_store_byte v[2:3], v9, off
/*00000001eb94*/ global_store_byte v[4:5], v11, off
/*00000001eb9c*/ s_endpgm
/*00000001eba0*/ s_nop           0x0
/*00000001eba4*/ s_nop           0x0
/*00000001eba8*/ s_nop           0x0
/*00000001ebac*/ s_nop           0x0
/*00000001ebb0*/ s_nop           0x0
/*00000001ebb4*/ s_nop           0x0
/*00000001ebb8*/ s_nop           0x0
/*00000001ebbc*/ s_nop           0x0
/*00000001ebc0*/ s_nop           0x0
/*00000001ebc4*/ s_nop           0x0
/*00000001ebc8*/ s_nop           0x0
/*00000001ebcc*/ s_nop           0x0
/*00000001ebd0*/ s_nop           0x0
/*00000001ebd4*/ s_nop           0x0
/*00000001ebd8*/ s_nop           0x0
/*00000001ebdc*/ s_nop           0x0
/*00000001ebe0*/ s_nop           0x0
/*00000001ebe4*/ s_nop           0x0
/*00000001ebe8*/ s_nop           0x0
/*00000001ebec*/ s_nop           0x0
/*00000001ebf0*/ s_nop           0x0
/*00000001ebf4*/ s_nop           0x0
/*00000001ebf8*/ s_nop           0x0
/*00000001ebfc*/ s_nop           0x0
subtract_char_get_global_size_get_group_id:
.skip 256
/*00000001ed00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001ed08*/ s_waitcnt       lgkmcnt(0)
/*00000001ed0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001ed14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001ed1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001ed24*/ s_lshl_b32      s3, s8, 4
/*00000001ed28*/ s_lshl_b32      s6, s9, 1
/*00000001ed2c*/ s_lshl_b32      s7, s10, 1
/*00000001ed30*/ s_waitcnt       lgkmcnt(0)
/*00000001ed34*/ v_add3_u32      v4, s1, s7, v2
/*00000001ed3c*/ v_add3_u32      v0, s0, s3, v0
/*00000001ed44*/ s_sub_i32       s0, s12, s8
/*00000001ed48*/ v_add3_u32      v3, s2, s6, v1
/*00000001ed50*/ v_mov_b32       v6, s0
/*00000001ed54*/ s_sub_i32       s1, s13, s9
/*00000001ed58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ed60*/ v_mov_b32       v9, s1
/*00000001ed64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ed6c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ed74*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ed7c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ed84*/ s_sub_i32       s0, s14, s10
/*00000001ed88*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ed90*/ v_mov_b32       v11, s0
/*00000001ed94*/ global_store_byte v[0:1], v6, off
/*00000001ed9c*/ global_store_byte v[2:3], v9, off
/*00000001eda4*/ global_store_byte v[4:5], v11, off
/*00000001edac*/ s_endpgm
/*00000001edb0*/ s_nop           0x0
/*00000001edb4*/ s_nop           0x0
/*00000001edb8*/ s_nop           0x0
/*00000001edbc*/ s_nop           0x0
/*00000001edc0*/ s_nop           0x0
/*00000001edc4*/ s_nop           0x0
/*00000001edc8*/ s_nop           0x0
/*00000001edcc*/ s_nop           0x0
/*00000001edd0*/ s_nop           0x0
/*00000001edd4*/ s_nop           0x0
/*00000001edd8*/ s_nop           0x0
/*00000001eddc*/ s_nop           0x0
/*00000001ede0*/ s_nop           0x0
/*00000001ede4*/ s_nop           0x0
/*00000001ede8*/ s_nop           0x0
/*00000001edec*/ s_nop           0x0
/*00000001edf0*/ s_nop           0x0
/*00000001edf4*/ s_nop           0x0
/*00000001edf8*/ s_nop           0x0
/*00000001edfc*/ s_nop           0x0
subtract_char_get_num_groups_get_group_id:
.skip 256
/*00000001ef00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001ef08*/ s_clause        0x2
/*00000001ef0c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001ef14*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001ef1c*/ s_load_dword    s6, s[6:7], 0x20
/*00000001ef24*/ s_lshl_b32      s7, s8, 1
/*00000001ef28*/ s_lshl_b32      s11, s9, 1
/*00000001ef2c*/ s_waitcnt       lgkmcnt(0)
/*00000001ef30*/ s_lshl_b32      s13, s10, 2
/*00000001ef34*/ s_and_b32       s3, s0, -2
/*00000001ef38*/ v_add3_u32      v0, s12, s7, v0
/*00000001ef40*/ v_cmp_gt_u32    s[3:4], s0, s3
/*00000001ef48*/ s_lshr_b32      s0, s0, 1
/*00000001ef4c*/ v_add3_u32      v3, s14, s11, v1
/*00000001ef54*/ v_add3_u32      v4, s6, s13, v2
/*00000001ef5c*/ v_add_co_u32    v0, s[6:7], s4, v0
/*00000001ef64*/ s_cmpk_lg_u32   s3, 0x0
/*00000001ef68*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*00000001ef70*/ s_addc_u32      s0, s0, 0
/*00000001ef74*/ s_and_b32       s3, s1, -2
/*00000001ef78*/ v_cmp_gt_u32    s[3:4], s1, s3
/*00000001ef80*/ s_lshr_b32      s1, s1, 1
/*00000001ef84*/ s_cmpk_lg_u32   s3, 0x0
/*00000001ef88*/ s_addc_u32      s1, s1, 0
/*00000001ef8c*/ s_and_b32       s3, s2, -4
/*00000001ef90*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000001ef98*/ s_lshr_b32      s2, s2, 2
/*00000001ef9c*/ s_cmpk_lg_u32   s3, 0x0
/*00000001efa0*/ v_add_co_u32    v2, s[3:4], s4, v3
/*00000001efa8*/ s_addc_u32      s2, s2, 0
/*00000001efac*/ s_sub_i32       s0, s0, s8
/*00000001efb0*/ s_sub_i32       s1, s1, s9
/*00000001efb4*/ v_mov_b32       v6, s0
/*00000001efb8*/ v_mov_b32       v9, s1
/*00000001efbc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001efc4*/ s_sub_i32       s0, s2, s10
/*00000001efc8*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*00000001efd0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001efd8*/ v_mov_b32       v11, s0
/*00000001efdc*/ global_store_byte v[0:1], v6, off
/*00000001efe4*/ global_store_byte v[2:3], v9, off
/*00000001efec*/ global_store_byte v[4:5], v11, off
/*00000001eff4*/ s_endpgm
/*00000001eff8*/ s_nop           0x0
/*00000001effc*/ s_nop           0x0
subtract_char_get_work_dim_get_group_id:
.skip 256
/*00000001f100*/ v_mov_b32       v3, s4
/*00000001f104*/ v_mov_b32       v4, s5
/*00000001f108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001f110*/ s_waitcnt       lgkmcnt(0)
/*00000001f114*/ s_clause        0x1
/*00000001f118*/ s_load_dword    s1, s[6:7], 0x20
/*00000001f120*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001f128*/ s_lshl_b32      s3, s8, 1
/*00000001f12c*/ s_lshl_b32      s6, s9, 1
/*00000001f130*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*00000001f138*/ v_add3_u32      v0, s0, s3, v0
/*00000001f140*/ s_lshl_b32      s0, s10, 2
/*00000001f144*/ v_add3_u32      v3, s2, s6, v1
/*00000001f14c*/ s_waitcnt       lgkmcnt(0)
/*00000001f150*/ v_add3_u32      v4, s1, s0, v2
/*00000001f158*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f160*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f168*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f170*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f178*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f180*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f188*/ s_waitcnt       vmcnt(0)
/*00000001f18c*/ v_and_b32       v7, 0xffff, v6
/*00000001f194*/ v_subrev_nc_u32 v6, s10, v6
/*00000001f198*/ v_subrev_nc_u32 v11, s8, v7
/*00000001f19c*/ v_subrev_nc_u32 v9, s9, v7
/*00000001f1a0*/ global_store_byte v[0:1], v11, off
/*00000001f1a8*/ global_store_byte v[2:3], v9, off
/*00000001f1b0*/ global_store_byte v[4:5], v6, off
/*00000001f1b8*/ s_endpgm
/*00000001f1bc*/ s_nop           0x0
/*00000001f1c0*/ s_nop           0x0
/*00000001f1c4*/ s_nop           0x0
/*00000001f1c8*/ s_nop           0x0
/*00000001f1cc*/ s_nop           0x0
/*00000001f1d0*/ s_nop           0x0
/*00000001f1d4*/ s_nop           0x0
/*00000001f1d8*/ s_nop           0x0
/*00000001f1dc*/ s_nop           0x0
/*00000001f1e0*/ s_nop           0x0
/*00000001f1e4*/ s_nop           0x0
/*00000001f1e8*/ s_nop           0x0
/*00000001f1ec*/ s_nop           0x0
/*00000001f1f0*/ s_nop           0x0
/*00000001f1f4*/ s_nop           0x0
/*00000001f1f8*/ s_nop           0x0
/*00000001f1fc*/ s_nop           0x0
subtract_char_x_get_local_size:
.skip 256
/*00000001f300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f308*/ s_waitcnt       lgkmcnt(0)
/*00000001f30c*/ s_clause        0x2
/*00000001f310*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f318*/ s_load_dword    s3, s[4:5], 0x8
/*00000001f320*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001f328*/ s_lshl_b32      s6, s6, 4
/*00000001f32c*/ s_lshl_b32      s7, s7, 1
/*00000001f330*/ s_lshl_b32      s8, s8, 1
/*00000001f334*/ s_waitcnt       lgkmcnt(0)
/*00000001f338*/ v_add3_u32      v4, s1, s8, v2
/*00000001f340*/ v_add3_u32      v0, s0, s6, v0
/*00000001f348*/ s_add_i32       s0, s3, 0xf0
/*00000001f350*/ v_add3_u32      v3, s2, s7, v1
/*00000001f358*/ v_mov_b32       v7, s0
/*00000001f35c*/ v_add_nc_u16    v6, s3, -2
/*00000001f364*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f36c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f374*/ v_add_co_u32    v11, s[0:1], s4, v3
/*00000001f37c*/ v_add_co_ci_u32 v12, s[0:1], s5, 0, s[0:1]
/*00000001f384*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f38c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f394*/ global_store_byte v[0:1], v7, off
/*00000001f39c*/ global_store_byte v[11:12], v6, off
/*00000001f3a4*/ global_store_byte v[4:5], v6, off
/*00000001f3ac*/ s_endpgm
/*00000001f3b0*/ s_nop           0x0
/*00000001f3b4*/ s_nop           0x0
/*00000001f3b8*/ s_nop           0x0
/*00000001f3bc*/ s_nop           0x0
/*00000001f3c0*/ s_nop           0x0
/*00000001f3c4*/ s_nop           0x0
/*00000001f3c8*/ s_nop           0x0
/*00000001f3cc*/ s_nop           0x0
/*00000001f3d0*/ s_nop           0x0
/*00000001f3d4*/ s_nop           0x0
/*00000001f3d8*/ s_nop           0x0
/*00000001f3dc*/ s_nop           0x0
/*00000001f3e0*/ s_nop           0x0
/*00000001f3e4*/ s_nop           0x0
/*00000001f3e8*/ s_nop           0x0
/*00000001f3ec*/ s_nop           0x0
/*00000001f3f0*/ s_nop           0x0
/*00000001f3f4*/ s_nop           0x0
/*00000001f3f8*/ s_nop           0x0
/*00000001f3fc*/ s_nop           0x0
subtract_char_get_global_offset_get_local_size:
.skip 256
/*00000001f500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f508*/ s_waitcnt       lgkmcnt(0)
/*00000001f50c*/ s_clause        0x1
/*00000001f510*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f520*/ s_lshl_b32      s6, s6, 1
/*00000001f524*/ s_lshl_b32      s7, s7, 4
/*00000001f528*/ s_movk_i32      s3, 0xfe
/*00000001f52c*/ s_lshl_b32      s8, s8, 1
/*00000001f530*/ v_add3_u32      v0, s0, s6, v0
/*00000001f538*/ v_add3_u32      v3, s2, s7, v1
/*00000001f540*/ s_add_i32       s0, s0, s3
/*00000001f544*/ s_waitcnt       lgkmcnt(0)
/*00000001f548*/ v_add3_u32      v4, s1, s8, v2
/*00000001f550*/ v_mov_b32       v6, s0
/*00000001f554*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f55c*/ s_addk_i32      s2, 0xf0
/*00000001f560*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f568*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f570*/ v_mov_b32       v9, s2
/*00000001f574*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f57c*/ s_add_i32       s0, s1, s3
/*00000001f580*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001f588*/ v_mov_b32       v11, s0
/*00000001f58c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001f594*/ global_store_byte v[0:1], v6, off
/*00000001f59c*/ global_store_byte v[2:3], v9, off
/*00000001f5a4*/ global_store_byte v[4:5], v11, off
/*00000001f5ac*/ s_endpgm
/*00000001f5b0*/ s_nop           0x0
/*00000001f5b4*/ s_nop           0x0
/*00000001f5b8*/ s_nop           0x0
/*00000001f5bc*/ s_nop           0x0
/*00000001f5c0*/ s_nop           0x0
/*00000001f5c4*/ s_nop           0x0
/*00000001f5c8*/ s_nop           0x0
/*00000001f5cc*/ s_nop           0x0
/*00000001f5d0*/ s_nop           0x0
/*00000001f5d4*/ s_nop           0x0
/*00000001f5d8*/ s_nop           0x0
/*00000001f5dc*/ s_nop           0x0
/*00000001f5e0*/ s_nop           0x0
/*00000001f5e4*/ s_nop           0x0
/*00000001f5e8*/ s_nop           0x0
/*00000001f5ec*/ s_nop           0x0
/*00000001f5f0*/ s_nop           0x0
/*00000001f5f4*/ s_nop           0x0
/*00000001f5f8*/ s_nop           0x0
/*00000001f5fc*/ s_nop           0x0
subtract_char_get_local_id_get_local_size:
.skip 256
/*00000001f700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f708*/ s_waitcnt       lgkmcnt(0)
/*00000001f70c*/ s_clause        0x1
/*00000001f710*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f720*/ s_lshl_b32      s3, s6, 3
/*00000001f724*/ v_or_b32        v6, 0xf8, v0
/*00000001f72c*/ s_lshl_b32      s6, s7, 2
/*00000001f730*/ s_lshl_b32      s7, s8, 1
/*00000001f734*/ v_or_b32        v9, 0xfc, v1
/*00000001f73c*/ v_or_b32        v11, 0xfe, v2
/*00000001f744*/ v_add3_u32      v0, s0, s3, v0
/*00000001f74c*/ v_add3_u32      v3, s2, s6, v1
/*00000001f754*/ s_waitcnt       lgkmcnt(0)
/*00000001f758*/ v_add3_u32      v4, s1, s7, v2
/*00000001f760*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f768*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f770*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f778*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f780*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f788*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f790*/ global_store_byte v[0:1], v6, off
/*00000001f798*/ global_store_byte v[2:3], v9, off
/*00000001f7a0*/ global_store_byte v[4:5], v11, off
/*00000001f7a8*/ s_endpgm
/*00000001f7ac*/ s_nop           0x0
/*00000001f7b0*/ s_nop           0x0
/*00000001f7b4*/ s_nop           0x0
/*00000001f7b8*/ s_nop           0x0
/*00000001f7bc*/ s_nop           0x0
/*00000001f7c0*/ s_nop           0x0
/*00000001f7c4*/ s_nop           0x0
/*00000001f7c8*/ s_nop           0x0
/*00000001f7cc*/ s_nop           0x0
/*00000001f7d0*/ s_nop           0x0
/*00000001f7d4*/ s_nop           0x0
/*00000001f7d8*/ s_nop           0x0
/*00000001f7dc*/ s_nop           0x0
/*00000001f7e0*/ s_nop           0x0
/*00000001f7e4*/ s_nop           0x0
/*00000001f7e8*/ s_nop           0x0
/*00000001f7ec*/ s_nop           0x0
/*00000001f7f0*/ s_nop           0x0
/*00000001f7f4*/ s_nop           0x0
/*00000001f7f8*/ s_nop           0x0
/*00000001f7fc*/ s_nop           0x0
subtract_char_get_group_id_get_local_size:
.skip 256
/*00000001f900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f908*/ s_waitcnt       lgkmcnt(0)
/*00000001f90c*/ s_clause        0x1
/*00000001f910*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f920*/ s_lshl_b32      s9, s6, 1
/*00000001f924*/ s_lshl_b32      s10, s7, 4
/*00000001f928*/ s_lshl_b32      s11, s8, 1
/*00000001f92c*/ s_movk_i32      s3, 0xfe
/*00000001f930*/ s_addk_i32      s7, 0xf0
/*00000001f934*/ s_add_i32       s6, s6, s3
/*00000001f938*/ v_mov_b32       v9, s7
/*00000001f93c*/ v_mov_b32       v6, s6
/*00000001f940*/ v_add3_u32      v0, s0, s9, v0
/*00000001f948*/ v_add3_u32      v3, s2, s10, v1
/*00000001f950*/ s_waitcnt       lgkmcnt(0)
/*00000001f954*/ v_add3_u32      v4, s1, s11, v2
/*00000001f95c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f964*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f96c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f974*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001f97c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f984*/ s_add_i32       s0, s8, s3
/*00000001f988*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001f990*/ v_mov_b32       v11, s0
/*00000001f994*/ global_store_byte v[0:1], v6, off
/*00000001f99c*/ global_store_byte v[2:3], v9, off
/*00000001f9a4*/ global_store_byte v[4:5], v11, off
/*00000001f9ac*/ s_endpgm
/*00000001f9b0*/ s_nop           0x0
/*00000001f9b4*/ s_nop           0x0
/*00000001f9b8*/ s_nop           0x0
/*00000001f9bc*/ s_nop           0x0
/*00000001f9c0*/ s_nop           0x0
/*00000001f9c4*/ s_nop           0x0
/*00000001f9c8*/ s_nop           0x0
/*00000001f9cc*/ s_nop           0x0
/*00000001f9d0*/ s_nop           0x0
/*00000001f9d4*/ s_nop           0x0
/*00000001f9d8*/ s_nop           0x0
/*00000001f9dc*/ s_nop           0x0
/*00000001f9e0*/ s_nop           0x0
/*00000001f9e4*/ s_nop           0x0
/*00000001f9e8*/ s_nop           0x0
/*00000001f9ec*/ s_nop           0x0
/*00000001f9f0*/ s_nop           0x0
/*00000001f9f4*/ s_nop           0x0
/*00000001f9f8*/ s_nop           0x0
/*00000001f9fc*/ s_nop           0x0
subtract_char_get_local_size_get_local_size:
.skip 256
/*00000001fb00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001fb08*/ s_waitcnt       lgkmcnt(0)
/*00000001fb0c*/ s_clause        0x1
/*00000001fb10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001fb18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001fb20*/ s_lshl_b32      s3, s6, 1
/*00000001fb24*/ s_lshl_b32      s6, s7, 1
/*00000001fb28*/ v_mov_b32       v6, 0
/*00000001fb2c*/ v_add3_u32      v0, s0, s3, v0
/*00000001fb34*/ s_lshl_b32      s0, s8, 2
/*00000001fb38*/ v_add3_u32      v3, s2, s6, v1
/*00000001fb40*/ s_waitcnt       lgkmcnt(0)
/*00000001fb44*/ v_add3_u32      v4, s1, s0, v2
/*00000001fb4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001fb54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001fb5c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*00000001fb64*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000001fb6c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001fb74*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001fb7c*/ global_store_byte v[0:1], v6, off
/*00000001fb84*/ global_store_byte v[7:8], v6, off
/*00000001fb8c*/ global_store_byte v[4:5], v6, off
/*00000001fb94*/ s_endpgm
/*00000001fb98*/ s_nop           0x0
/*00000001fb9c*/ s_nop           0x0
/*00000001fba0*/ s_nop           0x0
/*00000001fba4*/ s_nop           0x0
/*00000001fba8*/ s_nop           0x0
/*00000001fbac*/ s_nop           0x0
/*00000001fbb0*/ s_nop           0x0
/*00000001fbb4*/ s_nop           0x0
/*00000001fbb8*/ s_nop           0x0
/*00000001fbbc*/ s_nop           0x0
/*00000001fbc0*/ s_nop           0x0
/*00000001fbc4*/ s_nop           0x0
/*00000001fbc8*/ s_nop           0x0
/*00000001fbcc*/ s_nop           0x0
/*00000001fbd0*/ s_nop           0x0
/*00000001fbd4*/ s_nop           0x0
/*00000001fbd8*/ s_nop           0x0
/*00000001fbdc*/ s_nop           0x0
/*00000001fbe0*/ s_nop           0x0
/*00000001fbe4*/ s_nop           0x0
/*00000001fbe8*/ s_nop           0x0
/*00000001fbec*/ s_nop           0x0
/*00000001fbf0*/ s_nop           0x0
/*00000001fbf4*/ s_nop           0x0
/*00000001fbf8*/ s_nop           0x0
/*00000001fbfc*/ s_nop           0x0
subtract_char_get_global_id_get_local_size:
.skip 256
/*00000001fd00*/ s_clause        0x2
/*00000001fd04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001fd0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000001fd14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001fd1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001fd24*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001fd2c*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001fd34*/ s_waitcnt       lgkmcnt(0)
/*00000001fd38*/ v_add_nc_u32    v3, s0, v0
/*00000001fd3c*/ v_add_co_u32    v4, s[0:1], s2, v1
/*00000001fd44*/ v_add_co_u32    v5, s[0:1], s10, v2
/*00000001fd4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001fd54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001fd5c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001fd64*/ v_add_nc_u16    v6, v3, -2
/*00000001fd6c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001fd74*/ v_add_nc_u16    v9, v4, -2
/*00000001fd7c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001fd84*/ v_add_nc_u16    v11, v5, -4
/*00000001fd8c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001fd94*/ global_store_byte v[0:1], v6, off
/*00000001fd9c*/ global_store_byte v[2:3], v9, off
/*00000001fda4*/ global_store_byte v[4:5], v11, off
/*00000001fdac*/ s_endpgm
/*00000001fdb0*/ s_nop           0x0
/*00000001fdb4*/ s_nop           0x0
/*00000001fdb8*/ s_nop           0x0
/*00000001fdbc*/ s_nop           0x0
/*00000001fdc0*/ s_nop           0x0
/*00000001fdc4*/ s_nop           0x0
/*00000001fdc8*/ s_nop           0x0
/*00000001fdcc*/ s_nop           0x0
/*00000001fdd0*/ s_nop           0x0
/*00000001fdd4*/ s_nop           0x0
/*00000001fdd8*/ s_nop           0x0
/*00000001fddc*/ s_nop           0x0
/*00000001fde0*/ s_nop           0x0
/*00000001fde4*/ s_nop           0x0
/*00000001fde8*/ s_nop           0x0
/*00000001fdec*/ s_nop           0x0
/*00000001fdf0*/ s_nop           0x0
/*00000001fdf4*/ s_nop           0x0
/*00000001fdf8*/ s_nop           0x0
/*00000001fdfc*/ s_nop           0x0
subtract_char_get_global_size_get_local_size:
.skip 256
/*00000001ff00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001ff08*/ s_waitcnt       lgkmcnt(0)
/*00000001ff0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001ff14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001ff1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001ff24*/ s_lshl_b32      s6, s8, 4
/*00000001ff28*/ s_lshl_b32      s7, s9, 1
/*00000001ff2c*/ s_lshl_b32      s8, s10, 1
/*00000001ff30*/ s_movk_i32      s3, 0xfe
/*00000001ff34*/ s_waitcnt       lgkmcnt(0)
/*00000001ff38*/ v_add3_u32      v4, s1, s8, v2
/*00000001ff40*/ v_add3_u32      v0, s0, s6, v0
/*00000001ff48*/ s_add_i32       s0, s12, 0xf0
/*00000001ff50*/ v_add3_u32      v3, s2, s7, v1
/*00000001ff58*/ v_mov_b32       v6, s0
/*00000001ff5c*/ s_add_i32       s1, s13, s3
/*00000001ff60*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ff68*/ v_mov_b32       v9, s1
/*00000001ff6c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ff74*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ff7c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ff84*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ff8c*/ s_add_i32       s0, s14, s3
/*00000001ff90*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ff98*/ v_mov_b32       v11, s0
/*00000001ff9c*/ global_store_byte v[0:1], v6, off
/*00000001ffa4*/ global_store_byte v[2:3], v9, off
/*00000001ffac*/ global_store_byte v[4:5], v11, off
/*00000001ffb4*/ s_endpgm
/*00000001ffb8*/ s_nop           0x0
/*00000001ffbc*/ s_nop           0x0
/*00000001ffc0*/ s_nop           0x0
/*00000001ffc4*/ s_nop           0x0
/*00000001ffc8*/ s_nop           0x0
/*00000001ffcc*/ s_nop           0x0
/*00000001ffd0*/ s_nop           0x0
/*00000001ffd4*/ s_nop           0x0
/*00000001ffd8*/ s_nop           0x0
/*00000001ffdc*/ s_nop           0x0
/*00000001ffe0*/ s_nop           0x0
/*00000001ffe4*/ s_nop           0x0
/*00000001ffe8*/ s_nop           0x0
/*00000001ffec*/ s_nop           0x0
/*00000001fff0*/ s_nop           0x0
/*00000001fff4*/ s_nop           0x0
/*00000001fff8*/ s_nop           0x0
/*00000001fffc*/ s_nop           0x0
subtract_char_get_num_groups_get_local_size:
.skip 256
/*000000020100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000020108*/ s_waitcnt       lgkmcnt(0)
/*00000002010c*/ s_load_dword    s1, s[6:7], 0x20
/*000000020114*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002011c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000020124*/ s_lshl_b32      s6, s8, 1
/*000000020128*/ s_lshl_b32      s8, s10, 2
/*00000002012c*/ s_lshl_b32      s7, s9, 1
/*000000020130*/ s_movk_i32      s3, 0xfe
/*000000020134*/ s_waitcnt       lgkmcnt(0)
/*000000020138*/ v_add3_u32      v4, s1, s8, v2
/*000000020140*/ s_and_b32       s1, s12, -2
/*000000020144*/ v_add3_u32      v0, s0, s6, v0
/*00000002014c*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000020154*/ s_and_b32       s6, s13, -2
/*000000020158*/ v_add3_u32      v3, s2, s7, v1
/*000000020160*/ v_cmp_gt_u32    s[6:7], s13, s6
/*000000020168*/ s_lshr_b32      s0, s12, 1
/*00000002016c*/ s_lshr_b32      s2, s13, 1
/*000000020170*/ s_lshr_b32      s7, s14, 2
/*000000020174*/ s_and_b32       s8, s14, -4
/*000000020178*/ s_cmpk_lg_u32   s1, 0x0
/*00000002017c*/ v_cmp_gt_u32    s[1:2], s14, s8
/*000000020184*/ s_addc_u32      s0, s0, s3
/*000000020188*/ s_cmpk_lg_u32   s6, 0x0
/*00000002018c*/ v_mov_b32       v6, s0
/*000000020190*/ s_addc_u32      s0, s2, s3
/*000000020194*/ v_add_co_u32    v0, s[8:9], s4, v0
/*00000002019c*/ s_cmpk_lg_u32   s1, 0x0
/*0000000201a0*/ v_add_co_u32    v2, s[2:3], s4, v3
/*0000000201a8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000201b0*/ v_mov_b32       v9, s0
/*0000000201b4*/ s_addc_u32      s0, s7, 0xfc
/*0000000201bc*/ v_add_co_ci_u32 v1, s[8:9], s5, 0, s[8:9]
/*0000000201c4*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*0000000201cc*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000201d4*/ v_mov_b32       v11, s0
/*0000000201d8*/ global_store_byte v[0:1], v6, off
/*0000000201e0*/ global_store_byte v[2:3], v9, off
/*0000000201e8*/ global_store_byte v[4:5], v11, off
/*0000000201f0*/ s_endpgm
/*0000000201f4*/ s_nop           0x0
/*0000000201f8*/ s_nop           0x0
/*0000000201fc*/ s_nop           0x0
subtract_char_get_work_dim_get_local_size:
.skip 256
/*000000020300*/ v_mov_b32       v3, s4
/*000000020304*/ v_mov_b32       v4, s5
/*000000020308*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000020310*/ s_waitcnt       lgkmcnt(0)
/*000000020314*/ s_clause        0x1
/*000000020318*/ s_load_dword    s1, s[6:7], 0x20
/*000000020320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000020328*/ s_lshl_b32      s3, s8, 1
/*00000002032c*/ s_lshl_b32      s6, s9, 1
/*000000020330*/ global_load_ubyte v6, v[3:4], off inst_offset:2
/*000000020338*/ v_add3_u32      v0, s0, s3, v0
/*000000020340*/ s_lshl_b32      s0, s10, 2
/*000000020344*/ v_add3_u32      v3, s2, s6, v1
/*00000002034c*/ s_waitcnt       lgkmcnt(0)
/*000000020350*/ v_add3_u32      v4, s1, s0, v2
/*000000020358*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020360*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020368*/ v_add_co_u32    v9, s[0:1], s4, v3
/*000000020370*/ v_add_co_ci_u32 v10, s[0:1], s5, 0, s[0:1]
/*000000020378*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020380*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020388*/ s_waitcnt       vmcnt(0)
/*00000002038c*/ v_add_nc_u16    v7, v6, -2
/*000000020394*/ v_add_nc_u32    v6, 0xfc, v6
/*00000002039c*/ global_store_byte v[0:1], v7, off
/*0000000203a4*/ global_store_byte v[9:10], v7, off
/*0000000203ac*/ global_store_byte v[4:5], v6, off
/*0000000203b4*/ s_endpgm
/*0000000203b8*/ s_nop           0x0
/*0000000203bc*/ s_nop           0x0
/*0000000203c0*/ s_nop           0x0
/*0000000203c4*/ s_nop           0x0
/*0000000203c8*/ s_nop           0x0
/*0000000203cc*/ s_nop           0x0
/*0000000203d0*/ s_nop           0x0
/*0000000203d4*/ s_nop           0x0
/*0000000203d8*/ s_nop           0x0
/*0000000203dc*/ s_nop           0x0
/*0000000203e0*/ s_nop           0x0
/*0000000203e4*/ s_nop           0x0
/*0000000203e8*/ s_nop           0x0
/*0000000203ec*/ s_nop           0x0
/*0000000203f0*/ s_nop           0x0
/*0000000203f4*/ s_nop           0x0
/*0000000203f8*/ s_nop           0x0
/*0000000203fc*/ s_nop           0x0
subtract_char_x_get_global_id:
.skip 256
/*000000020500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020508*/ s_waitcnt       lgkmcnt(0)
/*00000002050c*/ s_clause        0x2
/*000000020510*/ s_load_dword    s1, s[4:5], 0x20
/*000000020518*/ s_load_dword    s3, s[4:5], 0x8
/*000000020520*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000020528*/ v_lshl_or_b32   v0, s6, 4, v0
/*000000020530*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000020538*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000020540*/ s_waitcnt       lgkmcnt(0)
/*000000020544*/ v_add_nc_u32    v4, s1, v2
/*000000020548*/ v_add_nc_u32    v0, s0, v0
/*00000002054c*/ v_add_nc_u32    v3, s2, v1
/*000000020550*/ v_sub_nc_u32    v11, s3, v4
/*000000020554*/ v_sub_nc_u32    v6, s3, v0
/*000000020558*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020560*/ v_sub_nc_u32    v9, s3, v3
/*000000020564*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002056c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020574*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000002057c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020584*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000002058c*/ global_store_byte v[0:1], v6, off
/*000000020594*/ global_store_byte v[2:3], v9, off
/*00000002059c*/ global_store_byte v[4:5], v11, off
/*0000000205a4*/ s_endpgm
/*0000000205a8*/ s_nop           0x0
/*0000000205ac*/ s_nop           0x0
/*0000000205b0*/ s_nop           0x0
/*0000000205b4*/ s_nop           0x0
/*0000000205b8*/ s_nop           0x0
/*0000000205bc*/ s_nop           0x0
/*0000000205c0*/ s_nop           0x0
/*0000000205c4*/ s_nop           0x0
/*0000000205c8*/ s_nop           0x0
/*0000000205cc*/ s_nop           0x0
/*0000000205d0*/ s_nop           0x0
/*0000000205d4*/ s_nop           0x0
/*0000000205d8*/ s_nop           0x0
/*0000000205dc*/ s_nop           0x0
/*0000000205e0*/ s_nop           0x0
/*0000000205e4*/ s_nop           0x0
/*0000000205e8*/ s_nop           0x0
/*0000000205ec*/ s_nop           0x0
/*0000000205f0*/ s_nop           0x0
/*0000000205f4*/ s_nop           0x0
/*0000000205f8*/ s_nop           0x0
/*0000000205fc*/ s_nop           0x0
subtract_char_get_global_offset_get_global_id:
.skip 256
/*000000020700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020708*/ s_waitcnt       lgkmcnt(0)
/*00000002070c*/ s_clause        0x1
/*000000020710*/ s_load_dword    s1, s[4:5], 0x20
/*000000020718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020720*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020728*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000020730*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000020738*/ v_sub_nc_u16    v6, 0, v0
/*000000020740*/ v_sub_nc_u16    v9, 0, v1
/*000000020748*/ v_sub_nc_u16    v11, 0, v2
/*000000020750*/ v_add_nc_u32    v0, s0, v0
/*000000020754*/ v_add_nc_u32    v3, s2, v1
/*000000020758*/ s_waitcnt       lgkmcnt(0)
/*00000002075c*/ v_add_nc_u32    v4, s1, v2
/*000000020760*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020768*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020770*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020778*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020780*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020788*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020790*/ global_store_byte v[0:1], v6, off
/*000000020798*/ global_store_byte v[2:3], v9, off
/*0000000207a0*/ global_store_byte v[4:5], v11, off
/*0000000207a8*/ s_endpgm
/*0000000207ac*/ s_nop           0x0
/*0000000207b0*/ s_nop           0x0
/*0000000207b4*/ s_nop           0x0
/*0000000207b8*/ s_nop           0x0
/*0000000207bc*/ s_nop           0x0
/*0000000207c0*/ s_nop           0x0
/*0000000207c4*/ s_nop           0x0
/*0000000207c8*/ s_nop           0x0
/*0000000207cc*/ s_nop           0x0
/*0000000207d0*/ s_nop           0x0
/*0000000207d4*/ s_nop           0x0
/*0000000207d8*/ s_nop           0x0
/*0000000207dc*/ s_nop           0x0
/*0000000207e0*/ s_nop           0x0
/*0000000207e4*/ s_nop           0x0
/*0000000207e8*/ s_nop           0x0
/*0000000207ec*/ s_nop           0x0
/*0000000207f0*/ s_nop           0x0
/*0000000207f4*/ s_nop           0x0
/*0000000207f8*/ s_nop           0x0
/*0000000207fc*/ s_nop           0x0
subtract_char_get_local_id_get_global_id:
.skip 256
/*000000020900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020908*/ s_waitcnt       lgkmcnt(0)
/*00000002090c*/ s_clause        0x1
/*000000020910*/ s_load_dword    s1, s[4:5], 0x20
/*000000020918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020920*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000020928*/ v_lshl_or_b32   v4, s7, 2, v1
/*000000020930*/ v_lshl_or_b32   v5, s8, 1, v2
/*000000020938*/ v_add_nc_u32    v3, s0, v3
/*00000002093c*/ v_add_nc_u32    v6, s2, v4
/*000000020940*/ s_waitcnt       lgkmcnt(0)
/*000000020944*/ v_add_nc_u32    v5, s1, v5
/*000000020948*/ v_sub_nc_u32    v10, v0, v3
/*00000002094c*/ v_add_co_u32    v3, s[0:1], s4, v3
/*000000020954*/ v_sub_nc_u32    v15, v1, v6
/*000000020958*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*000000020960*/ v_add_co_u32    v0, s[0:1], s4, v6
/*000000020968*/ v_sub_nc_u32    v11, v2, v5
/*00000002096c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020974*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000002097c*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*000000020984*/ global_store_byte v[3:4], v10, off
/*00000002098c*/ global_store_byte v[0:1], v15, off
/*000000020994*/ global_store_byte v[5:6], v11, off
/*00000002099c*/ s_endpgm
/*0000000209a0*/ s_nop           0x0
/*0000000209a4*/ s_nop           0x0
/*0000000209a8*/ s_nop           0x0
/*0000000209ac*/ s_nop           0x0
/*0000000209b0*/ s_nop           0x0
/*0000000209b4*/ s_nop           0x0
/*0000000209b8*/ s_nop           0x0
/*0000000209bc*/ s_nop           0x0
/*0000000209c0*/ s_nop           0x0
/*0000000209c4*/ s_nop           0x0
/*0000000209c8*/ s_nop           0x0
/*0000000209cc*/ s_nop           0x0
/*0000000209d0*/ s_nop           0x0
/*0000000209d4*/ s_nop           0x0
/*0000000209d8*/ s_nop           0x0
/*0000000209dc*/ s_nop           0x0
/*0000000209e0*/ s_nop           0x0
/*0000000209e4*/ s_nop           0x0
/*0000000209e8*/ s_nop           0x0
/*0000000209ec*/ s_nop           0x0
/*0000000209f0*/ s_nop           0x0
/*0000000209f4*/ s_nop           0x0
/*0000000209f8*/ s_nop           0x0
/*0000000209fc*/ s_nop           0x0
subtract_char_get_group_id_get_global_id:
.skip 256
/*000000020b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020b08*/ s_waitcnt       lgkmcnt(0)
/*000000020b0c*/ s_clause        0x1
/*000000020b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000020b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020b20*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020b28*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000020b30*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000020b38*/ v_add_nc_u32    v0, s0, v0
/*000000020b3c*/ v_add_nc_u32    v3, s2, v1
/*000000020b40*/ s_waitcnt       lgkmcnt(0)
/*000000020b44*/ v_add_nc_u32    v4, s1, v2
/*000000020b48*/ v_sub_nc_u32    v6, s6, v0
/*000000020b4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020b54*/ v_sub_nc_u32    v9, s7, v3
/*000000020b58*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020b60*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020b68*/ v_sub_nc_u32    v11, s8, v4
/*000000020b6c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020b74*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020b7c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020b84*/ global_store_byte v[0:1], v6, off
/*000000020b8c*/ global_store_byte v[2:3], v9, off
/*000000020b94*/ global_store_byte v[4:5], v11, off
/*000000020b9c*/ s_endpgm
/*000000020ba0*/ s_nop           0x0
/*000000020ba4*/ s_nop           0x0
/*000000020ba8*/ s_nop           0x0
/*000000020bac*/ s_nop           0x0
/*000000020bb0*/ s_nop           0x0
/*000000020bb4*/ s_nop           0x0
/*000000020bb8*/ s_nop           0x0
/*000000020bbc*/ s_nop           0x0
/*000000020bc0*/ s_nop           0x0
/*000000020bc4*/ s_nop           0x0
/*000000020bc8*/ s_nop           0x0
/*000000020bcc*/ s_nop           0x0
/*000000020bd0*/ s_nop           0x0
/*000000020bd4*/ s_nop           0x0
/*000000020bd8*/ s_nop           0x0
/*000000020bdc*/ s_nop           0x0
/*000000020be0*/ s_nop           0x0
/*000000020be4*/ s_nop           0x0
/*000000020be8*/ s_nop           0x0
/*000000020bec*/ s_nop           0x0
/*000000020bf0*/ s_nop           0x0
/*000000020bf4*/ s_nop           0x0
/*000000020bf8*/ s_nop           0x0
/*000000020bfc*/ s_nop           0x0
subtract_char_get_local_size_get_global_id:
.skip 256
/*000000020d00*/ s_clause        0x2
/*000000020d04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020d0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000020d14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020d1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020d24*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000020d2c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000020d34*/ s_waitcnt       lgkmcnt(0)
/*000000020d38*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000020d40*/ v_add_co_u32    v3, s[0:1], s2, v1
/*000000020d48*/ v_add_co_u32    v4, s[0:1], s10, v2
/*000000020d50*/ v_sub_nc_u16    v6, 2, v0
/*000000020d58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020d60*/ v_sub_nc_u16    v9, 2, v3
/*000000020d68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020d70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020d78*/ v_sub_nc_u16    v11, 4, v4
/*000000020d80*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020d88*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020d90*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020d98*/ global_store_byte v[0:1], v6, off
/*000000020da0*/ global_store_byte v[2:3], v9, off
/*000000020da8*/ global_store_byte v[4:5], v11, off
/*000000020db0*/ s_endpgm
/*000000020db4*/ s_nop           0x0
/*000000020db8*/ s_nop           0x0
/*000000020dbc*/ s_nop           0x0
/*000000020dc0*/ s_nop           0x0
/*000000020dc4*/ s_nop           0x0
/*000000020dc8*/ s_nop           0x0
/*000000020dcc*/ s_nop           0x0
/*000000020dd0*/ s_nop           0x0
/*000000020dd4*/ s_nop           0x0
/*000000020dd8*/ s_nop           0x0
/*000000020ddc*/ s_nop           0x0
/*000000020de0*/ s_nop           0x0
/*000000020de4*/ s_nop           0x0
/*000000020de8*/ s_nop           0x0
/*000000020dec*/ s_nop           0x0
/*000000020df0*/ s_nop           0x0
/*000000020df4*/ s_nop           0x0
/*000000020df8*/ s_nop           0x0
/*000000020dfc*/ s_nop           0x0
subtract_char_get_global_id_get_global_id:
.skip 256
/*000000020f00*/ s_clause        0x1
/*000000020f04*/ s_load_dwordx4  s[0:3], s[4:5], 0x18
/*000000020f0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020f14*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020f1c*/ s_waitcnt       lgkmcnt(0)
/*000000020f20*/ s_lshl_b32      s1, s7, 1
/*000000020f24*/ s_lshl_b32      s3, s8, 2
/*000000020f28*/ v_mov_b32       v6, 0
/*000000020f2c*/ v_add3_u32      v3, s0, s1, v1
/*000000020f34*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020f3c*/ v_add3_u32      v4, s2, s3, v2
/*000000020f44*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020f4c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000020f54*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000020f5c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020f64*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020f6c*/ global_store_byte v[0:1], v6, off
/*000000020f74*/ global_store_byte v[7:8], v6, off
/*000000020f7c*/ global_store_byte v[4:5], v6, off
/*000000020f84*/ s_endpgm
/*000000020f88*/ s_nop           0x0
/*000000020f8c*/ s_nop           0x0
/*000000020f90*/ s_nop           0x0
/*000000020f94*/ s_nop           0x0
/*000000020f98*/ s_nop           0x0
/*000000020f9c*/ s_nop           0x0
/*000000020fa0*/ s_nop           0x0
/*000000020fa4*/ s_nop           0x0
/*000000020fa8*/ s_nop           0x0
/*000000020fac*/ s_nop           0x0
/*000000020fb0*/ s_nop           0x0
/*000000020fb4*/ s_nop           0x0
/*000000020fb8*/ s_nop           0x0
/*000000020fbc*/ s_nop           0x0
/*000000020fc0*/ s_nop           0x0
/*000000020fc4*/ s_nop           0x0
/*000000020fc8*/ s_nop           0x0
/*000000020fcc*/ s_nop           0x0
/*000000020fd0*/ s_nop           0x0
/*000000020fd4*/ s_nop           0x0
/*000000020fd8*/ s_nop           0x0
/*000000020fdc*/ s_nop           0x0
/*000000020fe0*/ s_nop           0x0
/*000000020fe4*/ s_nop           0x0
/*000000020fe8*/ s_nop           0x0
/*000000020fec*/ s_nop           0x0
/*000000020ff0*/ s_nop           0x0
/*000000020ff4*/ s_nop           0x0
/*000000020ff8*/ s_nop           0x0
/*000000020ffc*/ s_nop           0x0
subtract_char_get_global_size_get_global_id:
.skip 256
/*000000021100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021108*/ s_waitcnt       lgkmcnt(0)
/*00000002110c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021114*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002111c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000021124*/ v_lshl_or_b32   v0, s8, 4, v0
/*00000002112c*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000021134*/ v_lshl_or_b32   v2, s10, 1, v2
/*00000002113c*/ s_waitcnt       lgkmcnt(0)
/*000000021140*/ v_add_nc_u32    v4, s1, v2
/*000000021144*/ v_add_nc_u32    v0, s0, v0
/*000000021148*/ v_add_nc_u32    v3, s2, v1
/*00000002114c*/ v_sub_nc_u32    v11, s14, v4
/*000000021150*/ v_sub_nc_u32    v6, s12, v0
/*000000021154*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000002115c*/ v_sub_nc_u32    v9, s13, v3
/*000000021160*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021168*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000021170*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021178*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000021180*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021188*/ global_store_byte v[0:1], v6, off
/*000000021190*/ global_store_byte v[2:3], v9, off
/*000000021198*/ global_store_byte v[4:5], v11, off
/*0000000211a0*/ s_endpgm
/*0000000211a4*/ s_nop           0x0
/*0000000211a8*/ s_nop           0x0
/*0000000211ac*/ s_nop           0x0
/*0000000211b0*/ s_nop           0x0
/*0000000211b4*/ s_nop           0x0
/*0000000211b8*/ s_nop           0x0
/*0000000211bc*/ s_nop           0x0
/*0000000211c0*/ s_nop           0x0
/*0000000211c4*/ s_nop           0x0
/*0000000211c8*/ s_nop           0x0
/*0000000211cc*/ s_nop           0x0
/*0000000211d0*/ s_nop           0x0
/*0000000211d4*/ s_nop           0x0
/*0000000211d8*/ s_nop           0x0
/*0000000211dc*/ s_nop           0x0
/*0000000211e0*/ s_nop           0x0
/*0000000211e4*/ s_nop           0x0
/*0000000211e8*/ s_nop           0x0
/*0000000211ec*/ s_nop           0x0
/*0000000211f0*/ s_nop           0x0
/*0000000211f4*/ s_nop           0x0
/*0000000211f8*/ s_nop           0x0
/*0000000211fc*/ s_nop           0x0
subtract_char_get_num_groups_get_global_id:
.skip 256
/*000000021300*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000021308*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000021310*/ s_waitcnt       lgkmcnt(0)
/*000000021314*/ s_clause        0x1
/*000000021318*/ s_load_dword    s3, s[6:7], 0x20
/*000000021320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000021328*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000021330*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000021338*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000021340*/ v_mov_b32       v5, 0
/*000000021344*/ s_and_b32       s11, s0, -2
/*000000021348*/ v_add_nc_u32    v4, s12, v0
/*00000002134c*/ v_cmp_gt_u32    s[6:7], s0, s11
/*000000021354*/ s_lshr_b32      s0, s0, 1
/*000000021358*/ s_waitcnt       lgkmcnt(0)
/*00000002135c*/ v_add_nc_u32    v7, s3, v2
/*000000021360*/ v_add_nc_u32    v6, s14, v1
/*000000021364*/ v_add_co_u32    v0, vcc, s4, v4
/*00000002136c*/ s_cmpk_lg_u32   s6, 0x0
/*000000021370*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*000000021374*/ s_addc_u32      s0, s0, 0
/*000000021378*/ s_and_b32       s6, s1, -2
/*00000002137c*/ v_add_co_u32    v2, vcc, s4, v6
/*000000021384*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000002138c*/ s_lshr_b32      s1, s1, 1
/*000000021390*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*000000021394*/ v_sub_nc_u32    v15, s0, v4
/*000000021398*/ v_add_co_u32    v4, vcc, s4, v7
/*0000000213a0*/ s_cmpk_lg_u32   s6, 0x0
/*0000000213a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000213a8*/ s_addc_u32      s1, s1, 0
/*0000000213ac*/ s_and_b32       s3, s2, -4
/*0000000213b0*/ v_sub_nc_u32    v9, s1, v6
/*0000000213b4*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000213bc*/ s_lshr_b32      s2, s2, 2
/*0000000213c0*/ s_cmpk_lg_u32   s3, 0x0
/*0000000213c4*/ s_addc_u32      s0, s2, 0
/*0000000213c8*/ v_sub_nc_u32    v11, s0, v7
/*0000000213cc*/ global_store_byte v[0:1], v15, off
/*0000000213d4*/ global_store_byte v[2:3], v9, off
/*0000000213dc*/ global_store_byte v[4:5], v11, off
/*0000000213e4*/ s_endpgm
/*0000000213e8*/ s_nop           0x0
/*0000000213ec*/ s_nop           0x0
/*0000000213f0*/ s_nop           0x0
/*0000000213f4*/ s_nop           0x0
/*0000000213f8*/ s_nop           0x0
/*0000000213fc*/ s_nop           0x0
subtract_char_get_work_dim_get_global_id:
.skip 256
/*000000021500*/ v_mov_b32       v3, s4
/*000000021504*/ v_mov_b32       v4, s5
/*000000021508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021510*/ s_waitcnt       lgkmcnt(0)
/*000000021514*/ s_clause        0x1
/*000000021518*/ s_load_dword    s1, s[6:7], 0x20
/*000000021520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000021528*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000021530*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000021538*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000021540*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000021548*/ v_add_nc_u32    v7, s0, v0
/*00000002154c*/ v_add_nc_u32    v8, s2, v1
/*000000021550*/ s_waitcnt       lgkmcnt(0)
/*000000021554*/ v_add_nc_u32    v9, s1, v2
/*000000021558*/ v_add_co_u32    v0, s[0:1], s4, v7
/*000000021560*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021568*/ v_add_co_u32    v2, s[0:1], s4, v8
/*000000021570*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021578*/ v_add_co_u32    v4, s[0:1], s4, v9
/*000000021580*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021588*/ s_waitcnt       vmcnt(0)
/*00000002158c*/ v_sub_nc_u32    v7, v6, v7
/*000000021590*/ v_sub_nc_u32    v8, v6, v8
/*000000021594*/ v_sub_nc_u32    v6, v6, v9
/*000000021598*/ global_store_byte v[0:1], v7, off
/*0000000215a0*/ global_store_byte v[2:3], v8, off
/*0000000215a8*/ global_store_byte v[4:5], v6, off
/*0000000215b0*/ s_endpgm
/*0000000215b4*/ s_nop           0x0
/*0000000215b8*/ s_nop           0x0
/*0000000215bc*/ s_nop           0x0
/*0000000215c0*/ s_nop           0x0
/*0000000215c4*/ s_nop           0x0
/*0000000215c8*/ s_nop           0x0
/*0000000215cc*/ s_nop           0x0
/*0000000215d0*/ s_nop           0x0
/*0000000215d4*/ s_nop           0x0
/*0000000215d8*/ s_nop           0x0
/*0000000215dc*/ s_nop           0x0
/*0000000215e0*/ s_nop           0x0
/*0000000215e4*/ s_nop           0x0
/*0000000215e8*/ s_nop           0x0
/*0000000215ec*/ s_nop           0x0
/*0000000215f0*/ s_nop           0x0
/*0000000215f4*/ s_nop           0x0
/*0000000215f8*/ s_nop           0x0
/*0000000215fc*/ s_nop           0x0
subtract_char_x_get_global_size:
.skip 256
/*000000021700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021708*/ s_waitcnt       lgkmcnt(0)
/*00000002170c*/ s_clause        0x1
/*000000021710*/ s_load_dword    s1, s[6:7], 0x8
/*000000021718*/ s_load_dword    s3, s[6:7], 0x20
/*000000021720*/ s_clause        0x1
/*000000021724*/ s_load_dword    s11, s[4:5], 0xc
/*00000002172c*/ s_load_dword    s12, s[4:5], 0x10
/*000000021734*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*00000002173c*/ s_load_dword    s4, s[4:5], 0x14
/*000000021744*/ s_lshl_b32      s5, s8, 4
/*000000021748*/ s_lshl_b32      s8, s9, 1
/*00000002174c*/ s_lshl_b32      s9, s10, 1
/*000000021750*/ s_waitcnt       lgkmcnt(0)
/*000000021754*/ v_add3_u32      v4, s3, s9, v2
/*00000002175c*/ v_add3_u32      v0, s0, s5, v0
/*000000021764*/ v_add3_u32      v3, s2, s8, v1
/*00000002176c*/ s_sub_i32       s0, s1, s11
/*000000021770*/ s_sub_i32       s2, s1, s12
/*000000021774*/ v_mov_b32       v6, s0
/*000000021778*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000021780*/ v_mov_b32       v9, s2
/*000000021784*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*00000002178c*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000021794*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*00000002179c*/ s_sub_i32       s0, s1, s4
/*0000000217a0*/ v_add_co_u32    v4, s[1:2], s6, v4
/*0000000217a8*/ v_mov_b32       v11, s0
/*0000000217ac*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*0000000217b4*/ global_store_byte v[0:1], v6, off
/*0000000217bc*/ global_store_byte v[2:3], v9, off
/*0000000217c4*/ global_store_byte v[4:5], v11, off
/*0000000217cc*/ s_endpgm
/*0000000217d0*/ s_nop           0x0
/*0000000217d4*/ s_nop           0x0
/*0000000217d8*/ s_nop           0x0
/*0000000217dc*/ s_nop           0x0
/*0000000217e0*/ s_nop           0x0
/*0000000217e4*/ s_nop           0x0
/*0000000217e8*/ s_nop           0x0
/*0000000217ec*/ s_nop           0x0
/*0000000217f0*/ s_nop           0x0
/*0000000217f4*/ s_nop           0x0
/*0000000217f8*/ s_nop           0x0
/*0000000217fc*/ s_nop           0x0
subtract_char_get_global_offset_get_global_size:
.skip 256
/*000000021900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021908*/ s_waitcnt       lgkmcnt(0)
/*00000002190c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021914*/ s_clause        0x1
/*000000021918*/ s_load_dword    s3, s[4:5], 0xc
/*000000021920*/ s_load_dword    s11, s[4:5], 0x10
/*000000021928*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000021930*/ s_load_dword    s4, s[4:5], 0x14
/*000000021938*/ s_lshl_b32      s5, s8, 1
/*00000002193c*/ s_lshl_b32      s8, s9, 4
/*000000021940*/ s_lshl_b32      s9, s10, 1
/*000000021944*/ s_waitcnt       lgkmcnt(0)
/*000000021948*/ v_add3_u32      v4, s1, s9, v2
/*000000021950*/ v_add3_u32      v0, s0, s5, v0
/*000000021958*/ v_add3_u32      v3, s2, s8, v1
/*000000021960*/ s_sub_i32       s0, s0, s3
/*000000021964*/ s_sub_i32       s2, s2, s11
/*000000021968*/ v_mov_b32       v6, s0
/*00000002196c*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000021974*/ v_mov_b32       v9, s2
/*000000021978*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000021980*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000021988*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000021990*/ s_sub_i32       s0, s1, s4
/*000000021994*/ v_add_co_u32    v4, s[1:2], s6, v4
/*00000002199c*/ v_mov_b32       v11, s0
/*0000000219a0*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*0000000219a8*/ global_store_byte v[0:1], v6, off
/*0000000219b0*/ global_store_byte v[2:3], v9, off
/*0000000219b8*/ global_store_byte v[4:5], v11, off
/*0000000219c0*/ s_endpgm
/*0000000219c4*/ s_nop           0x0
/*0000000219c8*/ s_nop           0x0
/*0000000219cc*/ s_nop           0x0
/*0000000219d0*/ s_nop           0x0
/*0000000219d4*/ s_nop           0x0
/*0000000219d8*/ s_nop           0x0
/*0000000219dc*/ s_nop           0x0
/*0000000219e0*/ s_nop           0x0
/*0000000219e4*/ s_nop           0x0
/*0000000219e8*/ s_nop           0x0
/*0000000219ec*/ s_nop           0x0
/*0000000219f0*/ s_nop           0x0
/*0000000219f4*/ s_nop           0x0
/*0000000219f8*/ s_nop           0x0
/*0000000219fc*/ s_nop           0x0
subtract_char_get_local_id_get_global_size:
.skip 256
/*000000021b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021b08*/ s_waitcnt       lgkmcnt(0)
/*000000021b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021b14*/ s_clause        0x1
/*000000021b18*/ s_load_dword    s3, s[4:5], 0xc
/*000000021b20*/ s_load_dword    s11, s[4:5], 0x10
/*000000021b28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000021b30*/ s_load_dword    s4, s[4:5], 0x14
/*000000021b38*/ s_lshl_b32      s5, s8, 3
/*000000021b3c*/ s_lshl_b32      s8, s9, 2
/*000000021b40*/ s_lshl_b32      s9, s10, 1
/*000000021b44*/ s_waitcnt       lgkmcnt(0)
/*000000021b48*/ v_add3_u32      v5, s1, s9, v2
/*000000021b50*/ v_sub_nc_u16    v7, v0, s3
/*000000021b58*/ v_sub_nc_u16    v10, v1, s11
/*000000021b60*/ v_add3_u32      v3, s0, s5, v0
/*000000021b68*/ v_add3_u32      v4, s2, s8, v1
/*000000021b70*/ v_sub_nc_u16    v11, v2, s4
/*000000021b78*/ v_add_co_u32    v0, s[0:1], s6, v3
/*000000021b80*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000021b88*/ v_add_co_u32    v3, s[0:1], s6, v4
/*000000021b90*/ v_add_co_ci_u32 v4, s[0:1], s7, 0, s[0:1]
/*000000021b98*/ v_add_co_u32    v5, s[0:1], s6, v5
/*000000021ba0*/ v_add_co_ci_u32 v6, s[0:1], s7, 0, s[0:1]
/*000000021ba8*/ global_store_byte v[0:1], v7, off
/*000000021bb0*/ global_store_byte v[3:4], v10, off
/*000000021bb8*/ global_store_byte v[5:6], v11, off
/*000000021bc0*/ s_endpgm
/*000000021bc4*/ s_nop           0x0
/*000000021bc8*/ s_nop           0x0
/*000000021bcc*/ s_nop           0x0
/*000000021bd0*/ s_nop           0x0
/*000000021bd4*/ s_nop           0x0
/*000000021bd8*/ s_nop           0x0
/*000000021bdc*/ s_nop           0x0
/*000000021be0*/ s_nop           0x0
/*000000021be4*/ s_nop           0x0
/*000000021be8*/ s_nop           0x0
/*000000021bec*/ s_nop           0x0
/*000000021bf0*/ s_nop           0x0
/*000000021bf4*/ s_nop           0x0
/*000000021bf8*/ s_nop           0x0
/*000000021bfc*/ s_nop           0x0
subtract_char_get_group_id_get_global_size:
.skip 256
/*000000021d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021d08*/ s_waitcnt       lgkmcnt(0)
/*000000021d0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021d14*/ s_clause        0x1
/*000000021d18*/ s_load_dword    s3, s[4:5], 0xc
/*000000021d20*/ s_load_dword    s11, s[4:5], 0x10
/*000000021d28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000021d30*/ s_load_dword    s4, s[4:5], 0x14
/*000000021d38*/ s_lshl_b32      s5, s8, 1
/*000000021d3c*/ s_lshl_b32      s12, s9, 4
/*000000021d40*/ s_lshl_b32      s13, s10, 1
/*000000021d44*/ s_waitcnt       lgkmcnt(0)
/*000000021d48*/ v_add3_u32      v4, s1, s13, v2
/*000000021d50*/ s_sub_i32       s1, s9, s11
/*000000021d54*/ v_add3_u32      v0, s0, s5, v0
/*000000021d5c*/ s_sub_i32       s0, s8, s3
/*000000021d60*/ v_add3_u32      v3, s2, s12, v1
/*000000021d68*/ v_mov_b32       v6, s0
/*000000021d6c*/ v_mov_b32       v9, s1
/*000000021d70*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000021d78*/ v_add_co_u32    v4, s[1:2], s6, v4
/*000000021d80*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000021d88*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000021d90*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*000000021d98*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000021da0*/ s_sub_i32       s0, s10, s4
/*000000021da4*/ v_mov_b32       v11, s0
/*000000021da8*/ global_store_byte v[0:1], v6, off
/*000000021db0*/ global_store_byte v[2:3], v9, off
/*000000021db8*/ global_store_byte v[4:5], v11, off
/*000000021dc0*/ s_endpgm
/*000000021dc4*/ s_nop           0x0
/*000000021dc8*/ s_nop           0x0
/*000000021dcc*/ s_nop           0x0
/*000000021dd0*/ s_nop           0x0
/*000000021dd4*/ s_nop           0x0
/*000000021dd8*/ s_nop           0x0
/*000000021ddc*/ s_nop           0x0
/*000000021de0*/ s_nop           0x0
/*000000021de4*/ s_nop           0x0
/*000000021de8*/ s_nop           0x0
/*000000021dec*/ s_nop           0x0
/*000000021df0*/ s_nop           0x0
/*000000021df4*/ s_nop           0x0
/*000000021df8*/ s_nop           0x0
/*000000021dfc*/ s_nop           0x0
subtract_char_get_local_size_get_global_size:
.skip 256
/*000000021f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021f08*/ s_waitcnt       lgkmcnt(0)
/*000000021f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000021f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000021f24*/ s_lshl_b32      s3, s8, 1
/*000000021f28*/ s_lshl_b32      s6, s9, 1
/*000000021f2c*/ s_lshl_b32      s7, s10, 2
/*000000021f30*/ s_waitcnt       lgkmcnt(0)
/*000000021f34*/ v_add3_u32      v4, s1, s7, v2
/*000000021f3c*/ v_add3_u32      v0, s0, s3, v0
/*000000021f44*/ s_sub_i32       s0, 2, s12
/*000000021f48*/ v_add3_u32      v3, s2, s6, v1
/*000000021f50*/ v_mov_b32       v6, s0
/*000000021f54*/ s_sub_i32       s1, 2, s13
/*000000021f58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021f60*/ v_mov_b32       v9, s1
/*000000021f64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021f6c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000021f74*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000021f7c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021f84*/ s_sub_i32       s0, 4, s14
/*000000021f88*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000021f90*/ v_mov_b32       v11, s0
/*000000021f94*/ global_store_byte v[0:1], v6, off
/*000000021f9c*/ global_store_byte v[2:3], v9, off
/*000000021fa4*/ global_store_byte v[4:5], v11, off
/*000000021fac*/ s_endpgm
/*000000021fb0*/ s_nop           0x0
/*000000021fb4*/ s_nop           0x0
/*000000021fb8*/ s_nop           0x0
/*000000021fbc*/ s_nop           0x0
/*000000021fc0*/ s_nop           0x0
/*000000021fc4*/ s_nop           0x0
/*000000021fc8*/ s_nop           0x0
/*000000021fcc*/ s_nop           0x0
/*000000021fd0*/ s_nop           0x0
/*000000021fd4*/ s_nop           0x0
/*000000021fd8*/ s_nop           0x0
/*000000021fdc*/ s_nop           0x0
/*000000021fe0*/ s_nop           0x0
/*000000021fe4*/ s_nop           0x0
/*000000021fe8*/ s_nop           0x0
/*000000021fec*/ s_nop           0x0
/*000000021ff0*/ s_nop           0x0
/*000000021ff4*/ s_nop           0x0
/*000000021ff8*/ s_nop           0x0
/*000000021ffc*/ s_nop           0x0
subtract_char_get_global_id_get_global_size:
.skip 256
/*000000022100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022108*/ s_waitcnt       lgkmcnt(0)
/*00000002210c*/ s_clause        0x1
/*000000022110*/ s_load_dword    s1, s[6:7], 0x20
/*000000022118*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022120*/ s_clause        0x2
/*000000022124*/ s_load_dword    s3, s[4:5], 0xc
/*00000002212c*/ s_load_dword    s11, s[4:5], 0x10
/*000000022134*/ s_load_dword    s4, s[4:5], 0x14
/*00000002213c*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000022144*/ v_lshl_or_b32   v0, s8, 1, v0
/*00000002214c*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000022154*/ s_waitcnt       lgkmcnt(0)
/*000000022158*/ v_add_nc_u32    v5, s1, v2
/*00000002215c*/ v_add_nc_u32    v4, s2, v1
/*000000022160*/ v_add_nc_u32    v3, s0, v0
/*000000022164*/ v_add_co_u32    v0, s[0:1], s6, v0
/*00000002216c*/ v_subrev_nc_u32 v11, s4, v5
/*000000022170*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000022178*/ v_add_co_u32    v2, s[0:1], s6, v4
/*000000022180*/ v_subrev_nc_u32 v6, s3, v3
/*000000022184*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*00000002218c*/ v_subrev_nc_u32 v9, s11, v4
/*000000022190*/ v_add_co_u32    v4, s[0:1], s6, v5
/*000000022198*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*0000000221a0*/ global_store_byte v[0:1], v6, off
/*0000000221a8*/ global_store_byte v[2:3], v9, off
/*0000000221b0*/ global_store_byte v[4:5], v11, off
/*0000000221b8*/ s_endpgm
/*0000000221bc*/ s_nop           0x0
/*0000000221c0*/ s_nop           0x0
/*0000000221c4*/ s_nop           0x0
/*0000000221c8*/ s_nop           0x0
/*0000000221cc*/ s_nop           0x0
/*0000000221d0*/ s_nop           0x0
/*0000000221d4*/ s_nop           0x0
/*0000000221d8*/ s_nop           0x0
/*0000000221dc*/ s_nop           0x0
/*0000000221e0*/ s_nop           0x0
/*0000000221e4*/ s_nop           0x0
/*0000000221e8*/ s_nop           0x0
/*0000000221ec*/ s_nop           0x0
/*0000000221f0*/ s_nop           0x0
/*0000000221f4*/ s_nop           0x0
/*0000000221f8*/ s_nop           0x0
/*0000000221fc*/ s_nop           0x0
subtract_char_get_global_size_get_global_size:
.skip 256
/*000000022300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000022308*/ s_waitcnt       lgkmcnt(0)
/*00000002230c*/ s_clause        0x1
/*000000022310*/ s_load_dword    s1, s[4:5], 0x20
/*000000022318*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000022320*/ s_lshl_b32      s3, s6, 4
/*000000022324*/ s_lshl_b32      s6, s7, 1
/*000000022328*/ v_mov_b32       v6, 0
/*00000002232c*/ v_add3_u32      v0, s0, s3, v0
/*000000022334*/ s_lshl_b32      s0, s8, 1
/*000000022338*/ v_add3_u32      v3, s2, s6, v1
/*000000022340*/ s_waitcnt       lgkmcnt(0)
/*000000022344*/ v_add3_u32      v4, s1, s0, v2
/*00000002234c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000022354*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002235c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000022364*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000002236c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000022374*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000002237c*/ global_store_byte v[0:1], v6, off
/*000000022384*/ global_store_byte v[7:8], v6, off
/*00000002238c*/ global_store_byte v[4:5], v6, off
/*000000022394*/ s_endpgm
/*000000022398*/ s_nop           0x0
/*00000002239c*/ s_nop           0x0
/*0000000223a0*/ s_nop           0x0
/*0000000223a4*/ s_nop           0x0
/*0000000223a8*/ s_nop           0x0
/*0000000223ac*/ s_nop           0x0
/*0000000223b0*/ s_nop           0x0
/*0000000223b4*/ s_nop           0x0
/*0000000223b8*/ s_nop           0x0
/*0000000223bc*/ s_nop           0x0
/*0000000223c0*/ s_nop           0x0
/*0000000223c4*/ s_nop           0x0
/*0000000223c8*/ s_nop           0x0
/*0000000223cc*/ s_nop           0x0
/*0000000223d0*/ s_nop           0x0
/*0000000223d4*/ s_nop           0x0
/*0000000223d8*/ s_nop           0x0
/*0000000223dc*/ s_nop           0x0
/*0000000223e0*/ s_nop           0x0
/*0000000223e4*/ s_nop           0x0
/*0000000223e8*/ s_nop           0x0
/*0000000223ec*/ s_nop           0x0
/*0000000223f0*/ s_nop           0x0
/*0000000223f4*/ s_nop           0x0
/*0000000223f8*/ s_nop           0x0
/*0000000223fc*/ s_nop           0x0
subtract_char_get_num_groups_get_global_size:
.skip 256
/*000000022500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000022508*/ s_clause        0x2
/*00000002250c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000022514*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000002251c*/ s_load_dword    s6, s[6:7], 0x20
/*000000022524*/ s_lshl_b32      s7, s8, 1
/*000000022528*/ s_lshl_b32      s8, s9, 1
/*00000002252c*/ s_lshl_b32      s9, s10, 2
/*000000022530*/ s_waitcnt       lgkmcnt(0)
/*000000022534*/ s_and_b32       s3, s0, -2
/*000000022538*/ s_lshr_b32      s10, s0, 1
/*00000002253c*/ v_cmp_gt_u32    s[3:4], s0, s3
/*000000022544*/ v_add3_u32      v0, s12, s7, v0
/*00000002254c*/ v_add3_u32      v3, s14, s8, v1
/*000000022554*/ v_add3_u32      v4, s6, s9, v2
/*00000002255c*/ s_cmpk_lg_u32   s3, 0x0
/*000000022560*/ s_addc_u32      s3, s10, 0
/*000000022564*/ s_and_b32       s10, s1, -2
/*000000022568*/ s_lshr_b32      s7, s1, 1
/*00000002256c*/ v_cmp_gt_u32    s[10:11], s1, s10
/*000000022574*/ s_cmpk_lg_u32   s10, 0x0
/*000000022578*/ s_addc_u32      s7, s7, 0
/*00000002257c*/ s_and_b32       s8, s2, -4
/*000000022580*/ v_cmp_gt_u32    s[6:7], s2, s8
/*000000022588*/ v_add_co_u32    v0, s[8:9], s4, v0
/*000000022590*/ v_add_co_ci_u32 v1, s[8:9], s5, 0, s[8:9]
/*000000022598*/ s_lshr_b32      s8, s2, 2
/*00000002259c*/ s_cmpk_lg_u32   s6, 0x0
/*0000000225a0*/ v_add_co_u32    v2, s[6:7], s4, v3
/*0000000225a8*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*0000000225b0*/ s_addc_u32      s6, s8, 0
/*0000000225b4*/ s_sub_i32       s0, s3, s0
/*0000000225b8*/ s_sub_i32       s1, s7, s1
/*0000000225bc*/ v_mov_b32       v6, s0
/*0000000225c0*/ v_mov_b32       v9, s1
/*0000000225c4*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000225cc*/ s_sub_i32       s0, s6, s2
/*0000000225d0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000225d8*/ v_mov_b32       v11, s0
/*0000000225dc*/ global_store_byte v[0:1], v6, off
/*0000000225e4*/ global_store_byte v[2:3], v9, off
/*0000000225ec*/ global_store_byte v[4:5], v11, off
/*0000000225f4*/ s_endpgm
/*0000000225f8*/ s_nop           0x0
/*0000000225fc*/ s_nop           0x0
subtract_char_get_work_dim_get_global_size:
.skip 256
/*000000022700*/ v_mov_b32       v3, s4
/*000000022704*/ v_mov_b32       v4, s5
/*000000022708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022710*/ s_waitcnt       lgkmcnt(0)
/*000000022714*/ s_clause        0x1
/*000000022718*/ s_load_dword    s1, s[6:7], 0x20
/*000000022720*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022728*/ s_lshl_b32      s3, s8, 1
/*00000002272c*/ s_lshl_b32      s8, s9, 1
/*000000022730*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000022738*/ s_clause        0x2
/*00000002273c*/ s_load_dword    s9, s[4:5], 0xc
/*000000022744*/ s_load_dword    s11, s[4:5], 0x10
/*00000002274c*/ s_load_dword    s4, s[4:5], 0x14
/*000000022754*/ v_add3_u32      v0, s0, s3, v0
/*00000002275c*/ s_lshl_b32      s0, s10, 2
/*000000022760*/ v_add3_u32      v3, s2, s8, v1
/*000000022768*/ s_waitcnt       lgkmcnt(0)
/*00000002276c*/ v_add3_u32      v4, s1, s0, v2
/*000000022774*/ v_add_co_u32    v0, s[0:1], s6, v0
/*00000002277c*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000022784*/ v_add_co_u32    v2, s[0:1], s6, v3
/*00000002278c*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000022794*/ v_add_co_u32    v4, s[0:1], s6, v4
/*00000002279c*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*0000000227a4*/ s_waitcnt       vmcnt(0)
/*0000000227a8*/ v_and_b32       v7, 0xffff, v6
/*0000000227b0*/ v_subrev_nc_u32 v6, s4, v6
/*0000000227b4*/ v_subrev_nc_u32 v11, s9, v7
/*0000000227b8*/ v_subrev_nc_u32 v9, s11, v7
/*0000000227bc*/ global_store_byte v[0:1], v11, off
/*0000000227c4*/ global_store_byte v[2:3], v9, off
/*0000000227cc*/ global_store_byte v[4:5], v6, off
/*0000000227d4*/ s_endpgm
/*0000000227d8*/ s_nop           0x0
/*0000000227dc*/ s_nop           0x0
/*0000000227e0*/ s_nop           0x0
/*0000000227e4*/ s_nop           0x0
/*0000000227e8*/ s_nop           0x0
/*0000000227ec*/ s_nop           0x0
/*0000000227f0*/ s_nop           0x0
/*0000000227f4*/ s_nop           0x0
/*0000000227f8*/ s_nop           0x0
/*0000000227fc*/ s_nop           0x0
subtract_char_x_get_num_groups:
.skip 256
/*000000022900*/ s_clause        0x1
/*000000022904*/ s_load_dword    s11, s[4:5], 0xc
/*00000002290c*/ s_load_dword    s12, s[4:5], 0x10
/*000000022914*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000002291c*/ s_waitcnt       lgkmcnt(0)
/*000000022920*/ s_clause        0x1
/*000000022924*/ s_load_dword    s1, s[6:7], 0x8
/*00000002292c*/ s_load_dword    s3, s[6:7], 0x20
/*000000022934*/ s_load_dword    s13, s[4:5], 0x14
/*00000002293c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000022944*/ s_lshl_b32      s7, s8, 4
/*000000022948*/ s_lshl_b32      s8, s9, 1
/*00000002294c*/ s_lshl_b32      s9, s10, 1
/*000000022950*/ s_and_b32       s14, s11, -16
/*000000022954*/ s_lshr_b32      s10, s11, 4
/*000000022958*/ v_cmp_gt_u32    s[6:7], s11, s14
/*000000022960*/ v_add3_u32      v0, s0, s7, v0
/*000000022968*/ v_add3_u32      v3, s2, s8, v1
/*000000022970*/ s_waitcnt       lgkmcnt(0)
/*000000022974*/ v_add3_u32      v4, s3, s9, v2
/*00000002297c*/ s_cmpk_lg_u32   s6, 0x0
/*000000022980*/ s_addc_u32      s6, s10, 0
/*000000022984*/ s_and_b32       s10, s12, -2
/*000000022988*/ s_sub_i32       s2, s1, s6
/*00000002298c*/ v_cmp_gt_u32    s[10:11], s12, s10
/*000000022994*/ s_lshr_b32      s0, s12, 1
/*000000022998*/ v_add_co_u32    v0, s[6:7], s4, v0
/*0000000229a0*/ v_mov_b32       v6, s2
/*0000000229a4*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*0000000229ac*/ s_cmpk_lg_u32   s10, 0x0
/*0000000229b0*/ v_add_co_u32    v2, s[6:7], s4, v3
/*0000000229b8*/ s_addc_u32      s0, s0, 0
/*0000000229bc*/ s_and_b32       s3, s13, -2
/*0000000229c0*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*0000000229c8*/ v_cmp_gt_u32    s[3:4], s13, s3
/*0000000229d0*/ s_sub_i32       s0, s1, s0
/*0000000229d4*/ s_lshr_b32      s6, s13, 1
/*0000000229d8*/ v_mov_b32       v9, s0
/*0000000229dc*/ s_cmpk_lg_u32   s3, 0x0
/*0000000229e0*/ s_addc_u32      s2, s6, 0
/*0000000229e4*/ s_sub_i32       s0, s1, s2
/*0000000229e8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000229f0*/ v_mov_b32       v11, s0
/*0000000229f4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000229fc*/ global_store_byte v[0:1], v6, off
/*000000022a04*/ global_store_byte v[2:3], v9, off
/*000000022a0c*/ global_store_byte v[4:5], v11, off
/*000000022a14*/ s_endpgm
/*000000022a18*/ s_nop           0x0
/*000000022a1c*/ s_nop           0x0
/*000000022a20*/ s_nop           0x0
/*000000022a24*/ s_nop           0x0
/*000000022a28*/ s_nop           0x0
/*000000022a2c*/ s_nop           0x0
/*000000022a30*/ s_nop           0x0
/*000000022a34*/ s_nop           0x0
/*000000022a38*/ s_nop           0x0
/*000000022a3c*/ s_nop           0x0
/*000000022a40*/ s_nop           0x0
/*000000022a44*/ s_nop           0x0
/*000000022a48*/ s_nop           0x0
/*000000022a4c*/ s_nop           0x0
/*000000022a50*/ s_nop           0x0
/*000000022a54*/ s_nop           0x0
/*000000022a58*/ s_nop           0x0
/*000000022a5c*/ s_nop           0x0
/*000000022a60*/ s_nop           0x0
/*000000022a64*/ s_nop           0x0
/*000000022a68*/ s_nop           0x0
/*000000022a6c*/ s_nop           0x0
/*000000022a70*/ s_nop           0x0
/*000000022a74*/ s_nop           0x0
/*000000022a78*/ s_nop           0x0
/*000000022a7c*/ s_nop           0x0
/*000000022a80*/ s_nop           0x0
/*000000022a84*/ s_nop           0x0
/*000000022a88*/ s_nop           0x0
/*000000022a8c*/ s_nop           0x0
/*000000022a90*/ s_nop           0x0
/*000000022a94*/ s_nop           0x0
/*000000022a98*/ s_nop           0x0
/*000000022a9c*/ s_nop           0x0
/*000000022aa0*/ s_nop           0x0
/*000000022aa4*/ s_nop           0x0
/*000000022aa8*/ s_nop           0x0
/*000000022aac*/ s_nop           0x0
/*000000022ab0*/ s_nop           0x0
/*000000022ab4*/ s_nop           0x0
/*000000022ab8*/ s_nop           0x0
/*000000022abc*/ s_nop           0x0
/*000000022ac0*/ s_nop           0x0
/*000000022ac4*/ s_nop           0x0
/*000000022ac8*/ s_nop           0x0
/*000000022acc*/ s_nop           0x0
/*000000022ad0*/ s_nop           0x0
/*000000022ad4*/ s_nop           0x0
/*000000022ad8*/ s_nop           0x0
/*000000022adc*/ s_nop           0x0
/*000000022ae0*/ s_nop           0x0
/*000000022ae4*/ s_nop           0x0
/*000000022ae8*/ s_nop           0x0
/*000000022aec*/ s_nop           0x0
/*000000022af0*/ s_nop           0x0
/*000000022af4*/ s_nop           0x0
/*000000022af8*/ s_nop           0x0
/*000000022afc*/ s_nop           0x0
subtract_char_get_global_offset_get_num_groups:
.skip 256
/*000000022c00*/ s_clause        0x1
/*000000022c04*/ s_load_dword    s11, s[4:5], 0xc
/*000000022c0c*/ s_load_dword    s12, s[4:5], 0x10
/*000000022c14*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022c1c*/ s_waitcnt       lgkmcnt(0)
/*000000022c20*/ s_load_dword    s1, s[6:7], 0x20
/*000000022c28*/ s_load_dword    s3, s[4:5], 0x14
/*000000022c30*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022c38*/ s_lshl_b32      s7, s8, 1
/*000000022c3c*/ s_lshl_b32      s8, s9, 4
/*000000022c40*/ s_lshl_b32      s9, s10, 1
/*000000022c44*/ s_and_b32       s13, s11, -2
/*000000022c48*/ s_lshr_b32      s10, s11, 1
/*000000022c4c*/ v_cmp_gt_u32    s[6:7], s11, s13
/*000000022c54*/ v_add3_u32      v0, s0, s7, v0
/*000000022c5c*/ v_add3_u32      v3, s2, s8, v1
/*000000022c64*/ s_waitcnt       lgkmcnt(0)
/*000000022c68*/ v_add3_u32      v4, s1, s9, v2
/*000000022c70*/ s_cmpk_lg_u32   s6, 0x0
/*000000022c74*/ v_add_co_u32    v0, s[8:9], s4, v0
/*000000022c7c*/ s_addc_u32      s6, s10, 0
/*000000022c80*/ s_and_b32       s10, s12, -16
/*000000022c84*/ s_sub_i32       s0, s0, s6
/*000000022c88*/ v_cmp_gt_u32    s[10:11], s12, s10
/*000000022c90*/ s_lshr_b32      s7, s12, 4
/*000000022c94*/ v_add_co_ci_u32 v1, s[8:9], s5, 0, s[8:9]
/*000000022c9c*/ v_mov_b32       v6, s0
/*000000022ca0*/ v_add_co_u32    v2, s[8:9], s4, v3
/*000000022ca8*/ s_cmpk_lg_u32   s10, 0x0
/*000000022cac*/ v_add_co_ci_u32 v3, s[8:9], s5, 0, s[8:9]
/*000000022cb4*/ s_addc_u32      s6, s7, 0
/*000000022cb8*/ s_and_b32       s7, s3, -2
/*000000022cbc*/ s_sub_i32       s2, s2, s6
/*000000022cc0*/ v_cmp_gt_u32    s[7:8], s3, s7
/*000000022cc8*/ s_lshr_b32      s3, s3, 1
/*000000022ccc*/ v_mov_b32       v9, s2
/*000000022cd0*/ s_cmpk_lg_u32   s7, 0x0
/*000000022cd4*/ s_addc_u32      s0, s3, 0
/*000000022cd8*/ s_sub_i32       s0, s1, s0
/*000000022cdc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000022ce4*/ v_mov_b32       v11, s0
/*000000022ce8*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000022cf0*/ global_store_byte v[0:1], v6, off
/*000000022cf8*/ global_store_byte v[2:3], v9, off
/*000000022d00*/ global_store_byte v[4:5], v11, off
/*000000022d08*/ s_endpgm
/*000000022d0c*/ s_nop           0x0
/*000000022d10*/ s_nop           0x0
/*000000022d14*/ s_nop           0x0
/*000000022d18*/ s_nop           0x0
/*000000022d1c*/ s_nop           0x0
/*000000022d20*/ s_nop           0x0
/*000000022d24*/ s_nop           0x0
/*000000022d28*/ s_nop           0x0
/*000000022d2c*/ s_nop           0x0
/*000000022d30*/ s_nop           0x0
/*000000022d34*/ s_nop           0x0
/*000000022d38*/ s_nop           0x0
/*000000022d3c*/ s_nop           0x0
/*000000022d40*/ s_nop           0x0
/*000000022d44*/ s_nop           0x0
/*000000022d48*/ s_nop           0x0
/*000000022d4c*/ s_nop           0x0
/*000000022d50*/ s_nop           0x0
/*000000022d54*/ s_nop           0x0
/*000000022d58*/ s_nop           0x0
/*000000022d5c*/ s_nop           0x0
/*000000022d60*/ s_nop           0x0
/*000000022d64*/ s_nop           0x0
/*000000022d68*/ s_nop           0x0
/*000000022d6c*/ s_nop           0x0
/*000000022d70*/ s_nop           0x0
/*000000022d74*/ s_nop           0x0
/*000000022d78*/ s_nop           0x0
/*000000022d7c*/ s_nop           0x0
/*000000022d80*/ s_nop           0x0
/*000000022d84*/ s_nop           0x0
/*000000022d88*/ s_nop           0x0
/*000000022d8c*/ s_nop           0x0
/*000000022d90*/ s_nop           0x0
/*000000022d94*/ s_nop           0x0
/*000000022d98*/ s_nop           0x0
/*000000022d9c*/ s_nop           0x0
/*000000022da0*/ s_nop           0x0
/*000000022da4*/ s_nop           0x0
/*000000022da8*/ s_nop           0x0
/*000000022dac*/ s_nop           0x0
/*000000022db0*/ s_nop           0x0
/*000000022db4*/ s_nop           0x0
/*000000022db8*/ s_nop           0x0
/*000000022dbc*/ s_nop           0x0
/*000000022dc0*/ s_nop           0x0
/*000000022dc4*/ s_nop           0x0
/*000000022dc8*/ s_nop           0x0
/*000000022dcc*/ s_nop           0x0
/*000000022dd0*/ s_nop           0x0
/*000000022dd4*/ s_nop           0x0
/*000000022dd8*/ s_nop           0x0
/*000000022ddc*/ s_nop           0x0
/*000000022de0*/ s_nop           0x0
/*000000022de4*/ s_nop           0x0
/*000000022de8*/ s_nop           0x0
/*000000022dec*/ s_nop           0x0
/*000000022df0*/ s_nop           0x0
/*000000022df4*/ s_nop           0x0
/*000000022df8*/ s_nop           0x0
/*000000022dfc*/ s_nop           0x0
subtract_char_get_local_id_get_num_groups:
.skip 256
/*000000022f00*/ s_clause        0x1
/*000000022f04*/ s_load_dword    s11, s[4:5], 0xc
/*000000022f0c*/ s_load_dword    s12, s[4:5], 0x10
/*000000022f14*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022f1c*/ s_waitcnt       lgkmcnt(0)
/*000000022f20*/ s_load_dword    s1, s[6:7], 0x20
/*000000022f28*/ s_load_dword    s3, s[4:5], 0x14
/*000000022f30*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022f38*/ s_lshl_b32      s7, s8, 3
/*000000022f3c*/ s_lshl_b32      s8, s9, 2
/*000000022f40*/ s_lshl_b32      s9, s10, 1
/*000000022f44*/ s_and_b32       s13, s11, -8
/*000000022f48*/ s_lshr_b32      s10, s11, 3
/*000000022f4c*/ v_cmp_gt_u32    s[6:7], s11, s13
/*000000022f54*/ v_add3_u32      v3, s0, s7, v0
/*000000022f5c*/ v_add3_u32      v5, s2, s8, v1
/*000000022f64*/ s_waitcnt       lgkmcnt(0)
/*000000022f68*/ v_add3_u32      v7, s1, s9, v2
/*000000022f70*/ s_cmpk_lg_u32   s6, 0x0
/*000000022f74*/ v_add_co_u32    v3, s[2:3], s4, v3
/*000000022f7c*/ s_addc_u32      s6, s10, 0
/*000000022f80*/ s_and_b32       s10, s12, -4
/*000000022f84*/ s_lshr_b32      s0, s12, 2
/*000000022f88*/ v_cmp_gt_u32    s[10:11], s12, s10
/*000000022f90*/ v_add_co_ci_u32 v4, s[2:3], s5, 0, s[2:3]
/*000000022f98*/ v_add_co_u32    v5, s[2:3], s4, v5
/*000000022fa0*/ v_sub_nc_u16    v10, v0, s6
/*000000022fa8*/ v_add_co_ci_u32 v6, s[2:3], s5, 0, s[2:3]
/*000000022fb0*/ s_cmpk_lg_u32   s10, 0x0
/*000000022fb4*/ s_addc_u32      s0, s0, 0
/*000000022fb8*/ s_and_b32       s1, s3, -2
/*000000022fbc*/ s_lshr_b32      s2, s3, 1
/*000000022fc0*/ v_cmp_gt_u32    s[1:2], s3, s1
/*000000022fc8*/ v_sub_nc_u16    v11, v1, s0
/*000000022fd0*/ v_add_co_u32    v0, s[0:1], s4, v7
/*000000022fd8*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000022fe0*/ s_cmpk_lg_u32   s1, 0x0
/*000000022fe4*/ s_addc_u32      s1, s2, 0
/*000000022fe8*/ v_sub_nc_u16    v2, v2, s1
/*000000022ff0*/ global_store_byte v[3:4], v10, off
/*000000022ff8*/ global_store_byte v[5:6], v11, off
/*000000023000*/ global_store_byte v[0:1], v2, off
/*000000023008*/ s_endpgm
/*00000002300c*/ s_nop           0x0
/*000000023010*/ s_nop           0x0
/*000000023014*/ s_nop           0x0
/*000000023018*/ s_nop           0x0
/*00000002301c*/ s_nop           0x0
/*000000023020*/ s_nop           0x0
/*000000023024*/ s_nop           0x0
/*000000023028*/ s_nop           0x0
/*00000002302c*/ s_nop           0x0
/*000000023030*/ s_nop           0x0
/*000000023034*/ s_nop           0x0
/*000000023038*/ s_nop           0x0
/*00000002303c*/ s_nop           0x0
/*000000023040*/ s_nop           0x0
/*000000023044*/ s_nop           0x0
/*000000023048*/ s_nop           0x0
/*00000002304c*/ s_nop           0x0
/*000000023050*/ s_nop           0x0
/*000000023054*/ s_nop           0x0
/*000000023058*/ s_nop           0x0
/*00000002305c*/ s_nop           0x0
/*000000023060*/ s_nop           0x0
/*000000023064*/ s_nop           0x0
/*000000023068*/ s_nop           0x0
/*00000002306c*/ s_nop           0x0
/*000000023070*/ s_nop           0x0
/*000000023074*/ s_nop           0x0
/*000000023078*/ s_nop           0x0
/*00000002307c*/ s_nop           0x0
/*000000023080*/ s_nop           0x0
/*000000023084*/ s_nop           0x0
/*000000023088*/ s_nop           0x0
/*00000002308c*/ s_nop           0x0
/*000000023090*/ s_nop           0x0
/*000000023094*/ s_nop           0x0
/*000000023098*/ s_nop           0x0
/*00000002309c*/ s_nop           0x0
/*0000000230a0*/ s_nop           0x0
/*0000000230a4*/ s_nop           0x0
/*0000000230a8*/ s_nop           0x0
/*0000000230ac*/ s_nop           0x0
/*0000000230b0*/ s_nop           0x0
/*0000000230b4*/ s_nop           0x0
/*0000000230b8*/ s_nop           0x0
/*0000000230bc*/ s_nop           0x0
/*0000000230c0*/ s_nop           0x0
/*0000000230c4*/ s_nop           0x0
/*0000000230c8*/ s_nop           0x0
/*0000000230cc*/ s_nop           0x0
/*0000000230d0*/ s_nop           0x0
/*0000000230d4*/ s_nop           0x0
/*0000000230d8*/ s_nop           0x0
/*0000000230dc*/ s_nop           0x0
/*0000000230e0*/ s_nop           0x0
/*0000000230e4*/ s_nop           0x0
/*0000000230e8*/ s_nop           0x0
/*0000000230ec*/ s_nop           0x0
/*0000000230f0*/ s_nop           0x0
/*0000000230f4*/ s_nop           0x0
/*0000000230f8*/ s_nop           0x0
/*0000000230fc*/ s_nop           0x0
subtract_char_get_group_id_get_num_groups:
.skip 256
/*000000023200*/ s_clause        0x1
/*000000023204*/ s_load_dword    s11, s[4:5], 0xc
/*00000002320c*/ s_load_dword    s12, s[4:5], 0x10
/*000000023214*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000002321c*/ s_waitcnt       lgkmcnt(0)
/*000000023220*/ s_load_dword    s1, s[6:7], 0x20
/*000000023228*/ s_load_dword    s3, s[4:5], 0x14
/*000000023230*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023238*/ s_lshl_b32      s7, s8, 1
/*00000002323c*/ s_lshl_b32      s14, s10, 1
/*000000023240*/ s_and_b32       s13, s11, -2
/*000000023244*/ v_cmp_gt_u32    s[6:7], s11, s13
/*00000002324c*/ s_lshl_b32      s13, s9, 4
/*000000023250*/ s_lshr_b32      s11, s11, 1
/*000000023254*/ v_add3_u32      v0, s0, s7, v0
/*00000002325c*/ v_add3_u32      v3, s2, s13, v1
/*000000023264*/ s_cmpk_lg_u32   s6, 0x0
/*000000023268*/ s_waitcnt       lgkmcnt(0)
/*00000002326c*/ v_add3_u32      v4, s1, s14, v2
/*000000023274*/ s_addc_u32      s6, s11, 0
/*000000023278*/ s_and_b32       s11, s12, -16
/*00000002327c*/ s_sub_i32       s2, s8, s6
/*000000023280*/ v_cmp_gt_u32    s[11:12], s12, s11
/*000000023288*/ s_lshr_b32      s0, s12, 4
/*00000002328c*/ v_add_co_u32    v0, s[6:7], s4, v0
/*000000023294*/ v_mov_b32       v6, s2
/*000000023298*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*0000000232a0*/ s_cmpk_lg_u32   s11, 0x0
/*0000000232a4*/ v_add_co_u32    v2, s[6:7], s4, v3
/*0000000232ac*/ s_addc_u32      s0, s0, 0
/*0000000232b0*/ s_and_b32       s1, s3, -2
/*0000000232b4*/ s_sub_i32       s0, s9, s0
/*0000000232b8*/ v_cmp_gt_u32    s[1:2], s3, s1
/*0000000232c0*/ s_lshr_b32      s3, s3, 1
/*0000000232c4*/ v_mov_b32       v9, s0
/*0000000232c8*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*0000000232d0*/ s_cmpk_lg_u32   s1, 0x0
/*0000000232d4*/ s_addc_u32      s1, s3, 0
/*0000000232d8*/ s_sub_i32       s0, s10, s1
/*0000000232dc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000232e4*/ v_mov_b32       v11, s0
/*0000000232e8*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000232f0*/ global_store_byte v[0:1], v6, off
/*0000000232f8*/ global_store_byte v[2:3], v9, off
/*000000023300*/ global_store_byte v[4:5], v11, off
/*000000023308*/ s_endpgm
/*00000002330c*/ s_nop           0x0
/*000000023310*/ s_nop           0x0
/*000000023314*/ s_nop           0x0
/*000000023318*/ s_nop           0x0
/*00000002331c*/ s_nop           0x0
/*000000023320*/ s_nop           0x0
/*000000023324*/ s_nop           0x0
/*000000023328*/ s_nop           0x0
/*00000002332c*/ s_nop           0x0
/*000000023330*/ s_nop           0x0
/*000000023334*/ s_nop           0x0
/*000000023338*/ s_nop           0x0
/*00000002333c*/ s_nop           0x0
/*000000023340*/ s_nop           0x0
/*000000023344*/ s_nop           0x0
/*000000023348*/ s_nop           0x0
/*00000002334c*/ s_nop           0x0
/*000000023350*/ s_nop           0x0
/*000000023354*/ s_nop           0x0
/*000000023358*/ s_nop           0x0
/*00000002335c*/ s_nop           0x0
/*000000023360*/ s_nop           0x0
/*000000023364*/ s_nop           0x0
/*000000023368*/ s_nop           0x0
/*00000002336c*/ s_nop           0x0
/*000000023370*/ s_nop           0x0
/*000000023374*/ s_nop           0x0
/*000000023378*/ s_nop           0x0
/*00000002337c*/ s_nop           0x0
/*000000023380*/ s_nop           0x0
/*000000023384*/ s_nop           0x0
/*000000023388*/ s_nop           0x0
/*00000002338c*/ s_nop           0x0
/*000000023390*/ s_nop           0x0
/*000000023394*/ s_nop           0x0
/*000000023398*/ s_nop           0x0
/*00000002339c*/ s_nop           0x0
/*0000000233a0*/ s_nop           0x0
/*0000000233a4*/ s_nop           0x0
/*0000000233a8*/ s_nop           0x0
/*0000000233ac*/ s_nop           0x0
/*0000000233b0*/ s_nop           0x0
/*0000000233b4*/ s_nop           0x0
/*0000000233b8*/ s_nop           0x0
/*0000000233bc*/ s_nop           0x0
/*0000000233c0*/ s_nop           0x0
/*0000000233c4*/ s_nop           0x0
/*0000000233c8*/ s_nop           0x0
/*0000000233cc*/ s_nop           0x0
/*0000000233d0*/ s_nop           0x0
/*0000000233d4*/ s_nop           0x0
/*0000000233d8*/ s_nop           0x0
/*0000000233dc*/ s_nop           0x0
/*0000000233e0*/ s_nop           0x0
/*0000000233e4*/ s_nop           0x0
/*0000000233e8*/ s_nop           0x0
/*0000000233ec*/ s_nop           0x0
/*0000000233f0*/ s_nop           0x0
/*0000000233f4*/ s_nop           0x0
/*0000000233f8*/ s_nop           0x0
/*0000000233fc*/ s_nop           0x0
subtract_char_get_local_size_get_num_groups:
.skip 256
/*000000023500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000023508*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000023510*/ s_waitcnt       lgkmcnt(0)
/*000000023514*/ s_clause        0x1
/*000000023518*/ s_load_dword    s3, s[6:7], 0x20
/*000000023520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023528*/ s_lshl_b32      s7, s8, 1
/*00000002352c*/ s_lshl_b32      s8, s9, 1
/*000000023530*/ s_lshl_b32      s9, s10, 2
/*000000023534*/ s_and_b32       s11, s0, -2
/*000000023538*/ v_add3_u32      v0, s12, s7, v0
/*000000023540*/ v_cmp_gt_u32    s[6:7], s0, s11
/*000000023548*/ s_lshr_b32      s0, s0, 1
/*00000002354c*/ s_waitcnt       lgkmcnt(0)
/*000000023550*/ v_add3_u32      v4, s3, s9, v2
/*000000023558*/ v_add3_u32      v3, s14, s8, v1
/*000000023560*/ s_cmpk_lg_u32   s6, 0x0
/*000000023564*/ s_addc_u32      s0, s0, 0
/*000000023568*/ s_and_b32       s6, s1, -2
/*00000002356c*/ s_sub_i32       s0, 2, s0
/*000000023570*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000023578*/ s_lshr_b32      s1, s1, 1
/*00000002357c*/ v_mov_b32       v6, s0
/*000000023580*/ s_cmpk_lg_u32   s6, 0x0
/*000000023584*/ v_add_co_u32    v0, s[6:7], s4, v0
/*00000002358c*/ s_addc_u32      s1, s1, 0
/*000000023590*/ s_and_b32       s3, s2, -4
/*000000023594*/ s_sub_i32       s1, 2, s1
/*000000023598*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000235a0*/ s_lshr_b32      s2, s2, 2
/*0000000235a4*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*0000000235ac*/ v_add_co_u32    v2, s[6:7], s4, v3
/*0000000235b4*/ v_mov_b32       v9, s1
/*0000000235b8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000235bc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000235c4*/ s_addc_u32      s0, s2, 0
/*0000000235c8*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*0000000235d0*/ s_sub_i32       s0, 4, s0
/*0000000235d4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000235dc*/ v_mov_b32       v11, s0
/*0000000235e0*/ global_store_byte v[0:1], v6, off
/*0000000235e8*/ global_store_byte v[2:3], v9, off
/*0000000235f0*/ global_store_byte v[4:5], v11, off
/*0000000235f8*/ s_endpgm
/*0000000235fc*/ s_nop           0x0
subtract_char_get_global_id_get_num_groups:
.skip 256
/*000000023700*/ s_clause        0x1
/*000000023704*/ s_load_dword    s11, s[4:5], 0xc
/*00000002370c*/ s_load_dword    s12, s[4:5], 0x10
/*000000023714*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000002371c*/ s_waitcnt       lgkmcnt(0)
/*000000023720*/ s_load_dword    s1, s[6:7], 0x20
/*000000023728*/ s_load_dword    s3, s[4:5], 0x14
/*000000023730*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023738*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000023740*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000023748*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000023750*/ v_mov_b32       v5, 0
/*000000023754*/ s_and_b32       s13, s11, -2
/*000000023758*/ s_lshr_b32      s7, s11, 1
/*00000002375c*/ v_cmp_gt_u32    s[6:7], s11, s13
/*000000023764*/ v_add_nc_u32    v4, s0, v0
/*000000023768*/ s_waitcnt       lgkmcnt(0)
/*00000002376c*/ v_add_nc_u32    v7, s1, v2
/*000000023770*/ v_add_nc_u32    v6, s2, v1
/*000000023774*/ v_add_co_u32    v0, s[2:3], s4, v0
/*00000002377c*/ s_cmpk_lg_u32   s6, 0x0
/*000000023780*/ v_add_co_ci_u32 v1, s[2:3], s5, 0, s[2:3]
/*000000023788*/ s_addc_u32      s6, s7, 0
/*00000002378c*/ s_and_b32       s7, s12, -2
/*000000023790*/ s_lshr_b32      s0, s12, 1
/*000000023794*/ v_cmp_gt_u32    s[7:8], s12, s7
/*00000002379c*/ v_add_co_u32    v2, vcc, s4, v6
/*0000000237a4*/ v_subrev_nc_u32 v15, s6, v4
/*0000000237a8*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*0000000237ac*/ v_add_co_u32    v4, vcc, s4, v7
/*0000000237b4*/ s_cmpk_lg_u32   s7, 0x0
/*0000000237b8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000237bc*/ s_addc_u32      s0, s0, 0
/*0000000237c0*/ s_and_b32       s1, s3, -4
/*0000000237c4*/ s_lshr_b32      s2, s3, 2
/*0000000237c8*/ v_cmp_gt_u32    s[1:2], s3, s1
/*0000000237d0*/ v_subrev_nc_u32 v9, s0, v6
/*0000000237d4*/ s_cmpk_lg_u32   s1, 0x0
/*0000000237d8*/ s_addc_u32      s1, s2, 0
/*0000000237dc*/ v_subrev_nc_u32 v11, s1, v7
/*0000000237e0*/ global_store_byte v[0:1], v15, off
/*0000000237e8*/ global_store_byte v[2:3], v9, off
/*0000000237f0*/ global_store_byte v[4:5], v11, off
/*0000000237f8*/ s_endpgm
/*0000000237fc*/ s_nop           0x0
subtract_char_get_global_size_get_num_groups:
.skip 256
/*000000023900*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000023908*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000023910*/ s_waitcnt       lgkmcnt(0)
/*000000023914*/ s_clause        0x1
/*000000023918*/ s_load_dword    s3, s[6:7], 0x20
/*000000023920*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000023928*/ s_lshl_b32      s7, s8, 4
/*00000002392c*/ s_lshl_b32      s8, s9, 1
/*000000023930*/ s_lshl_b32      s9, s10, 1
/*000000023934*/ s_and_b32       s11, s0, -16
/*000000023938*/ s_lshr_b32      s10, s0, 4
/*00000002393c*/ v_cmp_gt_u32    s[6:7], s0, s11
/*000000023944*/ v_add3_u32      v0, s12, s7, v0
/*00000002394c*/ v_add3_u32      v3, s14, s8, v1
/*000000023954*/ s_waitcnt       lgkmcnt(0)
/*000000023958*/ v_add3_u32      v4, s3, s9, v2
/*000000023960*/ s_cmpk_lg_u32   s6, 0x0
/*000000023964*/ s_addc_u32      s6, s10, 0
/*000000023968*/ s_and_b32       s10, s1, -2
/*00000002396c*/ s_sub_i32       s0, s0, s6
/*000000023970*/ v_cmp_gt_u32    s[10:11], s1, s10
/*000000023978*/ s_lshr_b32      s7, s1, 1
/*00000002397c*/ v_mov_b32       v6, s0
/*000000023980*/ s_cmpk_lg_u32   s10, 0x0
/*000000023984*/ s_addc_u32      s3, s7, 0
/*000000023988*/ s_and_b32       s6, s2, -2
/*00000002398c*/ v_add_co_u32    v0, s[7:8], s4, v0
/*000000023994*/ v_cmp_gt_u32    s[6:7], s2, s6
/*00000002399c*/ v_add_co_ci_u32 v1, s[7:8], s5, 0, s[7:8]
/*0000000239a4*/ v_add_co_u32    v2, s[7:8], s4, v3
/*0000000239ac*/ s_sub_i32       s1, s1, s3
/*0000000239b0*/ v_add_co_ci_u32 v3, s[7:8], s5, 0, s[7:8]
/*0000000239b8*/ s_lshr_b32      s7, s2, 1
/*0000000239bc*/ s_cmpk_lg_u32   s6, 0x0
/*0000000239c0*/ v_mov_b32       v9, s1
/*0000000239c4*/ s_addc_u32      s0, s7, 0
/*0000000239c8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000239d0*/ s_sub_i32       s0, s2, s0
/*0000000239d4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000239dc*/ v_mov_b32       v11, s0
/*0000000239e0*/ global_store_byte v[0:1], v6, off
/*0000000239e8*/ global_store_byte v[2:3], v9, off
/*0000000239f0*/ global_store_byte v[4:5], v11, off
/*0000000239f8*/ s_endpgm
/*0000000239fc*/ s_nop           0x0
subtract_char_get_num_groups_get_num_groups:
.skip 256
/*000000023b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000023b08*/ s_waitcnt       lgkmcnt(0)
/*000000023b0c*/ s_clause        0x1
/*000000023b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000023b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000023b20*/ s_lshl_b32      s3, s6, 1
/*000000023b24*/ s_lshl_b32      s6, s7, 1
/*000000023b28*/ v_mov_b32       v6, 0
/*000000023b2c*/ v_add3_u32      v0, s0, s3, v0
/*000000023b34*/ s_lshl_b32      s0, s8, 2
/*000000023b38*/ v_add3_u32      v3, s2, s6, v1
/*000000023b40*/ s_waitcnt       lgkmcnt(0)
/*000000023b44*/ v_add3_u32      v4, s1, s0, v2
/*000000023b4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000023b54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000023b5c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000023b64*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000023b6c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000023b74*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000023b7c*/ global_store_byte v[0:1], v6, off
/*000000023b84*/ global_store_byte v[7:8], v6, off
/*000000023b8c*/ global_store_byte v[4:5], v6, off
/*000000023b94*/ s_endpgm
/*000000023b98*/ s_nop           0x0
/*000000023b9c*/ s_nop           0x0
/*000000023ba0*/ s_nop           0x0
/*000000023ba4*/ s_nop           0x0
/*000000023ba8*/ s_nop           0x0
/*000000023bac*/ s_nop           0x0
/*000000023bb0*/ s_nop           0x0
/*000000023bb4*/ s_nop           0x0
/*000000023bb8*/ s_nop           0x0
/*000000023bbc*/ s_nop           0x0
/*000000023bc0*/ s_nop           0x0
/*000000023bc4*/ s_nop           0x0
/*000000023bc8*/ s_nop           0x0
/*000000023bcc*/ s_nop           0x0
/*000000023bd0*/ s_nop           0x0
/*000000023bd4*/ s_nop           0x0
/*000000023bd8*/ s_nop           0x0
/*000000023bdc*/ s_nop           0x0
/*000000023be0*/ s_nop           0x0
/*000000023be4*/ s_nop           0x0
/*000000023be8*/ s_nop           0x0
/*000000023bec*/ s_nop           0x0
/*000000023bf0*/ s_nop           0x0
/*000000023bf4*/ s_nop           0x0
/*000000023bf8*/ s_nop           0x0
/*000000023bfc*/ s_nop           0x0
subtract_char_get_work_dim_get_num_groups:
.skip 256
/*000000023d00*/ v_mov_b32       v3, s4
/*000000023d04*/ v_mov_b32       v4, s5
/*000000023d08*/ s_clause        0x1
/*000000023d0c*/ s_load_dword    s11, s[4:5], 0xc
/*000000023d14*/ s_load_dword    s12, s[4:5], 0x10
/*000000023d1c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023d24*/ s_waitcnt       lgkmcnt(0)
/*000000023d28*/ s_load_dword    s1, s[6:7], 0x20
/*000000023d30*/ s_load_dword    s3, s[4:5], 0x14
/*000000023d38*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023d40*/ s_lshl_b32      s7, s8, 1
/*000000023d44*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000023d4c*/ s_lshl_b32      s8, s9, 1
/*000000023d50*/ s_lshl_b32      s9, s10, 2
/*000000023d54*/ s_and_b32       s13, s11, -2
/*000000023d58*/ s_lshr_b32      s10, s11, 1
/*000000023d5c*/ v_cmp_gt_u32    s[6:7], s11, s13
/*000000023d64*/ v_add3_u32      v0, s0, s7, v0
/*000000023d6c*/ v_add3_u32      v3, s2, s8, v1
/*000000023d74*/ s_waitcnt       lgkmcnt(0)
/*000000023d78*/ v_add3_u32      v4, s1, s9, v2
/*000000023d80*/ s_cmpk_lg_u32   s6, 0x0
/*000000023d84*/ v_add_co_u32    v0, s[2:3], s4, v0
/*000000023d8c*/ s_addc_u32      s6, s10, 0
/*000000023d90*/ s_and_b32       s10, s12, -2
/*000000023d94*/ s_lshr_b32      s0, s12, 1
/*000000023d98*/ v_cmp_gt_u32    s[10:11], s12, s10
/*000000023da0*/ v_add_co_ci_u32 v1, s[2:3], s5, 0, s[2:3]
/*000000023da8*/ v_add_co_u32    v2, s[2:3], s4, v3
/*000000023db0*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*000000023db8*/ s_cmpk_lg_u32   s10, 0x0
/*000000023dbc*/ s_addc_u32      s0, s0, 0
/*000000023dc0*/ s_and_b32       s1, s3, -4
/*000000023dc4*/ s_lshr_b32      s2, s3, 2
/*000000023dc8*/ v_cmp_gt_u32    s[1:2], s3, s1
/*000000023dd0*/ s_cmpk_lg_u32   s1, 0x0
/*000000023dd4*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000023ddc*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000023de4*/ s_addc_u32      s1, s2, 0
/*000000023de8*/ s_waitcnt       vmcnt(0)
/*000000023dec*/ v_and_b32       v7, 0xffff, v6
/*000000023df4*/ v_subrev_nc_u32 v6, s1, v6
/*000000023df8*/ v_subrev_nc_u32 v11, s6, v7
/*000000023dfc*/ v_subrev_nc_u32 v9, s0, v7
/*000000023e00*/ global_store_byte v[0:1], v11, off
/*000000023e08*/ global_store_byte v[2:3], v9, off
/*000000023e10*/ global_store_byte v[4:5], v6, off
/*000000023e18*/ s_endpgm
/*000000023e1c*/ s_nop           0x0
/*000000023e20*/ s_nop           0x0
/*000000023e24*/ s_nop           0x0
/*000000023e28*/ s_nop           0x0
/*000000023e2c*/ s_nop           0x0
/*000000023e30*/ s_nop           0x0
/*000000023e34*/ s_nop           0x0
/*000000023e38*/ s_nop           0x0
/*000000023e3c*/ s_nop           0x0
/*000000023e40*/ s_nop           0x0
/*000000023e44*/ s_nop           0x0
/*000000023e48*/ s_nop           0x0
/*000000023e4c*/ s_nop           0x0
/*000000023e50*/ s_nop           0x0
/*000000023e54*/ s_nop           0x0
/*000000023e58*/ s_nop           0x0
/*000000023e5c*/ s_nop           0x0
/*000000023e60*/ s_nop           0x0
/*000000023e64*/ s_nop           0x0
/*000000023e68*/ s_nop           0x0
/*000000023e6c*/ s_nop           0x0
/*000000023e70*/ s_nop           0x0
/*000000023e74*/ s_nop           0x0
/*000000023e78*/ s_nop           0x0
/*000000023e7c*/ s_nop           0x0
/*000000023e80*/ s_nop           0x0
/*000000023e84*/ s_nop           0x0
/*000000023e88*/ s_nop           0x0
/*000000023e8c*/ s_nop           0x0
/*000000023e90*/ s_nop           0x0
/*000000023e94*/ s_nop           0x0
/*000000023e98*/ s_nop           0x0
/*000000023e9c*/ s_nop           0x0
/*000000023ea0*/ s_nop           0x0
/*000000023ea4*/ s_nop           0x0
/*000000023ea8*/ s_nop           0x0
/*000000023eac*/ s_nop           0x0
/*000000023eb0*/ s_nop           0x0
/*000000023eb4*/ s_nop           0x0
/*000000023eb8*/ s_nop           0x0
/*000000023ebc*/ s_nop           0x0
/*000000023ec0*/ s_nop           0x0
/*000000023ec4*/ s_nop           0x0
/*000000023ec8*/ s_nop           0x0
/*000000023ecc*/ s_nop           0x0
/*000000023ed0*/ s_nop           0x0
/*000000023ed4*/ s_nop           0x0
/*000000023ed8*/ s_nop           0x0
/*000000023edc*/ s_nop           0x0
/*000000023ee0*/ s_nop           0x0
/*000000023ee4*/ s_nop           0x0
/*000000023ee8*/ s_nop           0x0
/*000000023eec*/ s_nop           0x0
/*000000023ef0*/ s_nop           0x0
/*000000023ef4*/ s_nop           0x0
/*000000023ef8*/ s_nop           0x0
/*000000023efc*/ s_nop           0x0
subtract_char_x_get_work_dim:
.skip 256
/*000000024000*/ v_mov_b32       v3, s4
/*000000024004*/ v_mov_b32       v4, s5
/*000000024008*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024010*/ s_waitcnt       lgkmcnt(0)
/*000000024014*/ s_clause        0x2
/*000000024018*/ s_load_dword    s1, s[6:7], 0x20
/*000000024020*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000024028*/ s_load_dword    s3, s[6:7], 0x8
/*000000024030*/ s_lshl_b32      s6, s8, 4
/*000000024034*/ s_lshl_b32      s7, s9, 1
/*000000024038*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000024040*/ v_add3_u32      v0, s0, s6, v0
/*000000024048*/ s_lshl_b32      s0, s10, 1
/*00000002404c*/ v_add3_u32      v3, s2, s7, v1
/*000000024054*/ s_waitcnt       lgkmcnt(0)
/*000000024058*/ v_add3_u32      v5, s1, s0, v2
/*000000024060*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000024068*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000024070*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000024078*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000024080*/ s_waitcnt       vmcnt(0)
/*000000024084*/ v_sub_nc_u32    v6, s3, v4
/*000000024088*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000024090*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024098*/ global_store_byte v[0:1], v6, off
/*0000000240a0*/ global_store_byte v[7:8], v6, off
/*0000000240a8*/ global_store_byte v[4:5], v6, off
/*0000000240b0*/ s_endpgm
/*0000000240b4*/ s_nop           0x0
/*0000000240b8*/ s_nop           0x0
/*0000000240bc*/ s_nop           0x0
/*0000000240c0*/ s_nop           0x0
/*0000000240c4*/ s_nop           0x0
/*0000000240c8*/ s_nop           0x0
/*0000000240cc*/ s_nop           0x0
/*0000000240d0*/ s_nop           0x0
/*0000000240d4*/ s_nop           0x0
/*0000000240d8*/ s_nop           0x0
/*0000000240dc*/ s_nop           0x0
/*0000000240e0*/ s_nop           0x0
/*0000000240e4*/ s_nop           0x0
/*0000000240e8*/ s_nop           0x0
/*0000000240ec*/ s_nop           0x0
/*0000000240f0*/ s_nop           0x0
/*0000000240f4*/ s_nop           0x0
/*0000000240f8*/ s_nop           0x0
/*0000000240fc*/ s_nop           0x0
subtract_char_get_global_offset_get_work_dim:
.skip 256
/*000000024200*/ v_mov_b32       v3, s4
/*000000024204*/ v_mov_b32       v4, s5
/*000000024208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024210*/ s_waitcnt       lgkmcnt(0)
/*000000024214*/ s_clause        0x1
/*000000024218*/ s_load_dword    s1, s[6:7], 0x20
/*000000024220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024228*/ s_lshl_b32      s3, s8, 1
/*00000002422c*/ s_lshl_b32      s6, s9, 4
/*000000024230*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024238*/ v_add3_u32      v0, s0, s3, v0
/*000000024240*/ s_lshl_b32      s3, s10, 1
/*000000024244*/ v_add3_u32      v3, s2, s6, v1
/*00000002424c*/ s_waitcnt       lgkmcnt(0)
/*000000024250*/ v_add3_u32      v4, s1, s3, v2
/*000000024258*/ v_add_co_u32    v0, s[3:4], s4, v0
/*000000024260*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*000000024268*/ v_add_co_u32    v2, s[3:4], s4, v3
/*000000024270*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*000000024278*/ v_add_co_u32    v4, s[3:4], s4, v4
/*000000024280*/ v_add_co_ci_u32 v5, s[3:4], s5, 0, s[3:4]
/*000000024288*/ s_waitcnt       vmcnt(0)
/*00000002428c*/ v_and_b32       v7, 0xffff, v6
/*000000024294*/ v_sub_nc_u32    v6, s1, v6
/*000000024298*/ v_sub_nc_u32    v11, s0, v7
/*00000002429c*/ v_sub_nc_u32    v9, s2, v7
/*0000000242a0*/ global_store_byte v[0:1], v11, off
/*0000000242a8*/ global_store_byte v[2:3], v9, off
/*0000000242b0*/ global_store_byte v[4:5], v6, off
/*0000000242b8*/ s_endpgm
/*0000000242bc*/ s_nop           0x0
/*0000000242c0*/ s_nop           0x0
/*0000000242c4*/ s_nop           0x0
/*0000000242c8*/ s_nop           0x0
/*0000000242cc*/ s_nop           0x0
/*0000000242d0*/ s_nop           0x0
/*0000000242d4*/ s_nop           0x0
/*0000000242d8*/ s_nop           0x0
/*0000000242dc*/ s_nop           0x0
/*0000000242e0*/ s_nop           0x0
/*0000000242e4*/ s_nop           0x0
/*0000000242e8*/ s_nop           0x0
/*0000000242ec*/ s_nop           0x0
/*0000000242f0*/ s_nop           0x0
/*0000000242f4*/ s_nop           0x0
/*0000000242f8*/ s_nop           0x0
/*0000000242fc*/ s_nop           0x0
subtract_char_get_local_id_get_work_dim:
.skip 256
/*000000024400*/ v_mov_b32       v3, s4
/*000000024404*/ v_mov_b32       v4, s5
/*000000024408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024410*/ s_waitcnt       lgkmcnt(0)
/*000000024414*/ s_clause        0x1
/*000000024418*/ s_load_dword    s1, s[6:7], 0x20
/*000000024420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024428*/ s_lshl_b32      s3, s8, 3
/*00000002442c*/ s_lshl_b32      s6, s9, 2
/*000000024430*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000024438*/ v_add3_u32      v3, s0, s3, v0
/*000000024440*/ s_lshl_b32      s0, s10, 1
/*000000024444*/ v_add3_u32      v5, s2, s6, v1
/*00000002444c*/ s_waitcnt       lgkmcnt(0)
/*000000024450*/ v_add3_u32      v7, s1, s0, v2
/*000000024458*/ v_add_co_u32    v3, s[0:1], s4, v3
/*000000024460*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*000000024468*/ v_add_co_u32    v5, s[0:1], s4, v5
/*000000024470*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*000000024478*/ v_add_co_u32    v7, s[0:1], s4, v7
/*000000024480*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000024488*/ s_waitcnt       vmcnt(0)
/*00000002448c*/ v_sub_nc_u32    v10, v0, v15
/*000000024490*/ v_sub_nc_u32    v11, v1, v15
/*000000024494*/ v_sub_nc_u32    v2, v2, v15
/*000000024498*/ global_store_byte v[3:4], v10, off
/*0000000244a0*/ global_store_byte v[5:6], v11, off
/*0000000244a8*/ global_store_byte v[7:8], v2, off
/*0000000244b0*/ s_endpgm
/*0000000244b4*/ s_nop           0x0
/*0000000244b8*/ s_nop           0x0
/*0000000244bc*/ s_nop           0x0
/*0000000244c0*/ s_nop           0x0
/*0000000244c4*/ s_nop           0x0
/*0000000244c8*/ s_nop           0x0
/*0000000244cc*/ s_nop           0x0
/*0000000244d0*/ s_nop           0x0
/*0000000244d4*/ s_nop           0x0
/*0000000244d8*/ s_nop           0x0
/*0000000244dc*/ s_nop           0x0
/*0000000244e0*/ s_nop           0x0
/*0000000244e4*/ s_nop           0x0
/*0000000244e8*/ s_nop           0x0
/*0000000244ec*/ s_nop           0x0
/*0000000244f0*/ s_nop           0x0
/*0000000244f4*/ s_nop           0x0
/*0000000244f8*/ s_nop           0x0
/*0000000244fc*/ s_nop           0x0
subtract_char_get_group_id_get_work_dim:
.skip 256
/*000000024600*/ v_mov_b32       v3, s4
/*000000024604*/ v_mov_b32       v4, s5
/*000000024608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024610*/ s_waitcnt       lgkmcnt(0)
/*000000024614*/ s_clause        0x1
/*000000024618*/ s_load_dword    s1, s[6:7], 0x20
/*000000024620*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024628*/ s_lshl_b32      s3, s8, 1
/*00000002462c*/ s_lshl_b32      s6, s9, 4
/*000000024630*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024638*/ v_add3_u32      v0, s0, s3, v0
/*000000024640*/ s_lshl_b32      s0, s10, 1
/*000000024644*/ v_add3_u32      v3, s2, s6, v1
/*00000002464c*/ s_waitcnt       lgkmcnt(0)
/*000000024650*/ v_add3_u32      v4, s1, s0, v2
/*000000024658*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000024660*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000024668*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000024670*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000024678*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000024680*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024688*/ s_waitcnt       vmcnt(0)
/*00000002468c*/ v_sub_nc_u32    v7, s8, v6
/*000000024690*/ v_sub_nc_u32    v8, s9, v6
/*000000024694*/ v_sub_nc_u32    v6, s10, v6
/*000000024698*/ global_store_byte v[0:1], v7, off
/*0000000246a0*/ global_store_byte v[2:3], v8, off
/*0000000246a8*/ global_store_byte v[4:5], v6, off
/*0000000246b0*/ s_endpgm
/*0000000246b4*/ s_nop           0x0
/*0000000246b8*/ s_nop           0x0
/*0000000246bc*/ s_nop           0x0
/*0000000246c0*/ s_nop           0x0
/*0000000246c4*/ s_nop           0x0
/*0000000246c8*/ s_nop           0x0
/*0000000246cc*/ s_nop           0x0
/*0000000246d0*/ s_nop           0x0
/*0000000246d4*/ s_nop           0x0
/*0000000246d8*/ s_nop           0x0
/*0000000246dc*/ s_nop           0x0
/*0000000246e0*/ s_nop           0x0
/*0000000246e4*/ s_nop           0x0
/*0000000246e8*/ s_nop           0x0
/*0000000246ec*/ s_nop           0x0
/*0000000246f0*/ s_nop           0x0
/*0000000246f4*/ s_nop           0x0
/*0000000246f8*/ s_nop           0x0
/*0000000246fc*/ s_nop           0x0
subtract_char_get_local_size_get_work_dim:
.skip 256
/*000000024800*/ v_mov_b32       v3, s4
/*000000024804*/ v_mov_b32       v4, s5
/*000000024808*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024810*/ s_waitcnt       lgkmcnt(0)
/*000000024814*/ s_clause        0x1
/*000000024818*/ s_load_dword    s1, s[6:7], 0x20
/*000000024820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024828*/ s_lshl_b32      s3, s8, 1
/*00000002482c*/ s_lshl_b32      s6, s9, 1
/*000000024830*/ global_load_ubyte v6, v[3:4], off inst_offset:2
/*000000024838*/ v_add3_u32      v0, s0, s3, v0
/*000000024840*/ s_lshl_b32      s0, s10, 2
/*000000024844*/ v_add3_u32      v3, s2, s6, v1
/*00000002484c*/ s_waitcnt       lgkmcnt(0)
/*000000024850*/ v_add3_u32      v4, s1, s0, v2
/*000000024858*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000024860*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000024868*/ v_add_co_u32    v9, s[0:1], s4, v3
/*000000024870*/ v_add_co_ci_u32 v10, s[0:1], s5, 0, s[0:1]
/*000000024878*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000024880*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024888*/ s_waitcnt       vmcnt(0)
/*00000002488c*/ v_sub_nc_u16    v7, 2, v6
/*000000024894*/ v_sub_nc_u32    v6, 4, v6
/*000000024898*/ global_store_byte v[0:1], v7, off
/*0000000248a0*/ global_store_byte v[9:10], v7, off
/*0000000248a8*/ global_store_byte v[4:5], v6, off
/*0000000248b0*/ s_endpgm
/*0000000248b4*/ s_nop           0x0
/*0000000248b8*/ s_nop           0x0
/*0000000248bc*/ s_nop           0x0
/*0000000248c0*/ s_nop           0x0
/*0000000248c4*/ s_nop           0x0
/*0000000248c8*/ s_nop           0x0
/*0000000248cc*/ s_nop           0x0
/*0000000248d0*/ s_nop           0x0
/*0000000248d4*/ s_nop           0x0
/*0000000248d8*/ s_nop           0x0
/*0000000248dc*/ s_nop           0x0
/*0000000248e0*/ s_nop           0x0
/*0000000248e4*/ s_nop           0x0
/*0000000248e8*/ s_nop           0x0
/*0000000248ec*/ s_nop           0x0
/*0000000248f0*/ s_nop           0x0
/*0000000248f4*/ s_nop           0x0
/*0000000248f8*/ s_nop           0x0
/*0000000248fc*/ s_nop           0x0
subtract_char_get_global_id_get_work_dim:
.skip 256
/*000000024a00*/ v_mov_b32       v3, s4
/*000000024a04*/ v_mov_b32       v4, s5
/*000000024a08*/ s_clause        0x2
/*000000024a0c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024a14*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*000000024a1c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000024a24*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000024a2c*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000024a34*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000024a3c*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024a44*/ s_waitcnt       lgkmcnt(0)
/*000000024a48*/ v_add_nc_u32    v7, s0, v0
/*000000024a4c*/ v_add_co_u32    v8, s[0:1], s2, v1
/*000000024a54*/ v_add_co_u32    v9, s[0:1], s4, v2
/*000000024a5c*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000024a64*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000024a6c*/ v_add_co_u32    v2, s[0:1], s6, v8
/*000000024a74*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000024a7c*/ v_add_co_u32    v4, s[0:1], s6, v9
/*000000024a84*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*000000024a8c*/ s_waitcnt       vmcnt(0)
/*000000024a90*/ v_sub_nc_u32    v7, v7, v6
/*000000024a94*/ v_sub_nc_u16    v8, v8, v6
/*000000024a9c*/ v_sub_nc_u16    v6, v9, v6
/*000000024aa4*/ global_store_byte v[0:1], v7, off
/*000000024aac*/ global_store_byte v[2:3], v8, off
/*000000024ab4*/ global_store_byte v[4:5], v6, off
/*000000024abc*/ s_endpgm
/*000000024ac0*/ s_nop           0x0
/*000000024ac4*/ s_nop           0x0
/*000000024ac8*/ s_nop           0x0
/*000000024acc*/ s_nop           0x0
/*000000024ad0*/ s_nop           0x0
/*000000024ad4*/ s_nop           0x0
/*000000024ad8*/ s_nop           0x0
/*000000024adc*/ s_nop           0x0
/*000000024ae0*/ s_nop           0x0
/*000000024ae4*/ s_nop           0x0
/*000000024ae8*/ s_nop           0x0
/*000000024aec*/ s_nop           0x0
/*000000024af0*/ s_nop           0x0
/*000000024af4*/ s_nop           0x0
/*000000024af8*/ s_nop           0x0
/*000000024afc*/ s_nop           0x0
subtract_char_get_global_size_get_work_dim:
.skip 256
/*000000024c00*/ v_mov_b32       v3, s4
/*000000024c04*/ v_mov_b32       v4, s5
/*000000024c08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024c10*/ s_waitcnt       lgkmcnt(0)
/*000000024c14*/ s_clause        0x1
/*000000024c18*/ s_load_dword    s1, s[6:7], 0x20
/*000000024c20*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*000000024c28*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000024c30*/ s_lshl_b32      s3, s8, 4
/*000000024c34*/ s_waitcnt       lgkmcnt(0)
/*000000024c38*/ s_lshl_b32      s7, s9, 1
/*000000024c3c*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024c44*/ v_add3_u32      v0, s0, s3, v0
/*000000024c4c*/ s_lshl_b32      s0, s10, 1
/*000000024c50*/ v_add3_u32      v3, s2, s7, v1
/*000000024c58*/ v_add3_u32      v4, s1, s0, v2
/*000000024c60*/ v_add_co_u32    v0, s[0:1], s12, v0
/*000000024c68*/ v_add_co_ci_u32 v1, s[0:1], s13, 0, s[0:1]
/*000000024c70*/ v_add_co_u32    v2, s[0:1], s12, v3
/*000000024c78*/ v_add_co_ci_u32 v3, s[0:1], s13, 0, s[0:1]
/*000000024c80*/ v_add_co_u32    v4, s[0:1], s12, v4
/*000000024c88*/ v_add_co_ci_u32 v5, s[0:1], s13, 0, s[0:1]
/*000000024c90*/ s_waitcnt       vmcnt(0)
/*000000024c94*/ v_sub_nc_u32    v7, s4, v6
/*000000024c98*/ v_sub_nc_u32    v8, s5, v6
/*000000024c9c*/ v_sub_nc_u32    v6, s6, v6
/*000000024ca0*/ global_store_byte v[0:1], v7, off
/*000000024ca8*/ global_store_byte v[2:3], v8, off
/*000000024cb0*/ global_store_byte v[4:5], v6, off
/*000000024cb8*/ s_endpgm
/*000000024cbc*/ s_nop           0x0
/*000000024cc0*/ s_nop           0x0
/*000000024cc4*/ s_nop           0x0
/*000000024cc8*/ s_nop           0x0
/*000000024ccc*/ s_nop           0x0
/*000000024cd0*/ s_nop           0x0
/*000000024cd4*/ s_nop           0x0
/*000000024cd8*/ s_nop           0x0
/*000000024cdc*/ s_nop           0x0
/*000000024ce0*/ s_nop           0x0
/*000000024ce4*/ s_nop           0x0
/*000000024ce8*/ s_nop           0x0
/*000000024cec*/ s_nop           0x0
/*000000024cf0*/ s_nop           0x0
/*000000024cf4*/ s_nop           0x0
/*000000024cf8*/ s_nop           0x0
/*000000024cfc*/ s_nop           0x0
subtract_char_get_num_groups_get_work_dim:
.skip 256
/*000000024e00*/ v_mov_b32       v3, s4
/*000000024e04*/ v_mov_b32       v4, s5
/*000000024e08*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000024e10*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000024e18*/ s_waitcnt       lgkmcnt(0)
/*000000024e1c*/ s_clause        0x1
/*000000024e20*/ s_load_dword    s3, s[6:7], 0x20
/*000000024e28*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024e30*/ s_lshl_b32      s7, s8, 1
/*000000024e34*/ s_lshl_b32      s8, s9, 1
/*000000024e38*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000024e40*/ s_lshl_b32      s9, s10, 2
/*000000024e44*/ s_and_b32       s6, s0, -2
/*000000024e48*/ v_add3_u32      v0, s12, s7, v0
/*000000024e50*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000024e58*/ s_lshr_b32      s0, s0, 1
/*000000024e5c*/ v_add3_u32      v3, s14, s8, v1
/*000000024e64*/ s_waitcnt       lgkmcnt(0)
/*000000024e68*/ v_add3_u32      v5, s3, s9, v2
/*000000024e70*/ s_cmpk_lg_u32   s6, 0x0
/*000000024e74*/ s_addc_u32      s0, s0, 0
/*000000024e78*/ s_and_b32       s6, s1, -2
/*000000024e7c*/ v_cmp_gt_u32    s[3:4], s1, s6
/*000000024e84*/ s_lshr_b32      s1, s1, 1
/*000000024e88*/ v_add_co_u32    v0, s[6:7], s4, v0
/*000000024e90*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*000000024e98*/ s_cmpk_lg_u32   s3, 0x0
/*000000024e9c*/ v_add_co_u32    v2, s[3:4], s4, v3
/*000000024ea4*/ s_addc_u32      s1, s1, 0
/*000000024ea8*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*000000024eb0*/ s_lshr_b32      s3, s2, 2
/*000000024eb4*/ s_and_b32       s6, s2, -4
/*000000024eb8*/ v_cmp_gt_u32    vcc, s2, s6
/*000000024ec0*/ s_waitcnt       vmcnt(0)
/*000000024ec4*/ v_sub_nc_u32    v6, s3, v4
/*000000024ec8*/ v_sub_nc_u32    v7, s0, v4
/*000000024ecc*/ v_sub_nc_u32    v8, s1, v4
/*000000024ed0*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000024ed8*/ v_add_co_ci_u32 v6, vcc, 0, v6, vcc
/*000000024edc*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024ee4*/ global_store_byte v[0:1], v7, off
/*000000024eec*/ global_store_byte v[2:3], v8, off
/*000000024ef4*/ global_store_byte v[4:5], v6, off
/*000000024efc*/ s_endpgm
subtract_char_get_work_dim_get_work_dim:
.skip 256
/*000000025000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000025008*/ s_waitcnt       lgkmcnt(0)
/*00000002500c*/ s_clause        0x1
/*000000025010*/ s_load_dword    s1, s[4:5], 0x20
/*000000025018*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000025020*/ s_lshl_b32      s3, s6, 1
/*000000025024*/ s_lshl_b32      s6, s7, 1
/*000000025028*/ v_mov_b32       v6, 0
/*00000002502c*/ v_add3_u32      v0, s0, s3, v0
/*000000025034*/ s_lshl_b32      s0, s8, 2
/*000000025038*/ v_add3_u32      v3, s2, s6, v1
/*000000025040*/ s_waitcnt       lgkmcnt(0)
/*000000025044*/ v_add3_u32      v4, s1, s0, v2
/*00000002504c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000025054*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002505c*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000025064*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000002506c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000025074*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000002507c*/ global_store_byte v[0:1], v6, off
/*000000025084*/ global_store_byte v[7:8], v6, off
/*00000002508c*/ global_store_byte v[4:5], v6, off
/*000000025094*/ s_endpgm
/*000000025098*/ s_nop           0x0
/*00000002509c*/ s_nop           0x0
/*0000000250a0*/ s_nop           0x0
/*0000000250a4*/ s_nop           0x0
/*0000000250a8*/ s_nop           0x0
/*0000000250ac*/ s_nop           0x0
/*0000000250b0*/ s_nop           0x0
/*0000000250b4*/ s_nop           0x0
/*0000000250b8*/ s_nop           0x0
/*0000000250bc*/ s_nop           0x0
/*0000000250c0*/ s_nop           0x0
/*0000000250c4*/ s_nop           0x0
/*0000000250c8*/ s_nop           0x0
/*0000000250cc*/ s_nop           0x0
/*0000000250d0*/ s_nop           0x0
/*0000000250d4*/ s_nop           0x0
/*0000000250d8*/ s_nop           0x0
/*0000000250dc*/ s_nop           0x0
/*0000000250e0*/ s_nop           0x0
/*0000000250e4*/ s_nop           0x0
/*0000000250e8*/ s_nop           0x0
/*0000000250ec*/ s_nop           0x0
/*0000000250f0*/ s_nop           0x0
/*0000000250f4*/ s_nop           0x0
/*0000000250f8*/ s_nop           0x0
/*0000000250fc*/ s_nop           0x0
subtract_char_x_64:
.skip 256
/*000000025200*/ s_clause        0x2
/*000000025204*/ s_load_dword    s2, s[4:5], 0x10
/*00000002520c*/ s_load_dword    s3, s[4:5], 0x0
/*000000025214*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000002521c*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000025224*/ s_waitcnt       lgkmcnt(0)
/*000000025228*/ v_add_nc_u32    v0, s2, v0
/*00000002522c*/ v_sub_nc_u32    v2, s3, v0
/*000000025230*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025238*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000025240*/ global_store_byte v[0:1], v2, off
/*000000025248*/ s_endpgm
/*00000002524c*/ s_nop           0x0
/*000000025250*/ s_nop           0x0
/*000000025254*/ s_nop           0x0
/*000000025258*/ s_nop           0x0
/*00000002525c*/ s_nop           0x0
/*000000025260*/ s_nop           0x0
/*000000025264*/ s_nop           0x0
/*000000025268*/ s_nop           0x0
/*00000002526c*/ s_nop           0x0
/*000000025270*/ s_nop           0x0
/*000000025274*/ s_nop           0x0
/*000000025278*/ s_nop           0x0
/*00000002527c*/ s_nop           0x0
/*000000025280*/ s_nop           0x0
/*000000025284*/ s_nop           0x0
/*000000025288*/ s_nop           0x0
/*00000002528c*/ s_nop           0x0
/*000000025290*/ s_nop           0x0
/*000000025294*/ s_nop           0x0
/*000000025298*/ s_nop           0x0
/*00000002529c*/ s_nop           0x0
/*0000000252a0*/ s_nop           0x0
/*0000000252a4*/ s_nop           0x0
/*0000000252a8*/ s_nop           0x0
/*0000000252ac*/ s_nop           0x0
/*0000000252b0*/ s_nop           0x0
/*0000000252b4*/ s_nop           0x0
/*0000000252b8*/ s_nop           0x0
/*0000000252bc*/ s_nop           0x0
/*0000000252c0*/ s_nop           0x0
/*0000000252c4*/ s_nop           0x0
/*0000000252c8*/ s_nop           0x0
/*0000000252cc*/ s_nop           0x0
/*0000000252d0*/ s_nop           0x0
/*0000000252d4*/ s_nop           0x0
/*0000000252d8*/ s_nop           0x0
/*0000000252dc*/ s_nop           0x0
/*0000000252e0*/ s_nop           0x0
/*0000000252e4*/ s_nop           0x0
/*0000000252e8*/ s_nop           0x0
/*0000000252ec*/ s_nop           0x0
/*0000000252f0*/ s_nop           0x0
/*0000000252f4*/ s_nop           0x0
/*0000000252f8*/ s_nop           0x0
/*0000000252fc*/ s_nop           0x0
subtract_char_get_global_offset_64:
.skip 256
/*000000025400*/ s_clause        0x1
/*000000025404*/ s_load_dwordx2  s[0:1], s[4:5], 0x10
/*00000002540c*/ s_load_dwordx2  s[2:3], s[4:5], 0x8
/*000000025414*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000002541c*/ s_waitcnt       lgkmcnt(0)
/*000000025420*/ v_add_co_u32    v0, s[1:2], s0, v0
/*000000025428*/ v_sub_nc_u16    v2, s0, v0
/*000000025430*/ v_add_co_u32    v0, s[0:1], s2, v0
/*000000025438*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000025440*/ global_store_byte v[0:1], v2, off
/*000000025448*/ s_endpgm
/*00000002544c*/ s_nop           0x0
/*000000025450*/ s_nop           0x0
/*000000025454*/ s_nop           0x0
/*000000025458*/ s_nop           0x0
/*00000002545c*/ s_nop           0x0
/*000000025460*/ s_nop           0x0
/*000000025464*/ s_nop           0x0
/*000000025468*/ s_nop           0x0
/*00000002546c*/ s_nop           0x0
/*000000025470*/ s_nop           0x0
/*000000025474*/ s_nop           0x0
/*000000025478*/ s_nop           0x0
/*00000002547c*/ s_nop           0x0
/*000000025480*/ s_nop           0x0
/*000000025484*/ s_nop           0x0
/*000000025488*/ s_nop           0x0
/*00000002548c*/ s_nop           0x0
/*000000025490*/ s_nop           0x0
/*000000025494*/ s_nop           0x0
/*000000025498*/ s_nop           0x0
/*00000002549c*/ s_nop           0x0
/*0000000254a0*/ s_nop           0x0
/*0000000254a4*/ s_nop           0x0
/*0000000254a8*/ s_nop           0x0
/*0000000254ac*/ s_nop           0x0
/*0000000254b0*/ s_nop           0x0
/*0000000254b4*/ s_nop           0x0
/*0000000254b8*/ s_nop           0x0
/*0000000254bc*/ s_nop           0x0
/*0000000254c0*/ s_nop           0x0
/*0000000254c4*/ s_nop           0x0
/*0000000254c8*/ s_nop           0x0
/*0000000254cc*/ s_nop           0x0
/*0000000254d0*/ s_nop           0x0
/*0000000254d4*/ s_nop           0x0
/*0000000254d8*/ s_nop           0x0
/*0000000254dc*/ s_nop           0x0
/*0000000254e0*/ s_nop           0x0
/*0000000254e4*/ s_nop           0x0
/*0000000254e8*/ s_nop           0x0
/*0000000254ec*/ s_nop           0x0
/*0000000254f0*/ s_nop           0x0
/*0000000254f4*/ s_nop           0x0
/*0000000254f8*/ s_nop           0x0
/*0000000254fc*/ s_nop           0x0
subtract_char_get_local_id_64:
.skip 256
/*000000025600*/ s_clause        0x1
/*000000025604*/ s_load_dwordx2  s[0:1], s[4:5], 0x10
/*00000002560c*/ s_load_dwordx2  s[2:3], s[4:5], 0x8
/*000000025614*/ v_lshl_or_b32   v1, s6, 6, v0
/*00000002561c*/ s_waitcnt       lgkmcnt(0)
/*000000025620*/ v_add_co_u32    v1, s[0:1], s0, v1
/*000000025628*/ v_sub_nc_u16    v2, v0, v1
/*000000025630*/ v_add_co_u32    v0, s[0:1], s2, v1
/*000000025638*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000025640*/ global_store_byte v[0:1], v2, off
/*000000025648*/ s_endpgm
/*00000002564c*/ s_nop           0x0
/*000000025650*/ s_nop           0x0
/*000000025654*/ s_nop           0x0
/*000000025658*/ s_nop           0x0
/*00000002565c*/ s_nop           0x0
/*000000025660*/ s_nop           0x0
/*000000025664*/ s_nop           0x0
/*000000025668*/ s_nop           0x0
/*00000002566c*/ s_nop           0x0
/*000000025670*/ s_nop           0x0
/*000000025674*/ s_nop           0x0
/*000000025678*/ s_nop           0x0
/*00000002567c*/ s_nop           0x0
/*000000025680*/ s_nop           0x0
/*000000025684*/ s_nop           0x0
/*000000025688*/ s_nop           0x0
/*00000002568c*/ s_nop           0x0
/*000000025690*/ s_nop           0x0
/*000000025694*/ s_nop           0x0
/*000000025698*/ s_nop           0x0
/*00000002569c*/ s_nop           0x0
/*0000000256a0*/ s_nop           0x0
/*0000000256a4*/ s_nop           0x0
/*0000000256a8*/ s_nop           0x0
/*0000000256ac*/ s_nop           0x0
/*0000000256b0*/ s_nop           0x0
/*0000000256b4*/ s_nop           0x0
/*0000000256b8*/ s_nop           0x0
/*0000000256bc*/ s_nop           0x0
/*0000000256c0*/ s_nop           0x0
/*0000000256c4*/ s_nop           0x0
/*0000000256c8*/ s_nop           0x0
/*0000000256cc*/ s_nop           0x0
/*0000000256d0*/ s_nop           0x0
/*0000000256d4*/ s_nop           0x0
/*0000000256d8*/ s_nop           0x0
/*0000000256dc*/ s_nop           0x0
/*0000000256e0*/ s_nop           0x0
/*0000000256e4*/ s_nop           0x0
/*0000000256e8*/ s_nop           0x0
/*0000000256ec*/ s_nop           0x0
/*0000000256f0*/ s_nop           0x0
/*0000000256f4*/ s_nop           0x0
/*0000000256f8*/ s_nop           0x0
/*0000000256fc*/ s_nop           0x0
subtract_char_get_group_id_64:
.skip 256
/*000000025800*/ s_clause        0x1
/*000000025804*/ s_load_dwordx2  s[0:1], s[4:5], 0x10
/*00000002580c*/ s_load_dwordx2  s[2:3], s[4:5], 0x8
/*000000025814*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000002581c*/ s_waitcnt       lgkmcnt(0)
/*000000025820*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025828*/ v_sub_nc_u16    v2, s6, v0
/*000000025830*/ v_add_co_u32    v0, s[0:1], s2, v0
/*000000025838*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000025840*/ global_store_byte v[0:1], v2, off
/*000000025848*/ s_endpgm
/*00000002584c*/ s_nop           0x0
/*000000025850*/ s_nop           0x0
/*000000025854*/ s_nop           0x0
/*000000025858*/ s_nop           0x0
/*00000002585c*/ s_nop           0x0
/*000000025860*/ s_nop           0x0
/*000000025864*/ s_nop           0x0
/*000000025868*/ s_nop           0x0
/*00000002586c*/ s_nop           0x0
/*000000025870*/ s_nop           0x0
/*000000025874*/ s_nop           0x0
/*000000025878*/ s_nop           0x0
/*00000002587c*/ s_nop           0x0
/*000000025880*/ s_nop           0x0
/*000000025884*/ s_nop           0x0
/*000000025888*/ s_nop           0x0
/*00000002588c*/ s_nop           0x0
/*000000025890*/ s_nop           0x0
/*000000025894*/ s_nop           0x0
/*000000025898*/ s_nop           0x0
/*00000002589c*/ s_nop           0x0
/*0000000258a0*/ s_nop           0x0
/*0000000258a4*/ s_nop           0x0
/*0000000258a8*/ s_nop           0x0
/*0000000258ac*/ s_nop           0x0
/*0000000258b0*/ s_nop           0x0
/*0000000258b4*/ s_nop           0x0
/*0000000258b8*/ s_nop           0x0
/*0000000258bc*/ s_nop           0x0
/*0000000258c0*/ s_nop           0x0
/*0000000258c4*/ s_nop           0x0
/*0000000258c8*/ s_nop           0x0
/*0000000258cc*/ s_nop           0x0
/*0000000258d0*/ s_nop           0x0
/*0000000258d4*/ s_nop           0x0
/*0000000258d8*/ s_nop           0x0
/*0000000258dc*/ s_nop           0x0
/*0000000258e0*/ s_nop           0x0
/*0000000258e4*/ s_nop           0x0
/*0000000258e8*/ s_nop           0x0
/*0000000258ec*/ s_nop           0x0
/*0000000258f0*/ s_nop           0x0
/*0000000258f4*/ s_nop           0x0
/*0000000258f8*/ s_nop           0x0
/*0000000258fc*/ s_nop           0x0
subtract_char_get_local_size_64:
.skip 256
/*000000025a00*/ s_clause        0x1
/*000000025a04*/ s_load_dwordx2  s[0:1], s[4:5], 0x10
/*000000025a0c*/ s_load_dwordx2  s[2:3], s[4:5], 0x8
/*000000025a14*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000025a1c*/ s_waitcnt       lgkmcnt(0)
/*000000025a20*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025a28*/ v_sub_nc_u16    v2, 64, v0
/*000000025a30*/ v_add_co_u32    v0, s[0:1], s2, v0
/*000000025a38*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000025a40*/ global_store_byte v[0:1], v2, off
/*000000025a48*/ s_endpgm
/*000000025a4c*/ s_nop           0x0
/*000000025a50*/ s_nop           0x0
/*000000025a54*/ s_nop           0x0
/*000000025a58*/ s_nop           0x0
/*000000025a5c*/ s_nop           0x0
/*000000025a60*/ s_nop           0x0
/*000000025a64*/ s_nop           0x0
/*000000025a68*/ s_nop           0x0
/*000000025a6c*/ s_nop           0x0
/*000000025a70*/ s_nop           0x0
/*000000025a74*/ s_nop           0x0
/*000000025a78*/ s_nop           0x0
/*000000025a7c*/ s_nop           0x0
/*000000025a80*/ s_nop           0x0
/*000000025a84*/ s_nop           0x0
/*000000025a88*/ s_nop           0x0
/*000000025a8c*/ s_nop           0x0
/*000000025a90*/ s_nop           0x0
/*000000025a94*/ s_nop           0x0
/*000000025a98*/ s_nop           0x0
/*000000025a9c*/ s_nop           0x0
/*000000025aa0*/ s_nop           0x0
/*000000025aa4*/ s_nop           0x0
/*000000025aa8*/ s_nop           0x0
/*000000025aac*/ s_nop           0x0
/*000000025ab0*/ s_nop           0x0
/*000000025ab4*/ s_nop           0x0
/*000000025ab8*/ s_nop           0x0
/*000000025abc*/ s_nop           0x0
/*000000025ac0*/ s_nop           0x0
/*000000025ac4*/ s_nop           0x0
/*000000025ac8*/ s_nop           0x0
/*000000025acc*/ s_nop           0x0
/*000000025ad0*/ s_nop           0x0
/*000000025ad4*/ s_nop           0x0
/*000000025ad8*/ s_nop           0x0
/*000000025adc*/ s_nop           0x0
/*000000025ae0*/ s_nop           0x0
/*000000025ae4*/ s_nop           0x0
/*000000025ae8*/ s_nop           0x0
/*000000025aec*/ s_nop           0x0
/*000000025af0*/ s_nop           0x0
/*000000025af4*/ s_nop           0x0
/*000000025af8*/ s_nop           0x0
/*000000025afc*/ s_nop           0x0
subtract_char_get_global_id_64:
.skip 256
/*000000025c00*/ s_clause        0x1
/*000000025c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000025c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000025c14*/ s_lshl_b32      s3, s6, 6
/*000000025c18*/ v_mov_b32       v2, 0
/*000000025c1c*/ s_waitcnt       lgkmcnt(0)
/*000000025c20*/ v_add3_u32      v0, s2, s3, v0
/*000000025c28*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025c30*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000025c38*/ global_store_byte v[0:1], v2, off
/*000000025c40*/ s_endpgm
/*000000025c44*/ s_nop           0x0
/*000000025c48*/ s_nop           0x0
/*000000025c4c*/ s_nop           0x0
/*000000025c50*/ s_nop           0x0
/*000000025c54*/ s_nop           0x0
/*000000025c58*/ s_nop           0x0
/*000000025c5c*/ s_nop           0x0
/*000000025c60*/ s_nop           0x0
/*000000025c64*/ s_nop           0x0
/*000000025c68*/ s_nop           0x0
/*000000025c6c*/ s_nop           0x0
/*000000025c70*/ s_nop           0x0
/*000000025c74*/ s_nop           0x0
/*000000025c78*/ s_nop           0x0
/*000000025c7c*/ s_nop           0x0
/*000000025c80*/ s_nop           0x0
/*000000025c84*/ s_nop           0x0
/*000000025c88*/ s_nop           0x0
/*000000025c8c*/ s_nop           0x0
/*000000025c90*/ s_nop           0x0
/*000000025c94*/ s_nop           0x0
/*000000025c98*/ s_nop           0x0
/*000000025c9c*/ s_nop           0x0
/*000000025ca0*/ s_nop           0x0
/*000000025ca4*/ s_nop           0x0
/*000000025ca8*/ s_nop           0x0
/*000000025cac*/ s_nop           0x0
/*000000025cb0*/ s_nop           0x0
/*000000025cb4*/ s_nop           0x0
/*000000025cb8*/ s_nop           0x0
/*000000025cbc*/ s_nop           0x0
/*000000025cc0*/ s_nop           0x0
/*000000025cc4*/ s_nop           0x0
/*000000025cc8*/ s_nop           0x0
/*000000025ccc*/ s_nop           0x0
/*000000025cd0*/ s_nop           0x0
/*000000025cd4*/ s_nop           0x0
/*000000025cd8*/ s_nop           0x0
/*000000025cdc*/ s_nop           0x0
/*000000025ce0*/ s_nop           0x0
/*000000025ce4*/ s_nop           0x0
/*000000025ce8*/ s_nop           0x0
/*000000025cec*/ s_nop           0x0
/*000000025cf0*/ s_nop           0x0
/*000000025cf4*/ s_nop           0x0
/*000000025cf8*/ s_nop           0x0
/*000000025cfc*/ s_nop           0x0
subtract_char_get_global_size_64:
.skip 256
/*000000025e00*/ s_load_dwordx2  s[0:1], s[6:7], 0x10
/*000000025e08*/ s_waitcnt       lgkmcnt(0)
/*000000025e0c*/ s_load_dword    s1, s[4:5], 0xc
/*000000025e14*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*000000025e1c*/ v_lshl_or_b32   v0, s8, 6, v0
/*000000025e24*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025e2c*/ s_waitcnt       lgkmcnt(0)
/*000000025e30*/ v_sub_nc_u16    v2, s1, v0
/*000000025e38*/ v_add_co_u32    v0, s[0:1], s2, v0
/*000000025e40*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000025e48*/ global_store_byte v[0:1], v2, off
/*000000025e50*/ s_endpgm
/*000000025e54*/ s_nop           0x0
/*000000025e58*/ s_nop           0x0
/*000000025e5c*/ s_nop           0x0
/*000000025e60*/ s_nop           0x0
/*000000025e64*/ s_nop           0x0
/*000000025e68*/ s_nop           0x0
/*000000025e6c*/ s_nop           0x0
/*000000025e70*/ s_nop           0x0
/*000000025e74*/ s_nop           0x0
/*000000025e78*/ s_nop           0x0
/*000000025e7c*/ s_nop           0x0
/*000000025e80*/ s_nop           0x0
/*000000025e84*/ s_nop           0x0
/*000000025e88*/ s_nop           0x0
/*000000025e8c*/ s_nop           0x0
/*000000025e90*/ s_nop           0x0
/*000000025e94*/ s_nop           0x0
/*000000025e98*/ s_nop           0x0
/*000000025e9c*/ s_nop           0x0
/*000000025ea0*/ s_nop           0x0
/*000000025ea4*/ s_nop           0x0
/*000000025ea8*/ s_nop           0x0
/*000000025eac*/ s_nop           0x0
/*000000025eb0*/ s_nop           0x0
/*000000025eb4*/ s_nop           0x0
/*000000025eb8*/ s_nop           0x0
/*000000025ebc*/ s_nop           0x0
/*000000025ec0*/ s_nop           0x0
/*000000025ec4*/ s_nop           0x0
/*000000025ec8*/ s_nop           0x0
/*000000025ecc*/ s_nop           0x0
/*000000025ed0*/ s_nop           0x0
/*000000025ed4*/ s_nop           0x0
/*000000025ed8*/ s_nop           0x0
/*000000025edc*/ s_nop           0x0
/*000000025ee0*/ s_nop           0x0
/*000000025ee4*/ s_nop           0x0
/*000000025ee8*/ s_nop           0x0
/*000000025eec*/ s_nop           0x0
/*000000025ef0*/ s_nop           0x0
/*000000025ef4*/ s_nop           0x0
/*000000025ef8*/ s_nop           0x0
/*000000025efc*/ s_nop           0x0
subtract_char_get_num_groups_64:
.skip 256
/*000000026000*/ s_load_dword    s4, s[4:5], 0xc
/*000000026008*/ s_clause        0x1
/*00000002600c*/ s_load_dwordx2  s[0:1], s[6:7], 0x10
/*000000026014*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000002601c*/ v_lshl_or_b32   v0, s8, 6, v0
/*000000026024*/ v_mov_b32       v1, 0
/*000000026028*/ s_waitcnt       lgkmcnt(0)
/*00000002602c*/ s_and_b32       s1, s4, 0xffffffc0
/*000000026034*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000002603c*/ v_cmp_gt_u32    s[1:2], s4, s1
/*000000026044*/ s_lshr_b32      s0, s4, 6
/*000000026048*/ s_cmpk_lg_u32   s1, 0x0
/*00000002604c*/ s_addc_u32      s0, s0, 0
/*000000026050*/ v_sub_nc_u16    v2, s0, v0
/*000000026058*/ v_add_co_u32    v0, vcc, s2, v0
/*000000026060*/ v_add_co_ci_u32 v1, vcc, s3, v1, vcc
/*000000026064*/ global_store_byte v[0:1], v2, off
/*00000002606c*/ s_endpgm
/*000000026070*/ s_nop           0x0
/*000000026074*/ s_nop           0x0
/*000000026078*/ s_nop           0x0
/*00000002607c*/ s_nop           0x0
/*000000026080*/ s_nop           0x0
/*000000026084*/ s_nop           0x0
/*000000026088*/ s_nop           0x0
/*00000002608c*/ s_nop           0x0
/*000000026090*/ s_nop           0x0
/*000000026094*/ s_nop           0x0
/*000000026098*/ s_nop           0x0
/*00000002609c*/ s_nop           0x0
/*0000000260a0*/ s_nop           0x0
/*0000000260a4*/ s_nop           0x0
/*0000000260a8*/ s_nop           0x0
/*0000000260ac*/ s_nop           0x0
/*0000000260b0*/ s_nop           0x0
/*0000000260b4*/ s_nop           0x0
/*0000000260b8*/ s_nop           0x0
/*0000000260bc*/ s_nop           0x0
/*0000000260c0*/ s_nop           0x0
/*0000000260c4*/ s_nop           0x0
/*0000000260c8*/ s_nop           0x0
/*0000000260cc*/ s_nop           0x0
/*0000000260d0*/ s_nop           0x0
/*0000000260d4*/ s_nop           0x0
/*0000000260d8*/ s_nop           0x0
/*0000000260dc*/ s_nop           0x0
/*0000000260e0*/ s_nop           0x0
/*0000000260e4*/ s_nop           0x0
/*0000000260e8*/ s_nop           0x0
/*0000000260ec*/ s_nop           0x0
/*0000000260f0*/ s_nop           0x0
/*0000000260f4*/ s_nop           0x0
/*0000000260f8*/ s_nop           0x0
/*0000000260fc*/ s_nop           0x0
subtract_char_get_work_dim:
.skip 256
/*000000026200*/ v_mov_b32       v1, s4
/*000000026204*/ v_mov_b32       v2, s5
/*000000026208*/ s_clause        0x1
/*00000002620c*/ s_load_dwordx2  s[0:1], s[6:7], 0x10
/*000000026214*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000002621c*/ v_lshl_or_b32   v0, s8, 6, v0
/*000000026224*/ global_load_ubyte v1, v[1:2], off inst_offset:2
/*00000002622c*/ s_waitcnt       lgkmcnt(0)
/*000000026230*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026238*/ s_waitcnt       vmcnt(0)
/*00000002623c*/ v_sub_nc_u16    v2, v1, v0
/*000000026244*/ v_add_co_u32    v0, s[0:1], s2, v0
/*00000002624c*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000026254*/ global_store_byte v[0:1], v2, off
/*00000002625c*/ s_endpgm
/*000000026260*/ s_nop           0x0
/*000000026264*/ s_nop           0x0
/*000000026268*/ s_nop           0x0
/*00000002626c*/ s_nop           0x0
/*000000026270*/ s_nop           0x0
/*000000026274*/ s_nop           0x0
/*000000026278*/ s_nop           0x0
/*00000002627c*/ s_nop           0x0
/*000000026280*/ s_nop           0x0
/*000000026284*/ s_nop           0x0
/*000000026288*/ s_nop           0x0
/*00000002628c*/ s_nop           0x0
/*000000026290*/ s_nop           0x0
/*000000026294*/ s_nop           0x0
/*000000026298*/ s_nop           0x0
/*00000002629c*/ s_nop           0x0
/*0000000262a0*/ s_nop           0x0
/*0000000262a4*/ s_nop           0x0
/*0000000262a8*/ s_nop           0x0
/*0000000262ac*/ s_nop           0x0
/*0000000262b0*/ s_nop           0x0
/*0000000262b4*/ s_nop           0x0
/*0000000262b8*/ s_nop           0x0
/*0000000262bc*/ s_nop           0x0
/*0000000262c0*/ s_nop           0x0
/*0000000262c4*/ s_nop           0x0
/*0000000262c8*/ s_nop           0x0
/*0000000262cc*/ s_nop           0x0
/*0000000262d0*/ s_nop           0x0
/*0000000262d4*/ s_nop           0x0
/*0000000262d8*/ s_nop           0x0
/*0000000262dc*/ s_nop           0x0
/*0000000262e0*/ s_nop           0x0
/*0000000262e4*/ s_nop           0x0
/*0000000262e8*/ s_nop           0x0
/*0000000262ec*/ s_nop           0x0
/*0000000262f0*/ s_nop           0x0
/*0000000262f4*/ s_nop           0x0
/*0000000262f8*/ s_nop           0x0
/*0000000262fc*/ s_nop           0x0
subtract_char_x_8_8:
.skip 256
/*000000026400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000026408*/ s_waitcnt       lgkmcnt(0)
/*00000002640c*/ s_clause        0x1
/*000000026410*/ s_load_dword    s1, s[4:5], 0x0
/*000000026418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000026420*/ s_lshl_b32      s3, s6, 3
/*000000026424*/ v_add_nc_u32    v1, s2, v1
/*000000026428*/ v_add3_u32      v0, s0, s3, v0
/*000000026430*/ s_lshl_b32      s2, s7, 3
/*000000026434*/ s_waitcnt       lgkmcnt(0)
/*000000026438*/ s_sub_i32       s0, s1, s2
/*00000002643c*/ v_sub_nc_u32    v2, s0, v1
/*000000026440*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000026448*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000026450*/ global_store_byte v[0:1], v2, off
/*000000026458*/ s_endpgm
/*00000002645c*/ s_nop           0x0
/*000000026460*/ s_nop           0x0
/*000000026464*/ s_nop           0x0
/*000000026468*/ s_nop           0x0
/*00000002646c*/ s_nop           0x0
/*000000026470*/ s_nop           0x0
/*000000026474*/ s_nop           0x0
/*000000026478*/ s_nop           0x0
/*00000002647c*/ s_nop           0x0
/*000000026480*/ s_nop           0x0
/*000000026484*/ s_nop           0x0
/*000000026488*/ s_nop           0x0
/*00000002648c*/ s_nop           0x0
/*000000026490*/ s_nop           0x0
/*000000026494*/ s_nop           0x0
/*000000026498*/ s_nop           0x0
/*00000002649c*/ s_nop           0x0
/*0000000264a0*/ s_nop           0x0
/*0000000264a4*/ s_nop           0x0
/*0000000264a8*/ s_nop           0x0
/*0000000264ac*/ s_nop           0x0
/*0000000264b0*/ s_nop           0x0
/*0000000264b4*/ s_nop           0x0
/*0000000264b8*/ s_nop           0x0
/*0000000264bc*/ s_nop           0x0
/*0000000264c0*/ s_nop           0x0
/*0000000264c4*/ s_nop           0x0
/*0000000264c8*/ s_nop           0x0
/*0000000264cc*/ s_nop           0x0
/*0000000264d0*/ s_nop           0x0
/*0000000264d4*/ s_nop           0x0
/*0000000264d8*/ s_nop           0x0
/*0000000264dc*/ s_nop           0x0
/*0000000264e0*/ s_nop           0x0
/*0000000264e4*/ s_nop           0x0
/*0000000264e8*/ s_nop           0x0
/*0000000264ec*/ s_nop           0x0
/*0000000264f0*/ s_nop           0x0
/*0000000264f4*/ s_nop           0x0
/*0000000264f8*/ s_nop           0x0
/*0000000264fc*/ s_nop           0x0
subtract_char_get_global_offset_8_8:
.skip 256
/*000000026600*/ s_clause        0x1
/*000000026604*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000002660c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000026614*/ s_waitcnt       lgkmcnt(0)
/*000000026618*/ s_lshl_b32      s1, s6, 3
/*00000002661c*/ v_add3_u32      v0, s0, s1, v0
/*000000026624*/ s_sub_i32       s0, s0, s2
/*000000026628*/ v_mov_b32       v2, s0
/*00000002662c*/ v_add_co_u32    v0, s[1:2], s4, v0
/*000000026634*/ v_add_co_ci_u32 v1, s[1:2], s5, 0, s[1:2]
/*00000002663c*/ global_store_byte v[0:1], v2, off
/*000000026644*/ s_endpgm
/*000000026648*/ s_nop           0x0
/*00000002664c*/ s_nop           0x0
/*000000026650*/ s_nop           0x0
/*000000026654*/ s_nop           0x0
/*000000026658*/ s_nop           0x0
/*00000002665c*/ s_nop           0x0
/*000000026660*/ s_nop           0x0
/*000000026664*/ s_nop           0x0
/*000000026668*/ s_nop           0x0
/*00000002666c*/ s_nop           0x0
/*000000026670*/ s_nop           0x0
/*000000026674*/ s_nop           0x0
/*000000026678*/ s_nop           0x0
/*00000002667c*/ s_nop           0x0
/*000000026680*/ s_nop           0x0
/*000000026684*/ s_nop           0x0
/*000000026688*/ s_nop           0x0
/*00000002668c*/ s_nop           0x0
/*000000026690*/ s_nop           0x0
/*000000026694*/ s_nop           0x0
/*000000026698*/ s_nop           0x0
/*00000002669c*/ s_nop           0x0
/*0000000266a0*/ s_nop           0x0
/*0000000266a4*/ s_nop           0x0
/*0000000266a8*/ s_nop           0x0
/*0000000266ac*/ s_nop           0x0
/*0000000266b0*/ s_nop           0x0
/*0000000266b4*/ s_nop           0x0
/*0000000266b8*/ s_nop           0x0
/*0000000266bc*/ s_nop           0x0
/*0000000266c0*/ s_nop           0x0
/*0000000266c4*/ s_nop           0x0
/*0000000266c8*/ s_nop           0x0
/*0000000266cc*/ s_nop           0x0
/*0000000266d0*/ s_nop           0x0
/*0000000266d4*/ s_nop           0x0
/*0000000266d8*/ s_nop           0x0
/*0000000266dc*/ s_nop           0x0
/*0000000266e0*/ s_nop           0x0
/*0000000266e4*/ s_nop           0x0
/*0000000266e8*/ s_nop           0x0
/*0000000266ec*/ s_nop           0x0
/*0000000266f0*/ s_nop           0x0
/*0000000266f4*/ s_nop           0x0
/*0000000266f8*/ s_nop           0x0
/*0000000266fc*/ s_nop           0x0
subtract_char_get_local_id_8_8:
.skip 256
/*000000026800*/ s_clause        0x1
/*000000026804*/ s_load_dword    s2, s[4:5], 0x10
/*00000002680c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026814*/ s_lshl_b32      s3, s6, 3
/*000000026818*/ v_sub_nc_u16    v3, v0, v1
/*000000026820*/ s_waitcnt       lgkmcnt(0)
/*000000026824*/ v_add3_u32      v2, s2, s3, v0
/*00000002682c*/ v_add_co_u32    v0, s[0:1], s0, v2
/*000000026834*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002683c*/ global_store_byte v[0:1], v3, off
/*000000026844*/ s_endpgm
/*000000026848*/ s_nop           0x0
/*00000002684c*/ s_nop           0x0
/*000000026850*/ s_nop           0x0
/*000000026854*/ s_nop           0x0
/*000000026858*/ s_nop           0x0
/*00000002685c*/ s_nop           0x0
/*000000026860*/ s_nop           0x0
/*000000026864*/ s_nop           0x0
/*000000026868*/ s_nop           0x0
/*00000002686c*/ s_nop           0x0
/*000000026870*/ s_nop           0x0
/*000000026874*/ s_nop           0x0
/*000000026878*/ s_nop           0x0
/*00000002687c*/ s_nop           0x0
/*000000026880*/ s_nop           0x0
/*000000026884*/ s_nop           0x0
/*000000026888*/ s_nop           0x0
/*00000002688c*/ s_nop           0x0
/*000000026890*/ s_nop           0x0
/*000000026894*/ s_nop           0x0
/*000000026898*/ s_nop           0x0
/*00000002689c*/ s_nop           0x0
/*0000000268a0*/ s_nop           0x0
/*0000000268a4*/ s_nop           0x0
/*0000000268a8*/ s_nop           0x0
/*0000000268ac*/ s_nop           0x0
/*0000000268b0*/ s_nop           0x0
/*0000000268b4*/ s_nop           0x0
/*0000000268b8*/ s_nop           0x0
/*0000000268bc*/ s_nop           0x0
/*0000000268c0*/ s_nop           0x0
/*0000000268c4*/ s_nop           0x0
/*0000000268c8*/ s_nop           0x0
/*0000000268cc*/ s_nop           0x0
/*0000000268d0*/ s_nop           0x0
/*0000000268d4*/ s_nop           0x0
/*0000000268d8*/ s_nop           0x0
/*0000000268dc*/ s_nop           0x0
/*0000000268e0*/ s_nop           0x0
/*0000000268e4*/ s_nop           0x0
/*0000000268e8*/ s_nop           0x0
/*0000000268ec*/ s_nop           0x0
/*0000000268f0*/ s_nop           0x0
/*0000000268f4*/ s_nop           0x0
/*0000000268f8*/ s_nop           0x0
/*0000000268fc*/ s_nop           0x0
subtract_char_get_group_id_8_8:
.skip 256
/*000000026a00*/ s_clause        0x1
/*000000026a04*/ s_load_dword    s2, s[4:5], 0x10
/*000000026a0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026a14*/ s_lshl_b32      s3, s6, 3
/*000000026a18*/ s_waitcnt       lgkmcnt(0)
/*000000026a1c*/ v_add3_u32      v0, s2, s3, v0
/*000000026a24*/ s_sub_i32       s2, s6, s7
/*000000026a28*/ v_mov_b32       v2, s2
/*000000026a2c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026a34*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026a3c*/ global_store_byte v[0:1], v2, off
/*000000026a44*/ s_endpgm
/*000000026a48*/ s_nop           0x0
/*000000026a4c*/ s_nop           0x0
/*000000026a50*/ s_nop           0x0
/*000000026a54*/ s_nop           0x0
/*000000026a58*/ s_nop           0x0
/*000000026a5c*/ s_nop           0x0
/*000000026a60*/ s_nop           0x0
/*000000026a64*/ s_nop           0x0
/*000000026a68*/ s_nop           0x0
/*000000026a6c*/ s_nop           0x0
/*000000026a70*/ s_nop           0x0
/*000000026a74*/ s_nop           0x0
/*000000026a78*/ s_nop           0x0
/*000000026a7c*/ s_nop           0x0
/*000000026a80*/ s_nop           0x0
/*000000026a84*/ s_nop           0x0
/*000000026a88*/ s_nop           0x0
/*000000026a8c*/ s_nop           0x0
/*000000026a90*/ s_nop           0x0
/*000000026a94*/ s_nop           0x0
/*000000026a98*/ s_nop           0x0
/*000000026a9c*/ s_nop           0x0
/*000000026aa0*/ s_nop           0x0
/*000000026aa4*/ s_nop           0x0
/*000000026aa8*/ s_nop           0x0
/*000000026aac*/ s_nop           0x0
/*000000026ab0*/ s_nop           0x0
/*000000026ab4*/ s_nop           0x0
/*000000026ab8*/ s_nop           0x0
/*000000026abc*/ s_nop           0x0
/*000000026ac0*/ s_nop           0x0
/*000000026ac4*/ s_nop           0x0
/*000000026ac8*/ s_nop           0x0
/*000000026acc*/ s_nop           0x0
/*000000026ad0*/ s_nop           0x0
/*000000026ad4*/ s_nop           0x0
/*000000026ad8*/ s_nop           0x0
/*000000026adc*/ s_nop           0x0
/*000000026ae0*/ s_nop           0x0
/*000000026ae4*/ s_nop           0x0
/*000000026ae8*/ s_nop           0x0
/*000000026aec*/ s_nop           0x0
/*000000026af0*/ s_nop           0x0
/*000000026af4*/ s_nop           0x0
/*000000026af8*/ s_nop           0x0
/*000000026afc*/ s_nop           0x0
subtract_char_get_local_size_8_8:
.skip 256
/*000000026c00*/ s_clause        0x1
/*000000026c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000026c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026c14*/ s_lshl_b32      s3, s6, 3
/*000000026c18*/ v_mov_b32       v2, 0
/*000000026c1c*/ s_waitcnt       lgkmcnt(0)
/*000000026c20*/ v_add3_u32      v0, s2, s3, v0
/*000000026c28*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026c30*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026c38*/ global_store_byte v[0:1], v2, off
/*000000026c40*/ s_endpgm
/*000000026c44*/ s_nop           0x0
/*000000026c48*/ s_nop           0x0
/*000000026c4c*/ s_nop           0x0
/*000000026c50*/ s_nop           0x0
/*000000026c54*/ s_nop           0x0
/*000000026c58*/ s_nop           0x0
/*000000026c5c*/ s_nop           0x0
/*000000026c60*/ s_nop           0x0
/*000000026c64*/ s_nop           0x0
/*000000026c68*/ s_nop           0x0
/*000000026c6c*/ s_nop           0x0
/*000000026c70*/ s_nop           0x0
/*000000026c74*/ s_nop           0x0
/*000000026c78*/ s_nop           0x0
/*000000026c7c*/ s_nop           0x0
/*000000026c80*/ s_nop           0x0
/*000000026c84*/ s_nop           0x0
/*000000026c88*/ s_nop           0x0
/*000000026c8c*/ s_nop           0x0
/*000000026c90*/ s_nop           0x0
/*000000026c94*/ s_nop           0x0
/*000000026c98*/ s_nop           0x0
/*000000026c9c*/ s_nop           0x0
/*000000026ca0*/ s_nop           0x0
/*000000026ca4*/ s_nop           0x0
/*000000026ca8*/ s_nop           0x0
/*000000026cac*/ s_nop           0x0
/*000000026cb0*/ s_nop           0x0
/*000000026cb4*/ s_nop           0x0
/*000000026cb8*/ s_nop           0x0
/*000000026cbc*/ s_nop           0x0
/*000000026cc0*/ s_nop           0x0
/*000000026cc4*/ s_nop           0x0
/*000000026cc8*/ s_nop           0x0
/*000000026ccc*/ s_nop           0x0
/*000000026cd0*/ s_nop           0x0
/*000000026cd4*/ s_nop           0x0
/*000000026cd8*/ s_nop           0x0
/*000000026cdc*/ s_nop           0x0
/*000000026ce0*/ s_nop           0x0
/*000000026ce4*/ s_nop           0x0
/*000000026ce8*/ s_nop           0x0
/*000000026cec*/ s_nop           0x0
/*000000026cf0*/ s_nop           0x0
/*000000026cf4*/ s_nop           0x0
/*000000026cf8*/ s_nop           0x0
/*000000026cfc*/ s_nop           0x0
subtract_char_get_global_id_8_8:
.skip 256
/*000000026e00*/ s_clause        0x1
/*000000026e04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000026e0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000026e14*/ v_lshl_or_b32   v0, s6, 3, v0
/*000000026e1c*/ s_waitcnt       lgkmcnt(0)
/*000000026e20*/ s_lshl_b32      s1, s7, 3
/*000000026e24*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026e2c*/ v_add3_u32      v1, s2, s1, v1
/*000000026e34*/ v_sub_nc_u16    v2, v0, v1
/*000000026e3c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000026e44*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000026e4c*/ global_store_byte v[0:1], v2, off
/*000000026e54*/ s_endpgm
/*000000026e58*/ s_nop           0x0
/*000000026e5c*/ s_nop           0x0
/*000000026e60*/ s_nop           0x0
/*000000026e64*/ s_nop           0x0
/*000000026e68*/ s_nop           0x0
/*000000026e6c*/ s_nop           0x0
/*000000026e70*/ s_nop           0x0
/*000000026e74*/ s_nop           0x0
/*000000026e78*/ s_nop           0x0
/*000000026e7c*/ s_nop           0x0
/*000000026e80*/ s_nop           0x0
/*000000026e84*/ s_nop           0x0
/*000000026e88*/ s_nop           0x0
/*000000026e8c*/ s_nop           0x0
/*000000026e90*/ s_nop           0x0
/*000000026e94*/ s_nop           0x0
/*000000026e98*/ s_nop           0x0
/*000000026e9c*/ s_nop           0x0
/*000000026ea0*/ s_nop           0x0
/*000000026ea4*/ s_nop           0x0
/*000000026ea8*/ s_nop           0x0
/*000000026eac*/ s_nop           0x0
/*000000026eb0*/ s_nop           0x0
/*000000026eb4*/ s_nop           0x0
/*000000026eb8*/ s_nop           0x0
/*000000026ebc*/ s_nop           0x0
/*000000026ec0*/ s_nop           0x0
/*000000026ec4*/ s_nop           0x0
/*000000026ec8*/ s_nop           0x0
/*000000026ecc*/ s_nop           0x0
/*000000026ed0*/ s_nop           0x0
/*000000026ed4*/ s_nop           0x0
/*000000026ed8*/ s_nop           0x0
/*000000026edc*/ s_nop           0x0
/*000000026ee0*/ s_nop           0x0
/*000000026ee4*/ s_nop           0x0
/*000000026ee8*/ s_nop           0x0
/*000000026eec*/ s_nop           0x0
/*000000026ef0*/ s_nop           0x0
/*000000026ef4*/ s_nop           0x0
/*000000026ef8*/ s_nop           0x0
/*000000026efc*/ s_nop           0x0
subtract_char_get_global_size_8_8:
.skip 256
/*000000027000*/ s_load_dword    s9, s[6:7], 0x10
/*000000027008*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*000000027010*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*000000027018*/ s_lshl_b32      s4, s8, 3
/*00000002701c*/ s_waitcnt       lgkmcnt(0)
/*000000027020*/ v_add3_u32      v0, s9, s4, v0
/*000000027028*/ s_sub_i32       s0, s0, s1
/*00000002702c*/ v_mov_b32       v2, s0
/*000000027030*/ v_add_co_u32    v0, s[1:2], s2, v0
/*000000027038*/ v_add_co_ci_u32 v1, s[1:2], s3, 0, s[1:2]
/*000000027040*/ global_store_byte v[0:1], v2, off
/*000000027048*/ s_endpgm
/*00000002704c*/ s_nop           0x0
/*000000027050*/ s_nop           0x0
/*000000027054*/ s_nop           0x0
/*000000027058*/ s_nop           0x0
/*00000002705c*/ s_nop           0x0
/*000000027060*/ s_nop           0x0
/*000000027064*/ s_nop           0x0
/*000000027068*/ s_nop           0x0
/*00000002706c*/ s_nop           0x0
/*000000027070*/ s_nop           0x0
/*000000027074*/ s_nop           0x0
/*000000027078*/ s_nop           0x0
/*00000002707c*/ s_nop           0x0
/*000000027080*/ s_nop           0x0
/*000000027084*/ s_nop           0x0
/*000000027088*/ s_nop           0x0
/*00000002708c*/ s_nop           0x0
/*000000027090*/ s_nop           0x0
/*000000027094*/ s_nop           0x0
/*000000027098*/ s_nop           0x0
/*00000002709c*/ s_nop           0x0
/*0000000270a0*/ s_nop           0x0
/*0000000270a4*/ s_nop           0x0
/*0000000270a8*/ s_nop           0x0
/*0000000270ac*/ s_nop           0x0
/*0000000270b0*/ s_nop           0x0
/*0000000270b4*/ s_nop           0x0
/*0000000270b8*/ s_nop           0x0
/*0000000270bc*/ s_nop           0x0
/*0000000270c0*/ s_nop           0x0
/*0000000270c4*/ s_nop           0x0
/*0000000270c8*/ s_nop           0x0
/*0000000270cc*/ s_nop           0x0
/*0000000270d0*/ s_nop           0x0
/*0000000270d4*/ s_nop           0x0
/*0000000270d8*/ s_nop           0x0
/*0000000270dc*/ s_nop           0x0
/*0000000270e0*/ s_nop           0x0
/*0000000270e4*/ s_nop           0x0
/*0000000270e8*/ s_nop           0x0
/*0000000270ec*/ s_nop           0x0
/*0000000270f0*/ s_nop           0x0
/*0000000270f4*/ s_nop           0x0
/*0000000270f8*/ s_nop           0x0
/*0000000270fc*/ s_nop           0x0
subtract_char_get_num_groups_8_8:
.skip 256
/*000000027200*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*000000027208*/ s_load_dword    s4, s[6:7], 0x10
/*000000027210*/ s_waitcnt       lgkmcnt(0)
/*000000027214*/ s_and_b32       s2, s0, -8
/*000000027218*/ v_cmp_gt_u32    s[5:6], s0, s2
/*000000027220*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*000000027228*/ s_lshl_b32      s6, s8, 3
/*00000002722c*/ s_lshr_b32      s0, s0, 3
/*000000027230*/ v_add3_u32      v0, s4, s6, v0
/*000000027238*/ s_cmpk_lg_u32   s5, 0x0
/*00000002723c*/ s_addc_u32      s0, s0, 0
/*000000027240*/ s_and_b32       s5, s1, -8
/*000000027244*/ v_cmp_gt_u32    s[5:6], s1, s5
/*00000002724c*/ s_lshr_b32      s1, s1, 3
/*000000027250*/ s_cmpk_lg_u32   s5, 0x0
/*000000027254*/ s_addc_u32      s1, s1, 0
/*000000027258*/ s_sub_i32       s0, s0, s1
/*00000002725c*/ s_waitcnt       lgkmcnt(0)
/*000000027260*/ v_add_co_u32    v0, s[1:2], s2, v0
/*000000027268*/ v_mov_b32       v2, s0
/*00000002726c*/ v_add_co_ci_u32 v1, s[1:2], s3, 0, s[1:2]
/*000000027274*/ global_store_byte v[0:1], v2, off
/*00000002727c*/ s_endpgm
/*000000027280*/ s_nop           0x0
/*000000027284*/ s_nop           0x0
/*000000027288*/ s_nop           0x0
/*00000002728c*/ s_nop           0x0
/*000000027290*/ s_nop           0x0
/*000000027294*/ s_nop           0x0
/*000000027298*/ s_nop           0x0
/*00000002729c*/ s_nop           0x0
/*0000000272a0*/ s_nop           0x0
/*0000000272a4*/ s_nop           0x0
/*0000000272a8*/ s_nop           0x0
/*0000000272ac*/ s_nop           0x0
/*0000000272b0*/ s_nop           0x0
/*0000000272b4*/ s_nop           0x0
/*0000000272b8*/ s_nop           0x0
/*0000000272bc*/ s_nop           0x0
/*0000000272c0*/ s_nop           0x0
/*0000000272c4*/ s_nop           0x0
/*0000000272c8*/ s_nop           0x0
/*0000000272cc*/ s_nop           0x0
/*0000000272d0*/ s_nop           0x0
/*0000000272d4*/ s_nop           0x0
/*0000000272d8*/ s_nop           0x0
/*0000000272dc*/ s_nop           0x0
/*0000000272e0*/ s_nop           0x0
/*0000000272e4*/ s_nop           0x0
/*0000000272e8*/ s_nop           0x0
/*0000000272ec*/ s_nop           0x0
/*0000000272f0*/ s_nop           0x0
/*0000000272f4*/ s_nop           0x0
/*0000000272f8*/ s_nop           0x0
/*0000000272fc*/ s_nop           0x0
subtract_char_get_work_dim_8_8:
.skip 256
/*000000027400*/ v_mov_b32       v2, s4
/*000000027404*/ v_mov_b32       v3, s5
/*000000027408*/ s_clause        0x1
/*00000002740c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000027414*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000002741c*/ v_lshl_or_b32   v1, s9, 3, v1
/*000000027424*/ s_waitcnt       lgkmcnt(0)
/*000000027428*/ s_lshl_b32      s1, s8, 3
/*00000002742c*/ global_load_ushort v2, v[2:3], off inst_offset:2
/*000000027434*/ v_add3_u32      v0, s0, s1, v0
/*00000002743c*/ v_add_nc_u32    v1, s2, v1
/*000000027440*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000027448*/ s_waitcnt       vmcnt(0)
/*00000002744c*/ v_sub_nc_u32    v2, v2, v1
/*000000027450*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000027458*/ global_store_byte v[0:1], v2, off
/*000000027460*/ s_endpgm
/*000000027464*/ s_code_end
/*000000027468*/ s_code_end
/*00000002746c*/ s_code_end
/*000000027470*/ s_code_end
/*000000027474*/ s_code_end
/*000000027478*/ s_code_end
/*00000002747c*/ s_code_end
/*000000027480*/ s_code_end
/*000000027484*/ s_code_end
/*000000027488*/ s_code_end
/*00000002748c*/ s_code_end
/*000000027490*/ s_code_end
/*000000027494*/ s_code_end
/*000000027498*/ s_code_end
/*00000002749c*/ s_code_end
/*0000000274a0*/ s_code_end
/*0000000274a4*/ s_code_end
/*0000000274a8*/ s_code_end
/*0000000274ac*/ s_code_end
/*0000000274b0*/ s_code_end
/*0000000274b4*/ s_code_end
/*0000000274b8*/ s_code_end
/*0000000274bc*/ s_code_end
/*0000000274c0*/ s_code_end
/*0000000274c4*/ s_code_end
/*0000000274c8*/ s_code_end
/*0000000274cc*/ s_code_end
/*0000000274d0*/ s_code_end
/*0000000274d4*/ s_code_end
/*0000000274d8*/ s_code_end
/*0000000274dc*/ s_code_end
/*0000000274e0*/ s_code_end
/*0000000274e4*/ s_code_end
/*0000000274e8*/ s_code_end
/*0000000274ec*/ s_code_end
/*0000000274f0*/ s_code_end
/*0000000274f4*/ s_code_end
/*0000000274f8*/ s_code_end
/*0000000274fc*/ s_code_end
/*000000027500*/ s_code_end
/*000000027504*/ s_code_end
/*000000027508*/ s_code_end
/*00000002750c*/ s_code_end
/*000000027510*/ s_code_end
/*000000027514*/ s_code_end
/*000000027518*/ s_code_end
/*00000002751c*/ s_code_end
/*000000027520*/ s_code_end
/*000000027524*/ s_code_end
/*000000027528*/ s_code_end
/*00000002752c*/ s_code_end
/*000000027530*/ s_code_end
/*000000027534*/ s_code_end
/*000000027538*/ s_code_end
/*00000002753c*/ s_code_end
