.rocm
.gpu GFX1010
.arch_minor 1
.arch_stepping 0
.eflags 51
.newbinfmt
.target "amdgcn-amd-amdhsa--gfx1010"
.md_version 1, 0
.kernel add_char_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_char_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_char_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 8
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 8
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 6
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 6
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 20
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 20
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 21
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0080
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 8
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 6
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 6
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 21
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 5
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_long_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_long_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 8
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel add_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "add_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.text
add_x_x:
.skip 256
/*000000000100*/ s_clause        0x2
/*000000000104*/ s_load_dword    s2, s[4:5], 0x10
/*00000000010c*/ s_load_dword    s3, s[4:5], 0x8
/*000000000114*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000000011c*/ s_lshl_b32      s4, s6, 6
/*000000000120*/ v_mov_b32       v1, 0
/*000000000124*/ s_waitcnt       lgkmcnt(0)
/*000000000128*/ v_add3_u32      v0, s2, s4, v0
/*000000000130*/ s_lshl_b32      s2, s3, 1
/*000000000134*/ v_mov_b32       v2, s2
/*000000000138*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000000140*/ v_add_co_u32    v0, vcc, s0, v0
/*000000000148*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000014c*/ global_store_dword v[0:1], v2, off
/*000000000154*/ s_endpgm
/*000000000158*/ s_nop           0x0
/*00000000015c*/ s_nop           0x0
/*000000000160*/ s_nop           0x0
/*000000000164*/ s_nop           0x0
/*000000000168*/ s_nop           0x0
/*00000000016c*/ s_nop           0x0
/*000000000170*/ s_nop           0x0
/*000000000174*/ s_nop           0x0
/*000000000178*/ s_nop           0x0
/*00000000017c*/ s_nop           0x0
/*000000000180*/ s_nop           0x0
/*000000000184*/ s_nop           0x0
/*000000000188*/ s_nop           0x0
/*00000000018c*/ s_nop           0x0
/*000000000190*/ s_nop           0x0
/*000000000194*/ s_nop           0x0
/*000000000198*/ s_nop           0x0
/*00000000019c*/ s_nop           0x0
/*0000000001a0*/ s_nop           0x0
/*0000000001a4*/ s_nop           0x0
/*0000000001a8*/ s_nop           0x0
/*0000000001ac*/ s_nop           0x0
/*0000000001b0*/ s_nop           0x0
/*0000000001b4*/ s_nop           0x0
/*0000000001b8*/ s_nop           0x0
/*0000000001bc*/ s_nop           0x0
/*0000000001c0*/ s_nop           0x0
/*0000000001c4*/ s_nop           0x0
/*0000000001c8*/ s_nop           0x0
/*0000000001cc*/ s_nop           0x0
/*0000000001d0*/ s_nop           0x0
/*0000000001d4*/ s_nop           0x0
/*0000000001d8*/ s_nop           0x0
/*0000000001dc*/ s_nop           0x0
/*0000000001e0*/ s_nop           0x0
/*0000000001e4*/ s_nop           0x0
/*0000000001e8*/ s_nop           0x0
/*0000000001ec*/ s_nop           0x0
/*0000000001f0*/ s_nop           0x0
/*0000000001f4*/ s_nop           0x0
/*0000000001f8*/ s_nop           0x0
/*0000000001fc*/ s_nop           0x0
add_get_global_offset_x:
.skip 256
/*000000000300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000308*/ s_waitcnt       lgkmcnt(0)
/*00000000030c*/ s_clause        0x2
/*000000000310*/ s_load_dword    s1, s[4:5], 0x20
/*000000000318*/ s_load_dword    s3, s[4:5], 0x0
/*000000000320*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000328*/ v_mov_b32       v4, 0
/*00000000032c*/ s_lshl_b32      s6, s6, 1
/*000000000330*/ s_lshl_b32      s7, s7, 4
/*000000000334*/ s_lshl_b32      s8, s8, 1
/*000000000338*/ v_mov_b32       v6, v4
/*00000000033c*/ v_mov_b32       v8, v4
/*000000000340*/ s_waitcnt       lgkmcnt(0)
/*000000000344*/ v_add3_u32      v7, s1, s8, v2
/*00000000034c*/ v_add3_u32      v3, s0, s6, v0
/*000000000354*/ v_add3_u32      v5, s2, s7, v1
/*00000000035c*/ s_add_i32       s0, s0, s3
/*000000000360*/ s_add_i32       s2, s2, s3
/*000000000364*/ v_mov_b32       v11, s0
/*000000000368*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000370*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000378*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000380*/ s_add_i32       s0, s1, s3
/*000000000384*/ v_mov_b32       v13, s2
/*000000000388*/ v_mov_b32       v7, s0
/*00000000038c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000394*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000398*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000003a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000003a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000003ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000003b0*/ global_store_dword v[0:1], v11, off
/*0000000003b8*/ global_store_dword v[2:3], v13, off
/*0000000003c0*/ global_store_dword v[4:5], v7, off
/*0000000003c8*/ s_endpgm
/*0000000003cc*/ s_nop           0x0
/*0000000003d0*/ s_nop           0x0
/*0000000003d4*/ s_nop           0x0
/*0000000003d8*/ s_nop           0x0
/*0000000003dc*/ s_nop           0x0
/*0000000003e0*/ s_nop           0x0
/*0000000003e4*/ s_nop           0x0
/*0000000003e8*/ s_nop           0x0
/*0000000003ec*/ s_nop           0x0
/*0000000003f0*/ s_nop           0x0
/*0000000003f4*/ s_nop           0x0
/*0000000003f8*/ s_nop           0x0
/*0000000003fc*/ s_nop           0x0
add_get_local_id_x:
.skip 256
/*000000000500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000508*/ s_waitcnt       lgkmcnt(0)
/*00000000050c*/ s_clause        0x2
/*000000000510*/ s_load_dword    s1, s[4:5], 0x20
/*000000000518*/ s_load_dword    s3, s[4:5], 0x0
/*000000000520*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000528*/ v_mov_b32       v4, 0
/*00000000052c*/ s_lshl_b32      s6, s6, 3
/*000000000530*/ s_lshl_b32      s7, s7, 2
/*000000000534*/ s_lshl_b32      s8, s8, 1
/*000000000538*/ v_mov_b32       v6, v4
/*00000000053c*/ v_mov_b32       v8, v4
/*000000000540*/ s_waitcnt       lgkmcnt(0)
/*000000000544*/ v_add3_u32      v7, s1, s8, v2
/*00000000054c*/ v_add3_u32      v3, s0, s6, v0
/*000000000554*/ v_add3_u32      v5, s2, s7, v1
/*00000000055c*/ v_add_nc_u32    v9, s3, v0
/*000000000560*/ v_add_nc_u32    v10, s3, v1
/*000000000564*/ v_add_nc_u32    v11, s3, v2
/*000000000568*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000000570*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000000578*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000000580*/ v_add_co_u32    v2, vcc, s4, v3
/*000000000588*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*00000000058c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000594*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000598*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000005a0*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000005a4*/ global_store_dword v[2:3], v9, off
/*0000000005ac*/ global_store_dword v[0:1], v10, off
/*0000000005b4*/ global_store_dword v[4:5], v11, off
/*0000000005bc*/ s_endpgm
/*0000000005c0*/ s_nop           0x0
/*0000000005c4*/ s_nop           0x0
/*0000000005c8*/ s_nop           0x0
/*0000000005cc*/ s_nop           0x0
/*0000000005d0*/ s_nop           0x0
/*0000000005d4*/ s_nop           0x0
/*0000000005d8*/ s_nop           0x0
/*0000000005dc*/ s_nop           0x0
/*0000000005e0*/ s_nop           0x0
/*0000000005e4*/ s_nop           0x0
/*0000000005e8*/ s_nop           0x0
/*0000000005ec*/ s_nop           0x0
/*0000000005f0*/ s_nop           0x0
/*0000000005f4*/ s_nop           0x0
/*0000000005f8*/ s_nop           0x0
/*0000000005fc*/ s_nop           0x0
add_get_group_id_x:
.skip 256
/*000000000700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000708*/ s_waitcnt       lgkmcnt(0)
/*00000000070c*/ s_clause        0x2
/*000000000710*/ s_load_dword    s1, s[4:5], 0x20
/*000000000718*/ s_load_dword    s3, s[4:5], 0x0
/*000000000720*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000728*/ v_mov_b32       v4, 0
/*00000000072c*/ s_lshl_b32      s9, s6, 1
/*000000000730*/ s_lshl_b32      s10, s7, 4
/*000000000734*/ s_lshl_b32      s11, s8, 1
/*000000000738*/ v_mov_b32       v6, v4
/*00000000073c*/ v_mov_b32       v8, v4
/*000000000740*/ s_waitcnt       lgkmcnt(0)
/*000000000744*/ v_add3_u32      v7, s1, s11, v2
/*00000000074c*/ v_add3_u32      v3, s0, s9, v0
/*000000000754*/ v_add3_u32      v5, s2, s10, v1
/*00000000075c*/ s_add_i32       s0, s6, s3
/*000000000760*/ s_add_i32       s1, s7, s3
/*000000000764*/ v_mov_b32       v11, s0
/*000000000768*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000770*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000778*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000780*/ s_add_i32       s0, s8, s3
/*000000000784*/ v_mov_b32       v13, s1
/*000000000788*/ v_mov_b32       v7, s0
/*00000000078c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000794*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000798*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000007a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000007a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000007ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000007b0*/ global_store_dword v[0:1], v11, off
/*0000000007b8*/ global_store_dword v[2:3], v13, off
/*0000000007c0*/ global_store_dword v[4:5], v7, off
/*0000000007c8*/ s_endpgm
/*0000000007cc*/ s_nop           0x0
/*0000000007d0*/ s_nop           0x0
/*0000000007d4*/ s_nop           0x0
/*0000000007d8*/ s_nop           0x0
/*0000000007dc*/ s_nop           0x0
/*0000000007e0*/ s_nop           0x0
/*0000000007e4*/ s_nop           0x0
/*0000000007e8*/ s_nop           0x0
/*0000000007ec*/ s_nop           0x0
/*0000000007f0*/ s_nop           0x0
/*0000000007f4*/ s_nop           0x0
/*0000000007f8*/ s_nop           0x0
/*0000000007fc*/ s_nop           0x0
add_get_local_size_x:
.skip 256
/*000000000900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000908*/ s_waitcnt       lgkmcnt(0)
/*00000000090c*/ s_clause        0x2
/*000000000910*/ s_load_dword    s1, s[4:5], 0x20
/*000000000918*/ s_load_dword    s3, s[4:5], 0x0
/*000000000920*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000928*/ v_mov_b32       v4, 0
/*00000000092c*/ s_lshl_b32      s6, s6, 1
/*000000000930*/ s_lshl_b32      s7, s7, 1
/*000000000934*/ s_lshl_b32      s8, s8, 2
/*000000000938*/ v_mov_b32       v6, v4
/*00000000093c*/ v_mov_b32       v8, v4
/*000000000940*/ s_waitcnt       lgkmcnt(0)
/*000000000944*/ v_add3_u32      v7, s1, s8, v2
/*00000000094c*/ v_add3_u32      v3, s0, s6, v0
/*000000000954*/ v_add3_u32      v5, s2, s7, v1
/*00000000095c*/ s_add_i32       s0, s3, 2
/*000000000960*/ s_add_i32       s1, s3, 4
/*000000000964*/ v_mov_b32       v9, s0
/*000000000968*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000970*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000978*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000980*/ v_mov_b32       v6, s1
/*000000000984*/ v_add_co_u32    v7, vcc, s4, v0
/*00000000098c*/ v_add_co_ci_u32 v8, vcc, s5, v1, vcc
/*000000000990*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000998*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000099c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000009a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000009a8*/ global_store_dword v[7:8], v9, off
/*0000000009b0*/ global_store_dword v[2:3], v9, off
/*0000000009b8*/ global_store_dword v[4:5], v6, off
/*0000000009c0*/ s_endpgm
/*0000000009c4*/ s_nop           0x0
/*0000000009c8*/ s_nop           0x0
/*0000000009cc*/ s_nop           0x0
/*0000000009d0*/ s_nop           0x0
/*0000000009d4*/ s_nop           0x0
/*0000000009d8*/ s_nop           0x0
/*0000000009dc*/ s_nop           0x0
/*0000000009e0*/ s_nop           0x0
/*0000000009e4*/ s_nop           0x0
/*0000000009e8*/ s_nop           0x0
/*0000000009ec*/ s_nop           0x0
/*0000000009f0*/ s_nop           0x0
/*0000000009f4*/ s_nop           0x0
/*0000000009f8*/ s_nop           0x0
/*0000000009fc*/ s_nop           0x0
add_get_global_id_x:
.skip 256
/*000000000b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000b08*/ s_waitcnt       lgkmcnt(0)
/*000000000b0c*/ s_clause        0x2
/*000000000b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000000b18*/ s_load_dword    s3, s[4:5], 0x0
/*000000000b20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000b28*/ v_mov_b32       v4, 0
/*000000000b2c*/ v_lshl_or_b32   v5, s7, 1, v1
/*000000000b34*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000000b3c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000000b44*/ v_mov_b32       v1, v4
/*000000000b48*/ v_mov_b32       v8, v4
/*000000000b4c*/ s_waitcnt       lgkmcnt(0)
/*000000000b50*/ v_add_nc_u32    v7, s1, v2
/*000000000b54*/ v_add_nc_u32    v0, s2, v5
/*000000000b58*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000000b60*/ v_add3_u32      v9, s0, s3, v3
/*000000000b68*/ v_add_nc_u32    v11, s3, v7
/*000000000b6c*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000000b74*/ v_add_nc_u32    v10, s3, v0
/*000000000b78*/ v_add_co_u32    v3, vcc, s4, v5
/*000000000b80*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*000000000b84*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000000b8c*/ v_add_co_u32    v0, vcc, s4, v1
/*000000000b94*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000000b98*/ v_add_co_u32    v5, vcc, s4, v5
/*000000000ba0*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000000ba4*/ global_store_dword v[3:4], v9, off
/*000000000bac*/ global_store_dword v[0:1], v10, off
/*000000000bb4*/ global_store_dword v[5:6], v11, off
/*000000000bbc*/ s_endpgm
/*000000000bc0*/ s_nop           0x0
/*000000000bc4*/ s_nop           0x0
/*000000000bc8*/ s_nop           0x0
/*000000000bcc*/ s_nop           0x0
/*000000000bd0*/ s_nop           0x0
/*000000000bd4*/ s_nop           0x0
/*000000000bd8*/ s_nop           0x0
/*000000000bdc*/ s_nop           0x0
/*000000000be0*/ s_nop           0x0
/*000000000be4*/ s_nop           0x0
/*000000000be8*/ s_nop           0x0
/*000000000bec*/ s_nop           0x0
/*000000000bf0*/ s_nop           0x0
/*000000000bf4*/ s_nop           0x0
/*000000000bf8*/ s_nop           0x0
/*000000000bfc*/ s_nop           0x0
add_get_global_size_x:
.skip 256
/*000000000d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000000d08*/ s_waitcnt       lgkmcnt(0)
/*000000000d0c*/ s_clause        0x1
/*000000000d10*/ s_load_dword    s1, s[6:7], 0x8
/*000000000d18*/ s_load_dword    s3, s[6:7], 0x20
/*000000000d20*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000000d28*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000000d30*/ v_mov_b32       v4, 0
/*000000000d34*/ s_lshl_b32      s6, s8, 4
/*000000000d38*/ s_lshl_b32      s7, s9, 1
/*000000000d3c*/ s_lshl_b32      s8, s10, 1
/*000000000d40*/ v_mov_b32       v6, v4
/*000000000d44*/ v_mov_b32       v8, v4
/*000000000d48*/ s_waitcnt       lgkmcnt(0)
/*000000000d4c*/ v_add3_u32      v7, s3, s8, v2
/*000000000d54*/ v_add3_u32      v3, s0, s6, v0
/*000000000d5c*/ v_add3_u32      v5, s2, s7, v1
/*000000000d64*/ s_add_i32       s0, s12, s1
/*000000000d68*/ s_add_i32       s2, s13, s1
/*000000000d6c*/ v_mov_b32       v11, s0
/*000000000d70*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000d78*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000d80*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000d88*/ s_add_i32       s0, s14, s1
/*000000000d8c*/ v_mov_b32       v13, s2
/*000000000d90*/ v_mov_b32       v7, s0
/*000000000d94*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000d9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000da0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000da8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000000dac*/ v_add_co_u32    v4, vcc, s4, v4
/*000000000db4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000000db8*/ global_store_dword v[0:1], v11, off
/*000000000dc0*/ global_store_dword v[2:3], v13, off
/*000000000dc8*/ global_store_dword v[4:5], v7, off
/*000000000dd0*/ s_endpgm
/*000000000dd4*/ s_nop           0x0
/*000000000dd8*/ s_nop           0x0
/*000000000ddc*/ s_nop           0x0
/*000000000de0*/ s_nop           0x0
/*000000000de4*/ s_nop           0x0
/*000000000de8*/ s_nop           0x0
/*000000000dec*/ s_nop           0x0
/*000000000df0*/ s_nop           0x0
/*000000000df4*/ s_nop           0x0
/*000000000df8*/ s_nop           0x0
/*000000000dfc*/ s_nop           0x0
add_get_num_groups_x:
.skip 256
/*000000000f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000000f08*/ s_waitcnt       lgkmcnt(0)
/*000000000f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000000f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000000f1c*/ s_clause        0x1
/*000000000f20*/ s_load_dword    s3, s[6:7], 0x0
/*000000000f28*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000000f30*/ s_lshl_b32      s8, s8, 1
/*000000000f34*/ v_mov_b32       v4, 0
/*000000000f38*/ s_lshl_b32      s7, s10, 2
/*000000000f3c*/ s_lshl_b32      s6, s9, 1
/*000000000f40*/ s_waitcnt       lgkmcnt(0)
/*000000000f44*/ v_add3_u32      v2, s1, s7, v2
/*000000000f4c*/ v_add3_u32      v3, s0, s8, v0
/*000000000f54*/ s_and_b32       s1, s12, -2
/*000000000f58*/ v_add3_u32      v0, s2, s6, v1
/*000000000f60*/ v_mov_b32       v1, v4
/*000000000f64*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000000f6c*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000000f74*/ s_and_b32       s6, s13, -2
/*000000000f78*/ v_mov_b32       v3, v4
/*000000000f7c*/ v_cmp_gt_u32    s[6:7], s13, s6
/*000000000f84*/ s_lshr_b32      s0, s12, 1
/*000000000f88*/ s_lshr_b32      s2, s13, 1
/*000000000f8c*/ s_lshr_b32      s7, s14, 2
/*000000000f90*/ s_and_b32       s8, s14, -4
/*000000000f94*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000000f9c*/ s_cmpk_lg_u32   s1, 0x0
/*000000000fa0*/ v_cmp_gt_u32    s[1:2], s14, s8
/*000000000fa8*/ s_addc_u32      s0, s0, s3
/*000000000fac*/ v_add_co_u32    v5, vcc, s4, v5
/*000000000fb4*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000000fbc*/ s_cmpk_lg_u32   s6, 0x0
/*000000000fc0*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000000fc4*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000fcc*/ v_mov_b32       v4, s0
/*000000000fd0*/ s_addc_u32      s0, s2, s3
/*000000000fd4*/ s_cmpk_lg_u32   s1, 0x0
/*000000000fd8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000fdc*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000fe4*/ v_mov_b32       v7, s0
/*000000000fe8*/ s_addc_u32      s0, s7, s3
/*000000000fec*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000000ff0*/ v_mov_b32       v8, s0
/*000000000ff4*/ global_store_dword v[5:6], v4, off
/*000000000ffc*/ global_store_dword v[0:1], v7, off
/*000000001004*/ global_store_dword v[2:3], v8, off
/*00000000100c*/ s_endpgm
/*000000001010*/ s_nop           0x0
/*000000001014*/ s_nop           0x0
/*000000001018*/ s_nop           0x0
/*00000000101c*/ s_nop           0x0
/*000000001020*/ s_nop           0x0
/*000000001024*/ s_nop           0x0
/*000000001028*/ s_nop           0x0
/*00000000102c*/ s_nop           0x0
/*000000001030*/ s_nop           0x0
/*000000001034*/ s_nop           0x0
/*000000001038*/ s_nop           0x0
/*00000000103c*/ s_nop           0x0
/*000000001040*/ s_nop           0x0
/*000000001044*/ s_nop           0x0
/*000000001048*/ s_nop           0x0
/*00000000104c*/ s_nop           0x0
/*000000001050*/ s_nop           0x0
/*000000001054*/ s_nop           0x0
/*000000001058*/ s_nop           0x0
/*00000000105c*/ s_nop           0x0
/*000000001060*/ s_nop           0x0
/*000000001064*/ s_nop           0x0
/*000000001068*/ s_nop           0x0
/*00000000106c*/ s_nop           0x0
/*000000001070*/ s_nop           0x0
/*000000001074*/ s_nop           0x0
/*000000001078*/ s_nop           0x0
/*00000000107c*/ s_nop           0x0
/*000000001080*/ s_nop           0x0
/*000000001084*/ s_nop           0x0
/*000000001088*/ s_nop           0x0
/*00000000108c*/ s_nop           0x0
/*000000001090*/ s_nop           0x0
/*000000001094*/ s_nop           0x0
/*000000001098*/ s_nop           0x0
/*00000000109c*/ s_nop           0x0
/*0000000010a0*/ s_nop           0x0
/*0000000010a4*/ s_nop           0x0
/*0000000010a8*/ s_nop           0x0
/*0000000010ac*/ s_nop           0x0
/*0000000010b0*/ s_nop           0x0
/*0000000010b4*/ s_nop           0x0
/*0000000010b8*/ s_nop           0x0
/*0000000010bc*/ s_nop           0x0
/*0000000010c0*/ s_nop           0x0
/*0000000010c4*/ s_nop           0x0
/*0000000010c8*/ s_nop           0x0
/*0000000010cc*/ s_nop           0x0
/*0000000010d0*/ s_nop           0x0
/*0000000010d4*/ s_nop           0x0
/*0000000010d8*/ s_nop           0x0
/*0000000010dc*/ s_nop           0x0
/*0000000010e0*/ s_nop           0x0
/*0000000010e4*/ s_nop           0x0
/*0000000010e8*/ s_nop           0x0
/*0000000010ec*/ s_nop           0x0
/*0000000010f0*/ s_nop           0x0
/*0000000010f4*/ s_nop           0x0
/*0000000010f8*/ s_nop           0x0
/*0000000010fc*/ s_nop           0x0
add_get_work_dim_x:
.skip 256
/*000000001200*/ v_mov_b32       v1, s4
/*000000001204*/ v_mov_b32       v2, s5
/*000000001208*/ s_clause        0x2
/*00000000120c*/ s_load_dword    s2, s[6:7], 0x10
/*000000001214*/ s_load_dword    s3, s[6:7], 0x0
/*00000000121c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000001224*/ s_lshl_b32      s4, s8, 1
/*000000001228*/ global_load_ushort v2, v[1:2], off inst_offset:2
/*000000001230*/ v_mov_b32       v1, 0
/*000000001234*/ s_waitcnt       lgkmcnt(0)
/*000000001238*/ v_add3_u32      v0, s2, s4, v0
/*000000001240*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000001248*/ v_add_co_u32    v0, vcc, s0, v0
/*000000001250*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*000000001254*/ s_waitcnt       vmcnt(0)
/*000000001258*/ v_add_nc_u32    v2, s3, v2
/*00000000125c*/ global_store_dword v[0:1], v2, off
/*000000001264*/ s_endpgm
/*000000001268*/ s_nop           0x0
/*00000000126c*/ s_nop           0x0
/*000000001270*/ s_nop           0x0
/*000000001274*/ s_nop           0x0
/*000000001278*/ s_nop           0x0
/*00000000127c*/ s_nop           0x0
/*000000001280*/ s_nop           0x0
/*000000001284*/ s_nop           0x0
/*000000001288*/ s_nop           0x0
/*00000000128c*/ s_nop           0x0
/*000000001290*/ s_nop           0x0
/*000000001294*/ s_nop           0x0
/*000000001298*/ s_nop           0x0
/*00000000129c*/ s_nop           0x0
/*0000000012a0*/ s_nop           0x0
/*0000000012a4*/ s_nop           0x0
/*0000000012a8*/ s_nop           0x0
/*0000000012ac*/ s_nop           0x0
/*0000000012b0*/ s_nop           0x0
/*0000000012b4*/ s_nop           0x0
/*0000000012b8*/ s_nop           0x0
/*0000000012bc*/ s_nop           0x0
/*0000000012c0*/ s_nop           0x0
/*0000000012c4*/ s_nop           0x0
/*0000000012c8*/ s_nop           0x0
/*0000000012cc*/ s_nop           0x0
/*0000000012d0*/ s_nop           0x0
/*0000000012d4*/ s_nop           0x0
/*0000000012d8*/ s_nop           0x0
/*0000000012dc*/ s_nop           0x0
/*0000000012e0*/ s_nop           0x0
/*0000000012e4*/ s_nop           0x0
/*0000000012e8*/ s_nop           0x0
/*0000000012ec*/ s_nop           0x0
/*0000000012f0*/ s_nop           0x0
/*0000000012f4*/ s_nop           0x0
/*0000000012f8*/ s_nop           0x0
/*0000000012fc*/ s_nop           0x0
add_x_get_global_offset:
.skip 256
/*000000001400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001408*/ s_waitcnt       lgkmcnt(0)
/*00000000140c*/ s_clause        0x2
/*000000001410*/ s_load_dword    s1, s[4:5], 0x20
/*000000001418*/ s_load_dword    s3, s[4:5], 0x8
/*000000001420*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000001428*/ v_mov_b32       v4, 0
/*00000000142c*/ s_lshl_b32      s6, s6, 4
/*000000001430*/ s_lshl_b32      s7, s7, 1
/*000000001434*/ s_lshl_b32      s8, s8, 1
/*000000001438*/ v_mov_b32       v6, v4
/*00000000143c*/ v_mov_b32       v8, v4
/*000000001440*/ s_waitcnt       lgkmcnt(0)
/*000000001444*/ v_add3_u32      v7, s1, s8, v2
/*00000000144c*/ v_add3_u32      v3, s0, s6, v0
/*000000001454*/ v_add3_u32      v5, s2, s7, v1
/*00000000145c*/ s_add_i32       s0, s0, s3
/*000000001460*/ s_add_i32       s2, s2, s3
/*000000001464*/ v_mov_b32       v11, s0
/*000000001468*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001470*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001478*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001480*/ s_add_i32       s0, s1, s3
/*000000001484*/ v_mov_b32       v13, s2
/*000000001488*/ v_mov_b32       v7, s0
/*00000000148c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001494*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001498*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000014a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000014a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000014ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000014b0*/ global_store_dword v[0:1], v11, off
/*0000000014b8*/ global_store_dword v[2:3], v13, off
/*0000000014c0*/ global_store_dword v[4:5], v7, off
/*0000000014c8*/ s_endpgm
/*0000000014cc*/ s_nop           0x0
/*0000000014d0*/ s_nop           0x0
/*0000000014d4*/ s_nop           0x0
/*0000000014d8*/ s_nop           0x0
/*0000000014dc*/ s_nop           0x0
/*0000000014e0*/ s_nop           0x0
/*0000000014e4*/ s_nop           0x0
/*0000000014e8*/ s_nop           0x0
/*0000000014ec*/ s_nop           0x0
/*0000000014f0*/ s_nop           0x0
/*0000000014f4*/ s_nop           0x0
/*0000000014f8*/ s_nop           0x0
/*0000000014fc*/ s_nop           0x0
add_get_global_offset_get_global_offset:
.skip 256
/*000000001600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001608*/ s_waitcnt       lgkmcnt(0)
/*00000000160c*/ s_clause        0x1
/*000000001610*/ s_load_dword    s1, s[4:5], 0x20
/*000000001618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001620*/ v_mov_b32       v4, 0
/*000000001624*/ s_lshl_b32      s3, s6, 1
/*000000001628*/ s_lshl_b32      s6, s7, 4
/*00000000162c*/ s_lshl_b32      s7, s8, 1
/*000000001630*/ v_mov_b32       v6, v4
/*000000001634*/ v_mov_b32       v8, v4
/*000000001638*/ v_add3_u32      v3, s0, s3, v0
/*000000001640*/ v_add3_u32      v5, s2, s6, v1
/*000000001648*/ s_waitcnt       lgkmcnt(0)
/*00000000164c*/ v_add3_u32      v7, s1, s7, v2
/*000000001654*/ s_lshl_b32      s0, s0, 1
/*000000001658*/ s_lshl_b32      s2, s2, 1
/*00000000165c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001664*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000166c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001674*/ v_mov_b32       v11, s0
/*000000001678*/ s_lshl_b32      s0, s1, 1
/*00000000167c*/ v_mov_b32       v13, s2
/*000000001680*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001688*/ v_mov_b32       v6, s0
/*00000000168c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001690*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001698*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000169c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000016a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000016a8*/ global_store_dword v[0:1], v11, off
/*0000000016b0*/ global_store_dword v[2:3], v13, off
/*0000000016b8*/ global_store_dword v[4:5], v6, off
/*0000000016c0*/ s_endpgm
/*0000000016c4*/ s_nop           0x0
/*0000000016c8*/ s_nop           0x0
/*0000000016cc*/ s_nop           0x0
/*0000000016d0*/ s_nop           0x0
/*0000000016d4*/ s_nop           0x0
/*0000000016d8*/ s_nop           0x0
/*0000000016dc*/ s_nop           0x0
/*0000000016e0*/ s_nop           0x0
/*0000000016e4*/ s_nop           0x0
/*0000000016e8*/ s_nop           0x0
/*0000000016ec*/ s_nop           0x0
/*0000000016f0*/ s_nop           0x0
/*0000000016f4*/ s_nop           0x0
/*0000000016f8*/ s_nop           0x0
/*0000000016fc*/ s_nop           0x0
add_get_local_id_get_global_offset:
.skip 256
/*000000001800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001808*/ s_waitcnt       lgkmcnt(0)
/*00000000180c*/ s_clause        0x1
/*000000001810*/ s_load_dword    s1, s[4:5], 0x20
/*000000001818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001820*/ v_mov_b32       v4, 0
/*000000001824*/ s_lshl_b32      s3, s6, 3
/*000000001828*/ s_lshl_b32      s6, s7, 2
/*00000000182c*/ s_lshl_b32      s7, s8, 1
/*000000001830*/ v_mov_b32       v6, v4
/*000000001834*/ v_mov_b32       v8, v4
/*000000001838*/ v_add3_u32      v3, s0, s3, v0
/*000000001840*/ v_add3_u32      v5, s2, s6, v1
/*000000001848*/ s_waitcnt       lgkmcnt(0)
/*00000000184c*/ v_add3_u32      v7, s1, s7, v2
/*000000001854*/ v_add_nc_u32    v9, s0, v0
/*000000001858*/ v_add_nc_u32    v10, s2, v1
/*00000000185c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000001864*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*00000000186c*/ v_add_nc_u32    v11, s1, v2
/*000000001870*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000001878*/ v_add_co_u32    v2, vcc, s4, v3
/*000000001880*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000001884*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000188c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001890*/ v_add_co_u32    v4, vcc, s4, v5
/*000000001898*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000189c*/ global_store_dword v[2:3], v9, off
/*0000000018a4*/ global_store_dword v[0:1], v10, off
/*0000000018ac*/ global_store_dword v[4:5], v11, off
/*0000000018b4*/ s_endpgm
/*0000000018b8*/ s_nop           0x0
/*0000000018bc*/ s_nop           0x0
/*0000000018c0*/ s_nop           0x0
/*0000000018c4*/ s_nop           0x0
/*0000000018c8*/ s_nop           0x0
/*0000000018cc*/ s_nop           0x0
/*0000000018d0*/ s_nop           0x0
/*0000000018d4*/ s_nop           0x0
/*0000000018d8*/ s_nop           0x0
/*0000000018dc*/ s_nop           0x0
/*0000000018e0*/ s_nop           0x0
/*0000000018e4*/ s_nop           0x0
/*0000000018e8*/ s_nop           0x0
/*0000000018ec*/ s_nop           0x0
/*0000000018f0*/ s_nop           0x0
/*0000000018f4*/ s_nop           0x0
/*0000000018f8*/ s_nop           0x0
/*0000000018fc*/ s_nop           0x0
add_get_group_id_get_global_offset:
.skip 256
/*000000001a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001a08*/ s_waitcnt       lgkmcnt(0)
/*000000001a0c*/ s_clause        0x1
/*000000001a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001a20*/ v_mov_b32       v4, 0
/*000000001a24*/ s_lshl_b32      s3, s6, 1
/*000000001a28*/ s_lshl_b32      s9, s7, 4
/*000000001a2c*/ s_lshl_b32      s10, s8, 1
/*000000001a30*/ v_mov_b32       v6, v4
/*000000001a34*/ v_mov_b32       v8, v4
/*000000001a38*/ v_add3_u32      v3, s0, s3, v0
/*000000001a40*/ v_add3_u32      v5, s2, s9, v1
/*000000001a48*/ s_waitcnt       lgkmcnt(0)
/*000000001a4c*/ v_add3_u32      v7, s1, s10, v2
/*000000001a54*/ s_add_i32       s0, s6, s0
/*000000001a58*/ s_add_i32       s2, s7, s2
/*000000001a5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001a64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001a6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001a74*/ v_mov_b32       v11, s0
/*000000001a78*/ s_add_i32       s0, s8, s1
/*000000001a7c*/ v_mov_b32       v13, s2
/*000000001a80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001a88*/ v_mov_b32       v6, s0
/*000000001a8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001a90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001a98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000001a9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000001aa4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000001aa8*/ global_store_dword v[0:1], v11, off
/*000000001ab0*/ global_store_dword v[2:3], v13, off
/*000000001ab8*/ global_store_dword v[4:5], v6, off
/*000000001ac0*/ s_endpgm
/*000000001ac4*/ s_nop           0x0
/*000000001ac8*/ s_nop           0x0
/*000000001acc*/ s_nop           0x0
/*000000001ad0*/ s_nop           0x0
/*000000001ad4*/ s_nop           0x0
/*000000001ad8*/ s_nop           0x0
/*000000001adc*/ s_nop           0x0
/*000000001ae0*/ s_nop           0x0
/*000000001ae4*/ s_nop           0x0
/*000000001ae8*/ s_nop           0x0
/*000000001aec*/ s_nop           0x0
/*000000001af0*/ s_nop           0x0
/*000000001af4*/ s_nop           0x0
/*000000001af8*/ s_nop           0x0
/*000000001afc*/ s_nop           0x0
add_get_local_size_get_global_offset:
.skip 256
/*000000001c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001c08*/ s_waitcnt       lgkmcnt(0)
/*000000001c0c*/ s_clause        0x1
/*000000001c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001c18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001c20*/ v_mov_b32       v4, 0
/*000000001c24*/ s_lshl_b32      s3, s6, 1
/*000000001c28*/ s_lshl_b32      s6, s7, 1
/*000000001c2c*/ s_lshl_b32      s7, s8, 2
/*000000001c30*/ v_mov_b32       v6, v4
/*000000001c34*/ v_mov_b32       v8, v4
/*000000001c38*/ v_add3_u32      v3, s0, s3, v0
/*000000001c40*/ v_add3_u32      v5, s2, s6, v1
/*000000001c48*/ s_waitcnt       lgkmcnt(0)
/*000000001c4c*/ v_add3_u32      v7, s1, s7, v2
/*000000001c54*/ s_add_i32       s0, s0, 2
/*000000001c58*/ s_add_i32       s2, s2, 2
/*000000001c5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001c64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001c6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001c74*/ v_mov_b32       v11, s0
/*000000001c78*/ s_add_i32       s0, s1, 4
/*000000001c7c*/ v_mov_b32       v13, s2
/*000000001c80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001c88*/ v_mov_b32       v6, s0
/*000000001c8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001c90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001c98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000001c9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000001ca4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000001ca8*/ global_store_dword v[0:1], v11, off
/*000000001cb0*/ global_store_dword v[2:3], v13, off
/*000000001cb8*/ global_store_dword v[4:5], v6, off
/*000000001cc0*/ s_endpgm
/*000000001cc4*/ s_nop           0x0
/*000000001cc8*/ s_nop           0x0
/*000000001ccc*/ s_nop           0x0
/*000000001cd0*/ s_nop           0x0
/*000000001cd4*/ s_nop           0x0
/*000000001cd8*/ s_nop           0x0
/*000000001cdc*/ s_nop           0x0
/*000000001ce0*/ s_nop           0x0
/*000000001ce4*/ s_nop           0x0
/*000000001ce8*/ s_nop           0x0
/*000000001cec*/ s_nop           0x0
/*000000001cf0*/ s_nop           0x0
/*000000001cf4*/ s_nop           0x0
/*000000001cf8*/ s_nop           0x0
/*000000001cfc*/ s_nop           0x0
add_get_global_id_get_global_offset:
.skip 256
/*000000001e00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001e08*/ s_waitcnt       lgkmcnt(0)
/*000000001e0c*/ s_clause        0x1
/*000000001e10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001e18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001e20*/ v_mov_b32       v4, 0
/*000000001e24*/ v_lshl_or_b32   v5, s7, 1, v1
/*000000001e2c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000001e34*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000001e3c*/ v_mov_b32       v1, v4
/*000000001e40*/ v_mov_b32       v8, v4
/*000000001e44*/ v_add_nc_u32    v0, s2, v5
/*000000001e48*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000001e50*/ s_waitcnt       lgkmcnt(0)
/*000000001e54*/ v_add_nc_u32    v7, s1, v2
/*000000001e58*/ v_lshl_add_u32  v9, s0, 1, v3
/*000000001e60*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000001e68*/ v_add_nc_u32    v10, s2, v0
/*000000001e6c*/ v_add_co_u32    v3, vcc, s4, v5
/*000000001e74*/ v_add_nc_u32    v11, s1, v7
/*000000001e78*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*000000001e7c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000001e84*/ v_add_co_u32    v0, vcc, s4, v1
/*000000001e8c*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000001e90*/ v_add_co_u32    v5, vcc, s4, v5
/*000000001e98*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000001e9c*/ global_store_dword v[3:4], v9, off
/*000000001ea4*/ global_store_dword v[0:1], v10, off
/*000000001eac*/ global_store_dword v[5:6], v11, off
/*000000001eb4*/ s_endpgm
/*000000001eb8*/ s_nop           0x0
/*000000001ebc*/ s_nop           0x0
/*000000001ec0*/ s_nop           0x0
/*000000001ec4*/ s_nop           0x0
/*000000001ec8*/ s_nop           0x0
/*000000001ecc*/ s_nop           0x0
/*000000001ed0*/ s_nop           0x0
/*000000001ed4*/ s_nop           0x0
/*000000001ed8*/ s_nop           0x0
/*000000001edc*/ s_nop           0x0
/*000000001ee0*/ s_nop           0x0
/*000000001ee4*/ s_nop           0x0
/*000000001ee8*/ s_nop           0x0
/*000000001eec*/ s_nop           0x0
/*000000001ef0*/ s_nop           0x0
/*000000001ef4*/ s_nop           0x0
/*000000001ef8*/ s_nop           0x0
/*000000001efc*/ s_nop           0x0
add_get_global_size_get_global_offset:
.skip 256
/*000000002000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002008*/ s_waitcnt       lgkmcnt(0)
/*00000000200c*/ s_load_dword    s1, s[6:7], 0x20
/*000000002014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000201c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000002024*/ v_mov_b32       v4, 0
/*000000002028*/ s_lshl_b32      s3, s8, 4
/*00000000202c*/ s_lshl_b32      s6, s9, 1
/*000000002030*/ s_lshl_b32      s7, s10, 1
/*000000002034*/ v_mov_b32       v6, v4
/*000000002038*/ v_mov_b32       v8, v4
/*00000000203c*/ s_waitcnt       lgkmcnt(0)
/*000000002040*/ v_add3_u32      v7, s1, s7, v2
/*000000002048*/ v_add3_u32      v3, s0, s3, v0
/*000000002050*/ v_add3_u32      v5, s2, s6, v1
/*000000002058*/ s_add_i32       s0, s12, s0
/*00000000205c*/ s_add_i32       s2, s13, s2
/*000000002060*/ v_mov_b32       v11, s0
/*000000002064*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000206c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002074*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000207c*/ s_add_i32       s0, s14, s1
/*000000002080*/ v_mov_b32       v13, s2
/*000000002084*/ v_mov_b32       v7, s0
/*000000002088*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002090*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002094*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000209c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000020a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000020a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000020ac*/ global_store_dword v[0:1], v11, off
/*0000000020b4*/ global_store_dword v[2:3], v13, off
/*0000000020bc*/ global_store_dword v[4:5], v7, off
/*0000000020c4*/ s_endpgm
/*0000000020c8*/ s_nop           0x0
/*0000000020cc*/ s_nop           0x0
/*0000000020d0*/ s_nop           0x0
/*0000000020d4*/ s_nop           0x0
/*0000000020d8*/ s_nop           0x0
/*0000000020dc*/ s_nop           0x0
/*0000000020e0*/ s_nop           0x0
/*0000000020e4*/ s_nop           0x0
/*0000000020e8*/ s_nop           0x0
/*0000000020ec*/ s_nop           0x0
/*0000000020f0*/ s_nop           0x0
/*0000000020f4*/ s_nop           0x0
/*0000000020f8*/ s_nop           0x0
/*0000000020fc*/ s_nop           0x0
add_get_num_groups_get_global_offset:
.skip 256
/*000000002200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002208*/ s_waitcnt       lgkmcnt(0)
/*00000000220c*/ s_load_dword    s1, s[6:7], 0x20
/*000000002214*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000221c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000002224*/ s_lshl_b32      s3, s8, 1
/*000000002228*/ v_mov_b32       v4, 0
/*00000000222c*/ s_lshl_b32      s6, s9, 1
/*000000002230*/ s_lshl_b32      s7, s10, 2
/*000000002234*/ v_mov_b32       v6, v4
/*000000002238*/ v_add3_u32      v3, s0, s3, v0
/*000000002240*/ v_add3_u32      v5, s2, s6, v1
/*000000002248*/ s_waitcnt       lgkmcnt(0)
/*00000000224c*/ v_add3_u32      v0, s1, s7, v2
/*000000002254*/ s_and_b32       s6, s12, -2
/*000000002258*/ s_and_b32       s8, s13, -2
/*00000000225c*/ v_lshlrev_b64   v[1:2], 2, v[3:4]
/*000000002264*/ v_cmp_gt_u32    s[6:7], s12, s6
/*00000000226c*/ v_cmp_gt_u32    s[8:9], s13, s8
/*000000002274*/ s_lshr_b32      s3, s12, 1
/*000000002278*/ s_lshr_b32      s7, s13, 1
/*00000000227c*/ s_lshr_b32      s9, s14, 2
/*000000002280*/ v_add_co_u32    v7, vcc, s4, v1
/*000000002288*/ v_mov_b32       v1, v4
/*00000000228c*/ s_and_b32       s10, s14, -4
/*000000002290*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000002294*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000229c*/ s_cmpk_lg_u32   s6, 0x0
/*0000000022a0*/ v_cmp_gt_u32    s[6:7], s14, s10
/*0000000022a8*/ s_addc_u32      s0, s3, s0
/*0000000022ac*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000022b4*/ s_cmpk_lg_u32   s8, 0x0
/*0000000022b8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000022c0*/ v_mov_b32       v10, s0
/*0000000022c4*/ s_addc_u32      s0, s7, s2
/*0000000022c8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000022cc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000022d0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000022d8*/ v_mov_b32       v5, s0
/*0000000022dc*/ s_addc_u32      s0, s9, s1
/*0000000022e0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000022e4*/ v_mov_b32       v6, s0
/*0000000022e8*/ global_store_dword v[7:8], v10, off
/*0000000022f0*/ global_store_dword v[2:3], v5, off
/*0000000022f8*/ global_store_dword v[0:1], v6, off
/*000000002300*/ s_endpgm
/*000000002304*/ s_nop           0x0
/*000000002308*/ s_nop           0x0
/*00000000230c*/ s_nop           0x0
/*000000002310*/ s_nop           0x0
/*000000002314*/ s_nop           0x0
/*000000002318*/ s_nop           0x0
/*00000000231c*/ s_nop           0x0
/*000000002320*/ s_nop           0x0
/*000000002324*/ s_nop           0x0
/*000000002328*/ s_nop           0x0
/*00000000232c*/ s_nop           0x0
/*000000002330*/ s_nop           0x0
/*000000002334*/ s_nop           0x0
/*000000002338*/ s_nop           0x0
/*00000000233c*/ s_nop           0x0
/*000000002340*/ s_nop           0x0
/*000000002344*/ s_nop           0x0
/*000000002348*/ s_nop           0x0
/*00000000234c*/ s_nop           0x0
/*000000002350*/ s_nop           0x0
/*000000002354*/ s_nop           0x0
/*000000002358*/ s_nop           0x0
/*00000000235c*/ s_nop           0x0
/*000000002360*/ s_nop           0x0
/*000000002364*/ s_nop           0x0
/*000000002368*/ s_nop           0x0
/*00000000236c*/ s_nop           0x0
/*000000002370*/ s_nop           0x0
/*000000002374*/ s_nop           0x0
/*000000002378*/ s_nop           0x0
/*00000000237c*/ s_nop           0x0
/*000000002380*/ s_nop           0x0
/*000000002384*/ s_nop           0x0
/*000000002388*/ s_nop           0x0
/*00000000238c*/ s_nop           0x0
/*000000002390*/ s_nop           0x0
/*000000002394*/ s_nop           0x0
/*000000002398*/ s_nop           0x0
/*00000000239c*/ s_nop           0x0
/*0000000023a0*/ s_nop           0x0
/*0000000023a4*/ s_nop           0x0
/*0000000023a8*/ s_nop           0x0
/*0000000023ac*/ s_nop           0x0
/*0000000023b0*/ s_nop           0x0
/*0000000023b4*/ s_nop           0x0
/*0000000023b8*/ s_nop           0x0
/*0000000023bc*/ s_nop           0x0
/*0000000023c0*/ s_nop           0x0
/*0000000023c4*/ s_nop           0x0
/*0000000023c8*/ s_nop           0x0
/*0000000023cc*/ s_nop           0x0
/*0000000023d0*/ s_nop           0x0
/*0000000023d4*/ s_nop           0x0
/*0000000023d8*/ s_nop           0x0
/*0000000023dc*/ s_nop           0x0
/*0000000023e0*/ s_nop           0x0
/*0000000023e4*/ s_nop           0x0
/*0000000023e8*/ s_nop           0x0
/*0000000023ec*/ s_nop           0x0
/*0000000023f0*/ s_nop           0x0
/*0000000023f4*/ s_nop           0x0
/*0000000023f8*/ s_nop           0x0
/*0000000023fc*/ s_nop           0x0
add_get_work_dim_get_global_offset:
.skip 256
/*000000002500*/ v_mov_b32       v3, s4
/*000000002504*/ v_mov_b32       v4, s5
/*000000002508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002510*/ s_waitcnt       lgkmcnt(0)
/*000000002514*/ s_clause        0x1
/*000000002518*/ s_load_dword    s1, s[6:7], 0x20
/*000000002520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000002528*/ s_lshl_b32      s3, s8, 1
/*00000000252c*/ s_lshl_b32      s6, s9, 1
/*000000002530*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000002538*/ v_mov_b32       v4, 0
/*00000000253c*/ s_lshl_b32      s7, s10, 2
/*000000002540*/ v_mov_b32       v6, v4
/*000000002544*/ v_mov_b32       v8, v4
/*000000002548*/ v_add3_u32      v3, s0, s3, v0
/*000000002550*/ v_add3_u32      v5, s2, s6, v1
/*000000002558*/ s_waitcnt       lgkmcnt(0)
/*00000000255c*/ v_add3_u32      v7, s1, s7, v2
/*000000002564*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000256c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002574*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000257c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002584*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002588*/ v_add_co_u32    v2, vcc, s4, v2
/*000000002590*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000002594*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000259c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000025a0*/ s_waitcnt       vmcnt(0)
/*0000000025a4*/ v_add_nc_u32    v6, s0, v9
/*0000000025a8*/ v_add_nc_u32    v13, s2, v9
/*0000000025ac*/ v_add_nc_u32    v11, s1, v9
/*0000000025b0*/ global_store_dword v[0:1], v6, off
/*0000000025b8*/ global_store_dword v[2:3], v13, off
/*0000000025c0*/ global_store_dword v[4:5], v11, off
/*0000000025c8*/ s_endpgm
/*0000000025cc*/ s_nop           0x0
/*0000000025d0*/ s_nop           0x0
/*0000000025d4*/ s_nop           0x0
/*0000000025d8*/ s_nop           0x0
/*0000000025dc*/ s_nop           0x0
/*0000000025e0*/ s_nop           0x0
/*0000000025e4*/ s_nop           0x0
/*0000000025e8*/ s_nop           0x0
/*0000000025ec*/ s_nop           0x0
/*0000000025f0*/ s_nop           0x0
/*0000000025f4*/ s_nop           0x0
/*0000000025f8*/ s_nop           0x0
/*0000000025fc*/ s_nop           0x0
add_x_get_local_id:
.skip 256
/*000000002700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002708*/ s_waitcnt       lgkmcnt(0)
/*00000000270c*/ s_clause        0x2
/*000000002710*/ s_load_dword    s1, s[4:5], 0x20
/*000000002718*/ s_load_dword    s3, s[4:5], 0x8
/*000000002720*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000002728*/ v_mov_b32       v4, 0
/*00000000272c*/ s_lshl_b32      s6, s6, 4
/*000000002730*/ s_lshl_b32      s7, s7, 1
/*000000002734*/ s_lshl_b32      s8, s8, 1
/*000000002738*/ v_mov_b32       v6, v4
/*00000000273c*/ v_mov_b32       v8, v4
/*000000002740*/ s_waitcnt       lgkmcnt(0)
/*000000002744*/ v_add3_u32      v7, s1, s8, v2
/*00000000274c*/ v_add3_u32      v3, s0, s6, v0
/*000000002754*/ v_add3_u32      v5, s2, s7, v1
/*00000000275c*/ v_add_nc_u32    v9, s3, v0
/*000000002760*/ v_add_nc_u32    v10, s3, v1
/*000000002764*/ v_add_nc_u32    v11, s3, v2
/*000000002768*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002770*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002778*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002780*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002788*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*00000000278c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002794*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002798*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000027a0*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000027a4*/ global_store_dword v[2:3], v9, off
/*0000000027ac*/ global_store_dword v[0:1], v10, off
/*0000000027b4*/ global_store_dword v[4:5], v11, off
/*0000000027bc*/ s_endpgm
/*0000000027c0*/ s_nop           0x0
/*0000000027c4*/ s_nop           0x0
/*0000000027c8*/ s_nop           0x0
/*0000000027cc*/ s_nop           0x0
/*0000000027d0*/ s_nop           0x0
/*0000000027d4*/ s_nop           0x0
/*0000000027d8*/ s_nop           0x0
/*0000000027dc*/ s_nop           0x0
/*0000000027e0*/ s_nop           0x0
/*0000000027e4*/ s_nop           0x0
/*0000000027e8*/ s_nop           0x0
/*0000000027ec*/ s_nop           0x0
/*0000000027f0*/ s_nop           0x0
/*0000000027f4*/ s_nop           0x0
/*0000000027f8*/ s_nop           0x0
/*0000000027fc*/ s_nop           0x0
add_get_global_offset_get_local_id:
.skip 256
/*000000002900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002908*/ s_waitcnt       lgkmcnt(0)
/*00000000290c*/ s_clause        0x1
/*000000002910*/ s_load_dword    s1, s[4:5], 0x20
/*000000002918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002920*/ v_mov_b32       v4, 0
/*000000002924*/ s_lshl_b32      s3, s6, 1
/*000000002928*/ s_lshl_b32      s6, s7, 4
/*00000000292c*/ s_lshl_b32      s7, s8, 1
/*000000002930*/ v_mov_b32       v6, v4
/*000000002934*/ v_mov_b32       v8, v4
/*000000002938*/ v_add3_u32      v3, s0, s3, v0
/*000000002940*/ v_add3_u32      v5, s2, s6, v1
/*000000002948*/ s_waitcnt       lgkmcnt(0)
/*00000000294c*/ v_add3_u32      v7, s1, s7, v2
/*000000002954*/ v_add_nc_u32    v9, s0, v0
/*000000002958*/ v_add_nc_u32    v10, s2, v1
/*00000000295c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002964*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*00000000296c*/ v_add_nc_u32    v11, s1, v2
/*000000002970*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002978*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002980*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002984*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000298c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002990*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002998*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000299c*/ global_store_dword v[2:3], v9, off
/*0000000029a4*/ global_store_dword v[0:1], v10, off
/*0000000029ac*/ global_store_dword v[4:5], v11, off
/*0000000029b4*/ s_endpgm
/*0000000029b8*/ s_nop           0x0
/*0000000029bc*/ s_nop           0x0
/*0000000029c0*/ s_nop           0x0
/*0000000029c4*/ s_nop           0x0
/*0000000029c8*/ s_nop           0x0
/*0000000029cc*/ s_nop           0x0
/*0000000029d0*/ s_nop           0x0
/*0000000029d4*/ s_nop           0x0
/*0000000029d8*/ s_nop           0x0
/*0000000029dc*/ s_nop           0x0
/*0000000029e0*/ s_nop           0x0
/*0000000029e4*/ s_nop           0x0
/*0000000029e8*/ s_nop           0x0
/*0000000029ec*/ s_nop           0x0
/*0000000029f0*/ s_nop           0x0
/*0000000029f4*/ s_nop           0x0
/*0000000029f8*/ s_nop           0x0
/*0000000029fc*/ s_nop           0x0
add_get_local_id_get_local_id:
.skip 256
/*000000002b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002b08*/ s_waitcnt       lgkmcnt(0)
/*000000002b0c*/ s_clause        0x1
/*000000002b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002b20*/ v_mov_b32       v4, 0
/*000000002b24*/ s_lshl_b32      s3, s6, 3
/*000000002b28*/ s_lshl_b32      s6, s7, 2
/*000000002b2c*/ s_lshl_b32      s7, s8, 1
/*000000002b30*/ v_lshlrev_b32   v9, 1, v0
/*000000002b34*/ v_mov_b32       v6, v4
/*000000002b38*/ v_mov_b32       v8, v4
/*000000002b3c*/ v_lshlrev_b32   v10, 1, v1
/*000000002b40*/ v_lshlrev_b32   v11, 1, v2
/*000000002b44*/ v_add3_u32      v3, s0, s3, v0
/*000000002b4c*/ v_add3_u32      v5, s2, s6, v1
/*000000002b54*/ s_waitcnt       lgkmcnt(0)
/*000000002b58*/ v_add3_u32      v7, s1, s7, v2
/*000000002b60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002b68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002b70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002b78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002b80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002b84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002b8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002b90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002b98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002b9c*/ global_store_dword v[2:3], v9, off
/*000000002ba4*/ global_store_dword v[0:1], v10, off
/*000000002bac*/ global_store_dword v[4:5], v11, off
/*000000002bb4*/ s_endpgm
/*000000002bb8*/ s_nop           0x0
/*000000002bbc*/ s_nop           0x0
/*000000002bc0*/ s_nop           0x0
/*000000002bc4*/ s_nop           0x0
/*000000002bc8*/ s_nop           0x0
/*000000002bcc*/ s_nop           0x0
/*000000002bd0*/ s_nop           0x0
/*000000002bd4*/ s_nop           0x0
/*000000002bd8*/ s_nop           0x0
/*000000002bdc*/ s_nop           0x0
/*000000002be0*/ s_nop           0x0
/*000000002be4*/ s_nop           0x0
/*000000002be8*/ s_nop           0x0
/*000000002bec*/ s_nop           0x0
/*000000002bf0*/ s_nop           0x0
/*000000002bf4*/ s_nop           0x0
/*000000002bf8*/ s_nop           0x0
/*000000002bfc*/ s_nop           0x0
add_get_group_id_get_local_id:
.skip 256
/*000000002d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002d08*/ s_waitcnt       lgkmcnt(0)
/*000000002d0c*/ s_clause        0x1
/*000000002d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002d18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002d20*/ v_mov_b32       v4, 0
/*000000002d24*/ s_lshl_b32      s3, s6, 1
/*000000002d28*/ s_lshl_b32      s9, s7, 4
/*000000002d2c*/ s_lshl_b32      s10, s8, 1
/*000000002d30*/ v_add_nc_u32    v9, s6, v0
/*000000002d34*/ v_mov_b32       v6, v4
/*000000002d38*/ v_mov_b32       v8, v4
/*000000002d3c*/ v_add_nc_u32    v10, s7, v1
/*000000002d40*/ v_add_nc_u32    v11, s8, v2
/*000000002d44*/ v_add3_u32      v3, s0, s3, v0
/*000000002d4c*/ v_add3_u32      v5, s2, s9, v1
/*000000002d54*/ s_waitcnt       lgkmcnt(0)
/*000000002d58*/ v_add3_u32      v7, s1, s10, v2
/*000000002d60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002d68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002d70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002d78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002d80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002d84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002d8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002d90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002d98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002d9c*/ global_store_dword v[2:3], v9, off
/*000000002da4*/ global_store_dword v[0:1], v10, off
/*000000002dac*/ global_store_dword v[4:5], v11, off
/*000000002db4*/ s_endpgm
/*000000002db8*/ s_nop           0x0
/*000000002dbc*/ s_nop           0x0
/*000000002dc0*/ s_nop           0x0
/*000000002dc4*/ s_nop           0x0
/*000000002dc8*/ s_nop           0x0
/*000000002dcc*/ s_nop           0x0
/*000000002dd0*/ s_nop           0x0
/*000000002dd4*/ s_nop           0x0
/*000000002dd8*/ s_nop           0x0
/*000000002ddc*/ s_nop           0x0
/*000000002de0*/ s_nop           0x0
/*000000002de4*/ s_nop           0x0
/*000000002de8*/ s_nop           0x0
/*000000002dec*/ s_nop           0x0
/*000000002df0*/ s_nop           0x0
/*000000002df4*/ s_nop           0x0
/*000000002df8*/ s_nop           0x0
/*000000002dfc*/ s_nop           0x0
add_get_local_size_get_local_id:
.skip 256
/*000000002f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002f08*/ s_waitcnt       lgkmcnt(0)
/*000000002f0c*/ s_clause        0x1
/*000000002f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002f20*/ v_mov_b32       v4, 0
/*000000002f24*/ s_lshl_b32      s3, s6, 1
/*000000002f28*/ s_lshl_b32      s6, s7, 1
/*000000002f2c*/ s_lshl_b32      s7, s8, 2
/*000000002f30*/ v_or_b32        v9, 2, v0
/*000000002f34*/ v_mov_b32       v6, v4
/*000000002f38*/ v_mov_b32       v8, v4
/*000000002f3c*/ v_or_b32        v10, 2, v1
/*000000002f40*/ v_or_b32        v11, 4, v2
/*000000002f44*/ v_add3_u32      v3, s0, s3, v0
/*000000002f4c*/ v_add3_u32      v5, s2, s6, v1
/*000000002f54*/ s_waitcnt       lgkmcnt(0)
/*000000002f58*/ v_add3_u32      v7, s1, s7, v2
/*000000002f60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002f68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002f70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002f78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002f80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002f84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002f8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002f90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002f98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002f9c*/ global_store_dword v[2:3], v9, off
/*000000002fa4*/ global_store_dword v[0:1], v10, off
/*000000002fac*/ global_store_dword v[4:5], v11, off
/*000000002fb4*/ s_endpgm
/*000000002fb8*/ s_nop           0x0
/*000000002fbc*/ s_nop           0x0
/*000000002fc0*/ s_nop           0x0
/*000000002fc4*/ s_nop           0x0
/*000000002fc8*/ s_nop           0x0
/*000000002fcc*/ s_nop           0x0
/*000000002fd0*/ s_nop           0x0
/*000000002fd4*/ s_nop           0x0
/*000000002fd8*/ s_nop           0x0
/*000000002fdc*/ s_nop           0x0
/*000000002fe0*/ s_nop           0x0
/*000000002fe4*/ s_nop           0x0
/*000000002fe8*/ s_nop           0x0
/*000000002fec*/ s_nop           0x0
/*000000002ff0*/ s_nop           0x0
/*000000002ff4*/ s_nop           0x0
/*000000002ff8*/ s_nop           0x0
/*000000002ffc*/ s_nop           0x0
add_get_global_id_get_local_id:
.skip 256
/*000000003100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003108*/ s_waitcnt       lgkmcnt(0)
/*00000000310c*/ s_clause        0x1
/*000000003110*/ s_load_dword    s1, s[4:5], 0x20
/*000000003118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003120*/ v_mov_b32       v4, 0
/*000000003124*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000312c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000003134*/ v_lshl_or_b32   v9, s8, 2, v2
/*00000000313c*/ v_mov_b32       v12, v4
/*000000003140*/ v_mov_b32       v10, v4
/*000000003144*/ v_lshlrev_b64   v[7:8], 2, v[3:4]
/*00000000314c*/ v_add_nc_u32    v11, s2, v5
/*000000003150*/ s_waitcnt       lgkmcnt(0)
/*000000003154*/ v_add_nc_u32    v9, s1, v9
/*000000003158*/ v_add3_u32      v13, v3, v0, s0
/*000000003160*/ v_add_co_u32    v6, vcc, s4, v7
/*000000003168*/ v_lshlrev_b64   v[3:4], 2, v[11:12]
/*000000003170*/ v_add_nc_u32    v5, v1, v11
/*000000003174*/ v_lshlrev_b64   v[0:1], 2, v[9:10]
/*00000000317c*/ v_add_co_ci_u32 v7, vcc, s5, v8, vcc
/*000000003180*/ v_add_nc_u32    v15, v2, v9
/*000000003184*/ v_add_co_u32    v2, vcc, s4, v3
/*00000000318c*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000003190*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003198*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000319c*/ global_store_dword v[6:7], v13, off
/*0000000031a4*/ global_store_dword v[2:3], v5, off
/*0000000031ac*/ global_store_dword v[0:1], v15, off
/*0000000031b4*/ s_endpgm
/*0000000031b8*/ s_nop           0x0
/*0000000031bc*/ s_nop           0x0
/*0000000031c0*/ s_nop           0x0
/*0000000031c4*/ s_nop           0x0
/*0000000031c8*/ s_nop           0x0
/*0000000031cc*/ s_nop           0x0
/*0000000031d0*/ s_nop           0x0
/*0000000031d4*/ s_nop           0x0
/*0000000031d8*/ s_nop           0x0
/*0000000031dc*/ s_nop           0x0
/*0000000031e0*/ s_nop           0x0
/*0000000031e4*/ s_nop           0x0
/*0000000031e8*/ s_nop           0x0
/*0000000031ec*/ s_nop           0x0
/*0000000031f0*/ s_nop           0x0
/*0000000031f4*/ s_nop           0x0
/*0000000031f8*/ s_nop           0x0
/*0000000031fc*/ s_nop           0x0
add_get_global_size_get_local_id:
.skip 256
/*000000003300*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003308*/ s_waitcnt       lgkmcnt(0)
/*00000000330c*/ s_load_dword    s1, s[6:7], 0x20
/*000000003314*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000331c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000003324*/ v_mov_b32       v4, 0
/*000000003328*/ s_lshl_b32      s3, s8, 4
/*00000000332c*/ s_lshl_b32      s6, s9, 1
/*000000003330*/ s_lshl_b32      s7, s10, 1
/*000000003334*/ v_mov_b32       v6, v4
/*000000003338*/ v_mov_b32       v8, v4
/*00000000333c*/ s_waitcnt       lgkmcnt(0)
/*000000003340*/ v_add3_u32      v7, s1, s7, v2
/*000000003348*/ v_add3_u32      v3, s0, s3, v0
/*000000003350*/ v_add3_u32      v5, s2, s6, v1
/*000000003358*/ v_add_nc_u32    v9, s12, v0
/*00000000335c*/ v_add_nc_u32    v10, s13, v1
/*000000003360*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000003368*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000003370*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000003378*/ v_add_nc_u32    v7, s14, v2
/*00000000337c*/ v_add_co_u32    v3, vcc, s4, v3
/*000000003384*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000003388*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003390*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003394*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000339c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000033a0*/ global_store_dword v[3:4], v9, off
/*0000000033a8*/ global_store_dword v[0:1], v10, off
/*0000000033b0*/ global_store_dword v[5:6], v7, off
/*0000000033b8*/ s_endpgm
/*0000000033bc*/ s_nop           0x0
/*0000000033c0*/ s_nop           0x0
/*0000000033c4*/ s_nop           0x0
/*0000000033c8*/ s_nop           0x0
/*0000000033cc*/ s_nop           0x0
/*0000000033d0*/ s_nop           0x0
/*0000000033d4*/ s_nop           0x0
/*0000000033d8*/ s_nop           0x0
/*0000000033dc*/ s_nop           0x0
/*0000000033e0*/ s_nop           0x0
/*0000000033e4*/ s_nop           0x0
/*0000000033e8*/ s_nop           0x0
/*0000000033ec*/ s_nop           0x0
/*0000000033f0*/ s_nop           0x0
/*0000000033f4*/ s_nop           0x0
/*0000000033f8*/ s_nop           0x0
/*0000000033fc*/ s_nop           0x0
add_get_num_groups_get_local_id:
.skip 256
/*000000003500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003508*/ s_waitcnt       lgkmcnt(0)
/*00000000350c*/ s_load_dword    s1, s[6:7], 0x20
/*000000003514*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000351c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000003524*/ s_lshl_b32      s3, s8, 1
/*000000003528*/ v_mov_b32       v4, 0
/*00000000352c*/ s_lshl_b32      s7, s10, 2
/*000000003530*/ s_lshl_b32      s6, s9, 1
/*000000003534*/ v_mov_b32       v6, v4
/*000000003538*/ s_waitcnt       lgkmcnt(0)
/*00000000353c*/ v_add3_u32      v7, s1, s7, v2
/*000000003544*/ v_add3_u32      v3, s0, s3, v0
/*00000000354c*/ s_and_b32       s1, s12, -2
/*000000003550*/ s_lshr_b32      s0, s12, 1
/*000000003554*/ v_cmp_gt_u32    vcc, s12, s1
/*00000000355c*/ v_add3_u32      v5, s2, s6, v1
/*000000003564*/ v_lshlrev_b64   v[8:9], 2, v[3:4]
/*00000000356c*/ s_and_b32       s3, s13, -2
/*000000003570*/ s_lshr_b32      s2, s13, 1
/*000000003574*/ v_add_co_ci_u32 v12, vcc, s0, v0, vcc
/*000000003578*/ s_and_b32       s7, s14, -4
/*00000000357c*/ s_lshr_b32      s6, s14, 2
/*000000003580*/ v_add_co_u32    v10, vcc, s4, v8
/*000000003588*/ v_mov_b32       v8, v4
/*00000000358c*/ v_add_co_ci_u32 v11, vcc, s5, v9, vcc
/*000000003590*/ v_lshlrev_b64   v[3:4], 2, v[5:6]
/*000000003598*/ v_cmp_gt_u32    vcc, s13, s3
/*0000000035a0*/ v_add_co_ci_u32 v5, vcc, s2, v1, vcc
/*0000000035a4*/ v_add_co_u32    v3, vcc, s4, v3
/*0000000035ac*/ v_lshlrev_b64   v[0:1], 2, v[7:8]
/*0000000035b4*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*0000000035b8*/ v_cmp_gt_u32    vcc, s14, s7
/*0000000035c0*/ v_add_co_ci_u32 v2, vcc, s6, v2, vcc
/*0000000035c4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000035cc*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000035d0*/ global_store_dword v[10:11], v12, off
/*0000000035d8*/ global_store_dword v[3:4], v5, off
/*0000000035e0*/ global_store_dword v[0:1], v2, off
/*0000000035e8*/ s_endpgm
/*0000000035ec*/ s_nop           0x0
/*0000000035f0*/ s_nop           0x0
/*0000000035f4*/ s_nop           0x0
/*0000000035f8*/ s_nop           0x0
/*0000000035fc*/ s_nop           0x0
add_get_work_dim_get_local_id:
.skip 256
/*000000003700*/ v_mov_b32       v3, s4
/*000000003704*/ v_mov_b32       v4, s5
/*000000003708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003710*/ s_waitcnt       lgkmcnt(0)
/*000000003714*/ s_clause        0x1
/*000000003718*/ s_load_dword    s1, s[6:7], 0x20
/*000000003720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000003728*/ s_lshl_b32      s3, s8, 1
/*00000000372c*/ s_lshl_b32      s6, s9, 1
/*000000003730*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000003738*/ v_mov_b32       v4, 0
/*00000000373c*/ s_lshl_b32      s7, s10, 2
/*000000003740*/ v_mov_b32       v6, v4
/*000000003744*/ v_mov_b32       v8, v4
/*000000003748*/ v_add3_u32      v3, s0, s3, v0
/*000000003750*/ v_add3_u32      v5, s2, s6, v1
/*000000003758*/ s_waitcnt       lgkmcnt(0)
/*00000000375c*/ v_add3_u32      v7, s1, s7, v2
/*000000003764*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000376c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000003774*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*00000000377c*/ v_add_co_u32    v3, vcc, s4, v3
/*000000003784*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000003788*/ v_add_co_u32    v5, vcc, s4, v5
/*000000003790*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000003794*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000379c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*0000000037a0*/ s_waitcnt       vmcnt(0)
/*0000000037a4*/ v_add_nc_u32    v10, v0, v15
/*0000000037a8*/ v_add_nc_u32    v11, v1, v15
/*0000000037ac*/ v_add_nc_u32    v2, v2, v15
/*0000000037b0*/ global_store_dword v[3:4], v10, off
/*0000000037b8*/ global_store_dword v[5:6], v11, off
/*0000000037c0*/ global_store_dword v[7:8], v2, off
/*0000000037c8*/ s_endpgm
/*0000000037cc*/ s_nop           0x0
/*0000000037d0*/ s_nop           0x0
/*0000000037d4*/ s_nop           0x0
/*0000000037d8*/ s_nop           0x0
/*0000000037dc*/ s_nop           0x0
/*0000000037e0*/ s_nop           0x0
/*0000000037e4*/ s_nop           0x0
/*0000000037e8*/ s_nop           0x0
/*0000000037ec*/ s_nop           0x0
/*0000000037f0*/ s_nop           0x0
/*0000000037f4*/ s_nop           0x0
/*0000000037f8*/ s_nop           0x0
/*0000000037fc*/ s_nop           0x0
add_x_get_group_id:
.skip 256
/*000000003900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003908*/ s_waitcnt       lgkmcnt(0)
/*00000000390c*/ s_clause        0x2
/*000000003910*/ s_load_dword    s1, s[4:5], 0x20
/*000000003918*/ s_load_dword    s3, s[4:5], 0x8
/*000000003920*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000003928*/ v_mov_b32       v4, 0
/*00000000392c*/ s_lshl_b32      s9, s6, 4
/*000000003930*/ s_lshl_b32      s10, s7, 1
/*000000003934*/ s_lshl_b32      s11, s8, 1
/*000000003938*/ v_mov_b32       v6, v4
/*00000000393c*/ v_mov_b32       v8, v4
/*000000003940*/ s_waitcnt       lgkmcnt(0)
/*000000003944*/ v_add3_u32      v7, s1, s11, v2
/*00000000394c*/ v_add3_u32      v3, s0, s9, v0
/*000000003954*/ v_add3_u32      v5, s2, s10, v1
/*00000000395c*/ s_add_i32       s0, s6, s3
/*000000003960*/ s_add_i32       s1, s7, s3
/*000000003964*/ v_mov_b32       v11, s0
/*000000003968*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003970*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003978*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000003980*/ s_add_i32       s0, s8, s3
/*000000003984*/ v_mov_b32       v13, s1
/*000000003988*/ v_mov_b32       v7, s0
/*00000000398c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003994*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003998*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000039a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000039a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000039ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000039b0*/ global_store_dword v[0:1], v11, off
/*0000000039b8*/ global_store_dword v[2:3], v13, off
/*0000000039c0*/ global_store_dword v[4:5], v7, off
/*0000000039c8*/ s_endpgm
/*0000000039cc*/ s_nop           0x0
/*0000000039d0*/ s_nop           0x0
/*0000000039d4*/ s_nop           0x0
/*0000000039d8*/ s_nop           0x0
/*0000000039dc*/ s_nop           0x0
/*0000000039e0*/ s_nop           0x0
/*0000000039e4*/ s_nop           0x0
/*0000000039e8*/ s_nop           0x0
/*0000000039ec*/ s_nop           0x0
/*0000000039f0*/ s_nop           0x0
/*0000000039f4*/ s_nop           0x0
/*0000000039f8*/ s_nop           0x0
/*0000000039fc*/ s_nop           0x0
add_get_global_offset_get_group_id:
.skip 256
/*000000003b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003b08*/ s_waitcnt       lgkmcnt(0)
/*000000003b0c*/ s_clause        0x1
/*000000003b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003b20*/ v_mov_b32       v4, 0
/*000000003b24*/ s_lshl_b32      s3, s6, 1
/*000000003b28*/ s_lshl_b32      s9, s7, 4
/*000000003b2c*/ s_lshl_b32      s10, s8, 1
/*000000003b30*/ v_mov_b32       v6, v4
/*000000003b34*/ v_mov_b32       v8, v4
/*000000003b38*/ v_add3_u32      v3, s0, s3, v0
/*000000003b40*/ v_add3_u32      v5, s2, s9, v1
/*000000003b48*/ s_waitcnt       lgkmcnt(0)
/*000000003b4c*/ v_add3_u32      v7, s1, s10, v2
/*000000003b54*/ s_add_i32       s0, s6, s0
/*000000003b58*/ s_add_i32       s2, s7, s2
/*000000003b5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003b64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003b6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000003b74*/ v_mov_b32       v11, s0
/*000000003b78*/ s_add_i32       s0, s8, s1
/*000000003b7c*/ v_mov_b32       v13, s2
/*000000003b80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003b88*/ v_mov_b32       v6, s0
/*000000003b8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003b90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000003b98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000003b9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000003ba4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000003ba8*/ global_store_dword v[0:1], v11, off
/*000000003bb0*/ global_store_dword v[2:3], v13, off
/*000000003bb8*/ global_store_dword v[4:5], v6, off
/*000000003bc0*/ s_endpgm
/*000000003bc4*/ s_nop           0x0
/*000000003bc8*/ s_nop           0x0
/*000000003bcc*/ s_nop           0x0
/*000000003bd0*/ s_nop           0x0
/*000000003bd4*/ s_nop           0x0
/*000000003bd8*/ s_nop           0x0
/*000000003bdc*/ s_nop           0x0
/*000000003be0*/ s_nop           0x0
/*000000003be4*/ s_nop           0x0
/*000000003be8*/ s_nop           0x0
/*000000003bec*/ s_nop           0x0
/*000000003bf0*/ s_nop           0x0
/*000000003bf4*/ s_nop           0x0
/*000000003bf8*/ s_nop           0x0
/*000000003bfc*/ s_nop           0x0
add_get_local_id_get_group_id:
.skip 256
/*000000003d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003d08*/ s_waitcnt       lgkmcnt(0)
/*000000003d0c*/ s_clause        0x1
/*000000003d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003d18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003d20*/ v_mov_b32       v4, 0
/*000000003d24*/ s_lshl_b32      s3, s6, 3
/*000000003d28*/ s_lshl_b32      s9, s7, 2
/*000000003d2c*/ s_lshl_b32      s10, s8, 1
/*000000003d30*/ v_add_nc_u32    v9, s6, v0
/*000000003d34*/ v_mov_b32       v6, v4
/*000000003d38*/ v_mov_b32       v8, v4
/*000000003d3c*/ v_add_nc_u32    v10, s7, v1
/*000000003d40*/ v_add_nc_u32    v11, s8, v2
/*000000003d44*/ v_add3_u32      v3, s0, s3, v0
/*000000003d4c*/ v_add3_u32      v5, s2, s9, v1
/*000000003d54*/ s_waitcnt       lgkmcnt(0)
/*000000003d58*/ v_add3_u32      v7, s1, s10, v2
/*000000003d60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000003d68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000003d70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000003d78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000003d80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000003d84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003d8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003d90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000003d98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000003d9c*/ global_store_dword v[2:3], v9, off
/*000000003da4*/ global_store_dword v[0:1], v10, off
/*000000003dac*/ global_store_dword v[4:5], v11, off
/*000000003db4*/ s_endpgm
/*000000003db8*/ s_nop           0x0
/*000000003dbc*/ s_nop           0x0
/*000000003dc0*/ s_nop           0x0
/*000000003dc4*/ s_nop           0x0
/*000000003dc8*/ s_nop           0x0
/*000000003dcc*/ s_nop           0x0
/*000000003dd0*/ s_nop           0x0
/*000000003dd4*/ s_nop           0x0
/*000000003dd8*/ s_nop           0x0
/*000000003ddc*/ s_nop           0x0
/*000000003de0*/ s_nop           0x0
/*000000003de4*/ s_nop           0x0
/*000000003de8*/ s_nop           0x0
/*000000003dec*/ s_nop           0x0
/*000000003df0*/ s_nop           0x0
/*000000003df4*/ s_nop           0x0
/*000000003df8*/ s_nop           0x0
/*000000003dfc*/ s_nop           0x0
add_get_group_id_get_group_id:
.skip 256
/*000000003f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003f08*/ s_waitcnt       lgkmcnt(0)
/*000000003f0c*/ s_clause        0x1
/*000000003f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003f20*/ s_lshl_b32      s3, s6, 1
/*000000003f24*/ v_mov_b32       v4, 0
/*000000003f28*/ s_lshl_b32      s6, s7, 4
/*000000003f2c*/ s_lshl_b32      s8, s8, 1
/*000000003f30*/ s_lshl_b32      s7, s7, 1
/*000000003f34*/ v_mov_b32       v15, s3
/*000000003f38*/ v_mov_b32       v6, v4
/*000000003f3c*/ v_mov_b32       v8, v4
/*000000003f40*/ v_mov_b32       v13, s7
/*000000003f44*/ v_mov_b32       v11, s8
/*000000003f48*/ v_add3_u32      v3, s0, s3, v0
/*000000003f50*/ v_add3_u32      v5, s2, s6, v1
/*000000003f58*/ s_waitcnt       lgkmcnt(0)
/*000000003f5c*/ v_add3_u32      v7, s1, s8, v2
/*000000003f64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003f6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003f74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000003f7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003f84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003f88*/ v_add_co_u32    v2, vcc, s4, v2
/*000000003f90*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000003f94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000003f9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000003fa0*/ global_store_dword v[0:1], v15, off
/*000000003fa8*/ global_store_dword v[2:3], v13, off
/*000000003fb0*/ global_store_dword v[4:5], v11, off
/*000000003fb8*/ s_endpgm
/*000000003fbc*/ s_nop           0x0
/*000000003fc0*/ s_nop           0x0
/*000000003fc4*/ s_nop           0x0
/*000000003fc8*/ s_nop           0x0
/*000000003fcc*/ s_nop           0x0
/*000000003fd0*/ s_nop           0x0
/*000000003fd4*/ s_nop           0x0
/*000000003fd8*/ s_nop           0x0
/*000000003fdc*/ s_nop           0x0
/*000000003fe0*/ s_nop           0x0
/*000000003fe4*/ s_nop           0x0
/*000000003fe8*/ s_nop           0x0
/*000000003fec*/ s_nop           0x0
/*000000003ff0*/ s_nop           0x0
/*000000003ff4*/ s_nop           0x0
/*000000003ff8*/ s_nop           0x0
/*000000003ffc*/ s_nop           0x0
add_get_local_size_get_group_id:
.skip 256
/*000000004100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004108*/ s_waitcnt       lgkmcnt(0)
/*00000000410c*/ s_clause        0x1
/*000000004110*/ s_load_dword    s1, s[4:5], 0x20
/*000000004118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004120*/ v_mov_b32       v4, 0
/*000000004124*/ s_lshl_b32      s3, s6, 1
/*000000004128*/ s_lshl_b32      s9, s7, 1
/*00000000412c*/ s_lshl_b32      s10, s8, 2
/*000000004130*/ s_add_i32       s6, s6, 2
/*000000004134*/ v_mov_b32       v6, v4
/*000000004138*/ v_mov_b32       v8, v4
/*00000000413c*/ s_add_i32       s7, s7, 2
/*000000004140*/ v_mov_b32       v11, s6
/*000000004144*/ v_mov_b32       v13, s7
/*000000004148*/ v_add3_u32      v3, s0, s3, v0
/*000000004150*/ v_add3_u32      v5, s2, s9, v1
/*000000004158*/ s_waitcnt       lgkmcnt(0)
/*00000000415c*/ v_add3_u32      v7, s1, s10, v2
/*000000004164*/ s_add_i32       s0, s8, 4
/*000000004168*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004170*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004178*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004180*/ v_mov_b32       v6, s0
/*000000004184*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000418c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004190*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004198*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000419c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000041a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000041a8*/ global_store_dword v[0:1], v11, off
/*0000000041b0*/ global_store_dword v[2:3], v13, off
/*0000000041b8*/ global_store_dword v[4:5], v6, off
/*0000000041c0*/ s_endpgm
/*0000000041c4*/ s_nop           0x0
/*0000000041c8*/ s_nop           0x0
/*0000000041cc*/ s_nop           0x0
/*0000000041d0*/ s_nop           0x0
/*0000000041d4*/ s_nop           0x0
/*0000000041d8*/ s_nop           0x0
/*0000000041dc*/ s_nop           0x0
/*0000000041e0*/ s_nop           0x0
/*0000000041e4*/ s_nop           0x0
/*0000000041e8*/ s_nop           0x0
/*0000000041ec*/ s_nop           0x0
/*0000000041f0*/ s_nop           0x0
/*0000000041f4*/ s_nop           0x0
/*0000000041f8*/ s_nop           0x0
/*0000000041fc*/ s_nop           0x0
add_get_global_id_get_group_id:
.skip 256
/*000000004300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004308*/ s_waitcnt       lgkmcnt(0)
/*00000000430c*/ s_clause        0x1
/*000000004310*/ s_load_dword    s1, s[4:5], 0x20
/*000000004318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004320*/ v_mov_b32       v4, 0
/*000000004324*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000432c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000004334*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000000433c*/ v_mov_b32       v1, v4
/*000000004340*/ v_mov_b32       v8, v4
/*000000004344*/ v_add_nc_u32    v0, s2, v5
/*000000004348*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000004350*/ s_waitcnt       lgkmcnt(0)
/*000000004354*/ v_add_nc_u32    v7, s1, v2
/*000000004358*/ v_add3_u32      v9, s0, s6, v3
/*000000004360*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000004368*/ v_add_nc_u32    v10, s7, v0
/*00000000436c*/ v_add_co_u32    v3, vcc, s4, v5
/*000000004374*/ v_add_nc_u32    v11, s8, v7
/*000000004378*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*00000000437c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000004384*/ v_add_co_u32    v0, vcc, s4, v1
/*00000000438c*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000004390*/ v_add_co_u32    v5, vcc, s4, v5
/*000000004398*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000439c*/ global_store_dword v[3:4], v9, off
/*0000000043a4*/ global_store_dword v[0:1], v10, off
/*0000000043ac*/ global_store_dword v[5:6], v11, off
/*0000000043b4*/ s_endpgm
/*0000000043b8*/ s_nop           0x0
/*0000000043bc*/ s_nop           0x0
/*0000000043c0*/ s_nop           0x0
/*0000000043c4*/ s_nop           0x0
/*0000000043c8*/ s_nop           0x0
/*0000000043cc*/ s_nop           0x0
/*0000000043d0*/ s_nop           0x0
/*0000000043d4*/ s_nop           0x0
/*0000000043d8*/ s_nop           0x0
/*0000000043dc*/ s_nop           0x0
/*0000000043e0*/ s_nop           0x0
/*0000000043e4*/ s_nop           0x0
/*0000000043e8*/ s_nop           0x0
/*0000000043ec*/ s_nop           0x0
/*0000000043f0*/ s_nop           0x0
/*0000000043f4*/ s_nop           0x0
/*0000000043f8*/ s_nop           0x0
/*0000000043fc*/ s_nop           0x0
add_get_global_size_get_group_id:
.skip 256
/*000000004500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004508*/ s_waitcnt       lgkmcnt(0)
/*00000000450c*/ s_load_dword    s1, s[6:7], 0x20
/*000000004514*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000451c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000004524*/ v_mov_b32       v4, 0
/*000000004528*/ s_lshl_b32      s3, s8, 4
/*00000000452c*/ s_lshl_b32      s6, s9, 1
/*000000004530*/ s_lshl_b32      s7, s10, 1
/*000000004534*/ v_mov_b32       v6, v4
/*000000004538*/ v_mov_b32       v8, v4
/*00000000453c*/ s_waitcnt       lgkmcnt(0)
/*000000004540*/ v_add3_u32      v7, s1, s7, v2
/*000000004548*/ v_add3_u32      v3, s0, s3, v0
/*000000004550*/ v_add3_u32      v5, s2, s6, v1
/*000000004558*/ s_add_i32       s0, s12, s8
/*00000000455c*/ s_add_i32       s1, s13, s9
/*000000004560*/ v_mov_b32       v11, s0
/*000000004564*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000456c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004574*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000457c*/ s_add_i32       s0, s14, s10
/*000000004580*/ v_mov_b32       v13, s1
/*000000004584*/ v_mov_b32       v7, s0
/*000000004588*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004590*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004594*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000459c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000045a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000045a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000045ac*/ global_store_dword v[0:1], v11, off
/*0000000045b4*/ global_store_dword v[2:3], v13, off
/*0000000045bc*/ global_store_dword v[4:5], v7, off
/*0000000045c4*/ s_endpgm
/*0000000045c8*/ s_nop           0x0
/*0000000045cc*/ s_nop           0x0
/*0000000045d0*/ s_nop           0x0
/*0000000045d4*/ s_nop           0x0
/*0000000045d8*/ s_nop           0x0
/*0000000045dc*/ s_nop           0x0
/*0000000045e0*/ s_nop           0x0
/*0000000045e4*/ s_nop           0x0
/*0000000045e8*/ s_nop           0x0
/*0000000045ec*/ s_nop           0x0
/*0000000045f0*/ s_nop           0x0
/*0000000045f4*/ s_nop           0x0
/*0000000045f8*/ s_nop           0x0
/*0000000045fc*/ s_nop           0x0
add_get_num_groups_get_group_id:
.skip 256
/*000000004700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004708*/ s_waitcnt       lgkmcnt(0)
/*00000000470c*/ s_load_dword    s1, s[6:7], 0x20
/*000000004714*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000471c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000004724*/ s_lshl_b32      s3, s8, 1
/*000000004728*/ v_mov_b32       v4, 0
/*00000000472c*/ s_lshl_b32      s6, s9, 1
/*000000004730*/ s_lshl_b32      s7, s10, 2
/*000000004734*/ v_mov_b32       v6, v4
/*000000004738*/ v_add3_u32      v3, s0, s3, v0
/*000000004740*/ v_add3_u32      v5, s2, s6, v1
/*000000004748*/ s_waitcnt       lgkmcnt(0)
/*00000000474c*/ v_add3_u32      v0, s1, s7, v2
/*000000004754*/ s_and_b32       s1, s12, -2
/*000000004758*/ s_and_b32       s3, s13, -2
/*00000000475c*/ v_lshlrev_b64   v[1:2], 2, v[3:4]
/*000000004764*/ v_cmp_gt_u32    s[1:2], s12, s1
/*00000000476c*/ v_cmp_gt_u32    s[3:4], s13, s3
/*000000004774*/ s_lshr_b32      s0, s12, 1
/*000000004778*/ s_lshr_b32      s2, s13, 1
/*00000000477c*/ s_lshr_b32      s6, s14, 2
/*000000004780*/ v_add_co_u32    v7, vcc, s4, v1
/*000000004788*/ v_mov_b32       v1, v4
/*00000000478c*/ s_and_b32       s7, s14, -4
/*000000004790*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000004794*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000479c*/ s_cmpk_lg_u32   s1, 0x0
/*0000000047a0*/ v_cmp_gt_u32    s[1:2], s14, s7
/*0000000047a8*/ s_addc_u32      s0, s0, s8
/*0000000047ac*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000047b4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000047b8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000047c0*/ v_mov_b32       v10, s0
/*0000000047c4*/ s_addc_u32      s0, s2, s9
/*0000000047c8*/ s_cmpk_lg_u32   s1, 0x0
/*0000000047cc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000047d0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000047d8*/ v_mov_b32       v5, s0
/*0000000047dc*/ s_addc_u32      s0, s6, s10
/*0000000047e0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000047e4*/ v_mov_b32       v6, s0
/*0000000047e8*/ global_store_dword v[7:8], v10, off
/*0000000047f0*/ global_store_dword v[2:3], v5, off
/*0000000047f8*/ global_store_dword v[0:1], v6, off
/*000000004800*/ s_endpgm
/*000000004804*/ s_nop           0x0
/*000000004808*/ s_nop           0x0
/*00000000480c*/ s_nop           0x0
/*000000004810*/ s_nop           0x0
/*000000004814*/ s_nop           0x0
/*000000004818*/ s_nop           0x0
/*00000000481c*/ s_nop           0x0
/*000000004820*/ s_nop           0x0
/*000000004824*/ s_nop           0x0
/*000000004828*/ s_nop           0x0
/*00000000482c*/ s_nop           0x0
/*000000004830*/ s_nop           0x0
/*000000004834*/ s_nop           0x0
/*000000004838*/ s_nop           0x0
/*00000000483c*/ s_nop           0x0
/*000000004840*/ s_nop           0x0
/*000000004844*/ s_nop           0x0
/*000000004848*/ s_nop           0x0
/*00000000484c*/ s_nop           0x0
/*000000004850*/ s_nop           0x0
/*000000004854*/ s_nop           0x0
/*000000004858*/ s_nop           0x0
/*00000000485c*/ s_nop           0x0
/*000000004860*/ s_nop           0x0
/*000000004864*/ s_nop           0x0
/*000000004868*/ s_nop           0x0
/*00000000486c*/ s_nop           0x0
/*000000004870*/ s_nop           0x0
/*000000004874*/ s_nop           0x0
/*000000004878*/ s_nop           0x0
/*00000000487c*/ s_nop           0x0
/*000000004880*/ s_nop           0x0
/*000000004884*/ s_nop           0x0
/*000000004888*/ s_nop           0x0
/*00000000488c*/ s_nop           0x0
/*000000004890*/ s_nop           0x0
/*000000004894*/ s_nop           0x0
/*000000004898*/ s_nop           0x0
/*00000000489c*/ s_nop           0x0
/*0000000048a0*/ s_nop           0x0
/*0000000048a4*/ s_nop           0x0
/*0000000048a8*/ s_nop           0x0
/*0000000048ac*/ s_nop           0x0
/*0000000048b0*/ s_nop           0x0
/*0000000048b4*/ s_nop           0x0
/*0000000048b8*/ s_nop           0x0
/*0000000048bc*/ s_nop           0x0
/*0000000048c0*/ s_nop           0x0
/*0000000048c4*/ s_nop           0x0
/*0000000048c8*/ s_nop           0x0
/*0000000048cc*/ s_nop           0x0
/*0000000048d0*/ s_nop           0x0
/*0000000048d4*/ s_nop           0x0
/*0000000048d8*/ s_nop           0x0
/*0000000048dc*/ s_nop           0x0
/*0000000048e0*/ s_nop           0x0
/*0000000048e4*/ s_nop           0x0
/*0000000048e8*/ s_nop           0x0
/*0000000048ec*/ s_nop           0x0
/*0000000048f0*/ s_nop           0x0
/*0000000048f4*/ s_nop           0x0
/*0000000048f8*/ s_nop           0x0
/*0000000048fc*/ s_nop           0x0
add_get_work_dim_get_group_id:
.skip 256
/*000000004a00*/ v_mov_b32       v3, s4
/*000000004a04*/ v_mov_b32       v4, s5
/*000000004a08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004a10*/ s_waitcnt       lgkmcnt(0)
/*000000004a14*/ s_clause        0x1
/*000000004a18*/ s_load_dword    s1, s[6:7], 0x20
/*000000004a20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000004a28*/ s_lshl_b32      s3, s8, 1
/*000000004a2c*/ s_lshl_b32      s6, s9, 1
/*000000004a30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000004a38*/ v_mov_b32       v4, 0
/*000000004a3c*/ s_lshl_b32      s7, s10, 2
/*000000004a40*/ v_mov_b32       v6, v4
/*000000004a44*/ v_mov_b32       v8, v4
/*000000004a48*/ v_add3_u32      v3, s0, s3, v0
/*000000004a50*/ v_add3_u32      v5, s2, s6, v1
/*000000004a58*/ s_waitcnt       lgkmcnt(0)
/*000000004a5c*/ v_add3_u32      v7, s1, s7, v2
/*000000004a64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004a6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004a74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004a7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004a84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004a88*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004a90*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000004a94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004a9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004aa0*/ s_waitcnt       vmcnt(0)
/*000000004aa4*/ v_add_nc_u32    v6, s8, v9
/*000000004aa8*/ v_add_nc_u32    v13, s9, v9
/*000000004aac*/ v_add_nc_u32    v11, s10, v9
/*000000004ab0*/ global_store_dword v[0:1], v6, off
/*000000004ab8*/ global_store_dword v[2:3], v13, off
/*000000004ac0*/ global_store_dword v[4:5], v11, off
/*000000004ac8*/ s_endpgm
/*000000004acc*/ s_nop           0x0
/*000000004ad0*/ s_nop           0x0
/*000000004ad4*/ s_nop           0x0
/*000000004ad8*/ s_nop           0x0
/*000000004adc*/ s_nop           0x0
/*000000004ae0*/ s_nop           0x0
/*000000004ae4*/ s_nop           0x0
/*000000004ae8*/ s_nop           0x0
/*000000004aec*/ s_nop           0x0
/*000000004af0*/ s_nop           0x0
/*000000004af4*/ s_nop           0x0
/*000000004af8*/ s_nop           0x0
/*000000004afc*/ s_nop           0x0
add_x_get_local_size:
.skip 256
/*000000004c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004c08*/ s_waitcnt       lgkmcnt(0)
/*000000004c0c*/ s_clause        0x2
/*000000004c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000004c18*/ s_load_dword    s3, s[4:5], 0x8
/*000000004c20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000004c28*/ v_mov_b32       v4, 0
/*000000004c2c*/ s_lshl_b32      s6, s6, 4
/*000000004c30*/ s_lshl_b32      s7, s7, 1
/*000000004c34*/ s_lshl_b32      s8, s8, 1
/*000000004c38*/ v_mov_b32       v6, v4
/*000000004c3c*/ v_mov_b32       v8, v4
/*000000004c40*/ s_waitcnt       lgkmcnt(0)
/*000000004c44*/ v_add3_u32      v7, s1, s8, v2
/*000000004c4c*/ v_add3_u32      v3, s0, s6, v0
/*000000004c54*/ v_add3_u32      v5, s2, s7, v1
/*000000004c5c*/ s_add_i32       s0, s3, 16
/*000000004c60*/ s_add_i32       s1, s3, 2
/*000000004c64*/ v_mov_b32       v11, s0
/*000000004c68*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004c70*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004c78*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004c80*/ v_mov_b32       v6, s1
/*000000004c84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004c8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004c90*/ v_add_co_u32    v7, vcc, s4, v2
/*000000004c98*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*000000004c9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004ca4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004ca8*/ global_store_dword v[0:1], v11, off
/*000000004cb0*/ global_store_dword v[7:8], v6, off
/*000000004cb8*/ global_store_dword v[4:5], v6, off
/*000000004cc0*/ s_endpgm
/*000000004cc4*/ s_nop           0x0
/*000000004cc8*/ s_nop           0x0
/*000000004ccc*/ s_nop           0x0
/*000000004cd0*/ s_nop           0x0
/*000000004cd4*/ s_nop           0x0
/*000000004cd8*/ s_nop           0x0
/*000000004cdc*/ s_nop           0x0
/*000000004ce0*/ s_nop           0x0
/*000000004ce4*/ s_nop           0x0
/*000000004ce8*/ s_nop           0x0
/*000000004cec*/ s_nop           0x0
/*000000004cf0*/ s_nop           0x0
/*000000004cf4*/ s_nop           0x0
/*000000004cf8*/ s_nop           0x0
/*000000004cfc*/ s_nop           0x0
add_get_global_offset_get_local_size:
.skip 256
/*000000004e00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004e08*/ s_waitcnt       lgkmcnt(0)
/*000000004e0c*/ s_clause        0x1
/*000000004e10*/ s_load_dword    s1, s[4:5], 0x20
/*000000004e18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004e20*/ v_mov_b32       v4, 0
/*000000004e24*/ s_lshl_b32      s3, s6, 1
/*000000004e28*/ s_lshl_b32      s6, s7, 4
/*000000004e2c*/ s_lshl_b32      s7, s8, 1
/*000000004e30*/ v_mov_b32       v6, v4
/*000000004e34*/ v_mov_b32       v8, v4
/*000000004e38*/ v_add3_u32      v3, s0, s3, v0
/*000000004e40*/ v_add3_u32      v5, s2, s6, v1
/*000000004e48*/ s_waitcnt       lgkmcnt(0)
/*000000004e4c*/ v_add3_u32      v7, s1, s7, v2
/*000000004e54*/ s_add_i32       s0, s0, 2
/*000000004e58*/ s_add_i32       s2, s2, 16
/*000000004e5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004e64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004e6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004e74*/ v_mov_b32       v11, s0
/*000000004e78*/ s_add_i32       s0, s1, 2
/*000000004e7c*/ v_mov_b32       v13, s2
/*000000004e80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004e88*/ v_mov_b32       v6, s0
/*000000004e8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004e90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004e98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000004e9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004ea4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004ea8*/ global_store_dword v[0:1], v11, off
/*000000004eb0*/ global_store_dword v[2:3], v13, off
/*000000004eb8*/ global_store_dword v[4:5], v6, off
/*000000004ec0*/ s_endpgm
/*000000004ec4*/ s_nop           0x0
/*000000004ec8*/ s_nop           0x0
/*000000004ecc*/ s_nop           0x0
/*000000004ed0*/ s_nop           0x0
/*000000004ed4*/ s_nop           0x0
/*000000004ed8*/ s_nop           0x0
/*000000004edc*/ s_nop           0x0
/*000000004ee0*/ s_nop           0x0
/*000000004ee4*/ s_nop           0x0
/*000000004ee8*/ s_nop           0x0
/*000000004eec*/ s_nop           0x0
/*000000004ef0*/ s_nop           0x0
/*000000004ef4*/ s_nop           0x0
/*000000004ef8*/ s_nop           0x0
/*000000004efc*/ s_nop           0x0
add_get_local_id_get_local_size:
.skip 256
/*000000005000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005008*/ s_waitcnt       lgkmcnt(0)
/*00000000500c*/ s_clause        0x1
/*000000005010*/ s_load_dword    s1, s[4:5], 0x20
/*000000005018*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005020*/ v_mov_b32       v4, 0
/*000000005024*/ s_lshl_b32      s3, s6, 3
/*000000005028*/ s_lshl_b32      s6, s7, 2
/*00000000502c*/ s_lshl_b32      s7, s8, 1
/*000000005030*/ v_or_b32        v9, 8, v0
/*000000005034*/ v_mov_b32       v6, v4
/*000000005038*/ v_mov_b32       v8, v4
/*00000000503c*/ v_or_b32        v10, 4, v1
/*000000005040*/ v_or_b32        v11, 2, v2
/*000000005044*/ v_add3_u32      v3, s0, s3, v0
/*00000000504c*/ v_add3_u32      v5, s2, s6, v1
/*000000005054*/ s_waitcnt       lgkmcnt(0)
/*000000005058*/ v_add3_u32      v7, s1, s7, v2
/*000000005060*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000005068*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000005070*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000005078*/ v_add_co_u32    v2, vcc, s4, v3
/*000000005080*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000005084*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000508c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005090*/ v_add_co_u32    v4, vcc, s4, v5
/*000000005098*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000509c*/ global_store_dword v[2:3], v9, off
/*0000000050a4*/ global_store_dword v[0:1], v10, off
/*0000000050ac*/ global_store_dword v[4:5], v11, off
/*0000000050b4*/ s_endpgm
/*0000000050b8*/ s_nop           0x0
/*0000000050bc*/ s_nop           0x0
/*0000000050c0*/ s_nop           0x0
/*0000000050c4*/ s_nop           0x0
/*0000000050c8*/ s_nop           0x0
/*0000000050cc*/ s_nop           0x0
/*0000000050d0*/ s_nop           0x0
/*0000000050d4*/ s_nop           0x0
/*0000000050d8*/ s_nop           0x0
/*0000000050dc*/ s_nop           0x0
/*0000000050e0*/ s_nop           0x0
/*0000000050e4*/ s_nop           0x0
/*0000000050e8*/ s_nop           0x0
/*0000000050ec*/ s_nop           0x0
/*0000000050f0*/ s_nop           0x0
/*0000000050f4*/ s_nop           0x0
/*0000000050f8*/ s_nop           0x0
/*0000000050fc*/ s_nop           0x0
add_get_group_id_get_local_size:
.skip 256
/*000000005200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005208*/ s_waitcnt       lgkmcnt(0)
/*00000000520c*/ s_clause        0x1
/*000000005210*/ s_load_dword    s1, s[4:5], 0x20
/*000000005218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005220*/ v_mov_b32       v4, 0
/*000000005224*/ s_lshl_b32      s3, s6, 1
/*000000005228*/ s_lshl_b32      s9, s7, 4
/*00000000522c*/ s_lshl_b32      s10, s8, 1
/*000000005230*/ s_add_i32       s6, s6, 2
/*000000005234*/ v_mov_b32       v6, v4
/*000000005238*/ v_mov_b32       v8, v4
/*00000000523c*/ s_add_i32       s7, s7, 16
/*000000005240*/ v_mov_b32       v11, s6
/*000000005244*/ v_mov_b32       v13, s7
/*000000005248*/ v_add3_u32      v3, s0, s3, v0
/*000000005250*/ v_add3_u32      v5, s2, s9, v1
/*000000005258*/ s_waitcnt       lgkmcnt(0)
/*00000000525c*/ v_add3_u32      v7, s1, s10, v2
/*000000005264*/ s_add_i32       s0, s8, 2
/*000000005268*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005270*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005278*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005280*/ v_mov_b32       v6, s0
/*000000005284*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000528c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005290*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005298*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000529c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000052a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000052a8*/ global_store_dword v[0:1], v11, off
/*0000000052b0*/ global_store_dword v[2:3], v13, off
/*0000000052b8*/ global_store_dword v[4:5], v6, off
/*0000000052c0*/ s_endpgm
/*0000000052c4*/ s_nop           0x0
/*0000000052c8*/ s_nop           0x0
/*0000000052cc*/ s_nop           0x0
/*0000000052d0*/ s_nop           0x0
/*0000000052d4*/ s_nop           0x0
/*0000000052d8*/ s_nop           0x0
/*0000000052dc*/ s_nop           0x0
/*0000000052e0*/ s_nop           0x0
/*0000000052e4*/ s_nop           0x0
/*0000000052e8*/ s_nop           0x0
/*0000000052ec*/ s_nop           0x0
/*0000000052f0*/ s_nop           0x0
/*0000000052f4*/ s_nop           0x0
/*0000000052f8*/ s_nop           0x0
/*0000000052fc*/ s_nop           0x0
add_get_local_size_get_local_size:
.skip 256
/*000000005400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005408*/ s_waitcnt       lgkmcnt(0)
/*00000000540c*/ s_clause        0x1
/*000000005410*/ s_load_dword    s1, s[4:5], 0x20
/*000000005418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005420*/ v_mov_b32       v4, 0
/*000000005424*/ s_lshl_b32      s3, s6, 1
/*000000005428*/ s_lshl_b32      s6, s7, 1
/*00000000542c*/ s_lshl_b32      s7, s8, 2
/*000000005430*/ v_mov_b32       v9, 4
/*000000005434*/ v_mov_b32       v6, v4
/*000000005438*/ v_mov_b32       v8, v4
/*00000000543c*/ v_mov_b32       v10, 8
/*000000005440*/ v_add3_u32      v3, s0, s3, v0
/*000000005448*/ v_add3_u32      v5, s2, s6, v1
/*000000005450*/ s_waitcnt       lgkmcnt(0)
/*000000005454*/ v_add3_u32      v7, s1, s7, v2
/*00000000545c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005464*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000546c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005474*/ v_add_co_u32    v7, vcc, s4, v0
/*00000000547c*/ v_add_co_ci_u32 v8, vcc, s5, v1, vcc
/*000000005480*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005488*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000548c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005494*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005498*/ global_store_dword v[7:8], v9, off
/*0000000054a0*/ global_store_dword v[2:3], v9, off
/*0000000054a8*/ global_store_dword v[4:5], v10, off
/*0000000054b0*/ s_endpgm
/*0000000054b4*/ s_nop           0x0
/*0000000054b8*/ s_nop           0x0
/*0000000054bc*/ s_nop           0x0
/*0000000054c0*/ s_nop           0x0
/*0000000054c4*/ s_nop           0x0
/*0000000054c8*/ s_nop           0x0
/*0000000054cc*/ s_nop           0x0
/*0000000054d0*/ s_nop           0x0
/*0000000054d4*/ s_nop           0x0
/*0000000054d8*/ s_nop           0x0
/*0000000054dc*/ s_nop           0x0
/*0000000054e0*/ s_nop           0x0
/*0000000054e4*/ s_nop           0x0
/*0000000054e8*/ s_nop           0x0
/*0000000054ec*/ s_nop           0x0
/*0000000054f0*/ s_nop           0x0
/*0000000054f4*/ s_nop           0x0
/*0000000054f8*/ s_nop           0x0
/*0000000054fc*/ s_nop           0x0
add_get_global_id_get_local_size:
.skip 256
/*000000005600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005608*/ s_waitcnt       lgkmcnt(0)
/*00000000560c*/ s_clause        0x1
/*000000005610*/ s_load_dword    s1, s[4:5], 0x20
/*000000005618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005620*/ v_mov_b32       v4, 0
/*000000005624*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000562c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000005634*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000000563c*/ v_mov_b32       v1, v4
/*000000005640*/ v_mov_b32       v8, v4
/*000000005644*/ v_add_nc_u32    v0, s2, v5
/*000000005648*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000005650*/ s_waitcnt       lgkmcnt(0)
/*000000005654*/ v_add_nc_u32    v7, s1, v2
/*000000005658*/ v_add3_u32      v9, v3, s0, 2
/*000000005660*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000005668*/ v_add_nc_u32    v10, 2, v0
/*00000000566c*/ v_add_co_u32    v3, vcc, s4, v5
/*000000005674*/ v_add_nc_u32    v11, 4, v7
/*000000005678*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*00000000567c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000005684*/ v_add_co_u32    v0, vcc, s4, v1
/*00000000568c*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000005690*/ v_add_co_u32    v5, vcc, s4, v5
/*000000005698*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000569c*/ global_store_dword v[3:4], v9, off
/*0000000056a4*/ global_store_dword v[0:1], v10, off
/*0000000056ac*/ global_store_dword v[5:6], v11, off
/*0000000056b4*/ s_endpgm
/*0000000056b8*/ s_nop           0x0
/*0000000056bc*/ s_nop           0x0
/*0000000056c0*/ s_nop           0x0
/*0000000056c4*/ s_nop           0x0
/*0000000056c8*/ s_nop           0x0
/*0000000056cc*/ s_nop           0x0
/*0000000056d0*/ s_nop           0x0
/*0000000056d4*/ s_nop           0x0
/*0000000056d8*/ s_nop           0x0
/*0000000056dc*/ s_nop           0x0
/*0000000056e0*/ s_nop           0x0
/*0000000056e4*/ s_nop           0x0
/*0000000056e8*/ s_nop           0x0
/*0000000056ec*/ s_nop           0x0
/*0000000056f0*/ s_nop           0x0
/*0000000056f4*/ s_nop           0x0
/*0000000056f8*/ s_nop           0x0
/*0000000056fc*/ s_nop           0x0
add_get_global_size_get_local_size:
.skip 256
/*000000005800*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005808*/ s_waitcnt       lgkmcnt(0)
/*00000000580c*/ s_load_dword    s1, s[6:7], 0x20
/*000000005814*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000581c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000005824*/ v_mov_b32       v4, 0
/*000000005828*/ s_lshl_b32      s3, s8, 4
/*00000000582c*/ s_lshl_b32      s6, s9, 1
/*000000005830*/ s_lshl_b32      s7, s10, 1
/*000000005834*/ v_mov_b32       v6, v4
/*000000005838*/ v_mov_b32       v8, v4
/*00000000583c*/ s_waitcnt       lgkmcnt(0)
/*000000005840*/ v_add3_u32      v7, s1, s7, v2
/*000000005848*/ v_add3_u32      v3, s0, s3, v0
/*000000005850*/ v_add3_u32      v5, s2, s6, v1
/*000000005858*/ s_add_i32       s0, s12, 16
/*00000000585c*/ s_add_i32       s1, s13, 2
/*000000005860*/ v_mov_b32       v11, s0
/*000000005864*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000586c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005874*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000587c*/ s_add_i32       s0, s14, 2
/*000000005880*/ v_mov_b32       v13, s1
/*000000005884*/ v_mov_b32       v7, s0
/*000000005888*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005890*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005894*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000589c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000058a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000058a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000058ac*/ global_store_dword v[0:1], v11, off
/*0000000058b4*/ global_store_dword v[2:3], v13, off
/*0000000058bc*/ global_store_dword v[4:5], v7, off
/*0000000058c4*/ s_endpgm
/*0000000058c8*/ s_nop           0x0
/*0000000058cc*/ s_nop           0x0
/*0000000058d0*/ s_nop           0x0
/*0000000058d4*/ s_nop           0x0
/*0000000058d8*/ s_nop           0x0
/*0000000058dc*/ s_nop           0x0
/*0000000058e0*/ s_nop           0x0
/*0000000058e4*/ s_nop           0x0
/*0000000058e8*/ s_nop           0x0
/*0000000058ec*/ s_nop           0x0
/*0000000058f0*/ s_nop           0x0
/*0000000058f4*/ s_nop           0x0
/*0000000058f8*/ s_nop           0x0
/*0000000058fc*/ s_nop           0x0
add_get_num_groups_get_local_size:
.skip 256
/*000000005a00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005a08*/ s_waitcnt       lgkmcnt(0)
/*000000005a0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000005a14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000005a1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000005a24*/ s_lshl_b32      s3, s8, 1
/*000000005a28*/ v_mov_b32       v4, 0
/*000000005a2c*/ s_lshl_b32      s6, s9, 1
/*000000005a30*/ s_lshl_b32      s7, s10, 2
/*000000005a34*/ v_mov_b32       v6, v4
/*000000005a38*/ v_add3_u32      v3, s0, s3, v0
/*000000005a40*/ v_add3_u32      v5, s2, s6, v1
/*000000005a48*/ s_waitcnt       lgkmcnt(0)
/*000000005a4c*/ v_add3_u32      v0, s1, s7, v2
/*000000005a54*/ s_and_b32       s1, s12, -2
/*000000005a58*/ s_and_b32       s3, s13, -2
/*000000005a5c*/ v_lshlrev_b64   v[1:2], 2, v[3:4]
/*000000005a64*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000005a6c*/ v_cmp_gt_u32    s[3:4], s13, s3
/*000000005a74*/ s_lshr_b32      s0, s12, 1
/*000000005a78*/ s_lshr_b32      s2, s13, 1
/*000000005a7c*/ s_lshr_b32      s6, s14, 2
/*000000005a80*/ v_add_co_u32    v7, vcc, s4, v1
/*000000005a88*/ v_mov_b32       v1, v4
/*000000005a8c*/ s_and_b32       s7, s14, -4
/*000000005a90*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000005a94*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005a9c*/ s_cmpk_lg_u32   s1, 0x0
/*000000005aa0*/ v_cmp_gt_u32    s[1:2], s14, s7
/*000000005aa8*/ s_addc_u32      s0, s0, 2
/*000000005aac*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000005ab4*/ s_cmpk_lg_u32   s3, 0x0
/*000000005ab8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005ac0*/ v_mov_b32       v10, s0
/*000000005ac4*/ s_addc_u32      s0, s2, 2
/*000000005ac8*/ s_cmpk_lg_u32   s1, 0x0
/*000000005acc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000005ad0*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005ad8*/ v_mov_b32       v5, s0
/*000000005adc*/ s_addc_u32      s0, s6, 4
/*000000005ae0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005ae4*/ v_mov_b32       v6, s0
/*000000005ae8*/ global_store_dword v[7:8], v10, off
/*000000005af0*/ global_store_dword v[2:3], v5, off
/*000000005af8*/ global_store_dword v[0:1], v6, off
/*000000005b00*/ s_endpgm
/*000000005b04*/ s_nop           0x0
/*000000005b08*/ s_nop           0x0
/*000000005b0c*/ s_nop           0x0
/*000000005b10*/ s_nop           0x0
/*000000005b14*/ s_nop           0x0
/*000000005b18*/ s_nop           0x0
/*000000005b1c*/ s_nop           0x0
/*000000005b20*/ s_nop           0x0
/*000000005b24*/ s_nop           0x0
/*000000005b28*/ s_nop           0x0
/*000000005b2c*/ s_nop           0x0
/*000000005b30*/ s_nop           0x0
/*000000005b34*/ s_nop           0x0
/*000000005b38*/ s_nop           0x0
/*000000005b3c*/ s_nop           0x0
/*000000005b40*/ s_nop           0x0
/*000000005b44*/ s_nop           0x0
/*000000005b48*/ s_nop           0x0
/*000000005b4c*/ s_nop           0x0
/*000000005b50*/ s_nop           0x0
/*000000005b54*/ s_nop           0x0
/*000000005b58*/ s_nop           0x0
/*000000005b5c*/ s_nop           0x0
/*000000005b60*/ s_nop           0x0
/*000000005b64*/ s_nop           0x0
/*000000005b68*/ s_nop           0x0
/*000000005b6c*/ s_nop           0x0
/*000000005b70*/ s_nop           0x0
/*000000005b74*/ s_nop           0x0
/*000000005b78*/ s_nop           0x0
/*000000005b7c*/ s_nop           0x0
/*000000005b80*/ s_nop           0x0
/*000000005b84*/ s_nop           0x0
/*000000005b88*/ s_nop           0x0
/*000000005b8c*/ s_nop           0x0
/*000000005b90*/ s_nop           0x0
/*000000005b94*/ s_nop           0x0
/*000000005b98*/ s_nop           0x0
/*000000005b9c*/ s_nop           0x0
/*000000005ba0*/ s_nop           0x0
/*000000005ba4*/ s_nop           0x0
/*000000005ba8*/ s_nop           0x0
/*000000005bac*/ s_nop           0x0
/*000000005bb0*/ s_nop           0x0
/*000000005bb4*/ s_nop           0x0
/*000000005bb8*/ s_nop           0x0
/*000000005bbc*/ s_nop           0x0
/*000000005bc0*/ s_nop           0x0
/*000000005bc4*/ s_nop           0x0
/*000000005bc8*/ s_nop           0x0
/*000000005bcc*/ s_nop           0x0
/*000000005bd0*/ s_nop           0x0
/*000000005bd4*/ s_nop           0x0
/*000000005bd8*/ s_nop           0x0
/*000000005bdc*/ s_nop           0x0
/*000000005be0*/ s_nop           0x0
/*000000005be4*/ s_nop           0x0
/*000000005be8*/ s_nop           0x0
/*000000005bec*/ s_nop           0x0
/*000000005bf0*/ s_nop           0x0
/*000000005bf4*/ s_nop           0x0
/*000000005bf8*/ s_nop           0x0
/*000000005bfc*/ s_nop           0x0
add_get_work_dim_get_local_size:
.skip 256
/*000000005d00*/ v_mov_b32       v3, s4
/*000000005d04*/ v_mov_b32       v4, s5
/*000000005d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005d10*/ s_waitcnt       lgkmcnt(0)
/*000000005d14*/ s_clause        0x1
/*000000005d18*/ s_load_dword    s1, s[6:7], 0x20
/*000000005d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000005d28*/ s_lshl_b32      s3, s8, 1
/*000000005d2c*/ s_lshl_b32      s6, s9, 1
/*000000005d30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000005d38*/ v_mov_b32       v4, 0
/*000000005d3c*/ s_lshl_b32      s7, s10, 2
/*000000005d40*/ v_mov_b32       v6, v4
/*000000005d44*/ v_mov_b32       v8, v4
/*000000005d48*/ v_add3_u32      v3, s0, s3, v0
/*000000005d50*/ v_add3_u32      v5, s2, s6, v1
/*000000005d58*/ s_waitcnt       lgkmcnt(0)
/*000000005d5c*/ v_add3_u32      v7, s1, s7, v2
/*000000005d64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005d6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005d74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005d7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005d84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005d88*/ v_add_co_u32    v11, vcc, s4, v2
/*000000005d90*/ v_add_co_ci_u32 v12, vcc, s5, v3, vcc
/*000000005d94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005d9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005da0*/ s_waitcnt       vmcnt(0)
/*000000005da4*/ v_add_nc_u32    v6, 2, v9
/*000000005da8*/ v_add_nc_u32    v7, 4, v9
/*000000005dac*/ global_store_dword v[0:1], v6, off
/*000000005db4*/ global_store_dword v[11:12], v6, off
/*000000005dbc*/ global_store_dword v[4:5], v7, off
/*000000005dc4*/ s_endpgm
/*000000005dc8*/ s_nop           0x0
/*000000005dcc*/ s_nop           0x0
/*000000005dd0*/ s_nop           0x0
/*000000005dd4*/ s_nop           0x0
/*000000005dd8*/ s_nop           0x0
/*000000005ddc*/ s_nop           0x0
/*000000005de0*/ s_nop           0x0
/*000000005de4*/ s_nop           0x0
/*000000005de8*/ s_nop           0x0
/*000000005dec*/ s_nop           0x0
/*000000005df0*/ s_nop           0x0
/*000000005df4*/ s_nop           0x0
/*000000005df8*/ s_nop           0x0
/*000000005dfc*/ s_nop           0x0
add_x_get_global_id:
.skip 256
/*000000005f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005f08*/ s_waitcnt       lgkmcnt(0)
/*000000005f0c*/ s_clause        0x2
/*000000005f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000005f18*/ s_load_dword    s3, s[4:5], 0x8
/*000000005f20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000005f28*/ v_lshl_or_b32   v0, s6, 4, v0
/*000000005f30*/ v_mov_b32       v3, 0
/*000000005f34*/ v_lshl_or_b32   v4, s7, 1, v1
/*000000005f3c*/ v_lshl_or_b32   v6, s8, 1, v2
/*000000005f44*/ v_mov_b32       v1, v3
/*000000005f48*/ v_mov_b32       v5, v3
/*000000005f4c*/ v_add_nc_u32    v2, s0, v0
/*000000005f50*/ v_add_nc_u32    v0, s2, v4
/*000000005f54*/ s_waitcnt       lgkmcnt(0)
/*000000005f58*/ v_add_nc_u32    v4, s1, v6
/*000000005f5c*/ v_add_nc_u32    v9, s3, v2
/*000000005f60*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000005f68*/ v_add_nc_u32    v7, s3, v0
/*000000005f6c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000005f74*/ v_add_nc_u32    v11, s3, v4
/*000000005f78*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000005f80*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005f88*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000005f8c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005f94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005f98*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005fa0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005fa4*/ global_store_dword v[2:3], v9, off
/*000000005fac*/ global_store_dword v[0:1], v7, off
/*000000005fb4*/ global_store_dword v[4:5], v11, off
/*000000005fbc*/ s_endpgm
/*000000005fc0*/ s_nop           0x0
/*000000005fc4*/ s_nop           0x0
/*000000005fc8*/ s_nop           0x0
/*000000005fcc*/ s_nop           0x0
/*000000005fd0*/ s_nop           0x0
/*000000005fd4*/ s_nop           0x0
/*000000005fd8*/ s_nop           0x0
/*000000005fdc*/ s_nop           0x0
/*000000005fe0*/ s_nop           0x0
/*000000005fe4*/ s_nop           0x0
/*000000005fe8*/ s_nop           0x0
/*000000005fec*/ s_nop           0x0
/*000000005ff0*/ s_nop           0x0
/*000000005ff4*/ s_nop           0x0
/*000000005ff8*/ s_nop           0x0
/*000000005ffc*/ s_nop           0x0
add_get_global_offset_get_global_id:
.skip 256
/*000000006100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006108*/ s_waitcnt       lgkmcnt(0)
/*00000000610c*/ s_clause        0x1
/*000000006110*/ s_load_dword    s1, s[4:5], 0x20
/*000000006118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006120*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006128*/ v_mov_b32       v3, 0
/*00000000612c*/ v_lshl_or_b32   v4, s7, 4, v1
/*000000006134*/ v_lshl_or_b32   v6, s8, 1, v2
/*00000000613c*/ v_mov_b32       v1, v3
/*000000006140*/ v_mov_b32       v5, v3
/*000000006144*/ v_add_nc_u32    v2, s0, v0
/*000000006148*/ v_add_nc_u32    v0, s2, v4
/*00000000614c*/ s_waitcnt       lgkmcnt(0)
/*000000006150*/ v_add_nc_u32    v4, s1, v6
/*000000006154*/ v_add_nc_u32    v9, s0, v2
/*000000006158*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006160*/ v_add_nc_u32    v7, s2, v0
/*000000006164*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000616c*/ v_add_nc_u32    v11, s1, v4
/*000000006170*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006178*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006180*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006184*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000618c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006190*/ v_add_co_u32    v4, vcc, s4, v4
/*000000006198*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000619c*/ global_store_dword v[2:3], v9, off
/*0000000061a4*/ global_store_dword v[0:1], v7, off
/*0000000061ac*/ global_store_dword v[4:5], v11, off
/*0000000061b4*/ s_endpgm
/*0000000061b8*/ s_nop           0x0
/*0000000061bc*/ s_nop           0x0
/*0000000061c0*/ s_nop           0x0
/*0000000061c4*/ s_nop           0x0
/*0000000061c8*/ s_nop           0x0
/*0000000061cc*/ s_nop           0x0
/*0000000061d0*/ s_nop           0x0
/*0000000061d4*/ s_nop           0x0
/*0000000061d8*/ s_nop           0x0
/*0000000061dc*/ s_nop           0x0
/*0000000061e0*/ s_nop           0x0
/*0000000061e4*/ s_nop           0x0
/*0000000061e8*/ s_nop           0x0
/*0000000061ec*/ s_nop           0x0
/*0000000061f0*/ s_nop           0x0
/*0000000061f4*/ s_nop           0x0
/*0000000061f8*/ s_nop           0x0
/*0000000061fc*/ s_nop           0x0
add_get_local_id_get_global_id:
.skip 256
/*000000006300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006308*/ s_waitcnt       lgkmcnt(0)
/*00000000630c*/ s_clause        0x1
/*000000006310*/ s_load_dword    s1, s[4:5], 0x20
/*000000006318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006320*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000006328*/ v_mov_b32       v4, 0
/*00000000632c*/ v_lshl_or_b32   v5, s7, 2, v1
/*000000006334*/ v_lshl_or_b32   v7, s8, 1, v2
/*00000000633c*/ v_mov_b32       v12, v4
/*000000006340*/ v_mov_b32       v8, v4
/*000000006344*/ v_add_nc_u32    v3, s0, v3
/*000000006348*/ v_add_nc_u32    v11, s2, v5
/*00000000634c*/ s_waitcnt       lgkmcnt(0)
/*000000006350*/ v_add_nc_u32    v7, s1, v7
/*000000006354*/ v_add_nc_u32    v9, v0, v3
/*000000006358*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000006360*/ v_add_nc_u32    v10, v1, v11
/*000000006364*/ v_lshlrev_b64   v[0:1], 2, v[11:12]
/*00000000636c*/ v_add_nc_u32    v11, v2, v7
/*000000006370*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000006378*/ v_add_co_u32    v2, vcc, s4, v3
/*000000006380*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000006384*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000638c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006390*/ v_add_co_u32    v4, vcc, s4, v5
/*000000006398*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000639c*/ global_store_dword v[2:3], v9, off
/*0000000063a4*/ global_store_dword v[0:1], v10, off
/*0000000063ac*/ global_store_dword v[4:5], v11, off
/*0000000063b4*/ s_endpgm
/*0000000063b8*/ s_nop           0x0
/*0000000063bc*/ s_nop           0x0
/*0000000063c0*/ s_nop           0x0
/*0000000063c4*/ s_nop           0x0
/*0000000063c8*/ s_nop           0x0
/*0000000063cc*/ s_nop           0x0
/*0000000063d0*/ s_nop           0x0
/*0000000063d4*/ s_nop           0x0
/*0000000063d8*/ s_nop           0x0
/*0000000063dc*/ s_nop           0x0
/*0000000063e0*/ s_nop           0x0
/*0000000063e4*/ s_nop           0x0
/*0000000063e8*/ s_nop           0x0
/*0000000063ec*/ s_nop           0x0
/*0000000063f0*/ s_nop           0x0
/*0000000063f4*/ s_nop           0x0
/*0000000063f8*/ s_nop           0x0
/*0000000063fc*/ s_nop           0x0
add_get_group_id_get_global_id:
.skip 256
/*000000006500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006508*/ s_waitcnt       lgkmcnt(0)
/*00000000650c*/ s_clause        0x1
/*000000006510*/ s_load_dword    s1, s[4:5], 0x20
/*000000006518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006520*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006528*/ v_mov_b32       v3, 0
/*00000000652c*/ v_lshl_or_b32   v4, s7, 4, v1
/*000000006534*/ v_lshl_or_b32   v6, s8, 1, v2
/*00000000653c*/ v_mov_b32       v1, v3
/*000000006540*/ v_mov_b32       v5, v3
/*000000006544*/ v_add_nc_u32    v2, s0, v0
/*000000006548*/ v_add_nc_u32    v0, s2, v4
/*00000000654c*/ s_waitcnt       lgkmcnt(0)
/*000000006550*/ v_add_nc_u32    v4, s1, v6
/*000000006554*/ v_add_nc_u32    v9, s6, v2
/*000000006558*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006560*/ v_add_nc_u32    v7, s7, v0
/*000000006564*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000656c*/ v_add_nc_u32    v11, s8, v4
/*000000006570*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006578*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006580*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006584*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000658c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006590*/ v_add_co_u32    v4, vcc, s4, v4
/*000000006598*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000659c*/ global_store_dword v[2:3], v9, off
/*0000000065a4*/ global_store_dword v[0:1], v7, off
/*0000000065ac*/ global_store_dword v[4:5], v11, off
/*0000000065b4*/ s_endpgm
/*0000000065b8*/ s_nop           0x0
/*0000000065bc*/ s_nop           0x0
/*0000000065c0*/ s_nop           0x0
/*0000000065c4*/ s_nop           0x0
/*0000000065c8*/ s_nop           0x0
/*0000000065cc*/ s_nop           0x0
/*0000000065d0*/ s_nop           0x0
/*0000000065d4*/ s_nop           0x0
/*0000000065d8*/ s_nop           0x0
/*0000000065dc*/ s_nop           0x0
/*0000000065e0*/ s_nop           0x0
/*0000000065e4*/ s_nop           0x0
/*0000000065e8*/ s_nop           0x0
/*0000000065ec*/ s_nop           0x0
/*0000000065f0*/ s_nop           0x0
/*0000000065f4*/ s_nop           0x0
/*0000000065f8*/ s_nop           0x0
/*0000000065fc*/ s_nop           0x0
add_get_local_size_get_global_id:
.skip 256
/*000000006700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006708*/ s_waitcnt       lgkmcnt(0)
/*00000000670c*/ s_clause        0x1
/*000000006710*/ s_load_dword    s1, s[4:5], 0x20
/*000000006718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006720*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006728*/ v_mov_b32       v3, 0
/*00000000672c*/ v_lshl_or_b32   v4, s7, 1, v1
/*000000006734*/ v_lshl_or_b32   v6, s8, 2, v2
/*00000000673c*/ v_mov_b32       v1, v3
/*000000006740*/ v_mov_b32       v5, v3
/*000000006744*/ v_add_nc_u32    v2, s0, v0
/*000000006748*/ v_add_nc_u32    v0, s2, v4
/*00000000674c*/ s_waitcnt       lgkmcnt(0)
/*000000006750*/ v_add_nc_u32    v4, s1, v6
/*000000006754*/ v_add_nc_u32    v9, 2, v2
/*000000006758*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006760*/ v_add_nc_u32    v7, 2, v0
/*000000006764*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000676c*/ v_add_nc_u32    v11, 4, v4
/*000000006770*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006778*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006780*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006784*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000678c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006790*/ v_add_co_u32    v4, vcc, s4, v4
/*000000006798*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000679c*/ global_store_dword v[2:3], v9, off
/*0000000067a4*/ global_store_dword v[0:1], v7, off
/*0000000067ac*/ global_store_dword v[4:5], v11, off
/*0000000067b4*/ s_endpgm
/*0000000067b8*/ s_nop           0x0
/*0000000067bc*/ s_nop           0x0
/*0000000067c0*/ s_nop           0x0
/*0000000067c4*/ s_nop           0x0
/*0000000067c8*/ s_nop           0x0
/*0000000067cc*/ s_nop           0x0
/*0000000067d0*/ s_nop           0x0
/*0000000067d4*/ s_nop           0x0
/*0000000067d8*/ s_nop           0x0
/*0000000067dc*/ s_nop           0x0
/*0000000067e0*/ s_nop           0x0
/*0000000067e4*/ s_nop           0x0
/*0000000067e8*/ s_nop           0x0
/*0000000067ec*/ s_nop           0x0
/*0000000067f0*/ s_nop           0x0
/*0000000067f4*/ s_nop           0x0
/*0000000067f8*/ s_nop           0x0
/*0000000067fc*/ s_nop           0x0
add_get_global_id_get_global_id:
.skip 256
/*000000006900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006908*/ s_waitcnt       lgkmcnt(0)
/*00000000690c*/ s_clause        0x1
/*000000006910*/ s_load_dword    s1, s[4:5], 0x20
/*000000006918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006920*/ v_mov_b32       v4, 0
/*000000006924*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000692c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000006934*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000000693c*/ v_mov_b32       v1, v4
/*000000006940*/ v_mov_b32       v8, v4
/*000000006944*/ v_add_nc_u32    v0, s2, v5
/*000000006948*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000006950*/ s_waitcnt       lgkmcnt(0)
/*000000006954*/ v_add_nc_u32    v7, s1, v2
/*000000006958*/ v_add_lshl_u32  v9, v3, s0, 1
/*000000006960*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000006968*/ v_lshlrev_b32   v10, 1, v0
/*00000000696c*/ v_add_co_u32    v3, vcc, s4, v5
/*000000006974*/ v_lshlrev_b32   v11, 1, v7
/*000000006978*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*00000000697c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000006984*/ v_add_co_u32    v0, vcc, s4, v1
/*00000000698c*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000006990*/ v_add_co_u32    v5, vcc, s4, v5
/*000000006998*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000699c*/ global_store_dword v[3:4], v9, off
/*0000000069a4*/ global_store_dword v[0:1], v10, off
/*0000000069ac*/ global_store_dword v[5:6], v11, off
/*0000000069b4*/ s_endpgm
/*0000000069b8*/ s_nop           0x0
/*0000000069bc*/ s_nop           0x0
/*0000000069c0*/ s_nop           0x0
/*0000000069c4*/ s_nop           0x0
/*0000000069c8*/ s_nop           0x0
/*0000000069cc*/ s_nop           0x0
/*0000000069d0*/ s_nop           0x0
/*0000000069d4*/ s_nop           0x0
/*0000000069d8*/ s_nop           0x0
/*0000000069dc*/ s_nop           0x0
/*0000000069e0*/ s_nop           0x0
/*0000000069e4*/ s_nop           0x0
/*0000000069e8*/ s_nop           0x0
/*0000000069ec*/ s_nop           0x0
/*0000000069f0*/ s_nop           0x0
/*0000000069f4*/ s_nop           0x0
/*0000000069f8*/ s_nop           0x0
/*0000000069fc*/ s_nop           0x0
add_get_global_size_get_global_id:
.skip 256
/*000000006b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000006b08*/ s_waitcnt       lgkmcnt(0)
/*000000006b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000006b14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000006b1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000006b24*/ v_lshl_or_b32   v0, s8, 4, v0
/*000000006b2c*/ v_mov_b32       v3, 0
/*000000006b30*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006b38*/ v_lshl_or_b32   v6, s10, 1, v2
/*000000006b40*/ v_mov_b32       v1, v3
/*000000006b44*/ v_mov_b32       v5, v3
/*000000006b48*/ v_add_nc_u32    v2, s0, v0
/*000000006b4c*/ v_add_nc_u32    v0, s2, v4
/*000000006b50*/ s_waitcnt       lgkmcnt(0)
/*000000006b54*/ v_add_nc_u32    v4, s1, v6
/*000000006b58*/ v_lshlrev_b64   v[6:7], 2, v[2:3]
/*000000006b60*/ v_add_nc_u32    v11, s13, v0
/*000000006b64*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000006b6c*/ v_add_nc_u32    v8, s12, v2
/*000000006b70*/ v_lshlrev_b64   v[2:3], 2, v[4:5]
/*000000006b78*/ v_add_nc_u32    v4, s14, v4
/*000000006b7c*/ v_add_co_u32    v5, vcc, s4, v6
/*000000006b84*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*000000006b88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000006b90*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006b94*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006b9c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006ba0*/ global_store_dword v[5:6], v8, off
/*000000006ba8*/ global_store_dword v[0:1], v11, off
/*000000006bb0*/ global_store_dword v[2:3], v4, off
/*000000006bb8*/ s_endpgm
/*000000006bbc*/ s_nop           0x0
/*000000006bc0*/ s_nop           0x0
/*000000006bc4*/ s_nop           0x0
/*000000006bc8*/ s_nop           0x0
/*000000006bcc*/ s_nop           0x0
/*000000006bd0*/ s_nop           0x0
/*000000006bd4*/ s_nop           0x0
/*000000006bd8*/ s_nop           0x0
/*000000006bdc*/ s_nop           0x0
/*000000006be0*/ s_nop           0x0
/*000000006be4*/ s_nop           0x0
/*000000006be8*/ s_nop           0x0
/*000000006bec*/ s_nop           0x0
/*000000006bf0*/ s_nop           0x0
/*000000006bf4*/ s_nop           0x0
/*000000006bf8*/ s_nop           0x0
/*000000006bfc*/ s_nop           0x0
add_get_num_groups_get_global_id:
.skip 256
/*000000006d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000006d08*/ s_waitcnt       lgkmcnt(0)
/*000000006d0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000006d14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000006d1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000006d24*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000006d2c*/ v_lshl_or_b32   v5, s10, 2, v2
/*000000006d34*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006d3c*/ v_mov_b32       v3, 0
/*000000006d40*/ v_mov_b32       v1, v3
/*000000006d44*/ v_add_nc_u32    v2, s0, v0
/*000000006d48*/ v_add_nc_u32    v0, s2, v4
/*000000006d4c*/ s_waitcnt       lgkmcnt(0)
/*000000006d50*/ v_add_nc_u32    v4, s1, v5
/*000000006d54*/ s_and_b32       s1, s12, -2
/*000000006d58*/ s_lshr_b32      s0, s12, 1
/*000000006d5c*/ v_cmp_gt_u32    vcc, s12, s1
/*000000006d64*/ v_lshlrev_b64   v[5:6], 2, v[2:3]
/*000000006d6c*/ s_and_b32       s3, s13, -2
/*000000006d70*/ s_lshr_b32      s2, s13, 1
/*000000006d74*/ s_and_b32       s7, s14, -4
/*000000006d78*/ v_add_co_ci_u32 v9, vcc, s0, v2, vcc
/*000000006d7c*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000006d84*/ v_add_co_u32    v7, vcc, s4, v5
/*000000006d8c*/ v_mov_b32       v5, v3
/*000000006d90*/ v_add_co_ci_u32 v8, vcc, s5, v6, vcc
/*000000006d94*/ v_cmp_gt_u32    vcc, s13, s3
/*000000006d9c*/ s_lshr_b32      s6, s14, 2
/*000000006da0*/ v_lshlrev_b64   v[5:6], 2, v[4:5]
/*000000006da8*/ v_add_co_ci_u32 v10, vcc, s2, v0, vcc
/*000000006dac*/ v_add_co_u32    v0, vcc, s4, v1
/*000000006db4*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000006db8*/ v_cmp_gt_u32    vcc, s14, s7
/*000000006dc0*/ v_add_co_ci_u32 v4, vcc, s6, v4, vcc
/*000000006dc4*/ v_add_co_u32    v2, vcc, s4, v5
/*000000006dcc*/ v_add_co_ci_u32 v3, vcc, s5, v6, vcc
/*000000006dd0*/ global_store_dword v[7:8], v9, off
/*000000006dd8*/ global_store_dword v[0:1], v10, off
/*000000006de0*/ global_store_dword v[2:3], v4, off
/*000000006de8*/ s_endpgm
/*000000006dec*/ s_nop           0x0
/*000000006df0*/ s_nop           0x0
/*000000006df4*/ s_nop           0x0
/*000000006df8*/ s_nop           0x0
/*000000006dfc*/ s_nop           0x0
add_get_work_dim_get_global_id:
.skip 256
/*000000006f00*/ v_mov_b32       v3, s4
/*000000006f04*/ v_mov_b32       v4, s5
/*000000006f08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000006f10*/ s_waitcnt       lgkmcnt(0)
/*000000006f14*/ s_clause        0x1
/*000000006f18*/ s_load_dword    s1, s[6:7], 0x20
/*000000006f20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000006f28*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000006f30*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000006f38*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000006f40*/ v_mov_b32       v3, 0
/*000000006f44*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006f4c*/ v_mov_b32       v1, v3
/*000000006f50*/ v_mov_b32       v5, v3
/*000000006f54*/ v_add_nc_u32    v2, s0, v0
/*000000006f58*/ v_add_nc_u32    v0, s2, v4
/*000000006f5c*/ s_waitcnt       lgkmcnt(0)
/*000000006f60*/ v_add_nc_u32    v4, s1, v6
/*000000006f64*/ v_lshlrev_b64   v[6:7], 2, v[2:3]
/*000000006f6c*/ v_lshlrev_b64   v[8:9], 2, v[0:1]
/*000000006f74*/ v_lshlrev_b64   v[10:11], 2, v[4:5]
/*000000006f7c*/ v_add_co_u32    v5, vcc, s4, v6
/*000000006f84*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*000000006f88*/ v_add_co_u32    v7, vcc, s4, v8
/*000000006f90*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*000000006f94*/ v_add_co_u32    v9, vcc, s4, v10
/*000000006f9c*/ v_add_co_ci_u32 v10, vcc, s5, v11, vcc
/*000000006fa0*/ s_waitcnt       vmcnt(0)
/*000000006fa4*/ v_add_nc_u32    v11, v15, v2
/*000000006fa8*/ v_add_nc_u32    v2, v15, v0
/*000000006fac*/ v_add_nc_u32    v3, v15, v4
/*000000006fb0*/ global_store_dword v[5:6], v11, off
/*000000006fb8*/ global_store_dword v[7:8], v2, off
/*000000006fc0*/ global_store_dword v[9:10], v3, off
/*000000006fc8*/ s_endpgm
/*000000006fcc*/ s_nop           0x0
/*000000006fd0*/ s_nop           0x0
/*000000006fd4*/ s_nop           0x0
/*000000006fd8*/ s_nop           0x0
/*000000006fdc*/ s_nop           0x0
/*000000006fe0*/ s_nop           0x0
/*000000006fe4*/ s_nop           0x0
/*000000006fe8*/ s_nop           0x0
/*000000006fec*/ s_nop           0x0
/*000000006ff0*/ s_nop           0x0
/*000000006ff4*/ s_nop           0x0
/*000000006ff8*/ s_nop           0x0
/*000000006ffc*/ s_nop           0x0
add_x_get_global_size:
.skip 256
/*000000007100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007108*/ s_waitcnt       lgkmcnt(0)
/*00000000710c*/ s_clause        0x1
/*000000007110*/ s_load_dword    s1, s[6:7], 0x8
/*000000007118*/ s_load_dword    s3, s[6:7], 0x20
/*000000007120*/ s_clause        0x1
/*000000007124*/ s_load_dword    s11, s[4:5], 0xc
/*00000000712c*/ s_load_dword    s12, s[4:5], 0x10
/*000000007134*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*00000000713c*/ s_load_dword    s4, s[4:5], 0x14
/*000000007144*/ v_mov_b32       v4, 0
/*000000007148*/ s_lshl_b32      s8, s8, 4
/*00000000714c*/ s_lshl_b32      s9, s9, 1
/*000000007150*/ s_lshl_b32      s10, s10, 1
/*000000007154*/ v_mov_b32       v6, v4
/*000000007158*/ v_mov_b32       v8, v4
/*00000000715c*/ s_waitcnt       lgkmcnt(0)
/*000000007160*/ v_add3_u32      v7, s3, s10, v2
/*000000007168*/ v_add3_u32      v3, s0, s8, v0
/*000000007170*/ v_add3_u32      v5, s2, s9, v1
/*000000007178*/ s_add_i32       s0, s11, s1
/*00000000717c*/ s_add_i32       s2, s12, s1
/*000000007180*/ v_mov_b32       v11, s0
/*000000007184*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000718c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007194*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000719c*/ s_add_i32       s0, s4, s1
/*0000000071a0*/ v_mov_b32       v13, s2
/*0000000071a4*/ v_mov_b32       v7, s0
/*0000000071a8*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000071b0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000071b4*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000071bc*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000071c0*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000071c8*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000071cc*/ global_store_dword v[0:1], v11, off
/*0000000071d4*/ global_store_dword v[2:3], v13, off
/*0000000071dc*/ global_store_dword v[4:5], v7, off
/*0000000071e4*/ s_endpgm
/*0000000071e8*/ s_nop           0x0
/*0000000071ec*/ s_nop           0x0
/*0000000071f0*/ s_nop           0x0
/*0000000071f4*/ s_nop           0x0
/*0000000071f8*/ s_nop           0x0
/*0000000071fc*/ s_nop           0x0
add_get_global_offset_get_global_size:
.skip 256
/*000000007300*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007308*/ s_waitcnt       lgkmcnt(0)
/*00000000730c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007314*/ s_clause        0x1
/*000000007318*/ s_load_dword    s3, s[4:5], 0xc
/*000000007320*/ s_load_dword    s11, s[4:5], 0x10
/*000000007328*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007330*/ s_load_dword    s4, s[4:5], 0x14
/*000000007338*/ v_mov_b32       v4, 0
/*00000000733c*/ s_lshl_b32      s8, s8, 1
/*000000007340*/ s_lshl_b32      s9, s9, 4
/*000000007344*/ s_lshl_b32      s10, s10, 1
/*000000007348*/ v_mov_b32       v6, v4
/*00000000734c*/ v_mov_b32       v8, v4
/*000000007350*/ s_waitcnt       lgkmcnt(0)
/*000000007354*/ v_add3_u32      v7, s1, s10, v2
/*00000000735c*/ v_add3_u32      v3, s0, s8, v0
/*000000007364*/ v_add3_u32      v5, s2, s9, v1
/*00000000736c*/ s_add_i32       s0, s3, s0
/*000000007370*/ s_add_i32       s2, s11, s2
/*000000007374*/ v_mov_b32       v11, s0
/*000000007378*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007380*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007388*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007390*/ s_add_i32       s0, s4, s1
/*000000007394*/ v_mov_b32       v13, s2
/*000000007398*/ v_mov_b32       v7, s0
/*00000000739c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000073a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000073a8*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000073b0*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000073b4*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000073bc*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000073c0*/ global_store_dword v[0:1], v11, off
/*0000000073c8*/ global_store_dword v[2:3], v13, off
/*0000000073d0*/ global_store_dword v[4:5], v7, off
/*0000000073d8*/ s_endpgm
/*0000000073dc*/ s_nop           0x0
/*0000000073e0*/ s_nop           0x0
/*0000000073e4*/ s_nop           0x0
/*0000000073e8*/ s_nop           0x0
/*0000000073ec*/ s_nop           0x0
/*0000000073f0*/ s_nop           0x0
/*0000000073f4*/ s_nop           0x0
/*0000000073f8*/ s_nop           0x0
/*0000000073fc*/ s_nop           0x0
add_get_local_id_get_global_size:
.skip 256
/*000000007500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007508*/ s_waitcnt       lgkmcnt(0)
/*00000000750c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007514*/ s_clause        0x1
/*000000007518*/ s_load_dword    s3, s[4:5], 0xc
/*000000007520*/ s_load_dword    s11, s[4:5], 0x10
/*000000007528*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007530*/ v_mov_b32       v4, 0
/*000000007534*/ s_lshl_b32      s8, s8, 3
/*000000007538*/ s_load_dword    s4, s[4:5], 0x14
/*000000007540*/ s_lshl_b32      s9, s9, 2
/*000000007544*/ s_lshl_b32      s5, s10, 1
/*000000007548*/ v_mov_b32       v6, v4
/*00000000754c*/ v_mov_b32       v8, v4
/*000000007550*/ s_waitcnt       lgkmcnt(0)
/*000000007554*/ v_add3_u32      v7, s1, s5, v2
/*00000000755c*/ v_add_nc_u32    v9, s3, v0
/*000000007560*/ v_add3_u32      v3, s0, s8, v0
/*000000007568*/ v_add3_u32      v5, s2, s9, v1
/*000000007570*/ v_add_nc_u32    v10, s11, v1
/*000000007574*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000757c*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000007584*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000758c*/ v_add_nc_u32    v7, s4, v2
/*000000007590*/ v_add_co_u32    v3, vcc, s6, v3
/*000000007598*/ v_add_co_ci_u32 v4, vcc, s7, v4, vcc
/*00000000759c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000075a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000075a8*/ v_add_co_u32    v5, vcc, s6, v5
/*0000000075b0*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*0000000075b4*/ global_store_dword v[3:4], v9, off
/*0000000075bc*/ global_store_dword v[0:1], v10, off
/*0000000075c4*/ global_store_dword v[5:6], v7, off
/*0000000075cc*/ s_endpgm
/*0000000075d0*/ s_nop           0x0
/*0000000075d4*/ s_nop           0x0
/*0000000075d8*/ s_nop           0x0
/*0000000075dc*/ s_nop           0x0
/*0000000075e0*/ s_nop           0x0
/*0000000075e4*/ s_nop           0x0
/*0000000075e8*/ s_nop           0x0
/*0000000075ec*/ s_nop           0x0
/*0000000075f0*/ s_nop           0x0
/*0000000075f4*/ s_nop           0x0
/*0000000075f8*/ s_nop           0x0
/*0000000075fc*/ s_nop           0x0
add_get_group_id_get_global_size:
.skip 256
/*000000007700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007708*/ s_waitcnt       lgkmcnt(0)
/*00000000770c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007714*/ s_clause        0x1
/*000000007718*/ s_load_dword    s3, s[4:5], 0xc
/*000000007720*/ s_load_dword    s11, s[4:5], 0x10
/*000000007728*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007730*/ s_load_dword    s4, s[4:5], 0x14
/*000000007738*/ v_mov_b32       v4, 0
/*00000000773c*/ s_lshl_b32      s12, s8, 1
/*000000007740*/ s_lshl_b32      s13, s9, 4
/*000000007744*/ s_lshl_b32      s14, s10, 1
/*000000007748*/ v_mov_b32       v6, v4
/*00000000774c*/ v_mov_b32       v8, v4
/*000000007750*/ s_waitcnt       lgkmcnt(0)
/*000000007754*/ v_add3_u32      v7, s1, s14, v2
/*00000000775c*/ v_add3_u32      v3, s0, s12, v0
/*000000007764*/ v_add3_u32      v5, s2, s13, v1
/*00000000776c*/ s_add_i32       s0, s3, s8
/*000000007770*/ s_add_i32       s1, s11, s9
/*000000007774*/ v_mov_b32       v11, s0
/*000000007778*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007780*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007788*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007790*/ s_add_i32       s0, s4, s10
/*000000007794*/ v_mov_b32       v13, s1
/*000000007798*/ v_mov_b32       v7, s0
/*00000000779c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000077a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000077a8*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000077b0*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000077b4*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000077bc*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000077c0*/ global_store_dword v[0:1], v11, off
/*0000000077c8*/ global_store_dword v[2:3], v13, off
/*0000000077d0*/ global_store_dword v[4:5], v7, off
/*0000000077d8*/ s_endpgm
/*0000000077dc*/ s_nop           0x0
/*0000000077e0*/ s_nop           0x0
/*0000000077e4*/ s_nop           0x0
/*0000000077e8*/ s_nop           0x0
/*0000000077ec*/ s_nop           0x0
/*0000000077f0*/ s_nop           0x0
/*0000000077f4*/ s_nop           0x0
/*0000000077f8*/ s_nop           0x0
/*0000000077fc*/ s_nop           0x0
add_get_local_size_get_global_size:
.skip 256
/*000000007900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007908*/ s_waitcnt       lgkmcnt(0)
/*00000000790c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000791c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000007924*/ v_mov_b32       v4, 0
/*000000007928*/ s_lshl_b32      s3, s8, 1
/*00000000792c*/ s_lshl_b32      s6, s9, 1
/*000000007930*/ s_lshl_b32      s7, s10, 2
/*000000007934*/ v_mov_b32       v6, v4
/*000000007938*/ v_mov_b32       v8, v4
/*00000000793c*/ s_waitcnt       lgkmcnt(0)
/*000000007940*/ v_add3_u32      v7, s1, s7, v2
/*000000007948*/ v_add3_u32      v3, s0, s3, v0
/*000000007950*/ v_add3_u32      v5, s2, s6, v1
/*000000007958*/ s_add_i32       s0, s12, 2
/*00000000795c*/ s_add_i32       s1, s13, 2
/*000000007960*/ v_mov_b32       v11, s0
/*000000007964*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000796c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007974*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000797c*/ s_add_i32       s0, s14, 4
/*000000007980*/ v_mov_b32       v13, s1
/*000000007984*/ v_mov_b32       v7, s0
/*000000007988*/ v_add_co_u32    v0, vcc, s4, v0
/*000000007990*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000007994*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000799c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000079a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000079a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000079ac*/ global_store_dword v[0:1], v11, off
/*0000000079b4*/ global_store_dword v[2:3], v13, off
/*0000000079bc*/ global_store_dword v[4:5], v7, off
/*0000000079c4*/ s_endpgm
/*0000000079c8*/ s_nop           0x0
/*0000000079cc*/ s_nop           0x0
/*0000000079d0*/ s_nop           0x0
/*0000000079d4*/ s_nop           0x0
/*0000000079d8*/ s_nop           0x0
/*0000000079dc*/ s_nop           0x0
/*0000000079e0*/ s_nop           0x0
/*0000000079e4*/ s_nop           0x0
/*0000000079e8*/ s_nop           0x0
/*0000000079ec*/ s_nop           0x0
/*0000000079f0*/ s_nop           0x0
/*0000000079f4*/ s_nop           0x0
/*0000000079f8*/ s_nop           0x0
/*0000000079fc*/ s_nop           0x0
add_get_global_id_get_global_size:
.skip 256
/*000000007b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007b08*/ s_waitcnt       lgkmcnt(0)
/*000000007b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007b14*/ s_load_dword    s3, s[4:5], 0xc
/*000000007b1c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007b24*/ s_load_dword    s11, s[4:5], 0x10
/*000000007b2c*/ v_mov_b32       v4, 0
/*000000007b30*/ v_lshl_or_b32   v5, s9, 1, v1
/*000000007b38*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000007b40*/ s_load_dword    s4, s[4:5], 0x14
/*000000007b48*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000007b50*/ v_mov_b32       v1, v4
/*000000007b54*/ v_mov_b32       v8, v4
/*000000007b58*/ s_waitcnt       lgkmcnt(0)
/*000000007b5c*/ v_add_nc_u32    v7, s1, v2
/*000000007b60*/ v_add_nc_u32    v0, s2, v5
/*000000007b64*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000007b6c*/ v_add3_u32      v9, s3, s0, v3
/*000000007b74*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000007b7c*/ v_add_nc_u32    v10, s11, v0
/*000000007b80*/ v_add_co_u32    v3, vcc, s6, v5
/*000000007b88*/ v_add_co_ci_u32 v4, vcc, s7, v6, vcc
/*000000007b8c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000007b94*/ v_add_co_u32    v0, vcc, s6, v1
/*000000007b9c*/ v_add_nc_u32    v7, s4, v7
/*000000007ba0*/ v_add_co_ci_u32 v1, vcc, s7, v2, vcc
/*000000007ba4*/ v_add_co_u32    v5, vcc, s6, v5
/*000000007bac*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*000000007bb0*/ global_store_dword v[3:4], v9, off
/*000000007bb8*/ global_store_dword v[0:1], v10, off
/*000000007bc0*/ global_store_dword v[5:6], v7, off
/*000000007bc8*/ s_endpgm
/*000000007bcc*/ s_nop           0x0
/*000000007bd0*/ s_nop           0x0
/*000000007bd4*/ s_nop           0x0
/*000000007bd8*/ s_nop           0x0
/*000000007bdc*/ s_nop           0x0
/*000000007be0*/ s_nop           0x0
/*000000007be4*/ s_nop           0x0
/*000000007be8*/ s_nop           0x0
/*000000007bec*/ s_nop           0x0
/*000000007bf0*/ s_nop           0x0
/*000000007bf4*/ s_nop           0x0
/*000000007bf8*/ s_nop           0x0
/*000000007bfc*/ s_nop           0x0
add_get_global_size_get_global_size:
.skip 256
/*000000007d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007d08*/ s_waitcnt       lgkmcnt(0)
/*000000007d0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007d14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000007d1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000007d24*/ v_mov_b32       v4, 0
/*000000007d28*/ s_lshl_b32      s3, s8, 4
/*000000007d2c*/ s_lshl_b32      s6, s9, 1
/*000000007d30*/ s_lshl_b32      s7, s10, 1
/*000000007d34*/ v_mov_b32       v6, v4
/*000000007d38*/ v_mov_b32       v8, v4
/*000000007d3c*/ s_waitcnt       lgkmcnt(0)
/*000000007d40*/ v_add3_u32      v7, s1, s7, v2
/*000000007d48*/ v_add3_u32      v3, s0, s3, v0
/*000000007d50*/ v_add3_u32      v5, s2, s6, v1
/*000000007d58*/ s_lshl_b32      s0, s12, 1
/*000000007d5c*/ s_lshl_b32      s1, s13, 1
/*000000007d60*/ v_mov_b32       v11, s0
/*000000007d64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007d6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007d74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007d7c*/ s_lshl_b32      s0, s14, 1
/*000000007d80*/ v_mov_b32       v13, s1
/*000000007d84*/ v_mov_b32       v7, s0
/*000000007d88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000007d90*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000007d94*/ v_add_co_u32    v2, vcc, s4, v2
/*000000007d9c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000007da0*/ v_add_co_u32    v4, vcc, s4, v4
/*000000007da8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000007dac*/ global_store_dword v[0:1], v11, off
/*000000007db4*/ global_store_dword v[2:3], v13, off
/*000000007dbc*/ global_store_dword v[4:5], v7, off
/*000000007dc4*/ s_endpgm
/*000000007dc8*/ s_nop           0x0
/*000000007dcc*/ s_nop           0x0
/*000000007dd0*/ s_nop           0x0
/*000000007dd4*/ s_nop           0x0
/*000000007dd8*/ s_nop           0x0
/*000000007ddc*/ s_nop           0x0
/*000000007de0*/ s_nop           0x0
/*000000007de4*/ s_nop           0x0
/*000000007de8*/ s_nop           0x0
/*000000007dec*/ s_nop           0x0
/*000000007df0*/ s_nop           0x0
/*000000007df4*/ s_nop           0x0
/*000000007df8*/ s_nop           0x0
/*000000007dfc*/ s_nop           0x0
add_get_num_groups_get_global_size:
.skip 256
/*000000007f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007f08*/ s_waitcnt       lgkmcnt(0)
/*000000007f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000007f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000007f24*/ s_lshl_b32      s3, s8, 1
/*000000007f28*/ v_mov_b32       v4, 0
/*000000007f2c*/ s_lshl_b32      s6, s9, 1
/*000000007f30*/ s_lshl_b32      s7, s10, 2
/*000000007f34*/ v_mov_b32       v6, v4
/*000000007f38*/ v_add3_u32      v3, s0, s3, v0
/*000000007f40*/ v_add3_u32      v5, s2, s6, v1
/*000000007f48*/ s_waitcnt       lgkmcnt(0)
/*000000007f4c*/ v_add3_u32      v0, s1, s7, v2
/*000000007f54*/ s_and_b32       s1, s12, -2
/*000000007f58*/ s_and_b32       s3, s13, -2
/*000000007f5c*/ v_lshlrev_b64   v[1:2], 2, v[3:4]
/*000000007f64*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000007f6c*/ v_cmp_gt_u32    s[3:4], s13, s3
/*000000007f74*/ s_lshr_b32      s0, s12, 1
/*000000007f78*/ s_lshr_b32      s2, s13, 1
/*000000007f7c*/ s_lshr_b32      s6, s14, 2
/*000000007f80*/ v_add_co_u32    v7, vcc, s4, v1
/*000000007f88*/ v_mov_b32       v1, v4
/*000000007f8c*/ s_and_b32       s7, s14, -4
/*000000007f90*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000007f94*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007f9c*/ s_cmpk_lg_u32   s1, 0x0
/*000000007fa0*/ v_cmp_gt_u32    s[1:2], s14, s7
/*000000007fa8*/ s_addc_u32      s0, s0, s12
/*000000007fac*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000007fb4*/ s_cmpk_lg_u32   s3, 0x0
/*000000007fb8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000007fc0*/ v_mov_b32       v10, s0
/*000000007fc4*/ s_addc_u32      s0, s2, s13
/*000000007fc8*/ s_cmpk_lg_u32   s1, 0x0
/*000000007fcc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000007fd0*/ v_add_co_u32    v0, vcc, s4, v0
/*000000007fd8*/ v_mov_b32       v5, s0
/*000000007fdc*/ s_addc_u32      s0, s6, s14
/*000000007fe0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000007fe4*/ v_mov_b32       v6, s0
/*000000007fe8*/ global_store_dword v[7:8], v10, off
/*000000007ff0*/ global_store_dword v[2:3], v5, off
/*000000007ff8*/ global_store_dword v[0:1], v6, off
/*000000008000*/ s_endpgm
/*000000008004*/ s_nop           0x0
/*000000008008*/ s_nop           0x0
/*00000000800c*/ s_nop           0x0
/*000000008010*/ s_nop           0x0
/*000000008014*/ s_nop           0x0
/*000000008018*/ s_nop           0x0
/*00000000801c*/ s_nop           0x0
/*000000008020*/ s_nop           0x0
/*000000008024*/ s_nop           0x0
/*000000008028*/ s_nop           0x0
/*00000000802c*/ s_nop           0x0
/*000000008030*/ s_nop           0x0
/*000000008034*/ s_nop           0x0
/*000000008038*/ s_nop           0x0
/*00000000803c*/ s_nop           0x0
/*000000008040*/ s_nop           0x0
/*000000008044*/ s_nop           0x0
/*000000008048*/ s_nop           0x0
/*00000000804c*/ s_nop           0x0
/*000000008050*/ s_nop           0x0
/*000000008054*/ s_nop           0x0
/*000000008058*/ s_nop           0x0
/*00000000805c*/ s_nop           0x0
/*000000008060*/ s_nop           0x0
/*000000008064*/ s_nop           0x0
/*000000008068*/ s_nop           0x0
/*00000000806c*/ s_nop           0x0
/*000000008070*/ s_nop           0x0
/*000000008074*/ s_nop           0x0
/*000000008078*/ s_nop           0x0
/*00000000807c*/ s_nop           0x0
/*000000008080*/ s_nop           0x0
/*000000008084*/ s_nop           0x0
/*000000008088*/ s_nop           0x0
/*00000000808c*/ s_nop           0x0
/*000000008090*/ s_nop           0x0
/*000000008094*/ s_nop           0x0
/*000000008098*/ s_nop           0x0
/*00000000809c*/ s_nop           0x0
/*0000000080a0*/ s_nop           0x0
/*0000000080a4*/ s_nop           0x0
/*0000000080a8*/ s_nop           0x0
/*0000000080ac*/ s_nop           0x0
/*0000000080b0*/ s_nop           0x0
/*0000000080b4*/ s_nop           0x0
/*0000000080b8*/ s_nop           0x0
/*0000000080bc*/ s_nop           0x0
/*0000000080c0*/ s_nop           0x0
/*0000000080c4*/ s_nop           0x0
/*0000000080c8*/ s_nop           0x0
/*0000000080cc*/ s_nop           0x0
/*0000000080d0*/ s_nop           0x0
/*0000000080d4*/ s_nop           0x0
/*0000000080d8*/ s_nop           0x0
/*0000000080dc*/ s_nop           0x0
/*0000000080e0*/ s_nop           0x0
/*0000000080e4*/ s_nop           0x0
/*0000000080e8*/ s_nop           0x0
/*0000000080ec*/ s_nop           0x0
/*0000000080f0*/ s_nop           0x0
/*0000000080f4*/ s_nop           0x0
/*0000000080f8*/ s_nop           0x0
/*0000000080fc*/ s_nop           0x0
add_get_work_dim_get_global_size:
.skip 256
/*000000008200*/ v_mov_b32       v3, s4
/*000000008204*/ v_mov_b32       v4, s5
/*000000008208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008210*/ s_waitcnt       lgkmcnt(0)
/*000000008214*/ s_clause        0x1
/*000000008218*/ s_load_dword    s1, s[6:7], 0x20
/*000000008220*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008228*/ s_lshl_b32      s3, s8, 1
/*00000000822c*/ s_lshl_b32      s8, s9, 1
/*000000008230*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000008238*/ v_mov_b32       v4, 0
/*00000000823c*/ s_lshl_b32      s9, s10, 2
/*000000008240*/ s_clause        0x2
/*000000008244*/ s_load_dword    s10, s[4:5], 0xc
/*00000000824c*/ s_load_dword    s11, s[4:5], 0x10
/*000000008254*/ s_load_dword    s4, s[4:5], 0x14
/*00000000825c*/ v_mov_b32       v6, v4
/*000000008260*/ v_mov_b32       v8, v4
/*000000008264*/ v_add3_u32      v3, s0, s3, v0
/*00000000826c*/ v_add3_u32      v5, s2, s8, v1
/*000000008274*/ s_waitcnt       lgkmcnt(0)
/*000000008278*/ v_add3_u32      v7, s1, s9, v2
/*000000008280*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000008288*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000008290*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000008298*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000082a0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000082a4*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000082ac*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000082b0*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000082b8*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000082bc*/ s_waitcnt       vmcnt(0)
/*0000000082c0*/ v_add_nc_u32    v6, s10, v9
/*0000000082c4*/ v_add_nc_u32    v13, s11, v9
/*0000000082c8*/ v_add_nc_u32    v11, s4, v9
/*0000000082cc*/ global_store_dword v[0:1], v6, off
/*0000000082d4*/ global_store_dword v[2:3], v13, off
/*0000000082dc*/ global_store_dword v[4:5], v11, off
/*0000000082e4*/ s_endpgm
/*0000000082e8*/ s_nop           0x0
/*0000000082ec*/ s_nop           0x0
/*0000000082f0*/ s_nop           0x0
/*0000000082f4*/ s_nop           0x0
/*0000000082f8*/ s_nop           0x0
/*0000000082fc*/ s_nop           0x0
add_x_get_num_groups:
.skip 256
/*000000008400*/ s_load_dword    s11, s[4:5], 0xc
/*000000008408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008410*/ s_waitcnt       lgkmcnt(0)
/*000000008414*/ s_load_dword    s1, s[6:7], 0x8
/*00000000841c*/ s_load_dword    s3, s[4:5], 0x10
/*000000008424*/ s_clause        0x1
/*000000008428*/ s_load_dword    s12, s[6:7], 0x20
/*000000008430*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*000000008438*/ s_load_dword    s4, s[4:5], 0x14
/*000000008440*/ s_lshl_b32      s8, s8, 4
/*000000008444*/ s_lshl_b32      s9, s9, 1
/*000000008448*/ s_lshl_b32      s10, s10, 1
/*00000000844c*/ v_mov_b32       v4, 0
/*000000008450*/ v_mov_b32       v6, v4
/*000000008454*/ s_and_b32       s5, s11, -16
/*000000008458*/ v_add3_u32      v3, s0, s8, v0
/*000000008460*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008468*/ s_lshr_b32      s0, s11, 4
/*00000000846c*/ v_add3_u32      v5, s2, s9, v1
/*000000008474*/ v_mov_b32       v1, v4
/*000000008478*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000008480*/ s_cmpk_lg_u32   s5, 0x0
/*000000008484*/ s_waitcnt       lgkmcnt(0)
/*000000008488*/ v_add3_u32      v0, s12, s10, v2
/*000000008490*/ s_addc_u32      s0, s0, s1
/*000000008494*/ s_and_b32       s2, s3, -2
/*000000008498*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*0000000084a0*/ v_cmp_gt_u32    s[2:3], s3, s2
/*0000000084a8*/ s_lshr_b32      s3, s3, 1
/*0000000084ac*/ v_mov_b32       v9, s0
/*0000000084b0*/ v_add_co_u32    v2, vcc, s6, v3
/*0000000084b8*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000084c0*/ s_cmpk_lg_u32   s2, 0x0
/*0000000084c4*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*0000000084c8*/ s_addc_u32      s2, s3, s1
/*0000000084cc*/ s_and_b32       s3, s4, -2
/*0000000084d0*/ v_add_co_u32    v4, vcc, s6, v5
/*0000000084d8*/ v_cmp_gt_u32    s[0:1], s4, s3
/*0000000084e0*/ s_lshr_b32      s3, s4, 1
/*0000000084e4*/ v_add_co_ci_u32 v5, vcc, s7, v6, vcc
/*0000000084e8*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000084f0*/ v_mov_b32       v6, s2
/*0000000084f4*/ s_cmpk_lg_u32   s0, 0x0
/*0000000084f8*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000084fc*/ s_addc_u32      s0, s3, s1
/*000000008500*/ v_mov_b32       v11, s0
/*000000008504*/ global_store_dword v[2:3], v9, off
/*00000000850c*/ global_store_dword v[4:5], v6, off
/*000000008514*/ global_store_dword v[0:1], v11, off
/*00000000851c*/ s_endpgm
/*000000008520*/ s_nop           0x0
/*000000008524*/ s_nop           0x0
/*000000008528*/ s_nop           0x0
/*00000000852c*/ s_nop           0x0
/*000000008530*/ s_nop           0x0
/*000000008534*/ s_nop           0x0
/*000000008538*/ s_nop           0x0
/*00000000853c*/ s_nop           0x0
/*000000008540*/ s_nop           0x0
/*000000008544*/ s_nop           0x0
/*000000008548*/ s_nop           0x0
/*00000000854c*/ s_nop           0x0
/*000000008550*/ s_nop           0x0
/*000000008554*/ s_nop           0x0
/*000000008558*/ s_nop           0x0
/*00000000855c*/ s_nop           0x0
/*000000008560*/ s_nop           0x0
/*000000008564*/ s_nop           0x0
/*000000008568*/ s_nop           0x0
/*00000000856c*/ s_nop           0x0
/*000000008570*/ s_nop           0x0
/*000000008574*/ s_nop           0x0
/*000000008578*/ s_nop           0x0
/*00000000857c*/ s_nop           0x0
/*000000008580*/ s_nop           0x0
/*000000008584*/ s_nop           0x0
/*000000008588*/ s_nop           0x0
/*00000000858c*/ s_nop           0x0
/*000000008590*/ s_nop           0x0
/*000000008594*/ s_nop           0x0
/*000000008598*/ s_nop           0x0
/*00000000859c*/ s_nop           0x0
/*0000000085a0*/ s_nop           0x0
/*0000000085a4*/ s_nop           0x0
/*0000000085a8*/ s_nop           0x0
/*0000000085ac*/ s_nop           0x0
/*0000000085b0*/ s_nop           0x0
/*0000000085b4*/ s_nop           0x0
/*0000000085b8*/ s_nop           0x0
/*0000000085bc*/ s_nop           0x0
/*0000000085c0*/ s_nop           0x0
/*0000000085c4*/ s_nop           0x0
/*0000000085c8*/ s_nop           0x0
/*0000000085cc*/ s_nop           0x0
/*0000000085d0*/ s_nop           0x0
/*0000000085d4*/ s_nop           0x0
/*0000000085d8*/ s_nop           0x0
/*0000000085dc*/ s_nop           0x0
/*0000000085e0*/ s_nop           0x0
/*0000000085e4*/ s_nop           0x0
/*0000000085e8*/ s_nop           0x0
/*0000000085ec*/ s_nop           0x0
/*0000000085f0*/ s_nop           0x0
/*0000000085f4*/ s_nop           0x0
/*0000000085f8*/ s_nop           0x0
/*0000000085fc*/ s_nop           0x0
add_get_global_offset_get_num_groups:
.skip 256
/*000000008700*/ s_load_dword    s11, s[4:5], 0xc
/*000000008708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008710*/ s_waitcnt       lgkmcnt(0)
/*000000008714*/ s_load_dword    s1, s[4:5], 0x10
/*00000000871c*/ s_clause        0x1
/*000000008720*/ s_load_dword    s3, s[6:7], 0x20
/*000000008728*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008730*/ s_load_dword    s4, s[4:5], 0x14
/*000000008738*/ s_lshl_b32      s8, s8, 1
/*00000000873c*/ s_lshl_b32      s9, s9, 4
/*000000008740*/ s_lshl_b32      s10, s10, 1
/*000000008744*/ v_mov_b32       v4, 0
/*000000008748*/ v_mov_b32       v6, v4
/*00000000874c*/ s_and_b32       s5, s11, -2
/*000000008750*/ v_add3_u32      v3, s0, s8, v0
/*000000008758*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008760*/ s_lshr_b32      s8, s11, 1
/*000000008764*/ v_add3_u32      v5, s2, s9, v1
/*00000000876c*/ v_mov_b32       v1, v4
/*000000008770*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000008778*/ s_cmpk_lg_u32   s5, 0x0
/*00000000877c*/ s_waitcnt       lgkmcnt(0)
/*000000008780*/ v_add3_u32      v0, s3, s10, v2
/*000000008788*/ s_addc_u32      s0, s8, s0
/*00000000878c*/ s_and_b32       s5, s1, -16
/*000000008790*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000008798*/ v_cmp_gt_u32    s[5:6], s1, s5
/*0000000087a0*/ s_lshr_b32      s1, s1, 4
/*0000000087a4*/ v_mov_b32       v9, s0
/*0000000087a8*/ v_add_co_u32    v2, vcc, s6, v3
/*0000000087b0*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000087b8*/ s_cmpk_lg_u32   s5, 0x0
/*0000000087bc*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*0000000087c0*/ s_addc_u32      s1, s1, s2
/*0000000087c4*/ s_and_b32       s2, s4, -2
/*0000000087c8*/ v_add_co_u32    v4, vcc, s6, v5
/*0000000087d0*/ v_cmp_gt_u32    s[0:1], s4, s2
/*0000000087d8*/ s_lshr_b32      s2, s4, 1
/*0000000087dc*/ v_add_co_ci_u32 v5, vcc, s7, v6, vcc
/*0000000087e0*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000087e8*/ v_mov_b32       v6, s1
/*0000000087ec*/ s_cmpk_lg_u32   s0, 0x0
/*0000000087f0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000087f4*/ s_addc_u32      s0, s2, s3
/*0000000087f8*/ v_mov_b32       v11, s0
/*0000000087fc*/ global_store_dword v[2:3], v9, off
/*000000008804*/ global_store_dword v[4:5], v6, off
/*00000000880c*/ global_store_dword v[0:1], v11, off
/*000000008814*/ s_endpgm
/*000000008818*/ s_nop           0x0
/*00000000881c*/ s_nop           0x0
/*000000008820*/ s_nop           0x0
/*000000008824*/ s_nop           0x0
/*000000008828*/ s_nop           0x0
/*00000000882c*/ s_nop           0x0
/*000000008830*/ s_nop           0x0
/*000000008834*/ s_nop           0x0
/*000000008838*/ s_nop           0x0
/*00000000883c*/ s_nop           0x0
/*000000008840*/ s_nop           0x0
/*000000008844*/ s_nop           0x0
/*000000008848*/ s_nop           0x0
/*00000000884c*/ s_nop           0x0
/*000000008850*/ s_nop           0x0
/*000000008854*/ s_nop           0x0
/*000000008858*/ s_nop           0x0
/*00000000885c*/ s_nop           0x0
/*000000008860*/ s_nop           0x0
/*000000008864*/ s_nop           0x0
/*000000008868*/ s_nop           0x0
/*00000000886c*/ s_nop           0x0
/*000000008870*/ s_nop           0x0
/*000000008874*/ s_nop           0x0
/*000000008878*/ s_nop           0x0
/*00000000887c*/ s_nop           0x0
/*000000008880*/ s_nop           0x0
/*000000008884*/ s_nop           0x0
/*000000008888*/ s_nop           0x0
/*00000000888c*/ s_nop           0x0
/*000000008890*/ s_nop           0x0
/*000000008894*/ s_nop           0x0
/*000000008898*/ s_nop           0x0
/*00000000889c*/ s_nop           0x0
/*0000000088a0*/ s_nop           0x0
/*0000000088a4*/ s_nop           0x0
/*0000000088a8*/ s_nop           0x0
/*0000000088ac*/ s_nop           0x0
/*0000000088b0*/ s_nop           0x0
/*0000000088b4*/ s_nop           0x0
/*0000000088b8*/ s_nop           0x0
/*0000000088bc*/ s_nop           0x0
/*0000000088c0*/ s_nop           0x0
/*0000000088c4*/ s_nop           0x0
/*0000000088c8*/ s_nop           0x0
/*0000000088cc*/ s_nop           0x0
/*0000000088d0*/ s_nop           0x0
/*0000000088d4*/ s_nop           0x0
/*0000000088d8*/ s_nop           0x0
/*0000000088dc*/ s_nop           0x0
/*0000000088e0*/ s_nop           0x0
/*0000000088e4*/ s_nop           0x0
/*0000000088e8*/ s_nop           0x0
/*0000000088ec*/ s_nop           0x0
/*0000000088f0*/ s_nop           0x0
/*0000000088f4*/ s_nop           0x0
/*0000000088f8*/ s_nop           0x0
/*0000000088fc*/ s_nop           0x0
add_get_local_id_get_num_groups:
.skip 256
/*000000008a00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008a08*/ s_waitcnt       lgkmcnt(0)
/*000000008a0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000008a14*/ s_clause        0x1
/*000000008a18*/ s_load_dword    s3, s[4:5], 0xc
/*000000008a20*/ s_load_dword    s11, s[4:5], 0x10
/*000000008a28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008a30*/ s_lshl_b32      s8, s8, 3
/*000000008a34*/ v_mov_b32       v4, 0
/*000000008a38*/ s_lshl_b32      s10, s10, 1
/*000000008a3c*/ s_load_dword    s4, s[4:5], 0x14
/*000000008a44*/ s_lshl_b32      s9, s9, 2
/*000000008a48*/ v_mov_b32       v6, v4
/*000000008a4c*/ s_waitcnt       lgkmcnt(0)
/*000000008a50*/ v_add3_u32      v7, s1, s10, v2
/*000000008a58*/ s_and_b32       s1, s3, -8
/*000000008a5c*/ v_add3_u32      v3, s0, s8, v0
/*000000008a64*/ v_cmp_gt_u32    vcc, s3, s1
/*000000008a6c*/ s_lshr_b32      s0, s3, 3
/*000000008a70*/ v_add3_u32      v5, s2, s9, v1
/*000000008a78*/ s_and_b32       s5, s11, -4
/*000000008a7c*/ v_lshlrev_b64   v[8:9], 2, v[3:4]
/*000000008a84*/ v_add_co_ci_u32 v12, vcc, s0, v0, vcc
/*000000008a88*/ s_lshr_b32      s2, s11, 2
/*000000008a8c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000008a94*/ s_and_b32       s0, s4, -2
/*000000008a98*/ s_lshr_b32      s1, s4, 1
/*000000008a9c*/ v_add_co_u32    v10, vcc, s6, v8
/*000000008aa4*/ v_mov_b32       v8, v4
/*000000008aa8*/ v_add_co_ci_u32 v11, vcc, s7, v9, vcc
/*000000008aac*/ v_cmp_gt_u32    vcc, s11, s5
/*000000008ab4*/ v_lshlrev_b64   v[3:4], 2, v[7:8]
/*000000008abc*/ v_add_co_ci_u32 v15, vcc, s2, v1, vcc
/*000000008ac0*/ v_add_co_u32    v0, vcc, s6, v5
/*000000008ac8*/ v_add_co_ci_u32 v1, vcc, s7, v6, vcc
/*000000008acc*/ v_cmp_gt_u32    vcc, s4, s0
/*000000008ad4*/ v_add_co_ci_u32 v5, vcc, s1, v2, vcc
/*000000008ad8*/ v_add_co_u32    v2, vcc, s6, v3
/*000000008ae0*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*000000008ae4*/ global_store_dword v[10:11], v12, off
/*000000008aec*/ global_store_dword v[0:1], v15, off
/*000000008af4*/ global_store_dword v[2:3], v5, off
/*000000008afc*/ s_endpgm
add_get_group_id_get_num_groups:
.skip 256
/*000000008c00*/ s_load_dword    s11, s[4:5], 0xc
/*000000008c08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008c10*/ s_waitcnt       lgkmcnt(0)
/*000000008c14*/ s_load_dword    s1, s[4:5], 0x10
/*000000008c1c*/ s_clause        0x1
/*000000008c20*/ s_load_dword    s3, s[6:7], 0x20
/*000000008c28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008c30*/ s_load_dword    s4, s[4:5], 0x14
/*000000008c38*/ s_lshl_b32      s12, s8, 1
/*000000008c3c*/ s_lshl_b32      s13, s9, 4
/*000000008c40*/ s_lshl_b32      s14, s10, 1
/*000000008c44*/ v_mov_b32       v4, 0
/*000000008c48*/ v_mov_b32       v6, v4
/*000000008c4c*/ s_and_b32       s5, s11, -2
/*000000008c50*/ v_add3_u32      v3, s0, s12, v0
/*000000008c58*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008c60*/ s_lshr_b32      s0, s11, 1
/*000000008c64*/ v_add3_u32      v5, s2, s13, v1
/*000000008c6c*/ v_mov_b32       v1, v4
/*000000008c70*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000008c78*/ s_cmpk_lg_u32   s5, 0x0
/*000000008c7c*/ s_waitcnt       lgkmcnt(0)
/*000000008c80*/ v_add3_u32      v0, s3, s14, v2
/*000000008c88*/ s_addc_u32      s0, s0, s8
/*000000008c8c*/ s_and_b32       s2, s1, -16
/*000000008c90*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000008c98*/ v_cmp_gt_u32    s[2:3], s1, s2
/*000000008ca0*/ s_lshr_b32      s1, s1, 4
/*000000008ca4*/ v_mov_b32       v9, s0
/*000000008ca8*/ v_add_co_u32    v2, vcc, s6, v3
/*000000008cb0*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000008cb8*/ s_cmpk_lg_u32   s2, 0x0
/*000000008cbc*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*000000008cc0*/ s_addc_u32      s1, s1, s9
/*000000008cc4*/ s_and_b32       s2, s4, -2
/*000000008cc8*/ v_add_co_u32    v4, vcc, s6, v5
/*000000008cd0*/ v_cmp_gt_u32    s[0:1], s4, s2
/*000000008cd8*/ s_lshr_b32      s2, s4, 1
/*000000008cdc*/ v_add_co_ci_u32 v5, vcc, s7, v6, vcc
/*000000008ce0*/ v_add_co_u32    v0, vcc, s6, v0
/*000000008ce8*/ v_mov_b32       v6, s1
/*000000008cec*/ s_cmpk_lg_u32   s0, 0x0
/*000000008cf0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*000000008cf4*/ s_addc_u32      s0, s2, s10
/*000000008cf8*/ v_mov_b32       v11, s0
/*000000008cfc*/ global_store_dword v[2:3], v9, off
/*000000008d04*/ global_store_dword v[4:5], v6, off
/*000000008d0c*/ global_store_dword v[0:1], v11, off
/*000000008d14*/ s_endpgm
/*000000008d18*/ s_nop           0x0
/*000000008d1c*/ s_nop           0x0
/*000000008d20*/ s_nop           0x0
/*000000008d24*/ s_nop           0x0
/*000000008d28*/ s_nop           0x0
/*000000008d2c*/ s_nop           0x0
/*000000008d30*/ s_nop           0x0
/*000000008d34*/ s_nop           0x0
/*000000008d38*/ s_nop           0x0
/*000000008d3c*/ s_nop           0x0
/*000000008d40*/ s_nop           0x0
/*000000008d44*/ s_nop           0x0
/*000000008d48*/ s_nop           0x0
/*000000008d4c*/ s_nop           0x0
/*000000008d50*/ s_nop           0x0
/*000000008d54*/ s_nop           0x0
/*000000008d58*/ s_nop           0x0
/*000000008d5c*/ s_nop           0x0
/*000000008d60*/ s_nop           0x0
/*000000008d64*/ s_nop           0x0
/*000000008d68*/ s_nop           0x0
/*000000008d6c*/ s_nop           0x0
/*000000008d70*/ s_nop           0x0
/*000000008d74*/ s_nop           0x0
/*000000008d78*/ s_nop           0x0
/*000000008d7c*/ s_nop           0x0
/*000000008d80*/ s_nop           0x0
/*000000008d84*/ s_nop           0x0
/*000000008d88*/ s_nop           0x0
/*000000008d8c*/ s_nop           0x0
/*000000008d90*/ s_nop           0x0
/*000000008d94*/ s_nop           0x0
/*000000008d98*/ s_nop           0x0
/*000000008d9c*/ s_nop           0x0
/*000000008da0*/ s_nop           0x0
/*000000008da4*/ s_nop           0x0
/*000000008da8*/ s_nop           0x0
/*000000008dac*/ s_nop           0x0
/*000000008db0*/ s_nop           0x0
/*000000008db4*/ s_nop           0x0
/*000000008db8*/ s_nop           0x0
/*000000008dbc*/ s_nop           0x0
/*000000008dc0*/ s_nop           0x0
/*000000008dc4*/ s_nop           0x0
/*000000008dc8*/ s_nop           0x0
/*000000008dcc*/ s_nop           0x0
/*000000008dd0*/ s_nop           0x0
/*000000008dd4*/ s_nop           0x0
/*000000008dd8*/ s_nop           0x0
/*000000008ddc*/ s_nop           0x0
/*000000008de0*/ s_nop           0x0
/*000000008de4*/ s_nop           0x0
/*000000008de8*/ s_nop           0x0
/*000000008dec*/ s_nop           0x0
/*000000008df0*/ s_nop           0x0
/*000000008df4*/ s_nop           0x0
/*000000008df8*/ s_nop           0x0
/*000000008dfc*/ s_nop           0x0
add_get_local_size_get_num_groups:
.skip 256
/*000000008f00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000008f08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000008f10*/ s_waitcnt       lgkmcnt(0)
/*000000008f14*/ s_clause        0x1
/*000000008f18*/ s_load_dword    s3, s[6:7], 0x20
/*000000008f20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000008f28*/ s_lshl_b32      s7, s9, 1
/*000000008f2c*/ s_lshl_b32      s6, s8, 1
/*000000008f30*/ s_lshl_b32      s8, s10, 2
/*000000008f34*/ v_mov_b32       v4, 0
/*000000008f38*/ v_mov_b32       v6, v4
/*000000008f3c*/ v_mov_b32       v8, v4
/*000000008f40*/ s_and_b32       s9, s0, -2
/*000000008f44*/ s_waitcnt       lgkmcnt(0)
/*000000008f48*/ v_add3_u32      v7, s3, s8, v2
/*000000008f50*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000008f58*/ s_lshr_b32      s0, s0, 1
/*000000008f5c*/ v_add3_u32      v3, s12, s6, v0
/*000000008f64*/ v_add3_u32      v5, s14, s7, v1
/*000000008f6c*/ s_cmpk_lg_u32   s9, 0x0
/*000000008f70*/ s_addc_u32      s0, s0, 2
/*000000008f74*/ s_and_b32       s3, s1, -2
/*000000008f78*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000008f80*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000008f88*/ s_lshr_b32      s1, s1, 1
/*000000008f8c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000008f94*/ v_mov_b32       v6, s0
/*000000008f98*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000008fa0*/ s_cmpk_lg_u32   s3, 0x0
/*000000008fa4*/ v_add_co_u32    v0, vcc, s4, v0
/*000000008fac*/ s_addc_u32      s1, s1, 2
/*000000008fb0*/ s_and_b32       s3, s2, -4
/*000000008fb4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000008fb8*/ v_cmp_gt_u32    s[0:1], s2, s3
/*000000008fc0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000008fc8*/ s_lshr_b32      s2, s2, 2
/*000000008fcc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000008fd0*/ v_add_co_u32    v4, vcc, s4, v4
/*000000008fd8*/ s_cmpk_lg_u32   s0, 0x0
/*000000008fdc*/ v_mov_b32       v9, s1
/*000000008fe0*/ s_addc_u32      s0, s2, 4
/*000000008fe4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000008fe8*/ v_mov_b32       v11, s0
/*000000008fec*/ global_store_dword v[0:1], v6, off
/*000000008ff4*/ global_store_dword v[2:3], v9, off
/*000000008ffc*/ global_store_dword v[4:5], v11, off
/*000000009004*/ s_endpgm
/*000000009008*/ s_nop           0x0
/*00000000900c*/ s_nop           0x0
/*000000009010*/ s_nop           0x0
/*000000009014*/ s_nop           0x0
/*000000009018*/ s_nop           0x0
/*00000000901c*/ s_nop           0x0
/*000000009020*/ s_nop           0x0
/*000000009024*/ s_nop           0x0
/*000000009028*/ s_nop           0x0
/*00000000902c*/ s_nop           0x0
/*000000009030*/ s_nop           0x0
/*000000009034*/ s_nop           0x0
/*000000009038*/ s_nop           0x0
/*00000000903c*/ s_nop           0x0
/*000000009040*/ s_nop           0x0
/*000000009044*/ s_nop           0x0
/*000000009048*/ s_nop           0x0
/*00000000904c*/ s_nop           0x0
/*000000009050*/ s_nop           0x0
/*000000009054*/ s_nop           0x0
/*000000009058*/ s_nop           0x0
/*00000000905c*/ s_nop           0x0
/*000000009060*/ s_nop           0x0
/*000000009064*/ s_nop           0x0
/*000000009068*/ s_nop           0x0
/*00000000906c*/ s_nop           0x0
/*000000009070*/ s_nop           0x0
/*000000009074*/ s_nop           0x0
/*000000009078*/ s_nop           0x0
/*00000000907c*/ s_nop           0x0
/*000000009080*/ s_nop           0x0
/*000000009084*/ s_nop           0x0
/*000000009088*/ s_nop           0x0
/*00000000908c*/ s_nop           0x0
/*000000009090*/ s_nop           0x0
/*000000009094*/ s_nop           0x0
/*000000009098*/ s_nop           0x0
/*00000000909c*/ s_nop           0x0
/*0000000090a0*/ s_nop           0x0
/*0000000090a4*/ s_nop           0x0
/*0000000090a8*/ s_nop           0x0
/*0000000090ac*/ s_nop           0x0
/*0000000090b0*/ s_nop           0x0
/*0000000090b4*/ s_nop           0x0
/*0000000090b8*/ s_nop           0x0
/*0000000090bc*/ s_nop           0x0
/*0000000090c0*/ s_nop           0x0
/*0000000090c4*/ s_nop           0x0
/*0000000090c8*/ s_nop           0x0
/*0000000090cc*/ s_nop           0x0
/*0000000090d0*/ s_nop           0x0
/*0000000090d4*/ s_nop           0x0
/*0000000090d8*/ s_nop           0x0
/*0000000090dc*/ s_nop           0x0
/*0000000090e0*/ s_nop           0x0
/*0000000090e4*/ s_nop           0x0
/*0000000090e8*/ s_nop           0x0
/*0000000090ec*/ s_nop           0x0
/*0000000090f0*/ s_nop           0x0
/*0000000090f4*/ s_nop           0x0
/*0000000090f8*/ s_nop           0x0
/*0000000090fc*/ s_nop           0x0
add_get_global_id_get_num_groups:
.skip 256
/*000000009200*/ s_load_dword    s11, s[4:5], 0xc
/*000000009208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009210*/ s_waitcnt       lgkmcnt(0)
/*000000009214*/ s_clause        0x1
/*000000009218*/ s_load_dword    s1, s[6:7], 0x20
/*000000009220*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000009228*/ s_load_dword    s3, s[4:5], 0x10
/*000000009230*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000009238*/ v_mov_b32       v4, 0
/*00000000923c*/ s_load_dword    s4, s[4:5], 0x14
/*000000009244*/ v_lshl_or_b32   v0, s9, 1, v1
/*00000000924c*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000009254*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*00000000925c*/ v_mov_b32       v1, v4
/*000000009260*/ s_and_b32       s5, s11, -2
/*000000009264*/ v_add_nc_u32    v0, s2, v0
/*000000009268*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000009270*/ s_waitcnt       lgkmcnt(0)
/*000000009274*/ v_add_nc_u32    v2, s1, v2
/*000000009278*/ s_lshr_b32      s1, s11, 1
/*00000000927c*/ v_add_co_u32    v5, vcc, s6, v5
/*000000009284*/ v_lshlrev_b64   v[7:8], 2, v[0:1]
/*00000000928c*/ s_cmpk_lg_u32   s5, 0x0
/*000000009290*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*000000009294*/ s_addc_u32      s0, s0, s1
/*000000009298*/ s_and_b32       s2, s3, -2
/*00000000929c*/ s_lshr_b32      s1, s3, 1
/*0000000092a0*/ v_cmp_gt_u32    vcc, s3, s2
/*0000000092a8*/ v_add_nc_u32    v11, s0, v3
/*0000000092ac*/ v_mov_b32       v3, v4
/*0000000092b0*/ s_and_b32       s0, s4, -4
/*0000000092b4*/ v_add_co_ci_u32 v10, vcc, s1, v0, vcc
/*0000000092b8*/ v_add_co_u32    v0, vcc, s6, v7
/*0000000092c0*/ v_lshlrev_b64   v[3:4], 2, v[2:3]
/*0000000092c8*/ v_add_co_ci_u32 v1, vcc, s7, v8, vcc
/*0000000092cc*/ v_cmp_gt_u32    vcc, s4, s0
/*0000000092d4*/ s_lshr_b32      s1, s4, 2
/*0000000092d8*/ v_add_co_ci_u32 v13, vcc, s1, v2, vcc
/*0000000092dc*/ v_add_co_u32    v2, vcc, s6, v3
/*0000000092e4*/ v_add_co_ci_u32 v3, vcc, s7, v4, vcc
/*0000000092e8*/ global_store_dword v[5:6], v11, off
/*0000000092f0*/ global_store_dword v[0:1], v10, off
/*0000000092f8*/ global_store_dword v[2:3], v13, off
/*000000009300*/ s_endpgm
/*000000009304*/ s_nop           0x0
/*000000009308*/ s_nop           0x0
/*00000000930c*/ s_nop           0x0
/*000000009310*/ s_nop           0x0
/*000000009314*/ s_nop           0x0
/*000000009318*/ s_nop           0x0
/*00000000931c*/ s_nop           0x0
/*000000009320*/ s_nop           0x0
/*000000009324*/ s_nop           0x0
/*000000009328*/ s_nop           0x0
/*00000000932c*/ s_nop           0x0
/*000000009330*/ s_nop           0x0
/*000000009334*/ s_nop           0x0
/*000000009338*/ s_nop           0x0
/*00000000933c*/ s_nop           0x0
/*000000009340*/ s_nop           0x0
/*000000009344*/ s_nop           0x0
/*000000009348*/ s_nop           0x0
/*00000000934c*/ s_nop           0x0
/*000000009350*/ s_nop           0x0
/*000000009354*/ s_nop           0x0
/*000000009358*/ s_nop           0x0
/*00000000935c*/ s_nop           0x0
/*000000009360*/ s_nop           0x0
/*000000009364*/ s_nop           0x0
/*000000009368*/ s_nop           0x0
/*00000000936c*/ s_nop           0x0
/*000000009370*/ s_nop           0x0
/*000000009374*/ s_nop           0x0
/*000000009378*/ s_nop           0x0
/*00000000937c*/ s_nop           0x0
/*000000009380*/ s_nop           0x0
/*000000009384*/ s_nop           0x0
/*000000009388*/ s_nop           0x0
/*00000000938c*/ s_nop           0x0
/*000000009390*/ s_nop           0x0
/*000000009394*/ s_nop           0x0
/*000000009398*/ s_nop           0x0
/*00000000939c*/ s_nop           0x0
/*0000000093a0*/ s_nop           0x0
/*0000000093a4*/ s_nop           0x0
/*0000000093a8*/ s_nop           0x0
/*0000000093ac*/ s_nop           0x0
/*0000000093b0*/ s_nop           0x0
/*0000000093b4*/ s_nop           0x0
/*0000000093b8*/ s_nop           0x0
/*0000000093bc*/ s_nop           0x0
/*0000000093c0*/ s_nop           0x0
/*0000000093c4*/ s_nop           0x0
/*0000000093c8*/ s_nop           0x0
/*0000000093cc*/ s_nop           0x0
/*0000000093d0*/ s_nop           0x0
/*0000000093d4*/ s_nop           0x0
/*0000000093d8*/ s_nop           0x0
/*0000000093dc*/ s_nop           0x0
/*0000000093e0*/ s_nop           0x0
/*0000000093e4*/ s_nop           0x0
/*0000000093e8*/ s_nop           0x0
/*0000000093ec*/ s_nop           0x0
/*0000000093f0*/ s_nop           0x0
/*0000000093f4*/ s_nop           0x0
/*0000000093f8*/ s_nop           0x0
/*0000000093fc*/ s_nop           0x0
add_get_global_size_get_num_groups:
.skip 256
/*000000009500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000009508*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000009510*/ s_waitcnt       lgkmcnt(0)
/*000000009514*/ s_clause        0x1
/*000000009518*/ s_load_dword    s3, s[6:7], 0x20
/*000000009520*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000009528*/ s_lshl_b32      s7, s9, 1
/*00000000952c*/ s_lshl_b32      s6, s8, 4
/*000000009530*/ s_lshl_b32      s8, s10, 1
/*000000009534*/ v_mov_b32       v4, 0
/*000000009538*/ v_mov_b32       v6, v4
/*00000000953c*/ v_mov_b32       v8, v4
/*000000009540*/ s_and_b32       s9, s0, -16
/*000000009544*/ v_add3_u32      v3, s12, s6, v0
/*00000000954c*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000009554*/ s_lshr_b32      s6, s0, 4
/*000000009558*/ s_waitcnt       lgkmcnt(0)
/*00000000955c*/ v_add3_u32      v7, s3, s8, v2
/*000000009564*/ v_add3_u32      v5, s14, s7, v1
/*00000000956c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009574*/ s_cmpk_lg_u32   s9, 0x0
/*000000009578*/ s_addc_u32      s0, s6, s0
/*00000000957c*/ s_and_b32       s3, s1, -2
/*000000009580*/ s_lshr_b32      s6, s1, 1
/*000000009584*/ v_cmp_gt_u32    s[3:4], s1, s3
/*00000000958c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009594*/ v_mov_b32       v6, s0
/*000000009598*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000095a0*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000095a8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000095ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000095b0*/ s_addc_u32      s1, s6, s1
/*0000000095b4*/ s_and_b32       s3, s2, -2
/*0000000095b8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000095c0*/ v_cmp_gt_u32    s[0:1], s2, s3
/*0000000095c8*/ s_lshr_b32      s3, s2, 1
/*0000000095cc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000095d0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000095d8*/ v_mov_b32       v9, s1
/*0000000095dc*/ s_cmpk_lg_u32   s0, 0x0
/*0000000095e0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000095e4*/ s_addc_u32      s0, s3, s2
/*0000000095e8*/ v_mov_b32       v11, s0
/*0000000095ec*/ global_store_dword v[0:1], v6, off
/*0000000095f4*/ global_store_dword v[2:3], v9, off
/*0000000095fc*/ global_store_dword v[4:5], v11, off
/*000000009604*/ s_endpgm
/*000000009608*/ s_nop           0x0
/*00000000960c*/ s_nop           0x0
/*000000009610*/ s_nop           0x0
/*000000009614*/ s_nop           0x0
/*000000009618*/ s_nop           0x0
/*00000000961c*/ s_nop           0x0
/*000000009620*/ s_nop           0x0
/*000000009624*/ s_nop           0x0
/*000000009628*/ s_nop           0x0
/*00000000962c*/ s_nop           0x0
/*000000009630*/ s_nop           0x0
/*000000009634*/ s_nop           0x0
/*000000009638*/ s_nop           0x0
/*00000000963c*/ s_nop           0x0
/*000000009640*/ s_nop           0x0
/*000000009644*/ s_nop           0x0
/*000000009648*/ s_nop           0x0
/*00000000964c*/ s_nop           0x0
/*000000009650*/ s_nop           0x0
/*000000009654*/ s_nop           0x0
/*000000009658*/ s_nop           0x0
/*00000000965c*/ s_nop           0x0
/*000000009660*/ s_nop           0x0
/*000000009664*/ s_nop           0x0
/*000000009668*/ s_nop           0x0
/*00000000966c*/ s_nop           0x0
/*000000009670*/ s_nop           0x0
/*000000009674*/ s_nop           0x0
/*000000009678*/ s_nop           0x0
/*00000000967c*/ s_nop           0x0
/*000000009680*/ s_nop           0x0
/*000000009684*/ s_nop           0x0
/*000000009688*/ s_nop           0x0
/*00000000968c*/ s_nop           0x0
/*000000009690*/ s_nop           0x0
/*000000009694*/ s_nop           0x0
/*000000009698*/ s_nop           0x0
/*00000000969c*/ s_nop           0x0
/*0000000096a0*/ s_nop           0x0
/*0000000096a4*/ s_nop           0x0
/*0000000096a8*/ s_nop           0x0
/*0000000096ac*/ s_nop           0x0
/*0000000096b0*/ s_nop           0x0
/*0000000096b4*/ s_nop           0x0
/*0000000096b8*/ s_nop           0x0
/*0000000096bc*/ s_nop           0x0
/*0000000096c0*/ s_nop           0x0
/*0000000096c4*/ s_nop           0x0
/*0000000096c8*/ s_nop           0x0
/*0000000096cc*/ s_nop           0x0
/*0000000096d0*/ s_nop           0x0
/*0000000096d4*/ s_nop           0x0
/*0000000096d8*/ s_nop           0x0
/*0000000096dc*/ s_nop           0x0
/*0000000096e0*/ s_nop           0x0
/*0000000096e4*/ s_nop           0x0
/*0000000096e8*/ s_nop           0x0
/*0000000096ec*/ s_nop           0x0
/*0000000096f0*/ s_nop           0x0
/*0000000096f4*/ s_nop           0x0
/*0000000096f8*/ s_nop           0x0
/*0000000096fc*/ s_nop           0x0
add_get_num_groups_get_num_groups:
.skip 256
/*000000009800*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009808*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000009810*/ s_waitcnt       lgkmcnt(0)
/*000000009814*/ s_load_dword    s1, s[6:7], 0x20
/*00000000981c*/ s_lshl_b32      s3, s8, 1
/*000000009820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000009828*/ s_lshl_b32      s7, s10, 2
/*00000000982c*/ v_mov_b32       v4, 0
/*000000009830*/ s_lshl_b32      s6, s9, 1
/*000000009834*/ v_mov_b32       v6, v4
/*000000009838*/ v_mov_b32       v8, v4
/*00000000983c*/ v_add3_u32      v3, s0, s3, v0
/*000000009844*/ s_and_b32       s0, s12, -2
/*000000009848*/ s_waitcnt       lgkmcnt(0)
/*00000000984c*/ v_add3_u32      v7, s1, s7, v2
/*000000009854*/ v_cmp_gt_u32    s[0:1], s12, s0
/*00000000985c*/ v_add3_u32      v5, s2, s6, v1
/*000000009864*/ s_and_b32       s1, s14, -4
/*000000009868*/ v_cndmask_b32   v0, 0, 1, s[0:1]
/*000000009870*/ s_and_b32       s0, s13, -2
/*000000009874*/ v_cmp_gt_u32    s[0:1], s13, s0
/*00000000987c*/ v_lshlrev_b32   v9, 1, v0
/*000000009880*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009888*/ v_cndmask_b32   v2, 0, 1, s[0:1]
/*000000009890*/ v_cmp_gt_u32    s[0:1], s14, s1
/*000000009898*/ v_add_nc_u32    v9, s12, v9
/*00000000989c*/ s_lshr_b32      s1, s14, 2
/*0000000098a0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000098a8*/ v_lshlrev_b32   v4, 1, v2
/*0000000098ac*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*0000000098b4*/ v_and_b32       v6, -2, v9
/*0000000098b8*/ s_cmpk_lg_u32   s0, 0x0
/*0000000098bc*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000098c0*/ v_add_nc_u32    v4, s13, v4
/*0000000098c4*/ s_addc_u32      s0, s1, 0
/*0000000098c8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000098d0*/ s_lshl_b32      s0, s0, 1
/*0000000098d4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000098d8*/ v_and_b32       v9, -2, v4
/*0000000098dc*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000098e4*/ v_mov_b32       v7, s0
/*0000000098e8*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000098f0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000098f4*/ global_store_dword v[0:1], v6, off
/*0000000098fc*/ global_store_dword v[2:3], v9, off
/*000000009904*/ global_store_dword v[4:5], v7, off
/*00000000990c*/ s_endpgm
/*000000009910*/ s_nop           0x0
/*000000009914*/ s_nop           0x0
/*000000009918*/ s_nop           0x0
/*00000000991c*/ s_nop           0x0
/*000000009920*/ s_nop           0x0
/*000000009924*/ s_nop           0x0
/*000000009928*/ s_nop           0x0
/*00000000992c*/ s_nop           0x0
/*000000009930*/ s_nop           0x0
/*000000009934*/ s_nop           0x0
/*000000009938*/ s_nop           0x0
/*00000000993c*/ s_nop           0x0
/*000000009940*/ s_nop           0x0
/*000000009944*/ s_nop           0x0
/*000000009948*/ s_nop           0x0
/*00000000994c*/ s_nop           0x0
/*000000009950*/ s_nop           0x0
/*000000009954*/ s_nop           0x0
/*000000009958*/ s_nop           0x0
/*00000000995c*/ s_nop           0x0
/*000000009960*/ s_nop           0x0
/*000000009964*/ s_nop           0x0
/*000000009968*/ s_nop           0x0
/*00000000996c*/ s_nop           0x0
/*000000009970*/ s_nop           0x0
/*000000009974*/ s_nop           0x0
/*000000009978*/ s_nop           0x0
/*00000000997c*/ s_nop           0x0
/*000000009980*/ s_nop           0x0
/*000000009984*/ s_nop           0x0
/*000000009988*/ s_nop           0x0
/*00000000998c*/ s_nop           0x0
/*000000009990*/ s_nop           0x0
/*000000009994*/ s_nop           0x0
/*000000009998*/ s_nop           0x0
/*00000000999c*/ s_nop           0x0
/*0000000099a0*/ s_nop           0x0
/*0000000099a4*/ s_nop           0x0
/*0000000099a8*/ s_nop           0x0
/*0000000099ac*/ s_nop           0x0
/*0000000099b0*/ s_nop           0x0
/*0000000099b4*/ s_nop           0x0
/*0000000099b8*/ s_nop           0x0
/*0000000099bc*/ s_nop           0x0
/*0000000099c0*/ s_nop           0x0
/*0000000099c4*/ s_nop           0x0
/*0000000099c8*/ s_nop           0x0
/*0000000099cc*/ s_nop           0x0
/*0000000099d0*/ s_nop           0x0
/*0000000099d4*/ s_nop           0x0
/*0000000099d8*/ s_nop           0x0
/*0000000099dc*/ s_nop           0x0
/*0000000099e0*/ s_nop           0x0
/*0000000099e4*/ s_nop           0x0
/*0000000099e8*/ s_nop           0x0
/*0000000099ec*/ s_nop           0x0
/*0000000099f0*/ s_nop           0x0
/*0000000099f4*/ s_nop           0x0
/*0000000099f8*/ s_nop           0x0
/*0000000099fc*/ s_nop           0x0
add_get_work_dim_get_num_groups:
.skip 256
/*000000009b00*/ v_mov_b32       v3, s4
/*000000009b04*/ v_mov_b32       v4, s5
/*000000009b08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009b10*/ s_waitcnt       lgkmcnt(0)
/*000000009b14*/ s_load_dword    s1, s[6:7], 0x20
/*000000009b1c*/ s_clause        0x2
/*000000009b20*/ s_load_dword    s3, s[4:5], 0xc
/*000000009b28*/ s_load_dword    s11, s[4:5], 0x10
/*000000009b30*/ s_load_dword    s12, s[4:5], 0x14
/*000000009b38*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000009b40*/ s_lshl_b32      s6, s8, 1
/*000000009b44*/ s_lshl_b32      s7, s9, 1
/*000000009b48*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000009b50*/ v_mov_b32       v4, 0
/*000000009b54*/ s_lshl_b32      s8, s10, 2
/*000000009b58*/ v_mov_b32       v6, v4
/*000000009b5c*/ v_mov_b32       v8, v4
/*000000009b60*/ s_waitcnt       lgkmcnt(0)
/*000000009b64*/ v_add3_u32      v7, s1, s8, v2
/*000000009b6c*/ s_and_b32       s1, s3, -2
/*000000009b70*/ v_add3_u32      v3, s0, s6, v0
/*000000009b78*/ v_add3_u32      v5, s2, s7, v1
/*000000009b80*/ s_lshr_b32      s0, s3, 1
/*000000009b84*/ s_and_b32       s6, s11, -2
/*000000009b88*/ s_lshr_b32      s2, s11, 1
/*000000009b8c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009b94*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009b9c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000009ba4*/ s_and_b32       s8, s12, -4
/*000000009ba8*/ s_lshr_b32      s7, s12, 2
/*000000009bac*/ v_add_co_u32    v0, vcc, s4, v0
/*000000009bb4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000009bb8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000009bc0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000009bc4*/ v_add_co_u32    v4, vcc, s4, v4
/*000000009bcc*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000009bd0*/ v_cmp_gt_u32    vcc, s3, s1
/*000000009bd8*/ s_waitcnt       vmcnt(0)
/*000000009bdc*/ v_add_co_ci_u32 v6, vcc, s0, v9, vcc
/*000000009be0*/ v_cmp_gt_u32    vcc, s11, s6
/*000000009be8*/ v_add_co_ci_u32 v13, vcc, s2, v9, vcc
/*000000009bec*/ v_cmp_gt_u32    vcc, s12, s8
/*000000009bf4*/ v_add_co_ci_u32 v11, vcc, s7, v9, vcc
/*000000009bf8*/ global_store_dword v[0:1], v6, off
/*000000009c00*/ global_store_dword v[2:3], v13, off
/*000000009c08*/ global_store_dword v[4:5], v11, off
/*000000009c10*/ s_endpgm
/*000000009c14*/ s_nop           0x0
/*000000009c18*/ s_nop           0x0
/*000000009c1c*/ s_nop           0x0
/*000000009c20*/ s_nop           0x0
/*000000009c24*/ s_nop           0x0
/*000000009c28*/ s_nop           0x0
/*000000009c2c*/ s_nop           0x0
/*000000009c30*/ s_nop           0x0
/*000000009c34*/ s_nop           0x0
/*000000009c38*/ s_nop           0x0
/*000000009c3c*/ s_nop           0x0
/*000000009c40*/ s_nop           0x0
/*000000009c44*/ s_nop           0x0
/*000000009c48*/ s_nop           0x0
/*000000009c4c*/ s_nop           0x0
/*000000009c50*/ s_nop           0x0
/*000000009c54*/ s_nop           0x0
/*000000009c58*/ s_nop           0x0
/*000000009c5c*/ s_nop           0x0
/*000000009c60*/ s_nop           0x0
/*000000009c64*/ s_nop           0x0
/*000000009c68*/ s_nop           0x0
/*000000009c6c*/ s_nop           0x0
/*000000009c70*/ s_nop           0x0
/*000000009c74*/ s_nop           0x0
/*000000009c78*/ s_nop           0x0
/*000000009c7c*/ s_nop           0x0
/*000000009c80*/ s_nop           0x0
/*000000009c84*/ s_nop           0x0
/*000000009c88*/ s_nop           0x0
/*000000009c8c*/ s_nop           0x0
/*000000009c90*/ s_nop           0x0
/*000000009c94*/ s_nop           0x0
/*000000009c98*/ s_nop           0x0
/*000000009c9c*/ s_nop           0x0
/*000000009ca0*/ s_nop           0x0
/*000000009ca4*/ s_nop           0x0
/*000000009ca8*/ s_nop           0x0
/*000000009cac*/ s_nop           0x0
/*000000009cb0*/ s_nop           0x0
/*000000009cb4*/ s_nop           0x0
/*000000009cb8*/ s_nop           0x0
/*000000009cbc*/ s_nop           0x0
/*000000009cc0*/ s_nop           0x0
/*000000009cc4*/ s_nop           0x0
/*000000009cc8*/ s_nop           0x0
/*000000009ccc*/ s_nop           0x0
/*000000009cd0*/ s_nop           0x0
/*000000009cd4*/ s_nop           0x0
/*000000009cd8*/ s_nop           0x0
/*000000009cdc*/ s_nop           0x0
/*000000009ce0*/ s_nop           0x0
/*000000009ce4*/ s_nop           0x0
/*000000009ce8*/ s_nop           0x0
/*000000009cec*/ s_nop           0x0
/*000000009cf0*/ s_nop           0x0
/*000000009cf4*/ s_nop           0x0
/*000000009cf8*/ s_nop           0x0
/*000000009cfc*/ s_nop           0x0
add_x_get_work_dim:
.skip 256
/*000000009e00*/ v_mov_b32       v3, s4
/*000000009e04*/ v_mov_b32       v4, s5
/*000000009e08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009e10*/ s_waitcnt       lgkmcnt(0)
/*000000009e14*/ s_clause        0x2
/*000000009e18*/ s_load_dword    s1, s[6:7], 0x20
/*000000009e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000009e28*/ s_load_dword    s6, s[6:7], 0x8
/*000000009e30*/ s_lshl_b32      s3, s8, 4
/*000000009e34*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000009e3c*/ v_mov_b32       v4, 0
/*000000009e40*/ s_lshl_b32      s7, s9, 1
/*000000009e44*/ s_lshl_b32      s8, s10, 1
/*000000009e48*/ v_mov_b32       v6, v4
/*000000009e4c*/ v_mov_b32       v8, v4
/*000000009e50*/ v_add3_u32      v3, s0, s3, v0
/*000000009e58*/ v_add3_u32      v5, s2, s7, v1
/*000000009e60*/ s_waitcnt       lgkmcnt(0)
/*000000009e64*/ v_add3_u32      v7, s1, s8, v2
/*000000009e6c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009e74*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009e7c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000009e84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000009e8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000009e90*/ v_add_co_u32    v7, vcc, s4, v2
/*000000009e98*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*000000009e9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000009ea4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000009ea8*/ s_waitcnt       vmcnt(0)
/*000000009eac*/ v_add_nc_u32    v6, s6, v9
/*000000009eb0*/ global_store_dword v[0:1], v6, off
/*000000009eb8*/ global_store_dword v[7:8], v6, off
/*000000009ec0*/ global_store_dword v[4:5], v6, off
/*000000009ec8*/ s_endpgm
/*000000009ecc*/ s_nop           0x0
/*000000009ed0*/ s_nop           0x0
/*000000009ed4*/ s_nop           0x0
/*000000009ed8*/ s_nop           0x0
/*000000009edc*/ s_nop           0x0
/*000000009ee0*/ s_nop           0x0
/*000000009ee4*/ s_nop           0x0
/*000000009ee8*/ s_nop           0x0
/*000000009eec*/ s_nop           0x0
/*000000009ef0*/ s_nop           0x0
/*000000009ef4*/ s_nop           0x0
/*000000009ef8*/ s_nop           0x0
/*000000009efc*/ s_nop           0x0
add_get_global_offset_get_work_dim:
.skip 256
/*00000000a000*/ v_mov_b32       v3, s4
/*00000000a004*/ v_mov_b32       v4, s5
/*00000000a008*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a010*/ s_waitcnt       lgkmcnt(0)
/*00000000a014*/ s_clause        0x1
/*00000000a018*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a020*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a028*/ s_lshl_b32      s3, s8, 1
/*00000000a02c*/ s_lshl_b32      s6, s9, 4
/*00000000a030*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a038*/ v_mov_b32       v4, 0
/*00000000a03c*/ s_lshl_b32      s7, s10, 1
/*00000000a040*/ v_mov_b32       v6, v4
/*00000000a044*/ v_mov_b32       v8, v4
/*00000000a048*/ v_add3_u32      v3, s0, s3, v0
/*00000000a050*/ v_add3_u32      v5, s2, s6, v1
/*00000000a058*/ s_waitcnt       lgkmcnt(0)
/*00000000a05c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a064*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a06c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a074*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a07c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a084*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a088*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000a090*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000a094*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a09c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a0a0*/ s_waitcnt       vmcnt(0)
/*00000000a0a4*/ v_add_nc_u32    v6, s0, v9
/*00000000a0a8*/ v_add_nc_u32    v13, s2, v9
/*00000000a0ac*/ v_add_nc_u32    v11, s1, v9
/*00000000a0b0*/ global_store_dword v[0:1], v6, off
/*00000000a0b8*/ global_store_dword v[2:3], v13, off
/*00000000a0c0*/ global_store_dword v[4:5], v11, off
/*00000000a0c8*/ s_endpgm
/*00000000a0cc*/ s_nop           0x0
/*00000000a0d0*/ s_nop           0x0
/*00000000a0d4*/ s_nop           0x0
/*00000000a0d8*/ s_nop           0x0
/*00000000a0dc*/ s_nop           0x0
/*00000000a0e0*/ s_nop           0x0
/*00000000a0e4*/ s_nop           0x0
/*00000000a0e8*/ s_nop           0x0
/*00000000a0ec*/ s_nop           0x0
/*00000000a0f0*/ s_nop           0x0
/*00000000a0f4*/ s_nop           0x0
/*00000000a0f8*/ s_nop           0x0
/*00000000a0fc*/ s_nop           0x0
add_get_local_id_get_work_dim:
.skip 256
/*00000000a200*/ v_mov_b32       v3, s4
/*00000000a204*/ v_mov_b32       v4, s5
/*00000000a208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a210*/ s_waitcnt       lgkmcnt(0)
/*00000000a214*/ s_clause        0x1
/*00000000a218*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a228*/ s_lshl_b32      s3, s8, 3
/*00000000a22c*/ s_lshl_b32      s6, s9, 2
/*00000000a230*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*00000000a238*/ v_mov_b32       v4, 0
/*00000000a23c*/ s_lshl_b32      s7, s10, 1
/*00000000a240*/ v_mov_b32       v6, v4
/*00000000a244*/ v_mov_b32       v8, v4
/*00000000a248*/ v_add3_u32      v3, s0, s3, v0
/*00000000a250*/ v_add3_u32      v5, s2, s6, v1
/*00000000a258*/ s_waitcnt       lgkmcnt(0)
/*00000000a25c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a264*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000a26c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*00000000a274*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*00000000a27c*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000a284*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000a288*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000a290*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000a294*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000a29c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*00000000a2a0*/ s_waitcnt       vmcnt(0)
/*00000000a2a4*/ v_add_nc_u32    v10, v0, v15
/*00000000a2a8*/ v_add_nc_u32    v11, v1, v15
/*00000000a2ac*/ v_add_nc_u32    v2, v2, v15
/*00000000a2b0*/ global_store_dword v[3:4], v10, off
/*00000000a2b8*/ global_store_dword v[5:6], v11, off
/*00000000a2c0*/ global_store_dword v[7:8], v2, off
/*00000000a2c8*/ s_endpgm
/*00000000a2cc*/ s_nop           0x0
/*00000000a2d0*/ s_nop           0x0
/*00000000a2d4*/ s_nop           0x0
/*00000000a2d8*/ s_nop           0x0
/*00000000a2dc*/ s_nop           0x0
/*00000000a2e0*/ s_nop           0x0
/*00000000a2e4*/ s_nop           0x0
/*00000000a2e8*/ s_nop           0x0
/*00000000a2ec*/ s_nop           0x0
/*00000000a2f0*/ s_nop           0x0
/*00000000a2f4*/ s_nop           0x0
/*00000000a2f8*/ s_nop           0x0
/*00000000a2fc*/ s_nop           0x0
add_get_group_id_get_work_dim:
.skip 256
/*00000000a400*/ v_mov_b32       v3, s4
/*00000000a404*/ v_mov_b32       v4, s5
/*00000000a408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a410*/ s_waitcnt       lgkmcnt(0)
/*00000000a414*/ s_clause        0x1
/*00000000a418*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a428*/ s_lshl_b32      s3, s8, 1
/*00000000a42c*/ s_lshl_b32      s6, s9, 4
/*00000000a430*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a438*/ v_mov_b32       v4, 0
/*00000000a43c*/ s_lshl_b32      s7, s10, 1
/*00000000a440*/ v_mov_b32       v6, v4
/*00000000a444*/ v_mov_b32       v8, v4
/*00000000a448*/ v_add3_u32      v3, s0, s3, v0
/*00000000a450*/ v_add3_u32      v5, s2, s6, v1
/*00000000a458*/ s_waitcnt       lgkmcnt(0)
/*00000000a45c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a464*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a46c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a474*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a47c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a484*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a488*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000a490*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000a494*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a49c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a4a0*/ s_waitcnt       vmcnt(0)
/*00000000a4a4*/ v_add_nc_u32    v6, s8, v9
/*00000000a4a8*/ v_add_nc_u32    v13, s9, v9
/*00000000a4ac*/ v_add_nc_u32    v11, s10, v9
/*00000000a4b0*/ global_store_dword v[0:1], v6, off
/*00000000a4b8*/ global_store_dword v[2:3], v13, off
/*00000000a4c0*/ global_store_dword v[4:5], v11, off
/*00000000a4c8*/ s_endpgm
/*00000000a4cc*/ s_nop           0x0
/*00000000a4d0*/ s_nop           0x0
/*00000000a4d4*/ s_nop           0x0
/*00000000a4d8*/ s_nop           0x0
/*00000000a4dc*/ s_nop           0x0
/*00000000a4e0*/ s_nop           0x0
/*00000000a4e4*/ s_nop           0x0
/*00000000a4e8*/ s_nop           0x0
/*00000000a4ec*/ s_nop           0x0
/*00000000a4f0*/ s_nop           0x0
/*00000000a4f4*/ s_nop           0x0
/*00000000a4f8*/ s_nop           0x0
/*00000000a4fc*/ s_nop           0x0
add_get_local_size_get_work_dim:
.skip 256
/*00000000a600*/ v_mov_b32       v3, s4
/*00000000a604*/ v_mov_b32       v4, s5
/*00000000a608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a610*/ s_waitcnt       lgkmcnt(0)
/*00000000a614*/ s_clause        0x1
/*00000000a618*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a620*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a628*/ s_lshl_b32      s3, s8, 1
/*00000000a62c*/ s_lshl_b32      s6, s9, 1
/*00000000a630*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a638*/ v_mov_b32       v4, 0
/*00000000a63c*/ s_lshl_b32      s7, s10, 2
/*00000000a640*/ v_mov_b32       v6, v4
/*00000000a644*/ v_mov_b32       v8, v4
/*00000000a648*/ v_add3_u32      v3, s0, s3, v0
/*00000000a650*/ v_add3_u32      v5, s2, s6, v1
/*00000000a658*/ s_waitcnt       lgkmcnt(0)
/*00000000a65c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a664*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a66c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a674*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a67c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a684*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a688*/ v_add_co_u32    v11, vcc, s4, v2
/*00000000a690*/ v_add_co_ci_u32 v12, vcc, s5, v3, vcc
/*00000000a694*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a69c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a6a0*/ s_waitcnt       vmcnt(0)
/*00000000a6a4*/ v_add_nc_u32    v6, 2, v9
/*00000000a6a8*/ v_add_nc_u32    v7, 4, v9
/*00000000a6ac*/ global_store_dword v[0:1], v6, off
/*00000000a6b4*/ global_store_dword v[11:12], v6, off
/*00000000a6bc*/ global_store_dword v[4:5], v7, off
/*00000000a6c4*/ s_endpgm
/*00000000a6c8*/ s_nop           0x0
/*00000000a6cc*/ s_nop           0x0
/*00000000a6d0*/ s_nop           0x0
/*00000000a6d4*/ s_nop           0x0
/*00000000a6d8*/ s_nop           0x0
/*00000000a6dc*/ s_nop           0x0
/*00000000a6e0*/ s_nop           0x0
/*00000000a6e4*/ s_nop           0x0
/*00000000a6e8*/ s_nop           0x0
/*00000000a6ec*/ s_nop           0x0
/*00000000a6f0*/ s_nop           0x0
/*00000000a6f4*/ s_nop           0x0
/*00000000a6f8*/ s_nop           0x0
/*00000000a6fc*/ s_nop           0x0
add_get_global_id_get_work_dim:
.skip 256
/*00000000a800*/ v_mov_b32       v3, s4
/*00000000a804*/ v_mov_b32       v4, s5
/*00000000a808*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a810*/ s_waitcnt       lgkmcnt(0)
/*00000000a814*/ s_clause        0x1
/*00000000a818*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a828*/ v_lshl_or_b32   v5, s9, 1, v1
/*00000000a830*/ v_lshl_or_b32   v2, s10, 2, v2
/*00000000a838*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*00000000a840*/ v_mov_b32       v4, 0
/*00000000a844*/ v_lshl_or_b32   v3, s8, 1, v0
/*00000000a84c*/ v_mov_b32       v1, v4
/*00000000a850*/ v_mov_b32       v8, v4
/*00000000a854*/ v_add_nc_u32    v0, s2, v5
/*00000000a858*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*00000000a860*/ s_waitcnt       lgkmcnt(0)
/*00000000a864*/ v_add_nc_u32    v7, s1, v2
/*00000000a868*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000a870*/ v_add_co_u32    v4, vcc, s4, v5
/*00000000a878*/ v_lshlrev_b64   v[8:9], 2, v[7:8]
/*00000000a880*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000a884*/ v_add_co_u32    v1, vcc, s4, v1
/*00000000a88c*/ v_add_co_ci_u32 v2, vcc, s5, v2, vcc
/*00000000a890*/ v_add_co_u32    v8, vcc, s4, v8
/*00000000a898*/ v_add_co_ci_u32 v9, vcc, s5, v9, vcc
/*00000000a89c*/ s_waitcnt       vmcnt(0)
/*00000000a8a0*/ v_add3_u32      v3, v10, s0, v3
/*00000000a8a8*/ v_add_nc_u32    v0, v10, v0
/*00000000a8ac*/ v_add_nc_u32    v6, v10, v7
/*00000000a8b0*/ global_store_dword v[4:5], v3, off
/*00000000a8b8*/ global_store_dword v[1:2], v0, off
/*00000000a8c0*/ global_store_dword v[8:9], v6, off
/*00000000a8c8*/ s_endpgm
/*00000000a8cc*/ s_nop           0x0
/*00000000a8d0*/ s_nop           0x0
/*00000000a8d4*/ s_nop           0x0
/*00000000a8d8*/ s_nop           0x0
/*00000000a8dc*/ s_nop           0x0
/*00000000a8e0*/ s_nop           0x0
/*00000000a8e4*/ s_nop           0x0
/*00000000a8e8*/ s_nop           0x0
/*00000000a8ec*/ s_nop           0x0
/*00000000a8f0*/ s_nop           0x0
/*00000000a8f4*/ s_nop           0x0
/*00000000a8f8*/ s_nop           0x0
/*00000000a8fc*/ s_nop           0x0
add_get_global_size_get_work_dim:
.skip 256
/*00000000aa00*/ v_mov_b32       v3, s4
/*00000000aa04*/ v_mov_b32       v4, s5
/*00000000aa08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000aa10*/ s_waitcnt       lgkmcnt(0)
/*00000000aa14*/ s_clause        0x1
/*00000000aa18*/ s_load_dword    s1, s[6:7], 0x20
/*00000000aa20*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*00000000aa28*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*00000000aa30*/ s_lshl_b32      s3, s8, 4
/*00000000aa34*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000aa3c*/ v_mov_b32       v4, 0
/*00000000aa40*/ s_lshl_b32      s8, s9, 1
/*00000000aa44*/ s_lshl_b32      s9, s10, 1
/*00000000aa48*/ v_mov_b32       v6, v4
/*00000000aa4c*/ v_mov_b32       v8, v4
/*00000000aa50*/ v_add3_u32      v3, s0, s3, v0
/*00000000aa58*/ v_add3_u32      v5, s2, s8, v1
/*00000000aa60*/ s_waitcnt       lgkmcnt(0)
/*00000000aa64*/ v_add3_u32      v7, s1, s9, v2
/*00000000aa6c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000aa74*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000aa7c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000aa84*/ v_add_co_u32    v0, vcc, s12, v0
/*00000000aa8c*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*00000000aa90*/ v_add_co_u32    v2, vcc, s12, v2
/*00000000aa98*/ v_add_co_ci_u32 v3, vcc, s13, v3, vcc
/*00000000aa9c*/ v_add_co_u32    v4, vcc, s12, v4
/*00000000aaa4*/ v_add_co_ci_u32 v5, vcc, s13, v5, vcc
/*00000000aaa8*/ s_waitcnt       vmcnt(0)
/*00000000aaac*/ v_add_nc_u32    v6, s4, v9
/*00000000aab0*/ v_add_nc_u32    v13, s5, v9
/*00000000aab4*/ v_add_nc_u32    v11, s6, v9
/*00000000aab8*/ global_store_dword v[0:1], v6, off
/*00000000aac0*/ global_store_dword v[2:3], v13, off
/*00000000aac8*/ global_store_dword v[4:5], v11, off
/*00000000aad0*/ s_endpgm
/*00000000aad4*/ s_nop           0x0
/*00000000aad8*/ s_nop           0x0
/*00000000aadc*/ s_nop           0x0
/*00000000aae0*/ s_nop           0x0
/*00000000aae4*/ s_nop           0x0
/*00000000aae8*/ s_nop           0x0
/*00000000aaec*/ s_nop           0x0
/*00000000aaf0*/ s_nop           0x0
/*00000000aaf4*/ s_nop           0x0
/*00000000aaf8*/ s_nop           0x0
/*00000000aafc*/ s_nop           0x0
add_get_num_groups_get_work_dim:
.skip 256
/*00000000ac00*/ v_mov_b32       v3, s4
/*00000000ac04*/ v_mov_b32       v4, s5
/*00000000ac08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000ac10*/ s_waitcnt       lgkmcnt(0)
/*00000000ac14*/ s_load_dword    s1, s[6:7], 0x20
/*00000000ac1c*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000ac24*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000ac2c*/ s_lshl_b32      s3, s8, 1
/*00000000ac30*/ s_lshl_b32      s6, s9, 1
/*00000000ac34*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000ac3c*/ v_mov_b32       v4, 0
/*00000000ac40*/ s_lshl_b32      s7, s10, 2
/*00000000ac44*/ v_mov_b32       v6, v4
/*00000000ac48*/ v_mov_b32       v8, v4
/*00000000ac4c*/ s_waitcnt       lgkmcnt(0)
/*00000000ac50*/ v_add3_u32      v7, s1, s7, v2
/*00000000ac58*/ v_add3_u32      v3, s0, s3, v0
/*00000000ac60*/ v_add3_u32      v5, s2, s6, v1
/*00000000ac68*/ s_and_b32       s1, s12, -2
/*00000000ac6c*/ s_lshr_b32      s0, s12, 1
/*00000000ac70*/ s_and_b32       s3, s13, -2
/*00000000ac74*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000ac7c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000ac84*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000ac8c*/ s_lshr_b32      s2, s13, 1
/*00000000ac90*/ s_and_b32       s7, s14, -4
/*00000000ac94*/ s_lshr_b32      s6, s14, 2
/*00000000ac98*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000aca0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000aca4*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000acac*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000acb0*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000acb8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000acbc*/ v_cmp_gt_u32    vcc, s12, s1
/*00000000acc4*/ s_waitcnt       vmcnt(0)
/*00000000acc8*/ v_add_co_ci_u32 v6, vcc, s0, v9, vcc
/*00000000accc*/ v_cmp_gt_u32    vcc, s13, s3
/*00000000acd4*/ v_add_co_ci_u32 v13, vcc, s2, v9, vcc
/*00000000acd8*/ v_cmp_gt_u32    vcc, s14, s7
/*00000000ace0*/ v_add_co_ci_u32 v11, vcc, s6, v9, vcc
/*00000000ace4*/ global_store_dword v[0:1], v6, off
/*00000000acec*/ global_store_dword v[2:3], v13, off
/*00000000acf4*/ global_store_dword v[4:5], v11, off
/*00000000acfc*/ s_endpgm
add_get_work_dim_get_work_dim:
.skip 256
/*00000000ae00*/ v_mov_b32       v3, s4
/*00000000ae04*/ v_mov_b32       v4, s5
/*00000000ae08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000ae10*/ s_waitcnt       lgkmcnt(0)
/*00000000ae14*/ s_clause        0x1
/*00000000ae18*/ s_load_dword    s1, s[6:7], 0x20
/*00000000ae20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000ae28*/ s_lshl_b32      s3, s8, 1
/*00000000ae2c*/ s_lshl_b32      s6, s9, 1
/*00000000ae30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000ae38*/ v_mov_b32       v4, 0
/*00000000ae3c*/ s_lshl_b32      s7, s10, 2
/*00000000ae40*/ v_mov_b32       v6, v4
/*00000000ae44*/ v_mov_b32       v8, v4
/*00000000ae48*/ v_add3_u32      v3, s0, s3, v0
/*00000000ae50*/ v_add3_u32      v5, s2, s6, v1
/*00000000ae58*/ s_waitcnt       lgkmcnt(0)
/*00000000ae5c*/ v_add3_u32      v7, s1, s7, v2
/*00000000ae64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000ae6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000ae74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000ae7c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000ae84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000ae88*/ v_add_co_u32    v7, vcc, s4, v2
/*00000000ae90*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*00000000ae94*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000ae9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000aea0*/ s_waitcnt       vmcnt(0)
/*00000000aea4*/ v_lshlrev_b32   v6, 1, v9
/*00000000aea8*/ global_store_dword v[0:1], v6, off
/*00000000aeb0*/ global_store_dword v[7:8], v6, off
/*00000000aeb8*/ global_store_dword v[4:5], v6, off
/*00000000aec0*/ s_endpgm
/*00000000aec4*/ s_nop           0x0
/*00000000aec8*/ s_nop           0x0
/*00000000aecc*/ s_nop           0x0
/*00000000aed0*/ s_nop           0x0
/*00000000aed4*/ s_nop           0x0
/*00000000aed8*/ s_nop           0x0
/*00000000aedc*/ s_nop           0x0
/*00000000aee0*/ s_nop           0x0
/*00000000aee4*/ s_nop           0x0
/*00000000aee8*/ s_nop           0x0
/*00000000aeec*/ s_nop           0x0
/*00000000aef0*/ s_nop           0x0
/*00000000aef4*/ s_nop           0x0
/*00000000aef8*/ s_nop           0x0
/*00000000aefc*/ s_nop           0x0
add_x_64:
.skip 256
/*00000000b000*/ s_clause        0x2
/*00000000b004*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b00c*/ s_load_dword    s3, s[4:5], 0x0
/*00000000b014*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b01c*/ s_lshl_b32      s4, s6, 6
/*00000000b020*/ v_mov_b32       v1, 0
/*00000000b024*/ s_waitcnt       lgkmcnt(0)
/*00000000b028*/ v_add3_u32      v0, s2, s4, v0
/*00000000b030*/ s_lshl_b32      s2, s3, 1
/*00000000b034*/ v_mov_b32       v2, s2
/*00000000b038*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000b040*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000b048*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000b04c*/ global_store_dword v[0:1], v2, off
/*00000000b054*/ s_endpgm
/*00000000b058*/ s_nop           0x0
/*00000000b05c*/ s_nop           0x0
/*00000000b060*/ s_nop           0x0
/*00000000b064*/ s_nop           0x0
/*00000000b068*/ s_nop           0x0
/*00000000b06c*/ s_nop           0x0
/*00000000b070*/ s_nop           0x0
/*00000000b074*/ s_nop           0x0
/*00000000b078*/ s_nop           0x0
/*00000000b07c*/ s_nop           0x0
/*00000000b080*/ s_nop           0x0
/*00000000b084*/ s_nop           0x0
/*00000000b088*/ s_nop           0x0
/*00000000b08c*/ s_nop           0x0
/*00000000b090*/ s_nop           0x0
/*00000000b094*/ s_nop           0x0
/*00000000b098*/ s_nop           0x0
/*00000000b09c*/ s_nop           0x0
/*00000000b0a0*/ s_nop           0x0
/*00000000b0a4*/ s_nop           0x0
/*00000000b0a8*/ s_nop           0x0
/*00000000b0ac*/ s_nop           0x0
/*00000000b0b0*/ s_nop           0x0
/*00000000b0b4*/ s_nop           0x0
/*00000000b0b8*/ s_nop           0x0
/*00000000b0bc*/ s_nop           0x0
/*00000000b0c0*/ s_nop           0x0
/*00000000b0c4*/ s_nop           0x0
/*00000000b0c8*/ s_nop           0x0
/*00000000b0cc*/ s_nop           0x0
/*00000000b0d0*/ s_nop           0x0
/*00000000b0d4*/ s_nop           0x0
/*00000000b0d8*/ s_nop           0x0
/*00000000b0dc*/ s_nop           0x0
/*00000000b0e0*/ s_nop           0x0
/*00000000b0e4*/ s_nop           0x0
/*00000000b0e8*/ s_nop           0x0
/*00000000b0ec*/ s_nop           0x0
/*00000000b0f0*/ s_nop           0x0
/*00000000b0f4*/ s_nop           0x0
/*00000000b0f8*/ s_nop           0x0
/*00000000b0fc*/ s_nop           0x0
add_get_global_offset_64:
.skip 256
/*00000000b200*/ s_clause        0x1
/*00000000b204*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b20c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b214*/ s_lshl_b32      s3, s6, 6
/*00000000b218*/ v_mov_b32       v1, 0
/*00000000b21c*/ s_waitcnt       lgkmcnt(0)
/*00000000b220*/ v_add3_u32      v0, s2, s3, v0
/*00000000b228*/ s_lshl_b32      s2, s2, 1
/*00000000b22c*/ v_mov_b32       v2, s2
/*00000000b230*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000b238*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000b240*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000b244*/ global_store_dword v[0:1], v2, off
/*00000000b24c*/ s_endpgm
/*00000000b250*/ s_nop           0x0
/*00000000b254*/ s_nop           0x0
/*00000000b258*/ s_nop           0x0
/*00000000b25c*/ s_nop           0x0
/*00000000b260*/ s_nop           0x0
/*00000000b264*/ s_nop           0x0
/*00000000b268*/ s_nop           0x0
/*00000000b26c*/ s_nop           0x0
/*00000000b270*/ s_nop           0x0
/*00000000b274*/ s_nop           0x0
/*00000000b278*/ s_nop           0x0
/*00000000b27c*/ s_nop           0x0
/*00000000b280*/ s_nop           0x0
/*00000000b284*/ s_nop           0x0
/*00000000b288*/ s_nop           0x0
/*00000000b28c*/ s_nop           0x0
/*00000000b290*/ s_nop           0x0
/*00000000b294*/ s_nop           0x0
/*00000000b298*/ s_nop           0x0
/*00000000b29c*/ s_nop           0x0
/*00000000b2a0*/ s_nop           0x0
/*00000000b2a4*/ s_nop           0x0
/*00000000b2a8*/ s_nop           0x0
/*00000000b2ac*/ s_nop           0x0
/*00000000b2b0*/ s_nop           0x0
/*00000000b2b4*/ s_nop           0x0
/*00000000b2b8*/ s_nop           0x0
/*00000000b2bc*/ s_nop           0x0
/*00000000b2c0*/ s_nop           0x0
/*00000000b2c4*/ s_nop           0x0
/*00000000b2c8*/ s_nop           0x0
/*00000000b2cc*/ s_nop           0x0
/*00000000b2d0*/ s_nop           0x0
/*00000000b2d4*/ s_nop           0x0
/*00000000b2d8*/ s_nop           0x0
/*00000000b2dc*/ s_nop           0x0
/*00000000b2e0*/ s_nop           0x0
/*00000000b2e4*/ s_nop           0x0
/*00000000b2e8*/ s_nop           0x0
/*00000000b2ec*/ s_nop           0x0
/*00000000b2f0*/ s_nop           0x0
/*00000000b2f4*/ s_nop           0x0
/*00000000b2f8*/ s_nop           0x0
/*00000000b2fc*/ s_nop           0x0
add_get_local_id_64:
.skip 256
/*00000000b400*/ s_clause        0x1
/*00000000b404*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b40c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b414*/ s_lshl_b32      s3, s6, 6
/*00000000b418*/ v_mov_b32       v2, 0
/*00000000b41c*/ v_lshlrev_b32   v3, 1, v0
/*00000000b420*/ s_waitcnt       lgkmcnt(0)
/*00000000b424*/ v_add3_u32      v1, s2, s3, v0
/*00000000b42c*/ v_lshlrev_b64   v[1:2], 2, v[1:2]
/*00000000b434*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000b43c*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000b440*/ global_store_dword v[0:1], v3, off
/*00000000b448*/ s_endpgm
/*00000000b44c*/ s_nop           0x0
/*00000000b450*/ s_nop           0x0
/*00000000b454*/ s_nop           0x0
/*00000000b458*/ s_nop           0x0
/*00000000b45c*/ s_nop           0x0
/*00000000b460*/ s_nop           0x0
/*00000000b464*/ s_nop           0x0
/*00000000b468*/ s_nop           0x0
/*00000000b46c*/ s_nop           0x0
/*00000000b470*/ s_nop           0x0
/*00000000b474*/ s_nop           0x0
/*00000000b478*/ s_nop           0x0
/*00000000b47c*/ s_nop           0x0
/*00000000b480*/ s_nop           0x0
/*00000000b484*/ s_nop           0x0
/*00000000b488*/ s_nop           0x0
/*00000000b48c*/ s_nop           0x0
/*00000000b490*/ s_nop           0x0
/*00000000b494*/ s_nop           0x0
/*00000000b498*/ s_nop           0x0
/*00000000b49c*/ s_nop           0x0
/*00000000b4a0*/ s_nop           0x0
/*00000000b4a4*/ s_nop           0x0
/*00000000b4a8*/ s_nop           0x0
/*00000000b4ac*/ s_nop           0x0
/*00000000b4b0*/ s_nop           0x0
/*00000000b4b4*/ s_nop           0x0
/*00000000b4b8*/ s_nop           0x0
/*00000000b4bc*/ s_nop           0x0
/*00000000b4c0*/ s_nop           0x0
/*00000000b4c4*/ s_nop           0x0
/*00000000b4c8*/ s_nop           0x0
/*00000000b4cc*/ s_nop           0x0
/*00000000b4d0*/ s_nop           0x0
/*00000000b4d4*/ s_nop           0x0
/*00000000b4d8*/ s_nop           0x0
/*00000000b4dc*/ s_nop           0x0
/*00000000b4e0*/ s_nop           0x0
/*00000000b4e4*/ s_nop           0x0
/*00000000b4e8*/ s_nop           0x0
/*00000000b4ec*/ s_nop           0x0
/*00000000b4f0*/ s_nop           0x0
/*00000000b4f4*/ s_nop           0x0
/*00000000b4f8*/ s_nop           0x0
/*00000000b4fc*/ s_nop           0x0
add_get_group_id_64:
.skip 256
/*00000000b600*/ s_clause        0x1
/*00000000b604*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b60c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b614*/ s_lshl_b32      s3, s6, 6
/*00000000b618*/ v_mov_b32       v1, 0
/*00000000b61c*/ s_waitcnt       lgkmcnt(0)
/*00000000b620*/ v_add3_u32      v0, s2, s3, v0
/*00000000b628*/ s_lshl_b32      s2, s6, 1
/*00000000b62c*/ v_mov_b32       v2, s2
/*00000000b630*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000b638*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000b640*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000b644*/ global_store_dword v[0:1], v2, off
/*00000000b64c*/ s_endpgm
/*00000000b650*/ s_nop           0x0
/*00000000b654*/ s_nop           0x0
/*00000000b658*/ s_nop           0x0
/*00000000b65c*/ s_nop           0x0
/*00000000b660*/ s_nop           0x0
/*00000000b664*/ s_nop           0x0
/*00000000b668*/ s_nop           0x0
/*00000000b66c*/ s_nop           0x0
/*00000000b670*/ s_nop           0x0
/*00000000b674*/ s_nop           0x0
/*00000000b678*/ s_nop           0x0
/*00000000b67c*/ s_nop           0x0
/*00000000b680*/ s_nop           0x0
/*00000000b684*/ s_nop           0x0
/*00000000b688*/ s_nop           0x0
/*00000000b68c*/ s_nop           0x0
/*00000000b690*/ s_nop           0x0
/*00000000b694*/ s_nop           0x0
/*00000000b698*/ s_nop           0x0
/*00000000b69c*/ s_nop           0x0
/*00000000b6a0*/ s_nop           0x0
/*00000000b6a4*/ s_nop           0x0
/*00000000b6a8*/ s_nop           0x0
/*00000000b6ac*/ s_nop           0x0
/*00000000b6b0*/ s_nop           0x0
/*00000000b6b4*/ s_nop           0x0
/*00000000b6b8*/ s_nop           0x0
/*00000000b6bc*/ s_nop           0x0
/*00000000b6c0*/ s_nop           0x0
/*00000000b6c4*/ s_nop           0x0
/*00000000b6c8*/ s_nop           0x0
/*00000000b6cc*/ s_nop           0x0
/*00000000b6d0*/ s_nop           0x0
/*00000000b6d4*/ s_nop           0x0
/*00000000b6d8*/ s_nop           0x0
/*00000000b6dc*/ s_nop           0x0
/*00000000b6e0*/ s_nop           0x0
/*00000000b6e4*/ s_nop           0x0
/*00000000b6e8*/ s_nop           0x0
/*00000000b6ec*/ s_nop           0x0
/*00000000b6f0*/ s_nop           0x0
/*00000000b6f4*/ s_nop           0x0
/*00000000b6f8*/ s_nop           0x0
/*00000000b6fc*/ s_nop           0x0
add_get_local_size_64:
.skip 256
/*00000000b800*/ s_clause        0x1
/*00000000b804*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b80c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b814*/ s_lshl_b32      s3, s6, 6
/*00000000b818*/ v_mov_b32       v1, 0
/*00000000b81c*/ v_mov_b32       v2, 0x80
/*00000000b824*/ s_waitcnt       lgkmcnt(0)
/*00000000b828*/ v_add3_u32      v0, s2, s3, v0
/*00000000b830*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000b838*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000b840*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000b844*/ global_store_dword v[0:1], v2, off
/*00000000b84c*/ s_endpgm
/*00000000b850*/ s_nop           0x0
/*00000000b854*/ s_nop           0x0
/*00000000b858*/ s_nop           0x0
/*00000000b85c*/ s_nop           0x0
/*00000000b860*/ s_nop           0x0
/*00000000b864*/ s_nop           0x0
/*00000000b868*/ s_nop           0x0
/*00000000b86c*/ s_nop           0x0
/*00000000b870*/ s_nop           0x0
/*00000000b874*/ s_nop           0x0
/*00000000b878*/ s_nop           0x0
/*00000000b87c*/ s_nop           0x0
/*00000000b880*/ s_nop           0x0
/*00000000b884*/ s_nop           0x0
/*00000000b888*/ s_nop           0x0
/*00000000b88c*/ s_nop           0x0
/*00000000b890*/ s_nop           0x0
/*00000000b894*/ s_nop           0x0
/*00000000b898*/ s_nop           0x0
/*00000000b89c*/ s_nop           0x0
/*00000000b8a0*/ s_nop           0x0
/*00000000b8a4*/ s_nop           0x0
/*00000000b8a8*/ s_nop           0x0
/*00000000b8ac*/ s_nop           0x0
/*00000000b8b0*/ s_nop           0x0
/*00000000b8b4*/ s_nop           0x0
/*00000000b8b8*/ s_nop           0x0
/*00000000b8bc*/ s_nop           0x0
/*00000000b8c0*/ s_nop           0x0
/*00000000b8c4*/ s_nop           0x0
/*00000000b8c8*/ s_nop           0x0
/*00000000b8cc*/ s_nop           0x0
/*00000000b8d0*/ s_nop           0x0
/*00000000b8d4*/ s_nop           0x0
/*00000000b8d8*/ s_nop           0x0
/*00000000b8dc*/ s_nop           0x0
/*00000000b8e0*/ s_nop           0x0
/*00000000b8e4*/ s_nop           0x0
/*00000000b8e8*/ s_nop           0x0
/*00000000b8ec*/ s_nop           0x0
/*00000000b8f0*/ s_nop           0x0
/*00000000b8f4*/ s_nop           0x0
/*00000000b8f8*/ s_nop           0x0
/*00000000b8fc*/ s_nop           0x0
add_get_global_id_64:
.skip 256
/*00000000ba00*/ s_clause        0x1
/*00000000ba04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000ba0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000ba14*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000000ba1c*/ v_mov_b32       v1, 0
/*00000000ba20*/ s_waitcnt       lgkmcnt(0)
/*00000000ba24*/ v_add_nc_u32    v0, s2, v0
/*00000000ba28*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000ba30*/ v_lshlrev_b32   v3, 1, v0
/*00000000ba34*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000ba3c*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000ba40*/ global_store_dword v[0:1], v3, off
/*00000000ba48*/ s_endpgm
/*00000000ba4c*/ s_nop           0x0
/*00000000ba50*/ s_nop           0x0
/*00000000ba54*/ s_nop           0x0
/*00000000ba58*/ s_nop           0x0
/*00000000ba5c*/ s_nop           0x0
/*00000000ba60*/ s_nop           0x0
/*00000000ba64*/ s_nop           0x0
/*00000000ba68*/ s_nop           0x0
/*00000000ba6c*/ s_nop           0x0
/*00000000ba70*/ s_nop           0x0
/*00000000ba74*/ s_nop           0x0
/*00000000ba78*/ s_nop           0x0
/*00000000ba7c*/ s_nop           0x0
/*00000000ba80*/ s_nop           0x0
/*00000000ba84*/ s_nop           0x0
/*00000000ba88*/ s_nop           0x0
/*00000000ba8c*/ s_nop           0x0
/*00000000ba90*/ s_nop           0x0
/*00000000ba94*/ s_nop           0x0
/*00000000ba98*/ s_nop           0x0
/*00000000ba9c*/ s_nop           0x0
/*00000000baa0*/ s_nop           0x0
/*00000000baa4*/ s_nop           0x0
/*00000000baa8*/ s_nop           0x0
/*00000000baac*/ s_nop           0x0
/*00000000bab0*/ s_nop           0x0
/*00000000bab4*/ s_nop           0x0
/*00000000bab8*/ s_nop           0x0
/*00000000babc*/ s_nop           0x0
/*00000000bac0*/ s_nop           0x0
/*00000000bac4*/ s_nop           0x0
/*00000000bac8*/ s_nop           0x0
/*00000000bacc*/ s_nop           0x0
/*00000000bad0*/ s_nop           0x0
/*00000000bad4*/ s_nop           0x0
/*00000000bad8*/ s_nop           0x0
/*00000000badc*/ s_nop           0x0
/*00000000bae0*/ s_nop           0x0
/*00000000bae4*/ s_nop           0x0
/*00000000bae8*/ s_nop           0x0
/*00000000baec*/ s_nop           0x0
/*00000000baf0*/ s_nop           0x0
/*00000000baf4*/ s_nop           0x0
/*00000000baf8*/ s_nop           0x0
/*00000000bafc*/ s_nop           0x0
add_get_global_size_64:
.skip 256
/*00000000bc00*/ s_load_dword    s2, s[6:7], 0x10
/*00000000bc08*/ s_load_dword    s3, s[4:5], 0xc
/*00000000bc10*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000bc18*/ s_lshl_b32      s4, s8, 6
/*00000000bc1c*/ v_mov_b32       v1, 0
/*00000000bc20*/ s_waitcnt       lgkmcnt(0)
/*00000000bc24*/ v_add3_u32      v0, s2, s4, v0
/*00000000bc2c*/ s_lshl_b32      s2, s3, 1
/*00000000bc30*/ v_mov_b32       v2, s2
/*00000000bc34*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000bc3c*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000bc44*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000bc48*/ global_store_dword v[0:1], v2, off
/*00000000bc50*/ s_endpgm
/*00000000bc54*/ s_nop           0x0
/*00000000bc58*/ s_nop           0x0
/*00000000bc5c*/ s_nop           0x0
/*00000000bc60*/ s_nop           0x0
/*00000000bc64*/ s_nop           0x0
/*00000000bc68*/ s_nop           0x0
/*00000000bc6c*/ s_nop           0x0
/*00000000bc70*/ s_nop           0x0
/*00000000bc74*/ s_nop           0x0
/*00000000bc78*/ s_nop           0x0
/*00000000bc7c*/ s_nop           0x0
/*00000000bc80*/ s_nop           0x0
/*00000000bc84*/ s_nop           0x0
/*00000000bc88*/ s_nop           0x0
/*00000000bc8c*/ s_nop           0x0
/*00000000bc90*/ s_nop           0x0
/*00000000bc94*/ s_nop           0x0
/*00000000bc98*/ s_nop           0x0
/*00000000bc9c*/ s_nop           0x0
/*00000000bca0*/ s_nop           0x0
/*00000000bca4*/ s_nop           0x0
/*00000000bca8*/ s_nop           0x0
/*00000000bcac*/ s_nop           0x0
/*00000000bcb0*/ s_nop           0x0
/*00000000bcb4*/ s_nop           0x0
/*00000000bcb8*/ s_nop           0x0
/*00000000bcbc*/ s_nop           0x0
/*00000000bcc0*/ s_nop           0x0
/*00000000bcc4*/ s_nop           0x0
/*00000000bcc8*/ s_nop           0x0
/*00000000bccc*/ s_nop           0x0
/*00000000bcd0*/ s_nop           0x0
/*00000000bcd4*/ s_nop           0x0
/*00000000bcd8*/ s_nop           0x0
/*00000000bcdc*/ s_nop           0x0
/*00000000bce0*/ s_nop           0x0
/*00000000bce4*/ s_nop           0x0
/*00000000bce8*/ s_nop           0x0
/*00000000bcec*/ s_nop           0x0
/*00000000bcf0*/ s_nop           0x0
/*00000000bcf4*/ s_nop           0x0
/*00000000bcf8*/ s_nop           0x0
/*00000000bcfc*/ s_nop           0x0
add_get_num_groups_64:
.skip 256
/*00000000be00*/ s_load_dword    s2, s[4:5], 0xc
/*00000000be08*/ s_clause        0x1
/*00000000be0c*/ s_load_dword    s3, s[6:7], 0x10
/*00000000be14*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000be1c*/ s_lshl_b32      s4, s8, 6
/*00000000be20*/ v_mov_b32       v1, 0
/*00000000be24*/ s_waitcnt       lgkmcnt(0)
/*00000000be28*/ s_and_b32       s5, s2, 0xffffffc0
/*00000000be30*/ v_add3_u32      v0, s3, s4, v0
/*00000000be38*/ v_cmp_gt_u32    s[3:4], s2, s5
/*00000000be40*/ s_lshr_b32      s2, s2, 6
/*00000000be44*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000be4c*/ s_cmpk_lg_u32   s3, 0x0
/*00000000be50*/ s_addc_u32      s2, s2, 0
/*00000000be54*/ s_lshl_b32      s2, s2, 1
/*00000000be58*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000be60*/ v_mov_b32       v2, s2
/*00000000be64*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000be68*/ global_store_dword v[0:1], v2, off
/*00000000be70*/ s_endpgm
/*00000000be74*/ s_nop           0x0
/*00000000be78*/ s_nop           0x0
/*00000000be7c*/ s_nop           0x0
/*00000000be80*/ s_nop           0x0
/*00000000be84*/ s_nop           0x0
/*00000000be88*/ s_nop           0x0
/*00000000be8c*/ s_nop           0x0
/*00000000be90*/ s_nop           0x0
/*00000000be94*/ s_nop           0x0
/*00000000be98*/ s_nop           0x0
/*00000000be9c*/ s_nop           0x0
/*00000000bea0*/ s_nop           0x0
/*00000000bea4*/ s_nop           0x0
/*00000000bea8*/ s_nop           0x0
/*00000000beac*/ s_nop           0x0
/*00000000beb0*/ s_nop           0x0
/*00000000beb4*/ s_nop           0x0
/*00000000beb8*/ s_nop           0x0
/*00000000bebc*/ s_nop           0x0
/*00000000bec0*/ s_nop           0x0
/*00000000bec4*/ s_nop           0x0
/*00000000bec8*/ s_nop           0x0
/*00000000becc*/ s_nop           0x0
/*00000000bed0*/ s_nop           0x0
/*00000000bed4*/ s_nop           0x0
/*00000000bed8*/ s_nop           0x0
/*00000000bedc*/ s_nop           0x0
/*00000000bee0*/ s_nop           0x0
/*00000000bee4*/ s_nop           0x0
/*00000000bee8*/ s_nop           0x0
/*00000000beec*/ s_nop           0x0
/*00000000bef0*/ s_nop           0x0
/*00000000bef4*/ s_nop           0x0
/*00000000bef8*/ s_nop           0x0
/*00000000befc*/ s_nop           0x0
add_get_work_dim:
.skip 256
/*00000000c000*/ v_mov_b32       v1, s4
/*00000000c004*/ v_mov_b32       v2, s5
/*00000000c008*/ s_clause        0x1
/*00000000c00c*/ s_load_dword    s2, s[6:7], 0x10
/*00000000c014*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000c01c*/ s_lshl_b32      s3, s8, 6
/*00000000c020*/ global_load_ushort v2, v[1:2], off inst_offset:2
/*00000000c028*/ v_mov_b32       v1, 0
/*00000000c02c*/ s_waitcnt       lgkmcnt(0)
/*00000000c030*/ v_add3_u32      v0, s2, s3, v0
/*00000000c038*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c040*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000c048*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000c04c*/ s_waitcnt       vmcnt(0)
/*00000000c050*/ v_lshlrev_b32   v2, 1, v2
/*00000000c054*/ global_store_dword v[0:1], v2, off
/*00000000c05c*/ s_endpgm
/*00000000c060*/ s_nop           0x0
/*00000000c064*/ s_nop           0x0
/*00000000c068*/ s_nop           0x0
/*00000000c06c*/ s_nop           0x0
/*00000000c070*/ s_nop           0x0
/*00000000c074*/ s_nop           0x0
/*00000000c078*/ s_nop           0x0
/*00000000c07c*/ s_nop           0x0
/*00000000c080*/ s_nop           0x0
/*00000000c084*/ s_nop           0x0
/*00000000c088*/ s_nop           0x0
/*00000000c08c*/ s_nop           0x0
/*00000000c090*/ s_nop           0x0
/*00000000c094*/ s_nop           0x0
/*00000000c098*/ s_nop           0x0
/*00000000c09c*/ s_nop           0x0
/*00000000c0a0*/ s_nop           0x0
/*00000000c0a4*/ s_nop           0x0
/*00000000c0a8*/ s_nop           0x0
/*00000000c0ac*/ s_nop           0x0
/*00000000c0b0*/ s_nop           0x0
/*00000000c0b4*/ s_nop           0x0
/*00000000c0b8*/ s_nop           0x0
/*00000000c0bc*/ s_nop           0x0
/*00000000c0c0*/ s_nop           0x0
/*00000000c0c4*/ s_nop           0x0
/*00000000c0c8*/ s_nop           0x0
/*00000000c0cc*/ s_nop           0x0
/*00000000c0d0*/ s_nop           0x0
/*00000000c0d4*/ s_nop           0x0
/*00000000c0d8*/ s_nop           0x0
/*00000000c0dc*/ s_nop           0x0
/*00000000c0e0*/ s_nop           0x0
/*00000000c0e4*/ s_nop           0x0
/*00000000c0e8*/ s_nop           0x0
/*00000000c0ec*/ s_nop           0x0
/*00000000c0f0*/ s_nop           0x0
/*00000000c0f4*/ s_nop           0x0
/*00000000c0f8*/ s_nop           0x0
/*00000000c0fc*/ s_nop           0x0
add_x_8_8:
.skip 256
/*00000000c200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000c208*/ s_waitcnt       lgkmcnt(0)
/*00000000c20c*/ s_clause        0x1
/*00000000c210*/ s_load_dword    s1, s[4:5], 0x0
/*00000000c218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000c220*/ s_lshl_b32      s3, s6, 3
/*00000000c224*/ v_mov_b32       v3, 0
/*00000000c228*/ v_add3_u32      v2, s0, s3, v0
/*00000000c230*/ s_lshl_b32      s0, s7, 3
/*00000000c234*/ s_waitcnt       lgkmcnt(0)
/*00000000c238*/ s_add_i32       s1, s2, s1
/*00000000c23c*/ v_add3_u32      v7, s1, s0, v1
/*00000000c244*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*00000000c24c*/ v_add_co_u32    v0, vcc, s4, v2
/*00000000c254*/ v_add_co_ci_u32 v1, vcc, s5, v3, vcc
/*00000000c258*/ global_store_dword v[0:1], v7, off
/*00000000c260*/ s_endpgm
/*00000000c264*/ s_nop           0x0
/*00000000c268*/ s_nop           0x0
/*00000000c26c*/ s_nop           0x0
/*00000000c270*/ s_nop           0x0
/*00000000c274*/ s_nop           0x0
/*00000000c278*/ s_nop           0x0
/*00000000c27c*/ s_nop           0x0
/*00000000c280*/ s_nop           0x0
/*00000000c284*/ s_nop           0x0
/*00000000c288*/ s_nop           0x0
/*00000000c28c*/ s_nop           0x0
/*00000000c290*/ s_nop           0x0
/*00000000c294*/ s_nop           0x0
/*00000000c298*/ s_nop           0x0
/*00000000c29c*/ s_nop           0x0
/*00000000c2a0*/ s_nop           0x0
/*00000000c2a4*/ s_nop           0x0
/*00000000c2a8*/ s_nop           0x0
/*00000000c2ac*/ s_nop           0x0
/*00000000c2b0*/ s_nop           0x0
/*00000000c2b4*/ s_nop           0x0
/*00000000c2b8*/ s_nop           0x0
/*00000000c2bc*/ s_nop           0x0
/*00000000c2c0*/ s_nop           0x0
/*00000000c2c4*/ s_nop           0x0
/*00000000c2c8*/ s_nop           0x0
/*00000000c2cc*/ s_nop           0x0
/*00000000c2d0*/ s_nop           0x0
/*00000000c2d4*/ s_nop           0x0
/*00000000c2d8*/ s_nop           0x0
/*00000000c2dc*/ s_nop           0x0
/*00000000c2e0*/ s_nop           0x0
/*00000000c2e4*/ s_nop           0x0
/*00000000c2e8*/ s_nop           0x0
/*00000000c2ec*/ s_nop           0x0
/*00000000c2f0*/ s_nop           0x0
/*00000000c2f4*/ s_nop           0x0
/*00000000c2f8*/ s_nop           0x0
/*00000000c2fc*/ s_nop           0x0
add_get_global_offset_8_8:
.skip 256
/*00000000c400*/ s_clause        0x1
/*00000000c404*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000c40c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000c414*/ s_waitcnt       lgkmcnt(0)
/*00000000c418*/ s_lshl_b32      s1, s6, 3
/*00000000c41c*/ v_mov_b32       v1, 0
/*00000000c420*/ v_add3_u32      v0, s0, s1, v0
/*00000000c428*/ s_add_i32       s0, s2, s0
/*00000000c42c*/ v_mov_b32       v2, s0
/*00000000c430*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c438*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000c440*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000c444*/ global_store_dword v[0:1], v2, off
/*00000000c44c*/ s_endpgm
/*00000000c450*/ s_nop           0x0
/*00000000c454*/ s_nop           0x0
/*00000000c458*/ s_nop           0x0
/*00000000c45c*/ s_nop           0x0
/*00000000c460*/ s_nop           0x0
/*00000000c464*/ s_nop           0x0
/*00000000c468*/ s_nop           0x0
/*00000000c46c*/ s_nop           0x0
/*00000000c470*/ s_nop           0x0
/*00000000c474*/ s_nop           0x0
/*00000000c478*/ s_nop           0x0
/*00000000c47c*/ s_nop           0x0
/*00000000c480*/ s_nop           0x0
/*00000000c484*/ s_nop           0x0
/*00000000c488*/ s_nop           0x0
/*00000000c48c*/ s_nop           0x0
/*00000000c490*/ s_nop           0x0
/*00000000c494*/ s_nop           0x0
/*00000000c498*/ s_nop           0x0
/*00000000c49c*/ s_nop           0x0
/*00000000c4a0*/ s_nop           0x0
/*00000000c4a4*/ s_nop           0x0
/*00000000c4a8*/ s_nop           0x0
/*00000000c4ac*/ s_nop           0x0
/*00000000c4b0*/ s_nop           0x0
/*00000000c4b4*/ s_nop           0x0
/*00000000c4b8*/ s_nop           0x0
/*00000000c4bc*/ s_nop           0x0
/*00000000c4c0*/ s_nop           0x0
/*00000000c4c4*/ s_nop           0x0
/*00000000c4c8*/ s_nop           0x0
/*00000000c4cc*/ s_nop           0x0
/*00000000c4d0*/ s_nop           0x0
/*00000000c4d4*/ s_nop           0x0
/*00000000c4d8*/ s_nop           0x0
/*00000000c4dc*/ s_nop           0x0
/*00000000c4e0*/ s_nop           0x0
/*00000000c4e4*/ s_nop           0x0
/*00000000c4e8*/ s_nop           0x0
/*00000000c4ec*/ s_nop           0x0
/*00000000c4f0*/ s_nop           0x0
/*00000000c4f4*/ s_nop           0x0
/*00000000c4f8*/ s_nop           0x0
/*00000000c4fc*/ s_nop           0x0
add_get_local_id_8_8:
.skip 256
/*00000000c600*/ s_clause        0x1
/*00000000c604*/ s_load_dword    s2, s[4:5], 0x10
/*00000000c60c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000c614*/ s_lshl_b32      s3, s6, 3
/*00000000c618*/ v_mov_b32       v3, 0
/*00000000c61c*/ v_add_nc_u32    v7, v1, v0
/*00000000c620*/ s_waitcnt       lgkmcnt(0)
/*00000000c624*/ v_add3_u32      v2, s2, s3, v0
/*00000000c62c*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*00000000c634*/ v_add_co_u32    v0, vcc, s0, v2
/*00000000c63c*/ v_add_co_ci_u32 v1, vcc, s1, v3, vcc
/*00000000c640*/ global_store_dword v[0:1], v7, off
/*00000000c648*/ s_endpgm
/*00000000c64c*/ s_nop           0x0
/*00000000c650*/ s_nop           0x0
/*00000000c654*/ s_nop           0x0
/*00000000c658*/ s_nop           0x0
/*00000000c65c*/ s_nop           0x0
/*00000000c660*/ s_nop           0x0
/*00000000c664*/ s_nop           0x0
/*00000000c668*/ s_nop           0x0
/*00000000c66c*/ s_nop           0x0
/*00000000c670*/ s_nop           0x0
/*00000000c674*/ s_nop           0x0
/*00000000c678*/ s_nop           0x0
/*00000000c67c*/ s_nop           0x0
/*00000000c680*/ s_nop           0x0
/*00000000c684*/ s_nop           0x0
/*00000000c688*/ s_nop           0x0
/*00000000c68c*/ s_nop           0x0
/*00000000c690*/ s_nop           0x0
/*00000000c694*/ s_nop           0x0
/*00000000c698*/ s_nop           0x0
/*00000000c69c*/ s_nop           0x0
/*00000000c6a0*/ s_nop           0x0
/*00000000c6a4*/ s_nop           0x0
/*00000000c6a8*/ s_nop           0x0
/*00000000c6ac*/ s_nop           0x0
/*00000000c6b0*/ s_nop           0x0
/*00000000c6b4*/ s_nop           0x0
/*00000000c6b8*/ s_nop           0x0
/*00000000c6bc*/ s_nop           0x0
/*00000000c6c0*/ s_nop           0x0
/*00000000c6c4*/ s_nop           0x0
/*00000000c6c8*/ s_nop           0x0
/*00000000c6cc*/ s_nop           0x0
/*00000000c6d0*/ s_nop           0x0
/*00000000c6d4*/ s_nop           0x0
/*00000000c6d8*/ s_nop           0x0
/*00000000c6dc*/ s_nop           0x0
/*00000000c6e0*/ s_nop           0x0
/*00000000c6e4*/ s_nop           0x0
/*00000000c6e8*/ s_nop           0x0
/*00000000c6ec*/ s_nop           0x0
/*00000000c6f0*/ s_nop           0x0
/*00000000c6f4*/ s_nop           0x0
/*00000000c6f8*/ s_nop           0x0
/*00000000c6fc*/ s_nop           0x0
add_get_group_id_8_8:
.skip 256
/*00000000c800*/ s_clause        0x1
/*00000000c804*/ s_load_dword    s2, s[4:5], 0x10
/*00000000c80c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000c814*/ s_lshl_b32      s3, s6, 3
/*00000000c818*/ v_mov_b32       v1, 0
/*00000000c81c*/ s_waitcnt       lgkmcnt(0)
/*00000000c820*/ v_add3_u32      v0, s2, s3, v0
/*00000000c828*/ s_add_i32       s2, s7, s6
/*00000000c82c*/ v_mov_b32       v2, s2
/*00000000c830*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c838*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000c840*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000c844*/ global_store_dword v[0:1], v2, off
/*00000000c84c*/ s_endpgm
/*00000000c850*/ s_nop           0x0
/*00000000c854*/ s_nop           0x0
/*00000000c858*/ s_nop           0x0
/*00000000c85c*/ s_nop           0x0
/*00000000c860*/ s_nop           0x0
/*00000000c864*/ s_nop           0x0
/*00000000c868*/ s_nop           0x0
/*00000000c86c*/ s_nop           0x0
/*00000000c870*/ s_nop           0x0
/*00000000c874*/ s_nop           0x0
/*00000000c878*/ s_nop           0x0
/*00000000c87c*/ s_nop           0x0
/*00000000c880*/ s_nop           0x0
/*00000000c884*/ s_nop           0x0
/*00000000c888*/ s_nop           0x0
/*00000000c88c*/ s_nop           0x0
/*00000000c890*/ s_nop           0x0
/*00000000c894*/ s_nop           0x0
/*00000000c898*/ s_nop           0x0
/*00000000c89c*/ s_nop           0x0
/*00000000c8a0*/ s_nop           0x0
/*00000000c8a4*/ s_nop           0x0
/*00000000c8a8*/ s_nop           0x0
/*00000000c8ac*/ s_nop           0x0
/*00000000c8b0*/ s_nop           0x0
/*00000000c8b4*/ s_nop           0x0
/*00000000c8b8*/ s_nop           0x0
/*00000000c8bc*/ s_nop           0x0
/*00000000c8c0*/ s_nop           0x0
/*00000000c8c4*/ s_nop           0x0
/*00000000c8c8*/ s_nop           0x0
/*00000000c8cc*/ s_nop           0x0
/*00000000c8d0*/ s_nop           0x0
/*00000000c8d4*/ s_nop           0x0
/*00000000c8d8*/ s_nop           0x0
/*00000000c8dc*/ s_nop           0x0
/*00000000c8e0*/ s_nop           0x0
/*00000000c8e4*/ s_nop           0x0
/*00000000c8e8*/ s_nop           0x0
/*00000000c8ec*/ s_nop           0x0
/*00000000c8f0*/ s_nop           0x0
/*00000000c8f4*/ s_nop           0x0
/*00000000c8f8*/ s_nop           0x0
/*00000000c8fc*/ s_nop           0x0
add_get_local_size_8_8:
.skip 256
/*00000000ca00*/ s_clause        0x1
/*00000000ca04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000ca0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000ca14*/ s_lshl_b32      s3, s6, 3
/*00000000ca18*/ v_mov_b32       v1, 0
/*00000000ca1c*/ v_mov_b32       v2, 16
/*00000000ca20*/ s_waitcnt       lgkmcnt(0)
/*00000000ca24*/ v_add3_u32      v0, s2, s3, v0
/*00000000ca2c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000ca34*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000ca3c*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000ca40*/ global_store_dword v[0:1], v2, off
/*00000000ca48*/ s_endpgm
/*00000000ca4c*/ s_nop           0x0
/*00000000ca50*/ s_nop           0x0
/*00000000ca54*/ s_nop           0x0
/*00000000ca58*/ s_nop           0x0
/*00000000ca5c*/ s_nop           0x0
/*00000000ca60*/ s_nop           0x0
/*00000000ca64*/ s_nop           0x0
/*00000000ca68*/ s_nop           0x0
/*00000000ca6c*/ s_nop           0x0
/*00000000ca70*/ s_nop           0x0
/*00000000ca74*/ s_nop           0x0
/*00000000ca78*/ s_nop           0x0
/*00000000ca7c*/ s_nop           0x0
/*00000000ca80*/ s_nop           0x0
/*00000000ca84*/ s_nop           0x0
/*00000000ca88*/ s_nop           0x0
/*00000000ca8c*/ s_nop           0x0
/*00000000ca90*/ s_nop           0x0
/*00000000ca94*/ s_nop           0x0
/*00000000ca98*/ s_nop           0x0
/*00000000ca9c*/ s_nop           0x0
/*00000000caa0*/ s_nop           0x0
/*00000000caa4*/ s_nop           0x0
/*00000000caa8*/ s_nop           0x0
/*00000000caac*/ s_nop           0x0
/*00000000cab0*/ s_nop           0x0
/*00000000cab4*/ s_nop           0x0
/*00000000cab8*/ s_nop           0x0
/*00000000cabc*/ s_nop           0x0
/*00000000cac0*/ s_nop           0x0
/*00000000cac4*/ s_nop           0x0
/*00000000cac8*/ s_nop           0x0
/*00000000cacc*/ s_nop           0x0
/*00000000cad0*/ s_nop           0x0
/*00000000cad4*/ s_nop           0x0
/*00000000cad8*/ s_nop           0x0
/*00000000cadc*/ s_nop           0x0
/*00000000cae0*/ s_nop           0x0
/*00000000cae4*/ s_nop           0x0
/*00000000cae8*/ s_nop           0x0
/*00000000caec*/ s_nop           0x0
/*00000000caf0*/ s_nop           0x0
/*00000000caf4*/ s_nop           0x0
/*00000000caf8*/ s_nop           0x0
/*00000000cafc*/ s_nop           0x0
add_get_global_id_8_8:
.skip 256
/*00000000cc00*/ s_clause        0x1
/*00000000cc04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000cc0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000cc14*/ v_lshl_or_b32   v0, s6, 3, v0
/*00000000cc1c*/ v_mov_b32       v3, 0
/*00000000cc20*/ s_waitcnt       lgkmcnt(0)
/*00000000cc24*/ v_add_nc_u32    v2, s0, v0
/*00000000cc28*/ s_lshl_b32      s0, s7, 3
/*00000000cc2c*/ s_add_i32       s0, s2, s0
/*00000000cc30*/ v_lshlrev_b64   v[3:4], 2, v[2:3]
/*00000000cc38*/ v_add3_u32      v2, s0, v1, v2
/*00000000cc40*/ v_add_co_u32    v0, vcc, s4, v3
/*00000000cc48*/ v_add_co_ci_u32 v1, vcc, s5, v4, vcc
/*00000000cc4c*/ global_store_dword v[0:1], v2, off
/*00000000cc54*/ s_endpgm
/*00000000cc58*/ s_nop           0x0
/*00000000cc5c*/ s_nop           0x0
/*00000000cc60*/ s_nop           0x0
/*00000000cc64*/ s_nop           0x0
/*00000000cc68*/ s_nop           0x0
/*00000000cc6c*/ s_nop           0x0
/*00000000cc70*/ s_nop           0x0
/*00000000cc74*/ s_nop           0x0
/*00000000cc78*/ s_nop           0x0
/*00000000cc7c*/ s_nop           0x0
/*00000000cc80*/ s_nop           0x0
/*00000000cc84*/ s_nop           0x0
/*00000000cc88*/ s_nop           0x0
/*00000000cc8c*/ s_nop           0x0
/*00000000cc90*/ s_nop           0x0
/*00000000cc94*/ s_nop           0x0
/*00000000cc98*/ s_nop           0x0
/*00000000cc9c*/ s_nop           0x0
/*00000000cca0*/ s_nop           0x0
/*00000000cca4*/ s_nop           0x0
/*00000000cca8*/ s_nop           0x0
/*00000000ccac*/ s_nop           0x0
/*00000000ccb0*/ s_nop           0x0
/*00000000ccb4*/ s_nop           0x0
/*00000000ccb8*/ s_nop           0x0
/*00000000ccbc*/ s_nop           0x0
/*00000000ccc0*/ s_nop           0x0
/*00000000ccc4*/ s_nop           0x0
/*00000000ccc8*/ s_nop           0x0
/*00000000cccc*/ s_nop           0x0
/*00000000ccd0*/ s_nop           0x0
/*00000000ccd4*/ s_nop           0x0
/*00000000ccd8*/ s_nop           0x0
/*00000000ccdc*/ s_nop           0x0
/*00000000cce0*/ s_nop           0x0
/*00000000cce4*/ s_nop           0x0
/*00000000cce8*/ s_nop           0x0
/*00000000ccec*/ s_nop           0x0
/*00000000ccf0*/ s_nop           0x0
/*00000000ccf4*/ s_nop           0x0
/*00000000ccf8*/ s_nop           0x0
/*00000000ccfc*/ s_nop           0x0
add_get_global_size_8_8:
.skip 256
/*00000000ce00*/ s_load_dword    s9, s[6:7], 0x10
/*00000000ce08*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000000ce10*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000000ce18*/ s_lshl_b32      s4, s8, 3
/*00000000ce1c*/ v_mov_b32       v1, 0
/*00000000ce20*/ s_waitcnt       lgkmcnt(0)
/*00000000ce24*/ v_add3_u32      v0, s9, s4, v0
/*00000000ce2c*/ s_add_i32       s0, s1, s0
/*00000000ce30*/ v_mov_b32       v2, s0
/*00000000ce34*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000ce3c*/ v_add_co_u32    v0, vcc, s2, v0
/*00000000ce44*/ v_add_co_ci_u32 v1, vcc, s3, v1, vcc
/*00000000ce48*/ global_store_dword v[0:1], v2, off
/*00000000ce50*/ s_endpgm
/*00000000ce54*/ s_nop           0x0
/*00000000ce58*/ s_nop           0x0
/*00000000ce5c*/ s_nop           0x0
/*00000000ce60*/ s_nop           0x0
/*00000000ce64*/ s_nop           0x0
/*00000000ce68*/ s_nop           0x0
/*00000000ce6c*/ s_nop           0x0
/*00000000ce70*/ s_nop           0x0
/*00000000ce74*/ s_nop           0x0
/*00000000ce78*/ s_nop           0x0
/*00000000ce7c*/ s_nop           0x0
/*00000000ce80*/ s_nop           0x0
/*00000000ce84*/ s_nop           0x0
/*00000000ce88*/ s_nop           0x0
/*00000000ce8c*/ s_nop           0x0
/*00000000ce90*/ s_nop           0x0
/*00000000ce94*/ s_nop           0x0
/*00000000ce98*/ s_nop           0x0
/*00000000ce9c*/ s_nop           0x0
/*00000000cea0*/ s_nop           0x0
/*00000000cea4*/ s_nop           0x0
/*00000000cea8*/ s_nop           0x0
/*00000000ceac*/ s_nop           0x0
/*00000000ceb0*/ s_nop           0x0
/*00000000ceb4*/ s_nop           0x0
/*00000000ceb8*/ s_nop           0x0
/*00000000cebc*/ s_nop           0x0
/*00000000cec0*/ s_nop           0x0
/*00000000cec4*/ s_nop           0x0
/*00000000cec8*/ s_nop           0x0
/*00000000cecc*/ s_nop           0x0
/*00000000ced0*/ s_nop           0x0
/*00000000ced4*/ s_nop           0x0
/*00000000ced8*/ s_nop           0x0
/*00000000cedc*/ s_nop           0x0
/*00000000cee0*/ s_nop           0x0
/*00000000cee4*/ s_nop           0x0
/*00000000cee8*/ s_nop           0x0
/*00000000ceec*/ s_nop           0x0
/*00000000cef0*/ s_nop           0x0
/*00000000cef4*/ s_nop           0x0
/*00000000cef8*/ s_nop           0x0
/*00000000cefc*/ s_nop           0x0
add_get_num_groups_8_8:
.skip 256
/*00000000d000*/ s_load_dword    s9, s[6:7], 0x10
/*00000000d008*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000000d010*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000000d018*/ s_lshl_b32      s4, s8, 3
/*00000000d01c*/ v_mov_b32       v1, 0
/*00000000d020*/ s_waitcnt       lgkmcnt(0)
/*00000000d024*/ v_add3_u32      v0, s9, s4, v0
/*00000000d02c*/ s_and_b32       s5, s0, -8
/*00000000d030*/ s_lshr_b32      s4, s0, 3
/*00000000d034*/ v_cmp_gt_u32    s[0:1], s0, s5
/*00000000d03c*/ s_and_b32       s7, s1, -8
/*00000000d040*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000d048*/ v_cmp_gt_u32    vcc, s1, s7
/*00000000d050*/ s_lshr_b32      s6, s1, 3
/*00000000d054*/ v_cndmask_b32   v2, 0, 1, s[0:1]
/*00000000d05c*/ s_add_i32       s6, s6, s4
/*00000000d060*/ v_add_co_ci_u32 v2, vcc, s6, v2, vcc
/*00000000d064*/ v_add_co_u32    v0, vcc, s2, v0
/*00000000d06c*/ v_add_co_ci_u32 v1, vcc, s3, v1, vcc
/*00000000d070*/ global_store_dword v[0:1], v2, off
/*00000000d078*/ s_endpgm
/*00000000d07c*/ s_nop           0x0
/*00000000d080*/ s_nop           0x0
/*00000000d084*/ s_nop           0x0
/*00000000d088*/ s_nop           0x0
/*00000000d08c*/ s_nop           0x0
/*00000000d090*/ s_nop           0x0
/*00000000d094*/ s_nop           0x0
/*00000000d098*/ s_nop           0x0
/*00000000d09c*/ s_nop           0x0
/*00000000d0a0*/ s_nop           0x0
/*00000000d0a4*/ s_nop           0x0
/*00000000d0a8*/ s_nop           0x0
/*00000000d0ac*/ s_nop           0x0
/*00000000d0b0*/ s_nop           0x0
/*00000000d0b4*/ s_nop           0x0
/*00000000d0b8*/ s_nop           0x0
/*00000000d0bc*/ s_nop           0x0
/*00000000d0c0*/ s_nop           0x0
/*00000000d0c4*/ s_nop           0x0
/*00000000d0c8*/ s_nop           0x0
/*00000000d0cc*/ s_nop           0x0
/*00000000d0d0*/ s_nop           0x0
/*00000000d0d4*/ s_nop           0x0
/*00000000d0d8*/ s_nop           0x0
/*00000000d0dc*/ s_nop           0x0
/*00000000d0e0*/ s_nop           0x0
/*00000000d0e4*/ s_nop           0x0
/*00000000d0e8*/ s_nop           0x0
/*00000000d0ec*/ s_nop           0x0
/*00000000d0f0*/ s_nop           0x0
/*00000000d0f4*/ s_nop           0x0
/*00000000d0f8*/ s_nop           0x0
/*00000000d0fc*/ s_nop           0x0
add_get_work_dim_8_8:
.skip 256
/*00000000d200*/ v_mov_b32       v2, s4
/*00000000d204*/ v_mov_b32       v3, s5
/*00000000d208*/ s_clause        0x1
/*00000000d20c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000d214*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000d21c*/ s_waitcnt       lgkmcnt(0)
/*00000000d220*/ s_lshl_b32      s1, s8, 3
/*00000000d224*/ global_load_ushort v4, v[2:3], off inst_offset:2
/*00000000d22c*/ v_mov_b32       v3, 0
/*00000000d230*/ v_add3_u32      v2, s0, s1, v0
/*00000000d238*/ s_lshl_b32      s0, s9, 3
/*00000000d23c*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*00000000d244*/ s_waitcnt       vmcnt(0)
/*00000000d248*/ v_add_nc_u32    v0, s2, v4
/*00000000d24c*/ v_add3_u32      v7, v0, s0, v1
/*00000000d254*/ v_add_co_u32    v0, vcc, s4, v2
/*00000000d25c*/ v_add_co_ci_u32 v1, vcc, s5, v3, vcc
/*00000000d260*/ global_store_dword v[0:1], v7, off
/*00000000d268*/ s_endpgm
/*00000000d26c*/ s_nop           0x0
/*00000000d270*/ s_nop           0x0
/*00000000d274*/ s_nop           0x0
/*00000000d278*/ s_nop           0x0
/*00000000d27c*/ s_nop           0x0
/*00000000d280*/ s_nop           0x0
/*00000000d284*/ s_nop           0x0
/*00000000d288*/ s_nop           0x0
/*00000000d28c*/ s_nop           0x0
/*00000000d290*/ s_nop           0x0
/*00000000d294*/ s_nop           0x0
/*00000000d298*/ s_nop           0x0
/*00000000d29c*/ s_nop           0x0
/*00000000d2a0*/ s_nop           0x0
/*00000000d2a4*/ s_nop           0x0
/*00000000d2a8*/ s_nop           0x0
/*00000000d2ac*/ s_nop           0x0
/*00000000d2b0*/ s_nop           0x0
/*00000000d2b4*/ s_nop           0x0
/*00000000d2b8*/ s_nop           0x0
/*00000000d2bc*/ s_nop           0x0
/*00000000d2c0*/ s_nop           0x0
/*00000000d2c4*/ s_nop           0x0
/*00000000d2c8*/ s_nop           0x0
/*00000000d2cc*/ s_nop           0x0
/*00000000d2d0*/ s_nop           0x0
/*00000000d2d4*/ s_nop           0x0
/*00000000d2d8*/ s_nop           0x0
/*00000000d2dc*/ s_nop           0x0
/*00000000d2e0*/ s_nop           0x0
/*00000000d2e4*/ s_nop           0x0
/*00000000d2e8*/ s_nop           0x0
/*00000000d2ec*/ s_nop           0x0
/*00000000d2f0*/ s_nop           0x0
/*00000000d2f4*/ s_nop           0x0
/*00000000d2f8*/ s_nop           0x0
/*00000000d2fc*/ s_nop           0x0
add_long_x_x:
.skip 256
/*00000000d400*/ s_clause        0x2
/*00000000d404*/ s_load_dword    s2, s[4:5], 0x10
/*00000000d40c*/ s_load_dword    s3, s[4:5], 0x8
/*00000000d414*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000000d41c*/ s_lshl_b32      s4, s6, 6
/*00000000d420*/ v_mov_b32       v1, 0
/*00000000d424*/ s_waitcnt       lgkmcnt(0)
/*00000000d428*/ v_add3_u32      v0, s2, s4, v0
/*00000000d430*/ s_lshl_b32      s2, s3, 1
/*00000000d434*/ s_ashr_i32      s3, s2, 31
/*00000000d438*/ v_mov_b32       v2, s2
/*00000000d43c*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*00000000d444*/ v_mov_b32       v3, s3
/*00000000d448*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000d450*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000d454*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000d45c*/ s_endpgm
/*00000000d460*/ s_nop           0x0
/*00000000d464*/ s_nop           0x0
/*00000000d468*/ s_nop           0x0
/*00000000d46c*/ s_nop           0x0
/*00000000d470*/ s_nop           0x0
/*00000000d474*/ s_nop           0x0
/*00000000d478*/ s_nop           0x0
/*00000000d47c*/ s_nop           0x0
/*00000000d480*/ s_nop           0x0
/*00000000d484*/ s_nop           0x0
/*00000000d488*/ s_nop           0x0
/*00000000d48c*/ s_nop           0x0
/*00000000d490*/ s_nop           0x0
/*00000000d494*/ s_nop           0x0
/*00000000d498*/ s_nop           0x0
/*00000000d49c*/ s_nop           0x0
/*00000000d4a0*/ s_nop           0x0
/*00000000d4a4*/ s_nop           0x0
/*00000000d4a8*/ s_nop           0x0
/*00000000d4ac*/ s_nop           0x0
/*00000000d4b0*/ s_nop           0x0
/*00000000d4b4*/ s_nop           0x0
/*00000000d4b8*/ s_nop           0x0
/*00000000d4bc*/ s_nop           0x0
/*00000000d4c0*/ s_nop           0x0
/*00000000d4c4*/ s_nop           0x0
/*00000000d4c8*/ s_nop           0x0
/*00000000d4cc*/ s_nop           0x0
/*00000000d4d0*/ s_nop           0x0
/*00000000d4d4*/ s_nop           0x0
/*00000000d4d8*/ s_nop           0x0
/*00000000d4dc*/ s_nop           0x0
/*00000000d4e0*/ s_nop           0x0
/*00000000d4e4*/ s_nop           0x0
/*00000000d4e8*/ s_nop           0x0
/*00000000d4ec*/ s_nop           0x0
/*00000000d4f0*/ s_nop           0x0
/*00000000d4f4*/ s_nop           0x0
/*00000000d4f8*/ s_nop           0x0
/*00000000d4fc*/ s_nop           0x0
add_long_get_global_offset_x:
.skip 256
/*00000000d600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000d608*/ s_waitcnt       lgkmcnt(0)
/*00000000d60c*/ s_clause        0x2
/*00000000d610*/ s_load_dword    s1, s[4:5], 0x20
/*00000000d618*/ s_load_dword    s3, s[4:5], 0x0
/*00000000d620*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000d628*/ v_mov_b32       v3, 0
/*00000000d62c*/ s_lshl_b32      s6, s6, 1
/*00000000d630*/ s_lshl_b32      s7, s7, 4
/*00000000d634*/ s_lshl_b32      s8, s8, 1
/*00000000d638*/ v_mov_b32       v5, v3
/*00000000d63c*/ v_mov_b32       v7, v3
/*00000000d640*/ v_mov_b32       v9, v3
/*00000000d644*/ s_waitcnt       lgkmcnt(0)
/*00000000d648*/ v_add3_u32      v8, s1, s8, v2
/*00000000d650*/ v_add3_u32      v4, s0, s6, v0
/*00000000d658*/ v_add3_u32      v6, s2, s7, v1
/*00000000d660*/ s_add_i32       s0, s0, s3
/*00000000d664*/ s_add_i32       s2, s2, s3
/*00000000d668*/ v_mov_b32       v2, s0
/*00000000d66c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000d674*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000d67c*/ s_add_i32       s1, s1, s3
/*00000000d680*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d688*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d68c*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000d694*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000d698*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000d6a0*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000d6a8*/ v_mov_b32       v2, s2
/*00000000d6ac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d6b4*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000d6bc*/ v_mov_b32       v2, s1
/*00000000d6c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d6c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000d6cc*/ s_endpgm
/*00000000d6d0*/ s_nop           0x0
/*00000000d6d4*/ s_nop           0x0
/*00000000d6d8*/ s_nop           0x0
/*00000000d6dc*/ s_nop           0x0
/*00000000d6e0*/ s_nop           0x0
/*00000000d6e4*/ s_nop           0x0
/*00000000d6e8*/ s_nop           0x0
/*00000000d6ec*/ s_nop           0x0
/*00000000d6f0*/ s_nop           0x0
/*00000000d6f4*/ s_nop           0x0
/*00000000d6f8*/ s_nop           0x0
/*00000000d6fc*/ s_nop           0x0
add_long_get_local_id_x:
.skip 256
/*00000000d800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000d808*/ s_waitcnt       lgkmcnt(0)
/*00000000d80c*/ s_clause        0x2
/*00000000d810*/ s_load_dword    s1, s[4:5], 0x20
/*00000000d818*/ s_load_dword    s3, s[4:5], 0x0
/*00000000d820*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000d828*/ v_mov_b32       v15, 0
/*00000000d82c*/ s_lshl_b32      s6, s6, 3
/*00000000d830*/ v_mov_b32       v6, v15
/*00000000d834*/ v_mov_b32       v8, v15
/*00000000d838*/ v_mov_b32       v10, v15
/*00000000d83c*/ v_add3_u32      v5, s0, s6, v0
/*00000000d844*/ s_lshl_b32      s0, s7, 2
/*00000000d848*/ s_lshl_b32      s6, s8, 1
/*00000000d84c*/ v_add3_u32      v7, s2, s0, v1
/*00000000d854*/ s_waitcnt       lgkmcnt(0)
/*00000000d858*/ v_add3_u32      v9, s1, s6, v2
/*00000000d860*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000d868*/ v_add_nc_u32    v14, s3, v0
/*00000000d86c*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000d874*/ v_add_co_u32    v4, vcc, s4, v5
/*00000000d87c*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000d880*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000d888*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*00000000d88c*/ global_store_dwordx2 v[4:5], v[14:15], off
/*00000000d894*/ v_add_nc_u32    v14, s3, v1
/*00000000d898*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*00000000d8a0*/ global_store_dwordx2 v[7:8], v[14:15], off
/*00000000d8a8*/ v_add_nc_u32    v14, s3, v2
/*00000000d8ac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d8b4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d8b8*/ global_store_dwordx2 v[0:1], v[14:15], off
/*00000000d8c0*/ s_endpgm
/*00000000d8c4*/ s_nop           0x0
/*00000000d8c8*/ s_nop           0x0
/*00000000d8cc*/ s_nop           0x0
/*00000000d8d0*/ s_nop           0x0
/*00000000d8d4*/ s_nop           0x0
/*00000000d8d8*/ s_nop           0x0
/*00000000d8dc*/ s_nop           0x0
/*00000000d8e0*/ s_nop           0x0
/*00000000d8e4*/ s_nop           0x0
/*00000000d8e8*/ s_nop           0x0
/*00000000d8ec*/ s_nop           0x0
/*00000000d8f0*/ s_nop           0x0
/*00000000d8f4*/ s_nop           0x0
/*00000000d8f8*/ s_nop           0x0
/*00000000d8fc*/ s_nop           0x0
add_long_get_group_id_x:
.skip 256
/*00000000da00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000da08*/ s_waitcnt       lgkmcnt(0)
/*00000000da0c*/ s_clause        0x2
/*00000000da10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000da18*/ s_load_dword    s3, s[4:5], 0x0
/*00000000da20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000da28*/ v_mov_b32       v3, 0
/*00000000da2c*/ s_lshl_b32      s9, s6, 1
/*00000000da30*/ s_lshl_b32      s10, s7, 4
/*00000000da34*/ s_lshl_b32      s11, s8, 1
/*00000000da38*/ v_mov_b32       v5, v3
/*00000000da3c*/ v_mov_b32       v7, v3
/*00000000da40*/ v_mov_b32       v9, v3
/*00000000da44*/ s_waitcnt       lgkmcnt(0)
/*00000000da48*/ v_add3_u32      v8, s1, s11, v2
/*00000000da50*/ v_add3_u32      v4, s0, s9, v0
/*00000000da58*/ v_add3_u32      v6, s2, s10, v1
/*00000000da60*/ s_add_i32       s6, s6, s3
/*00000000da64*/ s_add_i32       s7, s7, s3
/*00000000da68*/ v_mov_b32       v2, s6
/*00000000da6c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000da74*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000da7c*/ s_add_i32       s8, s8, s3
/*00000000da80*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000da88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000da8c*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000da94*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000da98*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000daa0*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000daa8*/ v_mov_b32       v2, s7
/*00000000daac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000dab4*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000dabc*/ v_mov_b32       v2, s8
/*00000000dac0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000dac4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000dacc*/ s_endpgm
/*00000000dad0*/ s_nop           0x0
/*00000000dad4*/ s_nop           0x0
/*00000000dad8*/ s_nop           0x0
/*00000000dadc*/ s_nop           0x0
/*00000000dae0*/ s_nop           0x0
/*00000000dae4*/ s_nop           0x0
/*00000000dae8*/ s_nop           0x0
/*00000000daec*/ s_nop           0x0
/*00000000daf0*/ s_nop           0x0
/*00000000daf4*/ s_nop           0x0
/*00000000daf8*/ s_nop           0x0
/*00000000dafc*/ s_nop           0x0
add_long_get_local_size_x:
.skip 256
/*00000000dc00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000dc08*/ s_waitcnt       lgkmcnt(0)
/*00000000dc0c*/ s_clause        0x2
/*00000000dc10*/ s_load_dword    s3, s[4:5], 0x20
/*00000000dc18*/ s_load_dword    s9, s[4:5], 0x0
/*00000000dc20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000dc28*/ v_mov_b32       v4, 0
/*00000000dc2c*/ s_lshl_b32      s6, s6, 1
/*00000000dc30*/ s_lshl_b32      s7, s7, 1
/*00000000dc34*/ s_lshl_b32      s8, s8, 2
/*00000000dc38*/ s_mov_b32       s1, 0
/*00000000dc3c*/ v_mov_b32       v6, v4
/*00000000dc40*/ v_mov_b32       v8, v4
/*00000000dc44*/ s_waitcnt       lgkmcnt(0)
/*00000000dc48*/ v_add3_u32      v7, s3, s8, v2
/*00000000dc50*/ v_add3_u32      v3, s0, s6, v0
/*00000000dc58*/ v_add3_u32      v5, s2, s7, v1
/*00000000dc60*/ s_add_i32       s0, s9, 2
/*00000000dc64*/ v_mov_b32       v10, s1
/*00000000dc68*/ s_add_i32       s9, s9, 4
/*00000000dc6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000dc74*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000dc7c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*00000000dc84*/ v_mov_b32       v9, s0
/*00000000dc88*/ v_add_co_u32    v11, vcc, s4, v0
/*00000000dc90*/ v_add_co_ci_u32 v12, vcc, s5, v1, vcc
/*00000000dc94*/ v_add_co_u32    v7, vcc, s4, v2
/*00000000dc9c*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*00000000dca0*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000dca8*/ v_mov_b32       v3, s9
/*00000000dcac*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000dcb0*/ global_store_dwordx2 v[11:12], v[9:10], off
/*00000000dcb8*/ global_store_dwordx2 v[7:8], v[9:10], off
/*00000000dcc0*/ global_store_dwordx2 v[5:6], v[3:4], off
/*00000000dcc8*/ s_endpgm
/*00000000dccc*/ s_nop           0x0
/*00000000dcd0*/ s_nop           0x0
/*00000000dcd4*/ s_nop           0x0
/*00000000dcd8*/ s_nop           0x0
/*00000000dcdc*/ s_nop           0x0
/*00000000dce0*/ s_nop           0x0
/*00000000dce4*/ s_nop           0x0
/*00000000dce8*/ s_nop           0x0
/*00000000dcec*/ s_nop           0x0
/*00000000dcf0*/ s_nop           0x0
/*00000000dcf4*/ s_nop           0x0
/*00000000dcf8*/ s_nop           0x0
/*00000000dcfc*/ s_nop           0x0
add_long_get_global_id_x:
.skip 256
/*00000000de00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000de08*/ s_waitcnt       lgkmcnt(0)
/*00000000de0c*/ s_clause        0x2
/*00000000de10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000de18*/ s_load_dword    s3, s[4:5], 0x0
/*00000000de20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000de28*/ v_mov_b32       v4, 0
/*00000000de2c*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000de34*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000000de3c*/ v_lshl_or_b32   v0, s8, 2, v2
/*00000000de44*/ v_mov_b32       v6, v4
/*00000000de48*/ v_mov_b32       v10, v4
/*00000000de4c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*00000000de54*/ v_mov_b32       v1, v4
/*00000000de58*/ s_waitcnt       lgkmcnt(0)
/*00000000de5c*/ v_add_nc_u32    v9, s1, v0
/*00000000de60*/ v_add_nc_u32    v5, s2, v5
/*00000000de64*/ v_add3_u32      v0, s0, s3, v3
/*00000000de6c*/ v_lshlrev_b64   v[13:14], 3, v[9:10]
/*00000000de74*/ v_lshlrev_b64   v[11:12], 3, v[5:6]
/*00000000de7c*/ v_add_co_u32    v6, vcc, s4, v7
/*00000000de84*/ v_add_nc_u32    v3, s3, v5
/*00000000de88*/ v_add_co_ci_u32 v7, vcc, s5, v8, vcc
/*00000000de8c*/ v_add_co_u32    v17, vcc, s4, v11
/*00000000de94*/ v_add_co_ci_u32 v18, vcc, s5, v12, vcc
/*00000000de98*/ global_store_dwordx2 v[6:7], v[0:1], off
/*00000000dea0*/ global_store_dwordx2 v[17:18], v[3:4], off
/*00000000dea8*/ v_add_co_u32    v1, vcc, s4, v13
/*00000000deb0*/ v_add_nc_u32    v3, s3, v9
/*00000000deb4*/ v_add_co_ci_u32 v2, vcc, s5, v14, vcc
/*00000000deb8*/ global_store_dwordx2 v[1:2], v[3:4], off
/*00000000dec0*/ s_endpgm
/*00000000dec4*/ s_nop           0x0
/*00000000dec8*/ s_nop           0x0
/*00000000decc*/ s_nop           0x0
/*00000000ded0*/ s_nop           0x0
/*00000000ded4*/ s_nop           0x0
/*00000000ded8*/ s_nop           0x0
/*00000000dedc*/ s_nop           0x0
/*00000000dee0*/ s_nop           0x0
/*00000000dee4*/ s_nop           0x0
/*00000000dee8*/ s_nop           0x0
/*00000000deec*/ s_nop           0x0
/*00000000def0*/ s_nop           0x0
/*00000000def4*/ s_nop           0x0
/*00000000def8*/ s_nop           0x0
/*00000000defc*/ s_nop           0x0
add_long_get_global_size_x:
.skip 256
/*00000000e000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000e008*/ s_waitcnt       lgkmcnt(0)
/*00000000e00c*/ s_clause        0x1
/*00000000e010*/ s_load_dword    s1, s[6:7], 0x20
/*00000000e018*/ s_load_dword    s3, s[6:7], 0x8
/*00000000e020*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000e028*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000000e030*/ v_mov_b32       v3, 0
/*00000000e034*/ s_lshl_b32      s6, s8, 4
/*00000000e038*/ s_lshl_b32      s7, s9, 1
/*00000000e03c*/ s_lshl_b32      s8, s10, 1
/*00000000e040*/ v_mov_b32       v5, v3
/*00000000e044*/ v_mov_b32       v7, v3
/*00000000e048*/ v_mov_b32       v9, v3
/*00000000e04c*/ s_waitcnt       lgkmcnt(0)
/*00000000e050*/ v_add3_u32      v8, s1, s8, v2
/*00000000e058*/ v_add3_u32      v4, s0, s6, v0
/*00000000e060*/ v_add3_u32      v6, s2, s7, v1
/*00000000e068*/ s_add_i32       s0, s12, s3
/*00000000e06c*/ s_add_i32       s1, s13, s3
/*00000000e070*/ v_mov_b32       v2, s0
/*00000000e074*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000e07c*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000e084*/ s_add_i32       s0, s14, s3
/*00000000e088*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e090*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e094*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000e09c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000e0a0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e0a8*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000e0b0*/ v_mov_b32       v2, s1
/*00000000e0b4*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e0bc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000e0c4*/ v_mov_b32       v2, s0
/*00000000e0c8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e0cc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e0d4*/ s_endpgm
/*00000000e0d8*/ s_nop           0x0
/*00000000e0dc*/ s_nop           0x0
/*00000000e0e0*/ s_nop           0x0
/*00000000e0e4*/ s_nop           0x0
/*00000000e0e8*/ s_nop           0x0
/*00000000e0ec*/ s_nop           0x0
/*00000000e0f0*/ s_nop           0x0
/*00000000e0f4*/ s_nop           0x0
/*00000000e0f8*/ s_nop           0x0
/*00000000e0fc*/ s_nop           0x0
add_long_get_num_groups_x:
.skip 256
/*00000000e200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000e208*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000e210*/ s_waitcnt       lgkmcnt(0)
/*00000000e214*/ s_clause        0x2
/*00000000e218*/ s_load_dword    s1, s[6:7], 0x20
/*00000000e220*/ s_load_dword    s3, s[6:7], 0x0
/*00000000e228*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000e230*/ v_mov_b32       v3, 0
/*00000000e234*/ s_lshl_b32      s8, s8, 1
/*00000000e238*/ s_lshl_b32      s6, s9, 1
/*00000000e23c*/ s_lshl_b32      s7, s10, 2
/*00000000e240*/ v_mov_b32       v5, v3
/*00000000e244*/ v_mov_b32       v7, v3
/*00000000e248*/ v_add3_u32      v4, s0, s8, v0
/*00000000e250*/ v_add3_u32      v6, s2, s6, v1
/*00000000e258*/ s_and_b32       s2, s12, -2
/*00000000e25c*/ s_lshr_b32      s0, s12, 1
/*00000000e260*/ v_cmp_gt_u32    s[2:3], s12, s2
/*00000000e268*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000e270*/ s_lshr_b32      s6, s13, 1
/*00000000e274*/ s_and_b32       s8, s13, -2
/*00000000e278*/ s_lshr_b32      s9, s14, 2
/*00000000e27c*/ s_and_b32       s10, s14, -4
/*00000000e280*/ s_cmpk_lg_u32   s2, 0x0
/*00000000e284*/ s_waitcnt       lgkmcnt(0)
/*00000000e288*/ v_add3_u32      v4, s1, s7, v2
/*00000000e290*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e298*/ s_addc_u32      s0, s0, s3
/*00000000e29c*/ v_cmp_gt_u32    s[1:2], s13, s8
/*00000000e2a4*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*00000000e2ac*/ v_mov_b32       v2, s0
/*00000000e2b0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e2b4*/ v_cmp_gt_u32    s[0:1], s14, s10
/*00000000e2bc*/ s_cmpk_lg_u32   s1, 0x0
/*00000000e2c0*/ v_lshlrev_b64   v[4:5], 3, v[4:5]
/*00000000e2c8*/ s_addc_u32      s1, s6, s3
/*00000000e2cc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e2d4*/ v_add_co_u32    v0, vcc, s4, v6
/*00000000e2dc*/ v_mov_b32       v2, s1
/*00000000e2e0*/ v_add_co_ci_u32 v1, vcc, s5, v7, vcc
/*00000000e2e4*/ s_cmpk_lg_u32   s0, 0x0
/*00000000e2e8*/ s_addc_u32      s0, s9, s3
/*00000000e2ec*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e2f4*/ v_add_co_u32    v0, vcc, s4, v4
/*00000000e2fc*/ v_mov_b32       v2, s0
/*00000000e300*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*00000000e304*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e30c*/ s_endpgm
/*00000000e310*/ s_nop           0x0
/*00000000e314*/ s_nop           0x0
/*00000000e318*/ s_nop           0x0
/*00000000e31c*/ s_nop           0x0
/*00000000e320*/ s_nop           0x0
/*00000000e324*/ s_nop           0x0
/*00000000e328*/ s_nop           0x0
/*00000000e32c*/ s_nop           0x0
/*00000000e330*/ s_nop           0x0
/*00000000e334*/ s_nop           0x0
/*00000000e338*/ s_nop           0x0
/*00000000e33c*/ s_nop           0x0
/*00000000e340*/ s_nop           0x0
/*00000000e344*/ s_nop           0x0
/*00000000e348*/ s_nop           0x0
/*00000000e34c*/ s_nop           0x0
/*00000000e350*/ s_nop           0x0
/*00000000e354*/ s_nop           0x0
/*00000000e358*/ s_nop           0x0
/*00000000e35c*/ s_nop           0x0
/*00000000e360*/ s_nop           0x0
/*00000000e364*/ s_nop           0x0
/*00000000e368*/ s_nop           0x0
/*00000000e36c*/ s_nop           0x0
/*00000000e370*/ s_nop           0x0
/*00000000e374*/ s_nop           0x0
/*00000000e378*/ s_nop           0x0
/*00000000e37c*/ s_nop           0x0
/*00000000e380*/ s_nop           0x0
/*00000000e384*/ s_nop           0x0
/*00000000e388*/ s_nop           0x0
/*00000000e38c*/ s_nop           0x0
/*00000000e390*/ s_nop           0x0
/*00000000e394*/ s_nop           0x0
/*00000000e398*/ s_nop           0x0
/*00000000e39c*/ s_nop           0x0
/*00000000e3a0*/ s_nop           0x0
/*00000000e3a4*/ s_nop           0x0
/*00000000e3a8*/ s_nop           0x0
/*00000000e3ac*/ s_nop           0x0
/*00000000e3b0*/ s_nop           0x0
/*00000000e3b4*/ s_nop           0x0
/*00000000e3b8*/ s_nop           0x0
/*00000000e3bc*/ s_nop           0x0
/*00000000e3c0*/ s_nop           0x0
/*00000000e3c4*/ s_nop           0x0
/*00000000e3c8*/ s_nop           0x0
/*00000000e3cc*/ s_nop           0x0
/*00000000e3d0*/ s_nop           0x0
/*00000000e3d4*/ s_nop           0x0
/*00000000e3d8*/ s_nop           0x0
/*00000000e3dc*/ s_nop           0x0
/*00000000e3e0*/ s_nop           0x0
/*00000000e3e4*/ s_nop           0x0
/*00000000e3e8*/ s_nop           0x0
/*00000000e3ec*/ s_nop           0x0
/*00000000e3f0*/ s_nop           0x0
/*00000000e3f4*/ s_nop           0x0
/*00000000e3f8*/ s_nop           0x0
/*00000000e3fc*/ s_nop           0x0
add_long_get_work_dim_x:
.skip 256
/*00000000e500*/ v_mov_b32       v1, s4
/*00000000e504*/ v_mov_b32       v2, s5
/*00000000e508*/ s_clause        0x2
/*00000000e50c*/ s_load_dword    s2, s[6:7], 0x10
/*00000000e514*/ s_load_dword    s3, s[6:7], 0x0
/*00000000e51c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000e524*/ s_lshl_b32      s4, s8, 1
/*00000000e528*/ global_load_ushort v4, v[1:2], off inst_offset:2
/*00000000e530*/ v_mov_b32       v1, 0
/*00000000e534*/ v_mov_b32       v3, v1
/*00000000e538*/ s_waitcnt       lgkmcnt(0)
/*00000000e53c*/ v_add3_u32      v2, s2, s4, v0
/*00000000e544*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000000e54c*/ v_add_co_u32    v2, vcc, s0, v2
/*00000000e554*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000e558*/ s_waitcnt       vmcnt(0)
/*00000000e55c*/ v_add_nc_u32    v0, s3, v4
/*00000000e560*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000000e568*/ s_endpgm
/*00000000e56c*/ s_nop           0x0
/*00000000e570*/ s_nop           0x0
/*00000000e574*/ s_nop           0x0
/*00000000e578*/ s_nop           0x0
/*00000000e57c*/ s_nop           0x0
/*00000000e580*/ s_nop           0x0
/*00000000e584*/ s_nop           0x0
/*00000000e588*/ s_nop           0x0
/*00000000e58c*/ s_nop           0x0
/*00000000e590*/ s_nop           0x0
/*00000000e594*/ s_nop           0x0
/*00000000e598*/ s_nop           0x0
/*00000000e59c*/ s_nop           0x0
/*00000000e5a0*/ s_nop           0x0
/*00000000e5a4*/ s_nop           0x0
/*00000000e5a8*/ s_nop           0x0
/*00000000e5ac*/ s_nop           0x0
/*00000000e5b0*/ s_nop           0x0
/*00000000e5b4*/ s_nop           0x0
/*00000000e5b8*/ s_nop           0x0
/*00000000e5bc*/ s_nop           0x0
/*00000000e5c0*/ s_nop           0x0
/*00000000e5c4*/ s_nop           0x0
/*00000000e5c8*/ s_nop           0x0
/*00000000e5cc*/ s_nop           0x0
/*00000000e5d0*/ s_nop           0x0
/*00000000e5d4*/ s_nop           0x0
/*00000000e5d8*/ s_nop           0x0
/*00000000e5dc*/ s_nop           0x0
/*00000000e5e0*/ s_nop           0x0
/*00000000e5e4*/ s_nop           0x0
/*00000000e5e8*/ s_nop           0x0
/*00000000e5ec*/ s_nop           0x0
/*00000000e5f0*/ s_nop           0x0
/*00000000e5f4*/ s_nop           0x0
/*00000000e5f8*/ s_nop           0x0
/*00000000e5fc*/ s_nop           0x0
add_long_x_get_global_offset:
.skip 256
/*00000000e700*/ s_clause        0x3
/*00000000e704*/ s_load_dword    s9, s[4:5], 0x8
/*00000000e70c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000e714*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000e71c*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000000e724*/ v_mov_b32       v4, 0
/*00000000e728*/ s_lshl_b32      s6, s6, 4
/*00000000e72c*/ s_lshl_b32      s7, s7, 1
/*00000000e730*/ s_lshl_b32      s8, s8, 1
/*00000000e734*/ v_mov_b32       v6, v4
/*00000000e738*/ v_mov_b32       v8, v4
/*00000000e73c*/ s_waitcnt       lgkmcnt(0)
/*00000000e740*/ s_ashr_i32      s12, s9, 31
/*00000000e744*/ v_add3_u32      v3, s0, s6, v0
/*00000000e74c*/ v_add3_u32      v5, s2, s7, v1
/*00000000e754*/ v_add3_u32      v7, s10, s8, v2
/*00000000e75c*/ s_add_u32       s0, s0, s9
/*00000000e760*/ s_addc_u32      s1, s1, s12
/*00000000e764*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000e76c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000e774*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000e77c*/ s_add_u32       s2, s2, s9
/*00000000e780*/ s_addc_u32      s3, s3, s12
/*00000000e784*/ v_mov_b32       v3, s1
/*00000000e788*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e790*/ v_mov_b32       v2, s0
/*00000000e794*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e798*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000e7a0*/ s_add_u32       s0, s10, s9
/*00000000e7a4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000e7a8*/ s_addc_u32      s1, s11, s12
/*00000000e7ac*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000e7b4*/ v_mov_b32       v9, s3
/*00000000e7b8*/ v_mov_b32       v11, s1
/*00000000e7bc*/ v_mov_b32       v8, s2
/*00000000e7c0*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000e7c4*/ v_mov_b32       v10, s0
/*00000000e7c8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e7d0*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000e7d8*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000e7e0*/ s_endpgm
/*00000000e7e4*/ s_nop           0x0
/*00000000e7e8*/ s_nop           0x0
/*00000000e7ec*/ s_nop           0x0
/*00000000e7f0*/ s_nop           0x0
/*00000000e7f4*/ s_nop           0x0
/*00000000e7f8*/ s_nop           0x0
/*00000000e7fc*/ s_nop           0x0
add_long_get_global_offset_get_global_offset:
.skip 256
/*00000000e900*/ s_clause        0x2
/*00000000e904*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000e90c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000e914*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000e91c*/ v_mov_b32       v4, 0
/*00000000e920*/ s_lshl_b32      s6, s6, 1
/*00000000e924*/ s_lshl_b32      s7, s7, 4
/*00000000e928*/ s_lshl_b32      s8, s8, 1
/*00000000e92c*/ v_mov_b32       v6, v4
/*00000000e930*/ v_mov_b32       v8, v4
/*00000000e934*/ s_waitcnt       lgkmcnt(0)
/*00000000e938*/ v_add3_u32      v3, s0, s6, v0
/*00000000e940*/ v_add3_u32      v5, s2, s7, v1
/*00000000e948*/ v_add3_u32      v7, s10, s8, v2
/*00000000e950*/ s_add_u32       s0, s0, s0
/*00000000e954*/ s_addc_u32      s1, 0, s1
/*00000000e958*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000e960*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000e968*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000e970*/ s_add_u32       s2, s2, s2
/*00000000e974*/ s_addc_u32      s3, 0, s3
/*00000000e978*/ v_mov_b32       v3, s1
/*00000000e97c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e984*/ v_mov_b32       v2, s0
/*00000000e988*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e98c*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000e994*/ s_add_u32       s0, s10, s10
/*00000000e998*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000e99c*/ s_addc_u32      s1, 0, s11
/*00000000e9a0*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000e9a8*/ v_mov_b32       v9, s3
/*00000000e9ac*/ v_mov_b32       v11, s1
/*00000000e9b0*/ v_mov_b32       v8, s2
/*00000000e9b4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000e9b8*/ v_mov_b32       v10, s0
/*00000000e9bc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e9c4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000e9cc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000e9d4*/ s_endpgm
/*00000000e9d8*/ s_nop           0x0
/*00000000e9dc*/ s_nop           0x0
/*00000000e9e0*/ s_nop           0x0
/*00000000e9e4*/ s_nop           0x0
/*00000000e9e8*/ s_nop           0x0
/*00000000e9ec*/ s_nop           0x0
/*00000000e9f0*/ s_nop           0x0
/*00000000e9f4*/ s_nop           0x0
/*00000000e9f8*/ s_nop           0x0
/*00000000e9fc*/ s_nop           0x0
add_long_get_local_id_get_global_offset:
.skip 256
/*00000000eb00*/ s_clause        0x2
/*00000000eb04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000eb0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000eb14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000eb1c*/ v_mov_b32       v4, 0
/*00000000eb20*/ s_lshl_b32      s6, s6, 3
/*00000000eb24*/ s_lshl_b32      s7, s7, 2
/*00000000eb28*/ s_lshl_b32      s8, s8, 1
/*00000000eb2c*/ v_mov_b32       v6, v4
/*00000000eb30*/ v_mov_b32       v8, v4
/*00000000eb34*/ s_waitcnt       lgkmcnt(0)
/*00000000eb38*/ v_add3_u32      v3, s0, s6, v0
/*00000000eb40*/ v_add3_u32      v5, s2, s7, v1
/*00000000eb48*/ v_add3_u32      v7, s10, s8, v2
/*00000000eb50*/ v_add_co_u32    v9, s[0:1], s0, v0
/*00000000eb58*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000000eb60*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000eb68*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000eb70*/ v_add_co_ci_u32 v10, s[0:1], s1, 0, s[0:1]
/*00000000eb78*/ v_add_co_u32    v0, s[0:1], s2, v1
/*00000000eb80*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000eb88*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*00000000eb90*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000eb94*/ v_add_co_u32    v14, vcc, s4, v5
/*00000000eb9c*/ v_add_co_u32    v11, s[0:1], s10, v2
/*00000000eba4*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*00000000eba8*/ v_add_co_u32    v5, vcc, s4, v7
/*00000000ebb0*/ v_add_co_ci_u32 v12, s[0:1], s11, 0, s[0:1]
/*00000000ebb8*/ v_add_co_ci_u32 v6, vcc, s5, v8, vcc
/*00000000ebbc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*00000000ebc4*/ global_store_dwordx2 v[14:15], v[0:1], off
/*00000000ebcc*/ global_store_dwordx2 v[5:6], v[11:12], off
/*00000000ebd4*/ s_endpgm
/*00000000ebd8*/ s_nop           0x0
/*00000000ebdc*/ s_nop           0x0
/*00000000ebe0*/ s_nop           0x0
/*00000000ebe4*/ s_nop           0x0
/*00000000ebe8*/ s_nop           0x0
/*00000000ebec*/ s_nop           0x0
/*00000000ebf0*/ s_nop           0x0
/*00000000ebf4*/ s_nop           0x0
/*00000000ebf8*/ s_nop           0x0
/*00000000ebfc*/ s_nop           0x0
add_long_get_group_id_get_global_offset:
.skip 256
/*00000000ed00*/ s_clause        0x2
/*00000000ed04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ed0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000ed14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ed1c*/ v_mov_b32       v4, 0
/*00000000ed20*/ s_lshl_b32      s9, s6, 1
/*00000000ed24*/ s_lshl_b32      s12, s7, 4
/*00000000ed28*/ s_lshl_b32      s13, s8, 1
/*00000000ed2c*/ v_mov_b32       v6, v4
/*00000000ed30*/ v_mov_b32       v8, v4
/*00000000ed34*/ s_waitcnt       lgkmcnt(0)
/*00000000ed38*/ v_add3_u32      v3, s0, s9, v0
/*00000000ed40*/ v_add3_u32      v5, s2, s12, v1
/*00000000ed48*/ v_add3_u32      v7, s10, s13, v2
/*00000000ed50*/ s_add_u32       s0, s0, s6
/*00000000ed54*/ s_addc_u32      s1, s1, 0
/*00000000ed58*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000ed60*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000ed68*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000ed70*/ s_add_u32       s2, s2, s7
/*00000000ed74*/ s_addc_u32      s3, s3, 0
/*00000000ed78*/ v_mov_b32       v3, s1
/*00000000ed7c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000ed84*/ v_mov_b32       v2, s0
/*00000000ed88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000ed8c*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000ed94*/ s_add_u32       s0, s10, s8
/*00000000ed98*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000ed9c*/ s_addc_u32      s1, s11, 0
/*00000000eda0*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000eda8*/ v_mov_b32       v9, s3
/*00000000edac*/ v_mov_b32       v11, s1
/*00000000edb0*/ v_mov_b32       v8, s2
/*00000000edb4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000edb8*/ v_mov_b32       v10, s0
/*00000000edbc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000edc4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000edcc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000edd4*/ s_endpgm
/*00000000edd8*/ s_nop           0x0
/*00000000eddc*/ s_nop           0x0
/*00000000ede0*/ s_nop           0x0
/*00000000ede4*/ s_nop           0x0
/*00000000ede8*/ s_nop           0x0
/*00000000edec*/ s_nop           0x0
/*00000000edf0*/ s_nop           0x0
/*00000000edf4*/ s_nop           0x0
/*00000000edf8*/ s_nop           0x0
/*00000000edfc*/ s_nop           0x0
add_long_get_local_size_get_global_offset:
.skip 256
/*00000000ef00*/ s_clause        0x2
/*00000000ef04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ef0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000ef14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ef1c*/ v_mov_b32       v4, 0
/*00000000ef20*/ s_lshl_b32      s6, s6, 1
/*00000000ef24*/ s_lshl_b32      s7, s7, 1
/*00000000ef28*/ s_lshl_b32      s8, s8, 2
/*00000000ef2c*/ v_mov_b32       v6, v4
/*00000000ef30*/ v_mov_b32       v8, v4
/*00000000ef34*/ s_waitcnt       lgkmcnt(0)
/*00000000ef38*/ v_add3_u32      v3, s0, s6, v0
/*00000000ef40*/ v_add3_u32      v5, s2, s7, v1
/*00000000ef48*/ v_add3_u32      v7, s10, s8, v2
/*00000000ef50*/ s_add_u32       s0, s0, 2
/*00000000ef54*/ s_addc_u32      s1, s1, 0
/*00000000ef58*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000ef60*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000ef68*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000ef70*/ s_add_u32       s2, s2, 2
/*00000000ef74*/ s_addc_u32      s3, s3, 0
/*00000000ef78*/ v_mov_b32       v3, s1
/*00000000ef7c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000ef84*/ v_mov_b32       v2, s0
/*00000000ef88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000ef8c*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000ef94*/ s_add_u32       s0, s10, 4
/*00000000ef98*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000ef9c*/ s_addc_u32      s1, s11, 0
/*00000000efa0*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000efa8*/ v_mov_b32       v9, s3
/*00000000efac*/ v_mov_b32       v11, s1
/*00000000efb0*/ v_mov_b32       v8, s2
/*00000000efb4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000efb8*/ v_mov_b32       v10, s0
/*00000000efbc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000efc4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000efcc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000efd4*/ s_endpgm
/*00000000efd8*/ s_nop           0x0
/*00000000efdc*/ s_nop           0x0
/*00000000efe0*/ s_nop           0x0
/*00000000efe4*/ s_nop           0x0
/*00000000efe8*/ s_nop           0x0
/*00000000efec*/ s_nop           0x0
/*00000000eff0*/ s_nop           0x0
/*00000000eff4*/ s_nop           0x0
/*00000000eff8*/ s_nop           0x0
/*00000000effc*/ s_nop           0x0
add_long_get_global_id_get_global_offset:
.skip 256
/*00000000f100*/ s_clause        0x2
/*00000000f104*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000f10c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000f114*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000f11c*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000000f124*/ v_mov_b32       v4, 0
/*00000000f128*/ s_lshl_b32      s6, s7, 1
/*00000000f12c*/ s_lshl_b32      s7, s8, 2
/*00000000f130*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*00000000f138*/ v_mov_b32       v8, v4
/*00000000f13c*/ s_waitcnt       lgkmcnt(0)
/*00000000f140*/ v_add_nc_u32    v9, s0, v3
/*00000000f144*/ v_add3_u32      v7, s2, s6, v1
/*00000000f14c*/ v_add3_u32      v3, s10, s7, v2
/*00000000f154*/ v_add_co_u32    v15, vcc, s4, v5
/*00000000f15c*/ v_add_co_u32    v5, s[0:1], v9, s0
/*00000000f164*/ v_lshlrev_b64   v[8:9], 3, v[7:8]
/*00000000f16c*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*00000000f174*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*00000000f178*/ v_add_co_ci_u32 v6, s[0:1], 0, s1, s[0:1]
/*00000000f180*/ v_add_co_u32    v17, s[0:1], v7, s2
/*00000000f188*/ v_add_co_u32    v7, vcc, s4, v8
/*00000000f190*/ v_add_co_ci_u32 v18, s[0:1], 0, s3, s[0:1]
/*00000000f198*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*00000000f19c*/ v_add_co_u32    v2, s[0:1], v3, s10
/*00000000f1a4*/ v_add_co_u32    v12, vcc, s4, v12
/*00000000f1ac*/ v_add_co_ci_u32 v3, s[0:1], 0, s11, s[0:1]
/*00000000f1b4*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*00000000f1b8*/ global_store_dwordx2 v[15:16], v[5:6], off
/*00000000f1c0*/ global_store_dwordx2 v[7:8], v[17:18], off
/*00000000f1c8*/ global_store_dwordx2 v[12:13], v[2:3], off
/*00000000f1d0*/ s_endpgm
/*00000000f1d4*/ s_nop           0x0
/*00000000f1d8*/ s_nop           0x0
/*00000000f1dc*/ s_nop           0x0
/*00000000f1e0*/ s_nop           0x0
/*00000000f1e4*/ s_nop           0x0
/*00000000f1e8*/ s_nop           0x0
/*00000000f1ec*/ s_nop           0x0
/*00000000f1f0*/ s_nop           0x0
/*00000000f1f4*/ s_nop           0x0
/*00000000f1f8*/ s_nop           0x0
/*00000000f1fc*/ s_nop           0x0
add_long_get_global_size_get_global_offset:
.skip 256
/*00000000f300*/ s_clause        0x1
/*00000000f304*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000f30c*/ s_load_dwordx2  s[16:17], s[6:7], 0x20
/*00000000f314*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000f31c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000000f324*/ v_mov_b32       v4, 0
/*00000000f328*/ s_lshl_b32      s6, s8, 4
/*00000000f32c*/ s_lshl_b32      s7, s9, 1
/*00000000f330*/ s_lshl_b32      s8, s10, 1
/*00000000f334*/ v_mov_b32       v6, v4
/*00000000f338*/ v_mov_b32       v8, v4
/*00000000f33c*/ s_waitcnt       lgkmcnt(0)
/*00000000f340*/ v_add3_u32      v3, s0, s6, v0
/*00000000f348*/ v_add3_u32      v5, s2, s7, v1
/*00000000f350*/ v_add3_u32      v7, s16, s8, v2
/*00000000f358*/ s_add_u32       s0, s0, s12
/*00000000f35c*/ s_addc_u32      s1, s1, 0
/*00000000f360*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000f368*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000f370*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000f378*/ s_add_u32       s2, s2, s13
/*00000000f37c*/ s_addc_u32      s3, s3, 0
/*00000000f380*/ v_mov_b32       v3, s1
/*00000000f384*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000f38c*/ v_mov_b32       v2, s0
/*00000000f390*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000f394*/ v_add_co_u32    v14, vcc, s4, v4
/*00000000f39c*/ s_add_u32       s0, s16, s14
/*00000000f3a0*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000000f3a4*/ s_addc_u32      s1, s17, 0
/*00000000f3a8*/ v_add_co_u32    v4, vcc, s4, v6
/*00000000f3b0*/ v_mov_b32       v9, s3
/*00000000f3b4*/ v_mov_b32       v11, s1
/*00000000f3b8*/ v_mov_b32       v8, s2
/*00000000f3bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*00000000f3c0*/ v_mov_b32       v10, s0
/*00000000f3c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000f3cc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*00000000f3d4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000f3dc*/ s_endpgm
/*00000000f3e0*/ s_nop           0x0
/*00000000f3e4*/ s_nop           0x0
/*00000000f3e8*/ s_nop           0x0
/*00000000f3ec*/ s_nop           0x0
/*00000000f3f0*/ s_nop           0x0
/*00000000f3f4*/ s_nop           0x0
/*00000000f3f8*/ s_nop           0x0
/*00000000f3fc*/ s_nop           0x0
add_long_get_num_groups_get_global_offset:
.skip 256
/*00000000f500*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000f508*/ s_clause        0x2
/*00000000f50c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000f514*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000000f51c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*00000000f524*/ s_lshl_b32      s8, s8, 1
/*00000000f528*/ s_lshl_b32      s9, s9, 1
/*00000000f52c*/ s_lshl_b32      s10, s10, 2
/*00000000f530*/ v_mov_b32       v4, 0
/*00000000f534*/ v_mov_b32       v6, v4
/*00000000f538*/ v_mov_b32       v8, v4
/*00000000f53c*/ s_waitcnt       lgkmcnt(0)
/*00000000f540*/ s_and_b32       s11, s12, -2
/*00000000f544*/ v_add3_u32      v3, s0, s8, v0
/*00000000f54c*/ v_cmp_gt_u32    s[11:12], s12, s11
/*00000000f554*/ s_lshr_b32      s12, s12, 1
/*00000000f558*/ v_add3_u32      v5, s2, s9, v1
/*00000000f560*/ v_add3_u32      v7, s4, s10, v2
/*00000000f568*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000f570*/ s_cmpk_lg_u32   s11, 0x0
/*00000000f574*/ s_addc_u32      s8, s12, 0
/*00000000f578*/ s_and_b32       s11, s13, -2
/*00000000f57c*/ s_lshr_b32      s9, s13, 1
/*00000000f580*/ v_cmp_gt_u32    s[11:12], s13, s11
/*00000000f588*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000f590*/ v_add_co_u32    v0, vcc, s6, v0
/*00000000f598*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*00000000f5a0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*00000000f5a4*/ s_cmpk_lg_u32   s11, 0x0
/*00000000f5a8*/ s_addc_u32      s9, s9, 0
/*00000000f5ac*/ s_and_b32       s10, s14, -4
/*00000000f5b0*/ s_lshr_b32      s11, s14, 2
/*00000000f5b4*/ v_cmp_gt_u32    s[10:11], s14, s10
/*00000000f5bc*/ v_add_co_u32    v2, vcc, s6, v2
/*00000000f5c4*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*00000000f5c8*/ v_add_co_u32    v4, vcc, s6, v4
/*00000000f5d0*/ s_cmpk_lg_u32   s10, 0x0
/*00000000f5d4*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*00000000f5d8*/ s_addc_u32      s10, s11, 0
/*00000000f5dc*/ s_add_u32       s0, s0, s8
/*00000000f5e0*/ s_addc_u32      s1, s1, 0
/*00000000f5e4*/ s_add_u32       s2, s2, s9
/*00000000f5e8*/ s_addc_u32      s3, s3, 0
/*00000000f5ec*/ v_mov_b32       v7, s1
/*00000000f5f0*/ v_mov_b32       v6, s0
/*00000000f5f4*/ s_add_u32       s0, s4, s10
/*00000000f5f8*/ s_addc_u32      s1, s5, 0
/*00000000f5fc*/ v_mov_b32       v9, s3
/*00000000f600*/ v_mov_b32       v11, s1
/*00000000f604*/ v_mov_b32       v8, s2
/*00000000f608*/ v_mov_b32       v10, s0
/*00000000f60c*/ global_store_dwordx2 v[0:1], v[6:7], off
/*00000000f614*/ global_store_dwordx2 v[2:3], v[8:9], off
/*00000000f61c*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000f624*/ s_endpgm
/*00000000f628*/ s_nop           0x0
/*00000000f62c*/ s_nop           0x0
/*00000000f630*/ s_nop           0x0
/*00000000f634*/ s_nop           0x0
/*00000000f638*/ s_nop           0x0
/*00000000f63c*/ s_nop           0x0
/*00000000f640*/ s_nop           0x0
/*00000000f644*/ s_nop           0x0
/*00000000f648*/ s_nop           0x0
/*00000000f64c*/ s_nop           0x0
/*00000000f650*/ s_nop           0x0
/*00000000f654*/ s_nop           0x0
/*00000000f658*/ s_nop           0x0
/*00000000f65c*/ s_nop           0x0
/*00000000f660*/ s_nop           0x0
/*00000000f664*/ s_nop           0x0
/*00000000f668*/ s_nop           0x0
/*00000000f66c*/ s_nop           0x0
/*00000000f670*/ s_nop           0x0
/*00000000f674*/ s_nop           0x0
/*00000000f678*/ s_nop           0x0
/*00000000f67c*/ s_nop           0x0
/*00000000f680*/ s_nop           0x0
/*00000000f684*/ s_nop           0x0
/*00000000f688*/ s_nop           0x0
/*00000000f68c*/ s_nop           0x0
/*00000000f690*/ s_nop           0x0
/*00000000f694*/ s_nop           0x0
/*00000000f698*/ s_nop           0x0
/*00000000f69c*/ s_nop           0x0
/*00000000f6a0*/ s_nop           0x0
/*00000000f6a4*/ s_nop           0x0
/*00000000f6a8*/ s_nop           0x0
/*00000000f6ac*/ s_nop           0x0
/*00000000f6b0*/ s_nop           0x0
/*00000000f6b4*/ s_nop           0x0
/*00000000f6b8*/ s_nop           0x0
/*00000000f6bc*/ s_nop           0x0
/*00000000f6c0*/ s_nop           0x0
/*00000000f6c4*/ s_nop           0x0
/*00000000f6c8*/ s_nop           0x0
/*00000000f6cc*/ s_nop           0x0
/*00000000f6d0*/ s_nop           0x0
/*00000000f6d4*/ s_nop           0x0
/*00000000f6d8*/ s_nop           0x0
/*00000000f6dc*/ s_nop           0x0
/*00000000f6e0*/ s_nop           0x0
/*00000000f6e4*/ s_nop           0x0
/*00000000f6e8*/ s_nop           0x0
/*00000000f6ec*/ s_nop           0x0
/*00000000f6f0*/ s_nop           0x0
/*00000000f6f4*/ s_nop           0x0
/*00000000f6f8*/ s_nop           0x0
/*00000000f6fc*/ s_nop           0x0
add_long_get_work_dim_get_global_offset:
.skip 256
/*00000000f800*/ v_mov_b32       v3, s4
/*00000000f804*/ v_mov_b32       v4, s5
/*00000000f808*/ s_clause        0x2
/*00000000f80c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000f814*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000000f81c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*00000000f824*/ s_lshl_b32      s8, s8, 1
/*00000000f828*/ s_lshl_b32      s9, s9, 1
/*00000000f82c*/ s_lshl_b32      s10, s10, 2
/*00000000f830*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000f838*/ v_mov_b32       v4, 0
/*00000000f83c*/ v_mov_b32       v6, v4
/*00000000f840*/ v_mov_b32       v8, v4
/*00000000f844*/ s_waitcnt       lgkmcnt(0)
/*00000000f848*/ v_add3_u32      v3, s0, s8, v0
/*00000000f850*/ v_add3_u32      v5, s2, s9, v1
/*00000000f858*/ v_add3_u32      v7, s4, s10, v2
/*00000000f860*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000f868*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000f870*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*00000000f878*/ v_add_co_u32    v0, vcc, s6, v0
/*00000000f880*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*00000000f884*/ v_add_co_u32    v2, vcc, s6, v2
/*00000000f88c*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*00000000f890*/ v_add_co_u32    v4, vcc, s6, v4
/*00000000f898*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*00000000f89c*/ s_waitcnt       vmcnt(0)
/*00000000f8a0*/ v_and_b32       v10, 0xffff, v9
/*00000000f8a8*/ v_add_co_u32    v6, s[0:1], s0, v10
/*00000000f8b0*/ v_add_co_ci_u32 v7, s[0:1], s1, 0, s[0:1]
/*00000000f8b8*/ v_add_co_u32    v8, s[0:1], s2, v10
/*00000000f8c0*/ v_add_co_ci_u32 v9, s[0:1], s3, 0, s[0:1]
/*00000000f8c8*/ v_add_co_u32    v10, s[0:1], s4, v10
/*00000000f8d0*/ v_add_co_ci_u32 v11, s[0:1], s5, 0, s[0:1]
/*00000000f8d8*/ global_store_dwordx2 v[0:1], v[6:7], off
/*00000000f8e0*/ global_store_dwordx2 v[2:3], v[8:9], off
/*00000000f8e8*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000f8f0*/ s_endpgm
/*00000000f8f4*/ s_nop           0x0
/*00000000f8f8*/ s_nop           0x0
/*00000000f8fc*/ s_nop           0x0
add_long_x_get_local_id:
.skip 256
/*00000000fa00*/ s_clause        0x1
/*00000000fa04*/ s_load_dword    s9, s[4:5], 0x8
/*00000000fa0c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000fa14*/ s_waitcnt       lgkmcnt(0)
/*00000000fa18*/ s_clause        0x1
/*00000000fa1c*/ s_load_dword    s1, s[4:5], 0x20
/*00000000fa24*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000000fa2c*/ v_mov_b32       v4, 0
/*00000000fa30*/ s_lshl_b32      s3, s6, 4
/*00000000fa34*/ s_lshl_b32      s6, s7, 1
/*00000000fa38*/ s_lshl_b32      s7, s8, 1
/*00000000fa3c*/ v_mov_b32       v6, v4
/*00000000fa40*/ v_mov_b32       v8, v4
/*00000000fa44*/ s_ashr_i32      s8, s9, 31
/*00000000fa48*/ v_add3_u32      v3, s0, s3, v0
/*00000000fa50*/ v_add3_u32      v5, s2, s6, v1
/*00000000fa58*/ s_waitcnt       lgkmcnt(0)
/*00000000fa5c*/ v_add3_u32      v7, s1, s7, v2
/*00000000fa64*/ v_add_co_u32    v9, s[0:1], s9, v0
/*00000000fa6c*/ v_lshlrev_b64   v[11:12], 3, v[3:4]
/*00000000fa74*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000fa7c*/ v_add_co_ci_u32 v10, s[0:1], s8, 0, s[0:1]
/*00000000fa84*/ v_add_co_u32    v0, s[0:1], s9, v1
/*00000000fa8c*/ v_add_co_ci_u32 v1, s[0:1], s8, 0, s[0:1]
/*00000000fa94*/ v_add_co_u32    v11, vcc, s4, v11
/*00000000fa9c*/ v_add_co_ci_u32 v12, vcc, s5, v12, vcc
/*00000000faa0*/ v_add_co_u32    v14, vcc, s4, v5
/*00000000faa8*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*00000000faac*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*00000000fab4*/ v_add_co_u32    v7, s[0:1], s9, v2
/*00000000fabc*/ v_add_co_ci_u32 v8, s[0:1], s8, 0, s[0:1]
/*00000000fac4*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000facc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000fad0*/ global_store_dwordx2 v[11:12], v[9:10], off
/*00000000fad8*/ global_store_dwordx2 v[14:15], v[0:1], off
/*00000000fae0*/ global_store_dwordx2 v[5:6], v[7:8], off
/*00000000fae8*/ s_endpgm
/*00000000faec*/ s_nop           0x0
/*00000000faf0*/ s_nop           0x0
/*00000000faf4*/ s_nop           0x0
/*00000000faf8*/ s_nop           0x0
/*00000000fafc*/ s_nop           0x0
add_long_get_global_offset_get_local_id:
.skip 256
/*00000000fc00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000fc08*/ s_waitcnt       lgkmcnt(0)
/*00000000fc0c*/ s_clause        0x1
/*00000000fc10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000fc18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000fc20*/ v_mov_b32       v4, 0
/*00000000fc24*/ s_lshl_b32      s3, s6, 1
/*00000000fc28*/ s_lshl_b32      s6, s7, 4
/*00000000fc2c*/ s_lshl_b32      s7, s8, 1
/*00000000fc30*/ v_mov_b32       v6, v4
/*00000000fc34*/ v_mov_b32       v8, v4
/*00000000fc38*/ v_add3_u32      v3, s0, s3, v0
/*00000000fc40*/ v_add3_u32      v5, s2, s6, v1
/*00000000fc48*/ s_waitcnt       lgkmcnt(0)
/*00000000fc4c*/ v_add3_u32      v7, s1, s7, v2
/*00000000fc54*/ v_add_co_u32    v9, s[0:1], s0, v0
/*00000000fc5c*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000000fc64*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000fc6c*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000fc74*/ v_add_co_ci_u32 v10, s[0:1], 0, 0, s[0:1]
/*00000000fc7c*/ v_add_co_u32    v0, s[0:1], s2, v1
/*00000000fc84*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000fc8c*/ v_add_co_ci_u32 v1, s[0:1], 0, 0, s[0:1]
/*00000000fc94*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000fc98*/ v_add_co_u32    v14, vcc, s4, v5
/*00000000fca0*/ v_add_co_u32    v11, s[0:1], s1, v2
/*00000000fca8*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*00000000fcac*/ v_add_co_u32    v5, vcc, s4, v7
/*00000000fcb4*/ v_add_co_ci_u32 v12, s[0:1], 0, 0, s[0:1]
/*00000000fcbc*/ v_add_co_ci_u32 v6, vcc, s5, v8, vcc
/*00000000fcc0*/ global_store_dwordx2 v[3:4], v[9:10], off
/*00000000fcc8*/ global_store_dwordx2 v[14:15], v[0:1], off
/*00000000fcd0*/ global_store_dwordx2 v[5:6], v[11:12], off
/*00000000fcd8*/ s_endpgm
/*00000000fcdc*/ s_nop           0x0
/*00000000fce0*/ s_nop           0x0
/*00000000fce4*/ s_nop           0x0
/*00000000fce8*/ s_nop           0x0
/*00000000fcec*/ s_nop           0x0
/*00000000fcf0*/ s_nop           0x0
/*00000000fcf4*/ s_nop           0x0
/*00000000fcf8*/ s_nop           0x0
/*00000000fcfc*/ s_nop           0x0
add_long_get_local_id_get_local_id:
.skip 256
/*00000000fe00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000fe08*/ s_waitcnt       lgkmcnt(0)
/*00000000fe0c*/ s_clause        0x1
/*00000000fe10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000fe18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000fe20*/ v_mov_b32       v15, 0
/*00000000fe24*/ s_lshl_b32      s3, s6, 3
/*00000000fe28*/ v_lshlrev_b32   v14, 1, v0
/*00000000fe2c*/ v_mov_b32       v6, v15
/*00000000fe30*/ v_mov_b32       v8, v15
/*00000000fe34*/ v_mov_b32       v10, v15
/*00000000fe38*/ v_add3_u32      v5, s0, s3, v0
/*00000000fe40*/ s_lshl_b32      s0, s7, 2
/*00000000fe44*/ s_lshl_b32      s3, s8, 1
/*00000000fe48*/ v_add3_u32      v7, s2, s0, v1
/*00000000fe50*/ s_waitcnt       lgkmcnt(0)
/*00000000fe54*/ v_add3_u32      v9, s1, s3, v2
/*00000000fe5c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000fe64*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000fe6c*/ v_add_co_u32    v4, vcc, s4, v5
/*00000000fe74*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000fe78*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000fe80*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*00000000fe84*/ global_store_dwordx2 v[4:5], v[14:15], off
/*00000000fe8c*/ v_lshlrev_b32   v14, 1, v1
/*00000000fe90*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*00000000fe98*/ global_store_dwordx2 v[7:8], v[14:15], off
/*00000000fea0*/ v_lshlrev_b32   v14, 1, v2
/*00000000fea4*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000feac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000feb0*/ global_store_dwordx2 v[0:1], v[14:15], off
/*00000000feb8*/ s_endpgm
/*00000000febc*/ s_nop           0x0
/*00000000fec0*/ s_nop           0x0
/*00000000fec4*/ s_nop           0x0
/*00000000fec8*/ s_nop           0x0
/*00000000fecc*/ s_nop           0x0
/*00000000fed0*/ s_nop           0x0
/*00000000fed4*/ s_nop           0x0
/*00000000fed8*/ s_nop           0x0
/*00000000fedc*/ s_nop           0x0
/*00000000fee0*/ s_nop           0x0
/*00000000fee4*/ s_nop           0x0
/*00000000fee8*/ s_nop           0x0
/*00000000feec*/ s_nop           0x0
/*00000000fef0*/ s_nop           0x0
/*00000000fef4*/ s_nop           0x0
/*00000000fef8*/ s_nop           0x0
/*00000000fefc*/ s_nop           0x0
add_long_get_group_id_get_local_id:
.skip 256
/*000000010000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010008*/ s_waitcnt       lgkmcnt(0)
/*00000001000c*/ s_clause        0x1
/*000000010010*/ s_load_dword    s1, s[4:5], 0x20
/*000000010018*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010020*/ v_mov_b32       v4, 0
/*000000010024*/ s_lshl_b32      s3, s6, 1
/*000000010028*/ s_lshl_b32      s9, s7, 4
/*00000001002c*/ v_mov_b32       v12, 0
/*000000010030*/ v_add_co_u32    v5, vcc, v0, s6
/*000000010038*/ v_mov_b32       v8, v4
/*00000001003c*/ s_lshl_b32      s10, s8, 1
/*000000010040*/ v_add_co_ci_u32 v6, vcc, 0, v12, vcc
/*000000010044*/ v_add3_u32      v3, s0, s3, v0
/*00000001004c*/ v_add3_u32      v7, s2, s9, v1
/*000000010054*/ v_add_co_u32    v0, vcc, v1, s7
/*00000001005c*/ v_add_co_ci_u32 v1, vcc, 0, v12, vcc
/*000000010060*/ v_lshlrev_b64   v[9:10], 3, v[3:4]
/*000000010068*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000010070*/ s_waitcnt       lgkmcnt(0)
/*000000010074*/ v_add3_u32      v3, s1, s10, v2
/*00000001007c*/ v_add_co_u32    v15, vcc, s4, v9
/*000000010084*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001008c*/ v_add_co_ci_u32 v16, vcc, s5, v10, vcc
/*000000010090*/ v_add_co_u32    v18, vcc, s4, v7
/*000000010098*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*00000001009c*/ v_add_co_u32    v11, vcc, v2, s8
/*0000000100a4*/ v_add_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000100a8*/ v_add_co_u32    v9, vcc, s4, v3
/*0000000100b0*/ v_add_co_ci_u32 v10, vcc, s5, v4, vcc
/*0000000100b4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000100bc*/ global_store_dwordx2 v[18:19], v[0:1], off
/*0000000100c4*/ global_store_dwordx2 v[9:10], v[11:12], off
/*0000000100cc*/ s_endpgm
/*0000000100d0*/ s_nop           0x0
/*0000000100d4*/ s_nop           0x0
/*0000000100d8*/ s_nop           0x0
/*0000000100dc*/ s_nop           0x0
/*0000000100e0*/ s_nop           0x0
/*0000000100e4*/ s_nop           0x0
/*0000000100e8*/ s_nop           0x0
/*0000000100ec*/ s_nop           0x0
/*0000000100f0*/ s_nop           0x0
/*0000000100f4*/ s_nop           0x0
/*0000000100f8*/ s_nop           0x0
/*0000000100fc*/ s_nop           0x0
add_long_get_local_size_get_local_id:
.skip 256
/*000000010200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010208*/ s_waitcnt       lgkmcnt(0)
/*00000001020c*/ s_clause        0x1
/*000000010210*/ s_load_dword    s1, s[4:5], 0x20
/*000000010218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010220*/ v_mov_b32       v15, 0
/*000000010224*/ s_lshl_b32      s3, s6, 1
/*000000010228*/ v_or_b32        v14, 2, v0
/*00000001022c*/ v_mov_b32       v6, v15
/*000000010230*/ v_mov_b32       v8, v15
/*000000010234*/ v_mov_b32       v10, v15
/*000000010238*/ v_add3_u32      v5, s0, s3, v0
/*000000010240*/ s_lshl_b32      s0, s7, 1
/*000000010244*/ s_lshl_b32      s3, s8, 2
/*000000010248*/ v_add3_u32      v7, s2, s0, v1
/*000000010250*/ s_waitcnt       lgkmcnt(0)
/*000000010254*/ v_add3_u32      v9, s1, s3, v2
/*00000001025c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000010264*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000001026c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000010274*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000010278*/ v_add_co_u32    v7, vcc, s4, v7
/*000000010280*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000010284*/ global_store_dwordx2 v[4:5], v[14:15], off
/*00000001028c*/ v_or_b32        v14, 2, v1
/*000000010290*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*000000010298*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000102a0*/ v_or_b32        v14, 4, v2
/*0000000102a4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000102ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000102b0*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000102b8*/ s_endpgm
/*0000000102bc*/ s_nop           0x0
/*0000000102c0*/ s_nop           0x0
/*0000000102c4*/ s_nop           0x0
/*0000000102c8*/ s_nop           0x0
/*0000000102cc*/ s_nop           0x0
/*0000000102d0*/ s_nop           0x0
/*0000000102d4*/ s_nop           0x0
/*0000000102d8*/ s_nop           0x0
/*0000000102dc*/ s_nop           0x0
/*0000000102e0*/ s_nop           0x0
/*0000000102e4*/ s_nop           0x0
/*0000000102e8*/ s_nop           0x0
/*0000000102ec*/ s_nop           0x0
/*0000000102f0*/ s_nop           0x0
/*0000000102f4*/ s_nop           0x0
/*0000000102f8*/ s_nop           0x0
/*0000000102fc*/ s_nop           0x0
add_long_get_global_id_get_local_id:
.skip 256
/*000000010400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010408*/ s_waitcnt       lgkmcnt(0)
/*00000001040c*/ s_clause        0x1
/*000000010410*/ s_load_dword    s1, s[4:5], 0x20
/*000000010418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010420*/ v_mov_b32       v4, 0
/*000000010424*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000001042c*/ s_lshl_b32      s3, s7, 1
/*000000010430*/ s_lshl_b32      s6, s8, 2
/*000000010434*/ v_mov_b32       v8, v4
/*000000010438*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000010440*/ v_add3_u32      v7, s2, s3, v1
/*000000010448*/ v_add_nc_u32    v9, s0, v3
/*00000001044c*/ s_waitcnt       lgkmcnt(0)
/*000000010450*/ v_add_co_u32    v15, vcc, s4, v5
/*000000010458*/ v_add3_u32      v3, s1, s6, v2
/*000000010460*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000010464*/ v_lshlrev_b64   v[11:12], 3, v[7:8]
/*00000001046c*/ v_add_co_u32    v9, s[0:1], v9, v0
/*000000010474*/ v_add_co_ci_u32 v10, s[0:1], 0, 0, s[0:1]
/*00000001047c*/ v_add_co_u32    v0, s[0:1], v7, v1
/*000000010484*/ v_add_co_u32    v6, vcc, s4, v11
/*00000001048c*/ v_add_co_ci_u32 v1, s[0:1], 0, 0, s[0:1]
/*000000010494*/ v_add_co_ci_u32 v7, vcc, s5, v12, vcc
/*000000010498*/ v_lshlrev_b64   v[11:12], 3, v[3:4]
/*0000000104a0*/ v_add_co_u32    v13, s[0:1], v3, v2
/*0000000104a8*/ v_add_co_ci_u32 v14, s[0:1], 0, 0, s[0:1]
/*0000000104b0*/ v_add_co_u32    v11, vcc, s4, v11
/*0000000104b8*/ v_add_co_ci_u32 v12, vcc, s5, v12, vcc
/*0000000104bc*/ global_store_dwordx2 v[15:16], v[9:10], off
/*0000000104c4*/ global_store_dwordx2 v[6:7], v[0:1], off
/*0000000104cc*/ global_store_dwordx2 v[11:12], v[13:14], off
/*0000000104d4*/ s_endpgm
/*0000000104d8*/ s_nop           0x0
/*0000000104dc*/ s_nop           0x0
/*0000000104e0*/ s_nop           0x0
/*0000000104e4*/ s_nop           0x0
/*0000000104e8*/ s_nop           0x0
/*0000000104ec*/ s_nop           0x0
/*0000000104f0*/ s_nop           0x0
/*0000000104f4*/ s_nop           0x0
/*0000000104f8*/ s_nop           0x0
/*0000000104fc*/ s_nop           0x0
add_long_get_global_size_get_local_id:
.skip 256
/*000000010600*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000010608*/ s_waitcnt       lgkmcnt(0)
/*00000001060c*/ s_load_dword    s1, s[6:7], 0x20
/*000000010614*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001061c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000010624*/ s_lshl_b32      s3, s8, 4
/*000000010628*/ v_mov_b32       v4, 0
/*00000001062c*/ s_lshl_b32      s6, s9, 1
/*000000010630*/ v_mov_b32       v14, 0
/*000000010634*/ v_mov_b32       v6, v4
/*000000010638*/ v_add3_u32      v3, s0, s3, v0
/*000000010640*/ v_add3_u32      v5, s2, s6, v1
/*000000010648*/ s_waitcnt       lgkmcnt(0)
/*00000001064c*/ v_add_co_u32    v10, vcc, s12, v0
/*000000010654*/ s_lshl_b32      s0, s10, 1
/*000000010658*/ v_add_co_ci_u32 v11, vcc, 0, v14, vcc
/*00000001065c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000010664*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000001066c*/ v_add3_u32      v7, s1, s0, v2
/*000000010674*/ v_add_co_u32    v12, vcc, s4, v8
/*00000001067c*/ v_mov_b32       v8, v4
/*000000010680*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*000000010684*/ v_add_co_u32    v0, vcc, s13, v1
/*00000001068c*/ v_add_co_ci_u32 v1, vcc, 0, v14, vcc
/*000000010690*/ v_add_co_u32    v18, vcc, s4, v5
/*000000010698*/ v_add_co_ci_u32 v19, vcc, s5, v6, vcc
/*00000001069c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*0000000106a4*/ v_add_co_u32    v7, vcc, s14, v2
/*0000000106ac*/ v_add_co_ci_u32 v8, vcc, 0, v14, vcc
/*0000000106b0*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000106b8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000106bc*/ global_store_dwordx2 v[12:13], v[10:11], off
/*0000000106c4*/ global_store_dwordx2 v[18:19], v[0:1], off
/*0000000106cc*/ global_store_dwordx2 v[5:6], v[7:8], off
/*0000000106d4*/ s_endpgm
/*0000000106d8*/ s_nop           0x0
/*0000000106dc*/ s_nop           0x0
/*0000000106e0*/ s_nop           0x0
/*0000000106e4*/ s_nop           0x0
/*0000000106e8*/ s_nop           0x0
/*0000000106ec*/ s_nop           0x0
/*0000000106f0*/ s_nop           0x0
/*0000000106f4*/ s_nop           0x0
/*0000000106f8*/ s_nop           0x0
/*0000000106fc*/ s_nop           0x0
add_long_get_num_groups_get_local_id:
.skip 256
/*000000010800*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000010808*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000010810*/ s_waitcnt       lgkmcnt(0)
/*000000010814*/ s_clause        0x1
/*000000010818*/ s_load_dword    s3, s[6:7], 0x20
/*000000010820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000010828*/ s_lshl_b32      s7, s8, 1
/*00000001082c*/ s_lshl_b32      s8, s9, 1
/*000000010830*/ v_mov_b32       v4, 0
/*000000010834*/ s_lshl_b32      s9, s10, 2
/*000000010838*/ v_mov_b32       v14, 0
/*00000001083c*/ v_mov_b32       v6, v4
/*000000010840*/ s_and_b32       s6, s0, -2
/*000000010844*/ v_add3_u32      v3, s12, s7, v0
/*00000001084c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000010854*/ s_lshr_b32      s0, s0, 1
/*000000010858*/ v_add3_u32      v5, s14, s8, v1
/*000000010860*/ s_waitcnt       lgkmcnt(0)
/*000000010864*/ v_add3_u32      v7, s3, s9, v2
/*00000001086c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000010874*/ s_cmpk_lg_u32   s6, 0x0
/*000000010878*/ s_addc_u32      s0, s0, 0
/*00000001087c*/ s_and_b32       s6, s1, -2
/*000000010880*/ v_add_co_u32    v10, vcc, s0, v0
/*000000010888*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000010890*/ s_lshr_b32      s1, s1, 1
/*000000010894*/ v_add_co_ci_u32 v11, vcc, 0, v14, vcc
/*000000010898*/ v_add_co_u32    v12, vcc, s4, v8
/*0000000108a0*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*0000000108a8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000108ac*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*0000000108b0*/ s_addc_u32      s0, s1, 0
/*0000000108b4*/ v_mov_b32       v8, v4
/*0000000108b8*/ v_add_co_u32    v0, vcc, s0, v1
/*0000000108c0*/ s_and_b32       s3, s2, -4
/*0000000108c4*/ v_add_co_ci_u32 v1, vcc, 0, v14, vcc
/*0000000108c8*/ v_add_co_u32    v14, vcc, s4, v5
/*0000000108d0*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*0000000108d8*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*0000000108dc*/ v_cmp_gt_u32    vcc, s2, s3
/*0000000108e4*/ s_lshr_b32      s1, s2, 2
/*0000000108e8*/ v_add_co_ci_u32 v3, vcc, s1, v2, vcc
/*0000000108ec*/ v_add_co_u32    v5, vcc, s4, v7
/*0000000108f4*/ v_add_co_ci_u32 v6, vcc, s5, v8, vcc
/*0000000108f8*/ global_store_dwordx2 v[12:13], v[10:11], off
/*000000010900*/ global_store_dwordx2 v[14:15], v[0:1], off
/*000000010908*/ global_store_dwordx2 v[5:6], v[3:4], off
/*000000010910*/ s_endpgm
/*000000010914*/ s_nop           0x0
/*000000010918*/ s_nop           0x0
/*00000001091c*/ s_nop           0x0
/*000000010920*/ s_nop           0x0
/*000000010924*/ s_nop           0x0
/*000000010928*/ s_nop           0x0
/*00000001092c*/ s_nop           0x0
/*000000010930*/ s_nop           0x0
/*000000010934*/ s_nop           0x0
/*000000010938*/ s_nop           0x0
/*00000001093c*/ s_nop           0x0
/*000000010940*/ s_nop           0x0
/*000000010944*/ s_nop           0x0
/*000000010948*/ s_nop           0x0
/*00000001094c*/ s_nop           0x0
/*000000010950*/ s_nop           0x0
/*000000010954*/ s_nop           0x0
/*000000010958*/ s_nop           0x0
/*00000001095c*/ s_nop           0x0
/*000000010960*/ s_nop           0x0
/*000000010964*/ s_nop           0x0
/*000000010968*/ s_nop           0x0
/*00000001096c*/ s_nop           0x0
/*000000010970*/ s_nop           0x0
/*000000010974*/ s_nop           0x0
/*000000010978*/ s_nop           0x0
/*00000001097c*/ s_nop           0x0
/*000000010980*/ s_nop           0x0
/*000000010984*/ s_nop           0x0
/*000000010988*/ s_nop           0x0
/*00000001098c*/ s_nop           0x0
/*000000010990*/ s_nop           0x0
/*000000010994*/ s_nop           0x0
/*000000010998*/ s_nop           0x0
/*00000001099c*/ s_nop           0x0
/*0000000109a0*/ s_nop           0x0
/*0000000109a4*/ s_nop           0x0
/*0000000109a8*/ s_nop           0x0
/*0000000109ac*/ s_nop           0x0
/*0000000109b0*/ s_nop           0x0
/*0000000109b4*/ s_nop           0x0
/*0000000109b8*/ s_nop           0x0
/*0000000109bc*/ s_nop           0x0
/*0000000109c0*/ s_nop           0x0
/*0000000109c4*/ s_nop           0x0
/*0000000109c8*/ s_nop           0x0
/*0000000109cc*/ s_nop           0x0
/*0000000109d0*/ s_nop           0x0
/*0000000109d4*/ s_nop           0x0
/*0000000109d8*/ s_nop           0x0
/*0000000109dc*/ s_nop           0x0
/*0000000109e0*/ s_nop           0x0
/*0000000109e4*/ s_nop           0x0
/*0000000109e8*/ s_nop           0x0
/*0000000109ec*/ s_nop           0x0
/*0000000109f0*/ s_nop           0x0
/*0000000109f4*/ s_nop           0x0
/*0000000109f8*/ s_nop           0x0
/*0000000109fc*/ s_nop           0x0
add_long_get_work_dim_get_local_id:
.skip 256
/*000000010b00*/ v_mov_b32       v3, s4
/*000000010b04*/ v_mov_b32       v4, s5
/*000000010b08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000010b10*/ s_waitcnt       lgkmcnt(0)
/*000000010b14*/ s_clause        0x1
/*000000010b18*/ s_load_dword    s1, s[6:7], 0x20
/*000000010b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000010b28*/ s_lshl_b32      s3, s8, 1
/*000000010b2c*/ s_lshl_b32      s6, s9, 1
/*000000010b30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000010b38*/ v_mov_b32       v4, 0
/*000000010b3c*/ s_lshl_b32      s7, s10, 2
/*000000010b40*/ v_mov_b32       v6, v4
/*000000010b44*/ v_mov_b32       v8, v4
/*000000010b48*/ v_add3_u32      v3, s0, s3, v0
/*000000010b50*/ v_add3_u32      v5, s2, s6, v1
/*000000010b58*/ s_waitcnt       lgkmcnt(0)
/*000000010b5c*/ v_add3_u32      v7, s1, s7, v2
/*000000010b64*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000010b6c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000010b74*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000010b7c*/ v_add_co_u32    v3, vcc, s4, v3
/*000000010b84*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000010b88*/ v_add_co_u32    v14, vcc, s4, v5
/*000000010b90*/ v_add_co_ci_u32 v15, vcc, s5, v6, vcc
/*000000010b94*/ v_add_co_u32    v5, vcc, s4, v7
/*000000010b9c*/ v_add_co_ci_u32 v6, vcc, s5, v8, vcc
/*000000010ba0*/ s_waitcnt       vmcnt(0)
/*000000010ba4*/ v_and_b32       v11, 0xffff, v9
/*000000010bac*/ v_add_co_u32    v9, s[0:1], v11, v0
/*000000010bb4*/ v_add_co_ci_u32 v10, s[0:1], 0, 0, s[0:1]
/*000000010bbc*/ v_add_co_u32    v0, s[0:1], v11, v1
/*000000010bc4*/ v_add_co_ci_u32 v1, s[0:1], 0, 0, s[0:1]
/*000000010bcc*/ v_add_co_u32    v11, s[0:1], v11, v2
/*000000010bd4*/ v_add_co_ci_u32 v12, s[0:1], 0, 0, s[0:1]
/*000000010bdc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000010be4*/ global_store_dwordx2 v[14:15], v[0:1], off
/*000000010bec*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000010bf4*/ s_endpgm
/*000000010bf8*/ s_nop           0x0
/*000000010bfc*/ s_nop           0x0
add_long_x_get_group_id:
.skip 256
/*000000010d00*/ s_clause        0x1
/*000000010d04*/ s_load_dword    s9, s[4:5], 0x8
/*000000010d0c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010d14*/ s_waitcnt       lgkmcnt(0)
/*000000010d18*/ s_clause        0x1
/*000000010d1c*/ s_load_dword    s1, s[4:5], 0x20
/*000000010d24*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000010d2c*/ v_mov_b32       v4, 0
/*000000010d30*/ s_lshl_b32      s3, s6, 4
/*000000010d34*/ s_lshl_b32      s10, s7, 1
/*000000010d38*/ s_lshl_b32      s11, s8, 1
/*000000010d3c*/ v_mov_b32       v6, v4
/*000000010d40*/ v_mov_b32       v8, v4
/*000000010d44*/ s_ashr_i32      s12, s9, 31
/*000000010d48*/ v_add3_u32      v3, s0, s3, v0
/*000000010d50*/ v_add3_u32      v5, s2, s10, v1
/*000000010d58*/ s_waitcnt       lgkmcnt(0)
/*000000010d5c*/ v_add3_u32      v7, s1, s11, v2
/*000000010d64*/ s_add_u32       s0, s9, s6
/*000000010d68*/ s_addc_u32      s1, s12, 0
/*000000010d6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000010d74*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000010d7c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000010d84*/ s_add_u32       s2, s9, s7
/*000000010d88*/ s_addc_u32      s3, s12, 0
/*000000010d8c*/ v_mov_b32       v3, s1
/*000000010d90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000010d98*/ v_mov_b32       v2, s0
/*000000010d9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000010da0*/ v_add_co_u32    v14, vcc, s4, v4
/*000000010da8*/ s_add_u32       s0, s9, s8
/*000000010dac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000010db0*/ s_addc_u32      s1, s12, 0
/*000000010db4*/ v_add_co_u32    v4, vcc, s4, v6
/*000000010dbc*/ v_mov_b32       v9, s3
/*000000010dc0*/ v_mov_b32       v11, s1
/*000000010dc4*/ v_mov_b32       v8, s2
/*000000010dc8*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000010dcc*/ v_mov_b32       v10, s0
/*000000010dd0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000010dd8*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000010de0*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000010de8*/ s_endpgm
/*000000010dec*/ s_nop           0x0
/*000000010df0*/ s_nop           0x0
/*000000010df4*/ s_nop           0x0
/*000000010df8*/ s_nop           0x0
/*000000010dfc*/ s_nop           0x0
add_long_get_global_offset_get_group_id:
.skip 256
/*000000010f00*/ s_clause        0x2
/*000000010f04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010f0c*/ s_load_dword    s9, s[4:5], 0x20
/*000000010f14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010f1c*/ v_mov_b32       v4, 0
/*000000010f20*/ s_waitcnt       lgkmcnt(0)
/*000000010f24*/ s_lshl_b32      s1, s6, 1
/*000000010f28*/ s_lshl_b32      s3, s7, 4
/*000000010f2c*/ s_lshl_b32      s10, s8, 1
/*000000010f30*/ v_mov_b32       v6, v4
/*000000010f34*/ v_mov_b32       v8, v4
/*000000010f38*/ v_add3_u32      v3, s0, s1, v0
/*000000010f40*/ v_add3_u32      v5, s2, s3, v1
/*000000010f48*/ v_add3_u32      v7, s9, s10, v2
/*000000010f50*/ s_add_u32       s0, s0, s6
/*000000010f54*/ s_addc_u32      s1, 0, 0
/*000000010f58*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000010f60*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000010f68*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000010f70*/ s_add_u32       s2, s2, s7
/*000000010f74*/ s_addc_u32      s3, 0, 0
/*000000010f78*/ v_mov_b32       v3, s1
/*000000010f7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000010f84*/ v_mov_b32       v2, s0
/*000000010f88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000010f8c*/ v_add_co_u32    v14, vcc, s4, v4
/*000000010f94*/ s_add_u32       s0, s9, s8
/*000000010f98*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000010f9c*/ s_addc_u32      s1, 0, 0
/*000000010fa0*/ v_add_co_u32    v4, vcc, s4, v6
/*000000010fa8*/ v_mov_b32       v9, s3
/*000000010fac*/ v_mov_b32       v11, s1
/*000000010fb0*/ v_mov_b32       v8, s2
/*000000010fb4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000010fb8*/ v_mov_b32       v10, s0
/*000000010fbc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000010fc4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000010fcc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000010fd4*/ s_endpgm
/*000000010fd8*/ s_nop           0x0
/*000000010fdc*/ s_nop           0x0
/*000000010fe0*/ s_nop           0x0
/*000000010fe4*/ s_nop           0x0
/*000000010fe8*/ s_nop           0x0
/*000000010fec*/ s_nop           0x0
/*000000010ff0*/ s_nop           0x0
/*000000010ff4*/ s_nop           0x0
/*000000010ff8*/ s_nop           0x0
/*000000010ffc*/ s_nop           0x0
add_long_get_local_id_get_group_id:
.skip 256
/*000000011100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011108*/ s_waitcnt       lgkmcnt(0)
/*00000001110c*/ s_clause        0x1
/*000000011110*/ s_load_dword    s1, s[4:5], 0x20
/*000000011118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011120*/ v_mov_b32       v4, 0
/*000000011124*/ s_lshl_b32      s3, s6, 3
/*000000011128*/ s_lshl_b32      s9, s7, 2
/*00000001112c*/ v_mov_b32       v12, 0
/*000000011130*/ v_add_co_u32    v5, vcc, s6, v0
/*000000011138*/ v_mov_b32       v8, v4
/*00000001113c*/ s_lshl_b32      s10, s8, 1
/*000000011140*/ v_add_co_ci_u32 v6, vcc, 0, v12, vcc
/*000000011144*/ v_add3_u32      v3, s0, s3, v0
/*00000001114c*/ v_add3_u32      v7, s2, s9, v1
/*000000011154*/ v_add_co_u32    v0, vcc, s7, v1
/*00000001115c*/ v_add_co_ci_u32 v1, vcc, 0, v12, vcc
/*000000011160*/ v_lshlrev_b64   v[9:10], 3, v[3:4]
/*000000011168*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000011170*/ s_waitcnt       lgkmcnt(0)
/*000000011174*/ v_add3_u32      v3, s1, s10, v2
/*00000001117c*/ v_add_co_u32    v15, vcc, s4, v9
/*000000011184*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001118c*/ v_add_co_ci_u32 v16, vcc, s5, v10, vcc
/*000000011190*/ v_add_co_u32    v18, vcc, s4, v7
/*000000011198*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*00000001119c*/ v_add_co_u32    v11, vcc, s8, v2
/*0000000111a4*/ v_add_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000111a8*/ v_add_co_u32    v9, vcc, s4, v3
/*0000000111b0*/ v_add_co_ci_u32 v10, vcc, s5, v4, vcc
/*0000000111b4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000111bc*/ global_store_dwordx2 v[18:19], v[0:1], off
/*0000000111c4*/ global_store_dwordx2 v[9:10], v[11:12], off
/*0000000111cc*/ s_endpgm
/*0000000111d0*/ s_nop           0x0
/*0000000111d4*/ s_nop           0x0
/*0000000111d8*/ s_nop           0x0
/*0000000111dc*/ s_nop           0x0
/*0000000111e0*/ s_nop           0x0
/*0000000111e4*/ s_nop           0x0
/*0000000111e8*/ s_nop           0x0
/*0000000111ec*/ s_nop           0x0
/*0000000111f0*/ s_nop           0x0
/*0000000111f4*/ s_nop           0x0
/*0000000111f8*/ s_nop           0x0
/*0000000111fc*/ s_nop           0x0
add_long_get_group_id_get_group_id:
.skip 256
/*000000011300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011308*/ s_waitcnt       lgkmcnt(0)
/*00000001130c*/ s_clause        0x1
/*000000011310*/ s_load_dword    s1, s[4:5], 0x20
/*000000011318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011320*/ v_mov_b32       v4, 0
/*000000011324*/ s_lshl_b32      s3, s6, 1
/*000000011328*/ s_mov_b32       s10, s7
/*00000001132c*/ s_lshl_b32      s13, s8, 1
/*000000011330*/ s_lshl_b32      s12, s10, 4
/*000000011334*/ v_mov_b32       v6, v4
/*000000011338*/ v_mov_b32       v8, v4
/*00000001133c*/ s_mov_b32       s7, 0
/*000000011340*/ s_mov_b32       s11, s7
/*000000011344*/ s_mov_b32       s9, s7
/*000000011348*/ s_lshl_b64      s[6:7], s[6:7], 1
/*00000001134c*/ v_add3_u32      v3, s0, s3, v0
/*000000011354*/ v_add3_u32      v5, s2, s12, v1
/*00000001135c*/ s_waitcnt       lgkmcnt(0)
/*000000011360*/ v_add3_u32      v7, s1, s13, v2
/*000000011368*/ s_lshl_b64      s[0:1], s[10:11], 1
/*00000001136c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011374*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001137c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000011384*/ v_mov_b32       v9, s1
/*000000011388*/ v_mov_b32       v2, s6
/*00000001138c*/ v_mov_b32       v8, s0
/*000000011390*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011398*/ s_lshl_b64      s[0:1], s[8:9], 1
/*00000001139c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000113a0*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000113a8*/ v_mov_b32       v3, s7
/*0000000113ac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000113b0*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000113b8*/ v_mov_b32       v11, s1
/*0000000113bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000113c0*/ v_mov_b32       v10, s0
/*0000000113c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000113cc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000113d4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000113dc*/ s_endpgm
/*0000000113e0*/ s_nop           0x0
/*0000000113e4*/ s_nop           0x0
/*0000000113e8*/ s_nop           0x0
/*0000000113ec*/ s_nop           0x0
/*0000000113f0*/ s_nop           0x0
/*0000000113f4*/ s_nop           0x0
/*0000000113f8*/ s_nop           0x0
/*0000000113fc*/ s_nop           0x0
add_long_get_local_size_get_group_id:
.skip 256
/*000000011500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011508*/ s_waitcnt       lgkmcnt(0)
/*00000001150c*/ s_clause        0x1
/*000000011510*/ s_load_dword    s1, s[4:5], 0x20
/*000000011518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011520*/ v_mov_b32       v4, 0
/*000000011524*/ s_lshl_b32      s3, s6, 1
/*000000011528*/ s_lshl_b32      s9, s7, 1
/*00000001152c*/ s_lshl_b32      s12, s8, 2
/*000000011530*/ s_add_u32       s10, s6, 2
/*000000011534*/ v_mov_b32       v6, v4
/*000000011538*/ v_mov_b32       v8, v4
/*00000001153c*/ s_addc_u32      s11, 0, 0
/*000000011540*/ s_add_u32       s6, s7, 2
/*000000011544*/ s_addc_u32      s7, 0, 0
/*000000011548*/ v_add3_u32      v3, s0, s3, v0
/*000000011550*/ v_add3_u32      v5, s2, s9, v1
/*000000011558*/ s_waitcnt       lgkmcnt(0)
/*00000001155c*/ v_add3_u32      v7, s1, s12, v2
/*000000011564*/ s_add_u32       s0, s8, 4
/*000000011568*/ s_addc_u32      s1, 0, 0
/*00000001156c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011574*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001157c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000011584*/ v_mov_b32       v2, s10
/*000000011588*/ v_mov_b32       v9, s7
/*00000001158c*/ v_mov_b32       v3, s11
/*000000011590*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011598*/ v_mov_b32       v11, s1
/*00000001159c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000115a0*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000115a8*/ v_mov_b32       v8, s6
/*0000000115ac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000115b0*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000115b8*/ v_mov_b32       v10, s0
/*0000000115bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000115c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000115c8*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000115d0*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000115d8*/ s_endpgm
/*0000000115dc*/ s_nop           0x0
/*0000000115e0*/ s_nop           0x0
/*0000000115e4*/ s_nop           0x0
/*0000000115e8*/ s_nop           0x0
/*0000000115ec*/ s_nop           0x0
/*0000000115f0*/ s_nop           0x0
/*0000000115f4*/ s_nop           0x0
/*0000000115f8*/ s_nop           0x0
/*0000000115fc*/ s_nop           0x0
add_long_get_global_id_get_group_id:
.skip 256
/*000000011700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011708*/ s_waitcnt       lgkmcnt(0)
/*00000001170c*/ s_clause        0x1
/*000000011710*/ s_load_dword    s1, s[4:5], 0x20
/*000000011718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011720*/ v_mov_b32       v4, 0
/*000000011724*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000001172c*/ s_lshl_b32      s3, s7, 1
/*000000011730*/ v_mov_b32       v14, 0
/*000000011734*/ s_lshl_b32      s9, s8, 2
/*000000011738*/ v_mov_b32       v8, v4
/*00000001173c*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000011744*/ v_add_nc_u32    v9, s0, v3
/*000000011748*/ v_add3_u32      v7, s2, s3, v1
/*000000011750*/ s_waitcnt       lgkmcnt(0)
/*000000011754*/ v_add_co_u32    v15, vcc, s4, v5
/*00000001175c*/ v_add3_u32      v3, s1, s9, v2
/*000000011764*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000011768*/ v_add_co_u32    v5, vcc, v9, s6
/*000000011770*/ v_lshlrev_b64   v[8:9], 3, v[7:8]
/*000000011778*/ v_add_co_ci_u32 v6, vcc, 0, v14, vcc
/*00000001177c*/ v_add_co_u32    v17, vcc, v7, s7
/*000000011784*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*00000001178c*/ v_add_co_ci_u32 v18, vcc, 0, v14, vcc
/*000000011790*/ v_add_co_u32    v7, vcc, s4, v8
/*000000011798*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*00000001179c*/ v_add_co_u32    v2, vcc, v3, s8
/*0000000117a4*/ v_add_co_ci_u32 v3, vcc, 0, v14, vcc
/*0000000117a8*/ v_add_co_u32    v12, vcc, s4, v12
/*0000000117b0*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*0000000117b4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000117bc*/ global_store_dwordx2 v[7:8], v[17:18], off
/*0000000117c4*/ global_store_dwordx2 v[12:13], v[2:3], off
/*0000000117cc*/ s_endpgm
/*0000000117d0*/ s_nop           0x0
/*0000000117d4*/ s_nop           0x0
/*0000000117d8*/ s_nop           0x0
/*0000000117dc*/ s_nop           0x0
/*0000000117e0*/ s_nop           0x0
/*0000000117e4*/ s_nop           0x0
/*0000000117e8*/ s_nop           0x0
/*0000000117ec*/ s_nop           0x0
/*0000000117f0*/ s_nop           0x0
/*0000000117f4*/ s_nop           0x0
/*0000000117f8*/ s_nop           0x0
/*0000000117fc*/ s_nop           0x0
add_long_get_global_size_get_group_id:
.skip 256
/*000000011900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000011908*/ s_waitcnt       lgkmcnt(0)
/*00000001190c*/ s_load_dword    s1, s[6:7], 0x20
/*000000011914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001191c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000011924*/ v_mov_b32       v4, 0
/*000000011928*/ s_lshl_b32      s3, s8, 4
/*00000001192c*/ s_lshl_b32      s6, s9, 1
/*000000011930*/ s_lshl_b32      s7, s10, 1
/*000000011934*/ v_mov_b32       v6, v4
/*000000011938*/ v_mov_b32       v8, v4
/*00000001193c*/ s_waitcnt       lgkmcnt(0)
/*000000011940*/ v_add3_u32      v7, s1, s7, v2
/*000000011948*/ v_add3_u32      v3, s0, s3, v0
/*000000011950*/ v_add3_u32      v5, s2, s6, v1
/*000000011958*/ s_add_u32       s0, s12, s8
/*00000001195c*/ s_addc_u32      s1, 0, 0
/*000000011960*/ s_add_u32       s2, s13, s9
/*000000011964*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000001196c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000011974*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000001197c*/ s_addc_u32      s3, 0, 0
/*000000011980*/ v_mov_b32       v3, s1
/*000000011984*/ v_mov_b32       v2, s0
/*000000011988*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011990*/ s_add_u32       s0, s14, s10
/*000000011994*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011998*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000119a0*/ s_addc_u32      s1, 0, 0
/*0000000119a4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000119a8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000119b0*/ v_mov_b32       v9, s3
/*0000000119b4*/ v_mov_b32       v11, s1
/*0000000119b8*/ v_mov_b32       v8, s2
/*0000000119bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000119c0*/ v_mov_b32       v10, s0
/*0000000119c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000119cc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000119d4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000119dc*/ s_endpgm
/*0000000119e0*/ s_nop           0x0
/*0000000119e4*/ s_nop           0x0
/*0000000119e8*/ s_nop           0x0
/*0000000119ec*/ s_nop           0x0
/*0000000119f0*/ s_nop           0x0
/*0000000119f4*/ s_nop           0x0
/*0000000119f8*/ s_nop           0x0
/*0000000119fc*/ s_nop           0x0
add_long_get_num_groups_get_group_id:
.skip 256
/*000000011b00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000011b08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000011b10*/ s_waitcnt       lgkmcnt(0)
/*000000011b14*/ s_clause        0x1
/*000000011b18*/ s_load_dword    s3, s[6:7], 0x20
/*000000011b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000011b28*/ s_lshl_b32      s7, s8, 1
/*000000011b2c*/ s_lshl_b32      s11, s9, 1
/*000000011b30*/ s_lshl_b32      s13, s10, 2
/*000000011b34*/ v_mov_b32       v4, 0
/*000000011b38*/ v_mov_b32       v6, v4
/*000000011b3c*/ v_mov_b32       v8, v4
/*000000011b40*/ s_and_b32       s6, s0, -2
/*000000011b44*/ v_add3_u32      v3, s12, s7, v0
/*000000011b4c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000011b54*/ s_lshr_b32      s0, s0, 1
/*000000011b58*/ s_waitcnt       lgkmcnt(0)
/*000000011b5c*/ v_add3_u32      v7, s3, s13, v2
/*000000011b64*/ v_add3_u32      v5, s14, s11, v1
/*000000011b6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011b74*/ s_cmpk_lg_u32   s6, 0x0
/*000000011b78*/ s_addc_u32      s0, s0, 0
/*000000011b7c*/ s_and_b32       s6, s1, -2
/*000000011b80*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000011b88*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000011b90*/ s_lshr_b32      s1, s1, 1
/*000000011b94*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011b9c*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000011ba4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011ba8*/ s_cmpk_lg_u32   s6, 0x0
/*000000011bac*/ v_add_co_u32    v2, vcc, s4, v2
/*000000011bb4*/ s_addc_u32      s3, s1, 0
/*000000011bb8*/ s_and_b32       s1, s2, -4
/*000000011bbc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000011bc0*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000011bc8*/ s_lshr_b32      s2, s2, 2
/*000000011bcc*/ v_add_co_u32    v4, vcc, s4, v4
/*000000011bd4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000011bd8*/ s_cmpk_lg_u32   s1, 0x0
/*000000011bdc*/ s_addc_u32      s6, s2, 0
/*000000011be0*/ s_add_u32       s0, s0, s8
/*000000011be4*/ s_addc_u32      s1, 0, 0
/*000000011be8*/ s_add_u32       s2, s3, s9
/*000000011bec*/ s_addc_u32      s3, 0, 0
/*000000011bf0*/ v_mov_b32       v7, s1
/*000000011bf4*/ v_mov_b32       v6, s0
/*000000011bf8*/ s_add_u32       s0, s6, s10
/*000000011bfc*/ s_addc_u32      s1, 0, 0
/*000000011c00*/ v_mov_b32       v9, s3
/*000000011c04*/ v_mov_b32       v11, s1
/*000000011c08*/ v_mov_b32       v8, s2
/*000000011c0c*/ v_mov_b32       v10, s0
/*000000011c10*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000011c18*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000011c20*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000011c28*/ s_endpgm
/*000000011c2c*/ s_nop           0x0
/*000000011c30*/ s_nop           0x0
/*000000011c34*/ s_nop           0x0
/*000000011c38*/ s_nop           0x0
/*000000011c3c*/ s_nop           0x0
/*000000011c40*/ s_nop           0x0
/*000000011c44*/ s_nop           0x0
/*000000011c48*/ s_nop           0x0
/*000000011c4c*/ s_nop           0x0
/*000000011c50*/ s_nop           0x0
/*000000011c54*/ s_nop           0x0
/*000000011c58*/ s_nop           0x0
/*000000011c5c*/ s_nop           0x0
/*000000011c60*/ s_nop           0x0
/*000000011c64*/ s_nop           0x0
/*000000011c68*/ s_nop           0x0
/*000000011c6c*/ s_nop           0x0
/*000000011c70*/ s_nop           0x0
/*000000011c74*/ s_nop           0x0
/*000000011c78*/ s_nop           0x0
/*000000011c7c*/ s_nop           0x0
/*000000011c80*/ s_nop           0x0
/*000000011c84*/ s_nop           0x0
/*000000011c88*/ s_nop           0x0
/*000000011c8c*/ s_nop           0x0
/*000000011c90*/ s_nop           0x0
/*000000011c94*/ s_nop           0x0
/*000000011c98*/ s_nop           0x0
/*000000011c9c*/ s_nop           0x0
/*000000011ca0*/ s_nop           0x0
/*000000011ca4*/ s_nop           0x0
/*000000011ca8*/ s_nop           0x0
/*000000011cac*/ s_nop           0x0
/*000000011cb0*/ s_nop           0x0
/*000000011cb4*/ s_nop           0x0
/*000000011cb8*/ s_nop           0x0
/*000000011cbc*/ s_nop           0x0
/*000000011cc0*/ s_nop           0x0
/*000000011cc4*/ s_nop           0x0
/*000000011cc8*/ s_nop           0x0
/*000000011ccc*/ s_nop           0x0
/*000000011cd0*/ s_nop           0x0
/*000000011cd4*/ s_nop           0x0
/*000000011cd8*/ s_nop           0x0
/*000000011cdc*/ s_nop           0x0
/*000000011ce0*/ s_nop           0x0
/*000000011ce4*/ s_nop           0x0
/*000000011ce8*/ s_nop           0x0
/*000000011cec*/ s_nop           0x0
/*000000011cf0*/ s_nop           0x0
/*000000011cf4*/ s_nop           0x0
/*000000011cf8*/ s_nop           0x0
/*000000011cfc*/ s_nop           0x0
add_long_get_work_dim_get_group_id:
.skip 256
/*000000011e00*/ v_mov_b32       v3, s4
/*000000011e04*/ v_mov_b32       v4, s5
/*000000011e08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000011e10*/ s_waitcnt       lgkmcnt(0)
/*000000011e14*/ s_clause        0x1
/*000000011e18*/ s_load_dword    s1, s[6:7], 0x20
/*000000011e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000011e28*/ s_lshl_b32      s3, s8, 1
/*000000011e2c*/ s_lshl_b32      s6, s9, 1
/*000000011e30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000011e38*/ v_mov_b32       v4, 0
/*000000011e3c*/ s_lshl_b32      s7, s10, 2
/*000000011e40*/ v_mov_b32       v11, 0
/*000000011e44*/ v_mov_b32       v6, v4
/*000000011e48*/ v_mov_b32       v8, v4
/*000000011e4c*/ v_add3_u32      v3, s0, s3, v0
/*000000011e54*/ v_add3_u32      v5, s2, s6, v1
/*000000011e5c*/ s_waitcnt       lgkmcnt(0)
/*000000011e60*/ v_add3_u32      v7, s1, s7, v2
/*000000011e68*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011e70*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000011e78*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000011e80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011e88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011e8c*/ v_add_co_u32    v2, vcc, s4, v2
/*000000011e94*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000011e98*/ v_add_co_u32    v4, vcc, s4, v4
/*000000011ea0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000011ea4*/ s_waitcnt       vmcnt(0)
/*000000011ea8*/ v_and_b32       v10, 0xffff, v9
/*000000011eb0*/ v_add_co_u32    v6, vcc, v10, s8
/*000000011eb8*/ v_add_co_ci_u32 v7, vcc, 0, v11, vcc
/*000000011ebc*/ v_add_co_u32    v8, vcc, v10, s9
/*000000011ec4*/ v_add_co_ci_u32 v9, vcc, 0, v11, vcc
/*000000011ec8*/ v_add_co_u32    v10, vcc, v10, s10
/*000000011ed0*/ v_add_co_ci_u32 v11, vcc, 0, v11, vcc
/*000000011ed4*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000011edc*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000011ee4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000011eec*/ s_endpgm
/*000000011ef0*/ s_nop           0x0
/*000000011ef4*/ s_nop           0x0
/*000000011ef8*/ s_nop           0x0
/*000000011efc*/ s_nop           0x0
add_long_x_get_local_size:
.skip 256
/*000000012000*/ s_clause        0x1
/*000000012004*/ s_load_dword    s9, s[4:5], 0x8
/*00000001200c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012014*/ s_waitcnt       lgkmcnt(0)
/*000000012018*/ s_clause        0x1
/*00000001201c*/ s_load_dword    s1, s[4:5], 0x20
/*000000012024*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001202c*/ v_mov_b32       v4, 0
/*000000012030*/ s_lshl_b32      s3, s6, 4
/*000000012034*/ s_lshl_b32      s6, s7, 1
/*000000012038*/ s_lshl_b32      s7, s8, 1
/*00000001203c*/ v_mov_b32       v6, v4
/*000000012040*/ v_mov_b32       v8, v4
/*000000012044*/ s_ashr_i32      s8, s9, 31
/*000000012048*/ v_add3_u32      v3, s0, s3, v0
/*000000012050*/ v_add3_u32      v5, s2, s6, v1
/*000000012058*/ s_waitcnt       lgkmcnt(0)
/*00000001205c*/ v_add3_u32      v7, s1, s7, v2
/*000000012064*/ s_add_u32       s0, s9, 16
/*000000012068*/ s_addc_u32      s1, s8, 0
/*00000001206c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012074*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001207c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012084*/ s_add_u32       s2, s9, 2
/*000000012088*/ s_addc_u32      s3, s8, 0
/*00000001208c*/ v_mov_b32       v3, s1
/*000000012090*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012098*/ v_mov_b32       v9, s3
/*00000001209c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000120a0*/ v_add_co_u32    v10, vcc, s4, v4
/*0000000120a8*/ v_mov_b32       v2, s0
/*0000000120ac*/ v_add_co_ci_u32 v11, vcc, s5, v5, vcc
/*0000000120b0*/ v_add_co_u32    v6, vcc, s4, v6
/*0000000120b8*/ v_mov_b32       v8, s2
/*0000000120bc*/ v_add_co_ci_u32 v7, vcc, s5, v7, vcc
/*0000000120c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000120c8*/ global_store_dwordx2 v[10:11], v[8:9], off
/*0000000120d0*/ global_store_dwordx2 v[6:7], v[8:9], off
/*0000000120d8*/ s_endpgm
/*0000000120dc*/ s_nop           0x0
/*0000000120e0*/ s_nop           0x0
/*0000000120e4*/ s_nop           0x0
/*0000000120e8*/ s_nop           0x0
/*0000000120ec*/ s_nop           0x0
/*0000000120f0*/ s_nop           0x0
/*0000000120f4*/ s_nop           0x0
/*0000000120f8*/ s_nop           0x0
/*0000000120fc*/ s_nop           0x0
add_long_get_global_offset_get_local_size:
.skip 256
/*000000012200*/ s_clause        0x2
/*000000012204*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001220c*/ s_load_dword    s9, s[4:5], 0x20
/*000000012214*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001221c*/ v_mov_b32       v4, 0
/*000000012220*/ s_waitcnt       lgkmcnt(0)
/*000000012224*/ s_lshl_b32      s1, s6, 1
/*000000012228*/ s_lshl_b32      s3, s7, 4
/*00000001222c*/ s_lshl_b32      s6, s8, 1
/*000000012230*/ v_mov_b32       v6, v4
/*000000012234*/ v_mov_b32       v8, v4
/*000000012238*/ v_add3_u32      v3, s0, s1, v0
/*000000012240*/ v_add3_u32      v5, s2, s3, v1
/*000000012248*/ v_add3_u32      v7, s9, s6, v2
/*000000012250*/ s_add_u32       s0, s0, 2
/*000000012254*/ s_addc_u32      s1, 0, 0
/*000000012258*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012260*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000012268*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012270*/ s_add_u32       s2, s2, 16
/*000000012274*/ s_addc_u32      s3, 0, 0
/*000000012278*/ v_mov_b32       v3, s1
/*00000001227c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012284*/ v_mov_b32       v2, s0
/*000000012288*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000001228c*/ v_add_co_u32    v14, vcc, s4, v4
/*000000012294*/ s_add_u32       s0, s9, 2
/*000000012298*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*00000001229c*/ s_addc_u32      s1, 0, 0
/*0000000122a0*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000122a8*/ v_mov_b32       v9, s3
/*0000000122ac*/ v_mov_b32       v11, s1
/*0000000122b0*/ v_mov_b32       v8, s2
/*0000000122b4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000122b8*/ v_mov_b32       v10, s0
/*0000000122bc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000122c4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000122cc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000122d4*/ s_endpgm
/*0000000122d8*/ s_nop           0x0
/*0000000122dc*/ s_nop           0x0
/*0000000122e0*/ s_nop           0x0
/*0000000122e4*/ s_nop           0x0
/*0000000122e8*/ s_nop           0x0
/*0000000122ec*/ s_nop           0x0
/*0000000122f0*/ s_nop           0x0
/*0000000122f4*/ s_nop           0x0
/*0000000122f8*/ s_nop           0x0
/*0000000122fc*/ s_nop           0x0
add_long_get_local_id_get_local_size:
.skip 256
/*000000012400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012408*/ s_waitcnt       lgkmcnt(0)
/*00000001240c*/ s_clause        0x1
/*000000012410*/ s_load_dword    s1, s[4:5], 0x20
/*000000012418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012420*/ v_mov_b32       v15, 0
/*000000012424*/ s_lshl_b32      s3, s6, 3
/*000000012428*/ v_or_b32        v14, 8, v0
/*00000001242c*/ v_mov_b32       v6, v15
/*000000012430*/ v_mov_b32       v8, v15
/*000000012434*/ v_mov_b32       v10, v15
/*000000012438*/ v_add3_u32      v5, s0, s3, v0
/*000000012440*/ s_lshl_b32      s0, s7, 2
/*000000012444*/ s_lshl_b32      s3, s8, 1
/*000000012448*/ v_add3_u32      v7, s2, s0, v1
/*000000012450*/ s_waitcnt       lgkmcnt(0)
/*000000012454*/ v_add3_u32      v9, s1, s3, v2
/*00000001245c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000012464*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000001246c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000012474*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000012478*/ v_add_co_u32    v7, vcc, s4, v7
/*000000012480*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000012484*/ global_store_dwordx2 v[4:5], v[14:15], off
/*00000001248c*/ v_or_b32        v14, 4, v1
/*000000012490*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*000000012498*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000124a0*/ v_or_b32        v14, 2, v2
/*0000000124a4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000124ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000124b0*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000124b8*/ s_endpgm
/*0000000124bc*/ s_nop           0x0
/*0000000124c0*/ s_nop           0x0
/*0000000124c4*/ s_nop           0x0
/*0000000124c8*/ s_nop           0x0
/*0000000124cc*/ s_nop           0x0
/*0000000124d0*/ s_nop           0x0
/*0000000124d4*/ s_nop           0x0
/*0000000124d8*/ s_nop           0x0
/*0000000124dc*/ s_nop           0x0
/*0000000124e0*/ s_nop           0x0
/*0000000124e4*/ s_nop           0x0
/*0000000124e8*/ s_nop           0x0
/*0000000124ec*/ s_nop           0x0
/*0000000124f0*/ s_nop           0x0
/*0000000124f4*/ s_nop           0x0
/*0000000124f8*/ s_nop           0x0
/*0000000124fc*/ s_nop           0x0
add_long_get_group_id_get_local_size:
.skip 256
/*000000012600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012608*/ s_waitcnt       lgkmcnt(0)
/*00000001260c*/ s_clause        0x1
/*000000012610*/ s_load_dword    s1, s[4:5], 0x20
/*000000012618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012620*/ v_mov_b32       v4, 0
/*000000012624*/ s_lshl_b32      s3, s6, 1
/*000000012628*/ s_lshl_b32      s9, s7, 4
/*00000001262c*/ s_lshl_b32      s12, s8, 1
/*000000012630*/ s_add_u32       s10, s6, 2
/*000000012634*/ v_mov_b32       v6, v4
/*000000012638*/ v_mov_b32       v8, v4
/*00000001263c*/ s_addc_u32      s11, 0, 0
/*000000012640*/ s_add_u32       s6, s7, 16
/*000000012644*/ s_addc_u32      s7, 0, 0
/*000000012648*/ v_add3_u32      v3, s0, s3, v0
/*000000012650*/ v_add3_u32      v5, s2, s9, v1
/*000000012658*/ s_waitcnt       lgkmcnt(0)
/*00000001265c*/ v_add3_u32      v7, s1, s12, v2
/*000000012664*/ s_add_u32       s0, s8, 2
/*000000012668*/ s_addc_u32      s1, 0, 0
/*00000001266c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012674*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001267c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012684*/ v_mov_b32       v2, s10
/*000000012688*/ v_mov_b32       v9, s7
/*00000001268c*/ v_mov_b32       v3, s11
/*000000012690*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012698*/ v_mov_b32       v11, s1
/*00000001269c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000126a0*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000126a8*/ v_mov_b32       v8, s6
/*0000000126ac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000126b0*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000126b8*/ v_mov_b32       v10, s0
/*0000000126bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000126c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000126c8*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000126d0*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000126d8*/ s_endpgm
/*0000000126dc*/ s_nop           0x0
/*0000000126e0*/ s_nop           0x0
/*0000000126e4*/ s_nop           0x0
/*0000000126e8*/ s_nop           0x0
/*0000000126ec*/ s_nop           0x0
/*0000000126f0*/ s_nop           0x0
/*0000000126f4*/ s_nop           0x0
/*0000000126f8*/ s_nop           0x0
/*0000000126fc*/ s_nop           0x0
add_long_get_local_size_get_local_size:
.skip 256
/*000000012800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012808*/ s_waitcnt       lgkmcnt(0)
/*00000001280c*/ s_clause        0x1
/*000000012810*/ s_load_dword    s3, s[4:5], 0x20
/*000000012818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012820*/ v_mov_b32       v4, 0
/*000000012824*/ s_lshl_b32      s6, s6, 1
/*000000012828*/ s_lshl_b32      s7, s7, 1
/*00000001282c*/ s_lshl_b32      s8, s8, 2
/*000000012830*/ s_mov_b32       s1, 0
/*000000012834*/ v_mov_b32       v6, v4
/*000000012838*/ v_mov_b32       v8, v4
/*00000001283c*/ v_add3_u32      v3, s0, s6, v0
/*000000012844*/ v_add3_u32      v5, s2, s7, v1
/*00000001284c*/ s_waitcnt       lgkmcnt(0)
/*000000012850*/ v_add3_u32      v7, s3, s8, v2
/*000000012858*/ s_mov_b32       s0, 4
/*00000001285c*/ v_mov_b32       v10, s1
/*000000012860*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012868*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000012870*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000012878*/ v_mov_b32       v9, s0
/*00000001287c*/ v_mov_b32       v3, 8
/*000000012880*/ v_add_co_u32    v11, vcc, s4, v0
/*000000012888*/ v_add_co_ci_u32 v12, vcc, s5, v1, vcc
/*00000001288c*/ v_add_co_u32    v15, vcc, s4, v5
/*000000012894*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000012898*/ v_add_co_u32    v1, vcc, s4, v7
/*0000000128a0*/ v_add_co_ci_u32 v2, vcc, s5, v8, vcc
/*0000000128a4*/ global_store_dwordx2 v[11:12], v[9:10], off
/*0000000128ac*/ global_store_dwordx2 v[15:16], v[9:10], off
/*0000000128b4*/ global_store_dwordx2 v[1:2], v[3:4], off
/*0000000128bc*/ s_endpgm
/*0000000128c0*/ s_nop           0x0
/*0000000128c4*/ s_nop           0x0
/*0000000128c8*/ s_nop           0x0
/*0000000128cc*/ s_nop           0x0
/*0000000128d0*/ s_nop           0x0
/*0000000128d4*/ s_nop           0x0
/*0000000128d8*/ s_nop           0x0
/*0000000128dc*/ s_nop           0x0
/*0000000128e0*/ s_nop           0x0
/*0000000128e4*/ s_nop           0x0
/*0000000128e8*/ s_nop           0x0
/*0000000128ec*/ s_nop           0x0
/*0000000128f0*/ s_nop           0x0
/*0000000128f4*/ s_nop           0x0
/*0000000128f8*/ s_nop           0x0
/*0000000128fc*/ s_nop           0x0
add_long_get_global_id_get_local_size:
.skip 256
/*000000012a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012a08*/ s_waitcnt       lgkmcnt(0)
/*000000012a0c*/ s_clause        0x1
/*000000012a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000012a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012a20*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000012a28*/ v_mov_b32       v4, 0
/*000000012a2c*/ s_lshl_b32      s6, s7, 1
/*000000012a30*/ s_lshl_b32      s7, s8, 2
/*000000012a34*/ s_mov_b32       s3, 0
/*000000012a38*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000012a40*/ v_mov_b32       v8, v4
/*000000012a44*/ v_add_nc_u32    v9, s0, v3
/*000000012a48*/ v_add3_u32      v7, s2, s6, v1
/*000000012a50*/ s_waitcnt       lgkmcnt(0)
/*000000012a54*/ v_add3_u32      v3, s1, s7, v2
/*000000012a5c*/ v_add_co_u32    v15, vcc, s4, v5
/*000000012a64*/ v_add_co_u32    v5, s[0:1], v9, 2
/*000000012a6c*/ v_lshlrev_b64   v[8:9], 3, v[7:8]
/*000000012a74*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*000000012a7c*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000012a80*/ v_add_co_ci_u32 v6, s[0:1], s3, 0, s[0:1]
/*000000012a88*/ v_add_co_u32    v17, s[0:1], v7, 2
/*000000012a90*/ v_add_co_u32    v7, vcc, s4, v8
/*000000012a98*/ v_add_co_ci_u32 v18, s[0:1], s3, 0, s[0:1]
/*000000012aa0*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*000000012aa4*/ v_add_co_u32    v2, s[0:1], v3, 4
/*000000012aac*/ v_add_co_u32    v12, vcc, s4, v12
/*000000012ab4*/ v_add_co_ci_u32 v3, s[0:1], s3, 0, s[0:1]
/*000000012abc*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*000000012ac0*/ global_store_dwordx2 v[15:16], v[5:6], off
/*000000012ac8*/ global_store_dwordx2 v[7:8], v[17:18], off
/*000000012ad0*/ global_store_dwordx2 v[12:13], v[2:3], off
/*000000012ad8*/ s_endpgm
/*000000012adc*/ s_nop           0x0
/*000000012ae0*/ s_nop           0x0
/*000000012ae4*/ s_nop           0x0
/*000000012ae8*/ s_nop           0x0
/*000000012aec*/ s_nop           0x0
/*000000012af0*/ s_nop           0x0
/*000000012af4*/ s_nop           0x0
/*000000012af8*/ s_nop           0x0
/*000000012afc*/ s_nop           0x0
add_long_get_global_size_get_local_size:
.skip 256
/*000000012c00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000012c08*/ s_waitcnt       lgkmcnt(0)
/*000000012c0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000012c14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000012c1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000012c24*/ v_mov_b32       v4, 0
/*000000012c28*/ s_lshl_b32      s3, s8, 4
/*000000012c2c*/ s_lshl_b32      s6, s9, 1
/*000000012c30*/ s_lshl_b32      s7, s10, 1
/*000000012c34*/ v_mov_b32       v6, v4
/*000000012c38*/ v_mov_b32       v8, v4
/*000000012c3c*/ s_waitcnt       lgkmcnt(0)
/*000000012c40*/ v_add3_u32      v7, s1, s7, v2
/*000000012c48*/ v_add3_u32      v3, s0, s3, v0
/*000000012c50*/ v_add3_u32      v5, s2, s6, v1
/*000000012c58*/ s_add_u32       s0, s12, 16
/*000000012c5c*/ s_addc_u32      s1, 0, 0
/*000000012c60*/ s_add_u32       s2, s13, 2
/*000000012c64*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012c6c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000012c74*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012c7c*/ s_addc_u32      s3, 0, 0
/*000000012c80*/ v_mov_b32       v3, s1
/*000000012c84*/ v_mov_b32       v2, s0
/*000000012c88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012c90*/ s_add_u32       s0, s14, 2
/*000000012c94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012c98*/ v_add_co_u32    v14, vcc, s4, v4
/*000000012ca0*/ s_addc_u32      s1, 0, 0
/*000000012ca4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000012ca8*/ v_add_co_u32    v4, vcc, s4, v6
/*000000012cb0*/ v_mov_b32       v9, s3
/*000000012cb4*/ v_mov_b32       v11, s1
/*000000012cb8*/ v_mov_b32       v8, s2
/*000000012cbc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000012cc0*/ v_mov_b32       v10, s0
/*000000012cc4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000012ccc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000012cd4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000012cdc*/ s_endpgm
/*000000012ce0*/ s_nop           0x0
/*000000012ce4*/ s_nop           0x0
/*000000012ce8*/ s_nop           0x0
/*000000012cec*/ s_nop           0x0
/*000000012cf0*/ s_nop           0x0
/*000000012cf4*/ s_nop           0x0
/*000000012cf8*/ s_nop           0x0
/*000000012cfc*/ s_nop           0x0
add_long_get_num_groups_get_local_size:
.skip 256
/*000000012e00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000012e08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000012e10*/ s_waitcnt       lgkmcnt(0)
/*000000012e14*/ s_clause        0x1
/*000000012e18*/ s_load_dword    s3, s[6:7], 0x20
/*000000012e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000012e28*/ s_lshl_b32      s7, s9, 1
/*000000012e2c*/ s_lshl_b32      s6, s8, 1
/*000000012e30*/ s_lshl_b32      s8, s10, 2
/*000000012e34*/ v_mov_b32       v4, 0
/*000000012e38*/ v_mov_b32       v6, v4
/*000000012e3c*/ v_mov_b32       v8, v4
/*000000012e40*/ s_and_b32       s9, s0, -2
/*000000012e44*/ s_waitcnt       lgkmcnt(0)
/*000000012e48*/ v_add3_u32      v7, s3, s8, v2
/*000000012e50*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000012e58*/ s_lshr_b32      s0, s0, 1
/*000000012e5c*/ v_add3_u32      v3, s12, s6, v0
/*000000012e64*/ v_add3_u32      v5, s14, s7, v1
/*000000012e6c*/ s_cmpk_lg_u32   s9, 0x0
/*000000012e70*/ s_addc_u32      s0, s0, 0
/*000000012e74*/ s_and_b32       s3, s1, -2
/*000000012e78*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012e80*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000012e88*/ s_lshr_b32      s1, s1, 1
/*000000012e8c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000012e94*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000012e9c*/ s_cmpk_lg_u32   s3, 0x0
/*000000012ea0*/ v_add_co_u32    v13, vcc, s4, v0
/*000000012ea8*/ s_addc_u32      s3, s1, 0
/*000000012eac*/ s_and_b32       s1, s2, -4
/*000000012eb0*/ s_lshr_b32      s6, s2, 2
/*000000012eb4*/ v_cmp_gt_u32    s[7:8], s2, s1
/*000000012ebc*/ s_add_u32       s0, s0, 2
/*000000012ec0*/ s_addc_u32      s1, 0, 0
/*000000012ec4*/ s_add_u32       s2, s3, 2
/*000000012ec8*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*000000012ecc*/ s_addc_u32      s3, 0, 0
/*000000012ed0*/ v_add_co_u32    v9, vcc, s4, v2
/*000000012ed8*/ s_cmpk_lg_u32   s7, 0x0
/*000000012edc*/ v_add_co_ci_u32 v10, vcc, s5, v3, vcc
/*000000012ee0*/ v_mov_b32       v8, s1
/*000000012ee4*/ v_add_co_u32    v5, vcc, s4, v5
/*000000012eec*/ v_mov_b32       v7, s0
/*000000012ef0*/ s_addc_u32      s0, s6, 4
/*000000012ef4*/ v_mov_b32       v12, s3
/*000000012ef8*/ v_mov_b32       v11, s2
/*000000012efc*/ v_mov_b32       v3, s0
/*000000012f00*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000012f04*/ global_store_dwordx2 v[13:14], v[7:8], off
/*000000012f0c*/ global_store_dwordx2 v[9:10], v[11:12], off
/*000000012f14*/ global_store_dwordx2 v[5:6], v[3:4], off
/*000000012f1c*/ s_endpgm
/*000000012f20*/ s_nop           0x0
/*000000012f24*/ s_nop           0x0
/*000000012f28*/ s_nop           0x0
/*000000012f2c*/ s_nop           0x0
/*000000012f30*/ s_nop           0x0
/*000000012f34*/ s_nop           0x0
/*000000012f38*/ s_nop           0x0
/*000000012f3c*/ s_nop           0x0
/*000000012f40*/ s_nop           0x0
/*000000012f44*/ s_nop           0x0
/*000000012f48*/ s_nop           0x0
/*000000012f4c*/ s_nop           0x0
/*000000012f50*/ s_nop           0x0
/*000000012f54*/ s_nop           0x0
/*000000012f58*/ s_nop           0x0
/*000000012f5c*/ s_nop           0x0
/*000000012f60*/ s_nop           0x0
/*000000012f64*/ s_nop           0x0
/*000000012f68*/ s_nop           0x0
/*000000012f6c*/ s_nop           0x0
/*000000012f70*/ s_nop           0x0
/*000000012f74*/ s_nop           0x0
/*000000012f78*/ s_nop           0x0
/*000000012f7c*/ s_nop           0x0
/*000000012f80*/ s_nop           0x0
/*000000012f84*/ s_nop           0x0
/*000000012f88*/ s_nop           0x0
/*000000012f8c*/ s_nop           0x0
/*000000012f90*/ s_nop           0x0
/*000000012f94*/ s_nop           0x0
/*000000012f98*/ s_nop           0x0
/*000000012f9c*/ s_nop           0x0
/*000000012fa0*/ s_nop           0x0
/*000000012fa4*/ s_nop           0x0
/*000000012fa8*/ s_nop           0x0
/*000000012fac*/ s_nop           0x0
/*000000012fb0*/ s_nop           0x0
/*000000012fb4*/ s_nop           0x0
/*000000012fb8*/ s_nop           0x0
/*000000012fbc*/ s_nop           0x0
/*000000012fc0*/ s_nop           0x0
/*000000012fc4*/ s_nop           0x0
/*000000012fc8*/ s_nop           0x0
/*000000012fcc*/ s_nop           0x0
/*000000012fd0*/ s_nop           0x0
/*000000012fd4*/ s_nop           0x0
/*000000012fd8*/ s_nop           0x0
/*000000012fdc*/ s_nop           0x0
/*000000012fe0*/ s_nop           0x0
/*000000012fe4*/ s_nop           0x0
/*000000012fe8*/ s_nop           0x0
/*000000012fec*/ s_nop           0x0
/*000000012ff0*/ s_nop           0x0
/*000000012ff4*/ s_nop           0x0
/*000000012ff8*/ s_nop           0x0
/*000000012ffc*/ s_nop           0x0
add_long_get_work_dim_get_local_size:
.skip 256
/*000000013100*/ v_mov_b32       v3, s4
/*000000013104*/ v_mov_b32       v4, s5
/*000000013108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000013110*/ s_waitcnt       lgkmcnt(0)
/*000000013114*/ s_clause        0x1
/*000000013118*/ s_load_dword    s1, s[6:7], 0x20
/*000000013120*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000013128*/ s_lshl_b32      s3, s8, 1
/*00000001312c*/ s_lshl_b32      s6, s9, 1
/*000000013130*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000013138*/ v_mov_b32       v4, 0
/*00000001313c*/ s_lshl_b32      s7, s10, 2
/*000000013140*/ v_mov_b32       v6, v4
/*000000013144*/ v_mov_b32       v8, v4
/*000000013148*/ v_add3_u32      v3, s0, s3, v0
/*000000013150*/ v_add3_u32      v5, s2, s6, v1
/*000000013158*/ s_waitcnt       lgkmcnt(0)
/*00000001315c*/ v_add3_u32      v7, s1, s7, v2
/*000000013164*/ s_mov_b32       s0, 0
/*000000013168*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000013170*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000013178*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000013180*/ v_add_co_u32    v0, vcc, s4, v0
/*000000013188*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000001318c*/ v_add_co_u32    v12, vcc, s4, v2
/*000000013194*/ v_add_co_ci_u32 v13, vcc, s5, v3, vcc
/*000000013198*/ v_add_co_u32    v2, vcc, s4, v4
/*0000000131a0*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*0000000131a4*/ s_waitcnt       vmcnt(0)
/*0000000131a8*/ v_and_b32       v8, 0xffff, v9
/*0000000131b0*/ v_add_co_u32    v6, s[1:2], v8, 2
/*0000000131b8*/ v_add_co_ci_u32 v7, s[1:2], s0, 0, s[1:2]
/*0000000131c0*/ v_add_co_u32    v8, s[1:2], v8, 4
/*0000000131c8*/ v_add_co_ci_u32 v9, s[0:1], s0, 0, s[1:2]
/*0000000131d0*/ global_store_dwordx2 v[0:1], v[6:7], off
/*0000000131d8*/ global_store_dwordx2 v[12:13], v[6:7], off
/*0000000131e0*/ global_store_dwordx2 v[2:3], v[8:9], off
/*0000000131e8*/ s_endpgm
/*0000000131ec*/ s_nop           0x0
/*0000000131f0*/ s_nop           0x0
/*0000000131f4*/ s_nop           0x0
/*0000000131f8*/ s_nop           0x0
/*0000000131fc*/ s_nop           0x0
add_long_x_get_global_id:
.skip 256
/*000000013300*/ s_clause        0x3
/*000000013304*/ s_load_dword    s9, s[4:5], 0x8
/*00000001330c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013314*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000001331c*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000013324*/ v_lshl_or_b32   v0, s6, 4, v0
/*00000001332c*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000013334*/ v_lshl_or_b32   v3, s8, 1, v2
/*00000001333c*/ s_waitcnt       lgkmcnt(0)
/*000000013340*/ s_ashr_i32      s6, s9, 31
/*000000013344*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001334c*/ v_add_co_ci_u32 v8, s[0:1], s1, 0, s[0:1]
/*000000013354*/ v_add_co_u32    v2, s[0:1], s2, v1
/*00000001335c*/ v_mov_b32       v1, 0
/*000000013360*/ v_add_co_ci_u32 v13, s[0:1], s3, 0, s[0:1]
/*000000013368*/ v_add_co_u32    v4, s[0:1], s10, v3
/*000000013370*/ v_add_co_u32    v7, vcc, v0, s9
/*000000013378*/ v_add_co_ci_u32 v14, s[0:1], s11, 0, s[0:1]
/*000000013380*/ v_lshlrev_b64   v[5:6], 3, v[0:1]
/*000000013388*/ v_mov_b32       v3, v1
/*00000001338c*/ v_add_co_ci_u32 v8, vcc, s6, v8, vcc
/*000000013390*/ v_add_co_u32    v9, vcc, s4, v5
/*000000013398*/ v_lshlrev_b64   v[11:12], 3, v[2:3]
/*0000000133a0*/ v_mov_b32       v5, v1
/*0000000133a4*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*0000000133a8*/ v_add_co_u32    v2, vcc, v2, s9
/*0000000133b0*/ v_add_co_ci_u32 v3, vcc, s6, v13, vcc
/*0000000133b4*/ v_add_co_u32    v0, vcc, s4, v11
/*0000000133bc*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*0000000133c4*/ v_add_co_ci_u32 v1, vcc, s5, v12, vcc
/*0000000133c8*/ v_add_co_u32    v11, vcc, v4, s9
/*0000000133d0*/ v_add_co_ci_u32 v12, vcc, s6, v14, vcc
/*0000000133d4*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000133dc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000133e0*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000133e8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000133f0*/ global_store_dwordx2 v[5:6], v[11:12], off
/*0000000133f8*/ s_endpgm
/*0000000133fc*/ s_nop           0x0
add_long_get_global_offset_get_global_id:
.skip 256
/*000000013500*/ s_clause        0x2
/*000000013504*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001350c*/ s_load_dwordx2  s[14:15], s[4:5], 0x20
/*000000013514*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001351c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000013524*/ v_mov_b32       v5, 0
/*000000013528*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000013530*/ v_lshl_or_b32   v4, s8, 1, v2
/*000000013538*/ v_mov_b32       v3, 0
/*00000001353c*/ s_waitcnt       lgkmcnt(0)
/*000000013540*/ v_add_co_u32    v2, vcc, s0, v0
/*000000013548*/ v_add_co_ci_u32 v8, vcc, s1, v5, vcc
/*00000001354c*/ v_add_co_u32    v0, vcc, s2, v1
/*000000013554*/ v_mov_b32       v1, v3
/*000000013558*/ v_add_co_ci_u32 v12, vcc, s3, v5, vcc
/*00000001355c*/ v_add_co_u32    v4, vcc, s14, v4
/*000000013564*/ v_add_co_ci_u32 v13, vcc, s15, v5, vcc
/*000000013568*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000013570*/ v_add_co_u32    v7, vcc, s0, v2
/*000000013578*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013580*/ v_add_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013584*/ v_add_co_u32    v9, vcc, s4, v5
/*00000001358c*/ v_mov_b32       v5, v3
/*000000013590*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000013594*/ v_add_co_u32    v11, vcc, s2, v0
/*00000001359c*/ v_add_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000135a0*/ v_add_co_u32    v17, vcc, s4, v1
/*0000000135a8*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*0000000135ac*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*0000000135b4*/ v_add_co_u32    v4, vcc, s14, v4
/*0000000135bc*/ v_add_co_ci_u32 v5, vcc, 0, v13, vcc
/*0000000135c0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000135c8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000135cc*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000135d4*/ global_store_dwordx2 v[17:18], v[11:12], off
/*0000000135dc*/ global_store_dwordx2 v[2:3], v[4:5], off
/*0000000135e4*/ s_endpgm
/*0000000135e8*/ s_nop           0x0
/*0000000135ec*/ s_nop           0x0
/*0000000135f0*/ s_nop           0x0
/*0000000135f4*/ s_nop           0x0
/*0000000135f8*/ s_nop           0x0
/*0000000135fc*/ s_nop           0x0
add_long_get_local_id_get_global_id:
.skip 256
/*000000013700*/ s_clause        0x2
/*000000013704*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001370c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013714*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001371c*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000013724*/ v_mov_b32       v4, 0
/*000000013728*/ v_lshl_or_b32   v5, s7, 2, v1
/*000000013730*/ v_lshl_or_b32   v7, s8, 1, v2
/*000000013738*/ v_mov_b32       v20, v4
/*00000001373c*/ s_waitcnt       lgkmcnt(0)
/*000000013740*/ v_add_co_u32    v3, s[0:1], s0, v3
/*000000013748*/ v_add_co_ci_u32 v11, s[0:1], s1, 0, s[0:1]
/*000000013750*/ v_add_co_u32    v19, s[0:1], s2, v5
/*000000013758*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000013760*/ v_add_co_u32    v10, vcc, v3, v0
/*000000013768*/ v_add_co_ci_u32 v16, s[0:1], s3, 0, s[0:1]
/*000000013770*/ v_add_co_ci_u32 v11, vcc, 0, v11, vcc
/*000000013774*/ v_lshlrev_b64   v[14:15], 3, v[19:20]
/*00000001377c*/ v_add_co_u32    v7, s[0:1], s10, v7
/*000000013784*/ v_add_co_u32    v12, vcc, s4, v8
/*00000001378c*/ v_mov_b32       v8, v4
/*000000013790*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*000000013794*/ v_add_co_u32    v0, vcc, v19, v1
/*00000001379c*/ v_add_co_ci_u32 v17, s[0:1], s11, 0, s[0:1]
/*0000000137a4*/ v_add_co_ci_u32 v1, vcc, 0, v16, vcc
/*0000000137a8*/ v_add_co_u32    v14, vcc, s4, v14
/*0000000137b0*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*0000000137b8*/ v_add_co_ci_u32 v15, vcc, s5, v15, vcc
/*0000000137bc*/ v_add_co_u32    v7, vcc, v7, v2
/*0000000137c4*/ v_add_co_ci_u32 v8, vcc, 0, v17, vcc
/*0000000137c8*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000137d0*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000137d4*/ global_store_dwordx2 v[12:13], v[10:11], off
/*0000000137dc*/ global_store_dwordx2 v[14:15], v[0:1], off
/*0000000137e4*/ global_store_dwordx2 v[5:6], v[7:8], off
/*0000000137ec*/ s_endpgm
/*0000000137f0*/ s_nop           0x0
/*0000000137f4*/ s_nop           0x0
/*0000000137f8*/ s_nop           0x0
/*0000000137fc*/ s_nop           0x0
add_long_get_group_id_get_global_id:
.skip 256
/*000000013900*/ s_clause        0x2
/*000000013904*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001390c*/ s_load_dwordx2  s[14:15], s[4:5], 0x20
/*000000013914*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001391c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000013924*/ v_mov_b32       v5, 0
/*000000013928*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000013930*/ v_lshl_or_b32   v4, s8, 1, v2
/*000000013938*/ v_mov_b32       v3, 0
/*00000001393c*/ s_waitcnt       lgkmcnt(0)
/*000000013940*/ v_add_co_u32    v2, vcc, s0, v0
/*000000013948*/ v_add_co_ci_u32 v8, vcc, s1, v5, vcc
/*00000001394c*/ v_add_co_u32    v0, vcc, s2, v1
/*000000013954*/ v_mov_b32       v1, v3
/*000000013958*/ v_add_co_ci_u32 v12, vcc, s3, v5, vcc
/*00000001395c*/ v_add_co_u32    v4, vcc, s14, v4
/*000000013964*/ v_add_co_ci_u32 v13, vcc, s15, v5, vcc
/*000000013968*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000013970*/ v_add_co_u32    v7, vcc, v2, s6
/*000000013978*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013980*/ v_add_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013984*/ v_add_co_u32    v9, vcc, s4, v5
/*00000001398c*/ v_mov_b32       v5, v3
/*000000013990*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000013994*/ v_add_co_u32    v11, vcc, v0, s7
/*00000001399c*/ v_add_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000139a0*/ v_add_co_u32    v17, vcc, s4, v1
/*0000000139a8*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*0000000139ac*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*0000000139b4*/ v_add_co_u32    v4, vcc, v4, s8
/*0000000139bc*/ v_add_co_ci_u32 v5, vcc, 0, v13, vcc
/*0000000139c0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000139c8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000139cc*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000139d4*/ global_store_dwordx2 v[17:18], v[11:12], off
/*0000000139dc*/ global_store_dwordx2 v[2:3], v[4:5], off
/*0000000139e4*/ s_endpgm
/*0000000139e8*/ s_nop           0x0
/*0000000139ec*/ s_nop           0x0
/*0000000139f0*/ s_nop           0x0
/*0000000139f4*/ s_nop           0x0
/*0000000139f8*/ s_nop           0x0
/*0000000139fc*/ s_nop           0x0
add_long_get_local_size_get_global_id:
.skip 256
/*000000013b00*/ s_clause        0x2
/*000000013b04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013b0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013b14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000013b1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000013b24*/ v_lshl_or_b32   v4, s7, 1, v1
/*000000013b2c*/ v_lshl_or_b32   v5, s8, 2, v2
/*000000013b34*/ v_mov_b32       v3, 0
/*000000013b38*/ v_mov_b32       v1, v3
/*000000013b3c*/ s_waitcnt       lgkmcnt(0)
/*000000013b40*/ v_add_co_u32    v2, s[0:1], s0, v0
/*000000013b48*/ v_add_co_ci_u32 v8, s[0:1], s1, 0, s[0:1]
/*000000013b50*/ v_add_co_u32    v0, s[0:1], s2, v4
/*000000013b58*/ v_add_co_ci_u32 v12, s[0:1], s3, 0, s[0:1]
/*000000013b60*/ v_add_co_u32    v4, s[0:1], s10, v5
/*000000013b68*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000013b70*/ v_add_co_u32    v7, vcc, v2, 2
/*000000013b78*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013b80*/ v_add_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013b84*/ v_add_co_ci_u32 v13, s[0:1], s11, 0, s[0:1]
/*000000013b8c*/ v_add_co_u32    v9, vcc, s4, v5
/*000000013b94*/ v_mov_b32       v5, v3
/*000000013b98*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000013b9c*/ v_add_co_u32    v11, vcc, v0, 2
/*000000013ba4*/ v_add_co_ci_u32 v12, vcc, 0, v12, vcc
/*000000013ba8*/ v_add_co_u32    v17, vcc, s4, v1
/*000000013bb0*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*000000013bb4*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*000000013bbc*/ v_add_co_u32    v4, vcc, v4, 4
/*000000013bc4*/ v_add_co_ci_u32 v5, vcc, 0, v13, vcc
/*000000013bc8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000013bd0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000013bd4*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000013bdc*/ global_store_dwordx2 v[17:18], v[11:12], off
/*000000013be4*/ global_store_dwordx2 v[2:3], v[4:5], off
/*000000013bec*/ s_endpgm
/*000000013bf0*/ s_nop           0x0
/*000000013bf4*/ s_nop           0x0
/*000000013bf8*/ s_nop           0x0
/*000000013bfc*/ s_nop           0x0
add_long_get_global_id_get_global_id:
.skip 256
/*000000013d00*/ s_clause        0x2
/*000000013d04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013d0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013d14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000013d1c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000013d24*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000013d2c*/ v_mov_b32       v4, 0
/*000000013d30*/ v_lshl_or_b32   v1, s8, 2, v2
/*000000013d38*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000013d40*/ s_waitcnt       lgkmcnt(0)
/*000000013d44*/ v_add_co_u32    v7, s[0:1], s0, v3
/*000000013d4c*/ v_mov_b32       v3, v4
/*000000013d50*/ v_add_co_ci_u32 v8, s[0:1], s1, 0, s[0:1]
/*000000013d58*/ v_add_co_u32    v0, s[0:1], s2, v0
/*000000013d60*/ v_add_co_ci_u32 v11, s[0:1], s3, 0, s[0:1]
/*000000013d68*/ v_add_co_u32    v2, s[0:1], s10, v1
/*000000013d70*/ v_mov_b32       v1, v4
/*000000013d74*/ v_add_co_u32    v7, vcc, v7, v7
/*000000013d7c*/ v_add_co_ci_u32 v12, s[0:1], s11, 0, s[0:1]
/*000000013d84*/ v_add_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013d88*/ v_add_co_u32    v5, vcc, s4, v5
/*000000013d90*/ v_lshlrev_b64   v[9:10], 3, v[0:1]
/*000000013d98*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000013d9c*/ v_add_co_u32    v0, vcc, v0, v0
/*000000013da4*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000013dac*/ v_add_co_ci_u32 v1, vcc, 0, v11, vcc
/*000000013db0*/ v_add_co_u32    v14, vcc, s4, v9
/*000000013db8*/ v_add_co_ci_u32 v15, vcc, s5, v10, vcc
/*000000013dbc*/ v_add_co_u32    v11, vcc, v2, v2
/*000000013dc4*/ v_add_co_ci_u32 v12, vcc, 0, v12, vcc
/*000000013dc8*/ v_add_co_u32    v9, vcc, s4, v3
/*000000013dd0*/ v_add_co_ci_u32 v10, vcc, s5, v4, vcc
/*000000013dd4*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000013ddc*/ global_store_dwordx2 v[14:15], v[0:1], off
/*000000013de4*/ global_store_dwordx2 v[9:10], v[11:12], off
/*000000013dec*/ s_endpgm
/*000000013df0*/ s_nop           0x0
/*000000013df4*/ s_nop           0x0
/*000000013df8*/ s_nop           0x0
/*000000013dfc*/ s_nop           0x0
add_long_get_global_size_get_global_id:
.skip 256
/*000000013f00*/ s_clause        0x2
/*000000013f04*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000013f0c*/ s_load_dwordx2  s[12:13], s[6:7], 0x20
/*000000013f14*/ s_load_dwordx2  s[14:15], s[6:7], 0x0
/*000000013f1c*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000013f24*/ v_lshl_or_b32   v0, s8, 4, v0
/*000000013f2c*/ v_mov_b32       v3, 0
/*000000013f30*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000013f38*/ v_lshl_or_b32   v4, s10, 1, v2
/*000000013f40*/ s_waitcnt       lgkmcnt(0)
/*000000013f44*/ v_add_co_u32    v0, vcc, s0, v0
/*000000013f4c*/ v_add_co_ci_u32 v8, vcc, s1, v3, vcc
/*000000013f50*/ v_add_co_u32    v2, vcc, s2, v1
/*000000013f58*/ v_mov_b32       v1, 0
/*000000013f5c*/ v_add_co_ci_u32 v13, vcc, s3, v3, vcc
/*000000013f60*/ v_add_co_u32    v4, vcc, s12, v4
/*000000013f68*/ v_add_co_ci_u32 v14, vcc, s13, v3, vcc
/*000000013f6c*/ v_lshlrev_b64   v[5:6], 3, v[0:1]
/*000000013f74*/ v_mov_b32       v3, v1
/*000000013f78*/ v_add_co_u32    v7, vcc, v0, s4
/*000000013f80*/ v_add_co_ci_u32 v8, vcc, 0, v8, vcc
/*000000013f84*/ v_add_co_u32    v9, vcc, s14, v5
/*000000013f8c*/ v_lshlrev_b64   v[11:12], 3, v[2:3]
/*000000013f94*/ v_mov_b32       v5, v1
/*000000013f98*/ v_add_co_ci_u32 v10, vcc, s15, v6, vcc
/*000000013f9c*/ v_add_co_u32    v2, vcc, v2, s5
/*000000013fa4*/ v_add_co_ci_u32 v3, vcc, 0, v13, vcc
/*000000013fa8*/ v_add_co_u32    v0, vcc, s14, v11
/*000000013fb0*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*000000013fb8*/ v_add_co_ci_u32 v1, vcc, s15, v12, vcc
/*000000013fbc*/ v_add_co_u32    v11, vcc, v4, s6
/*000000013fc4*/ v_add_co_ci_u32 v12, vcc, 0, v14, vcc
/*000000013fc8*/ v_add_co_u32    v5, vcc, s14, v5
/*000000013fd0*/ v_add_co_ci_u32 v6, vcc, s15, v6, vcc
/*000000013fd4*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000013fdc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000013fe4*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000013fec*/ s_endpgm
/*000000013ff0*/ s_nop           0x0
/*000000013ff4*/ s_nop           0x0
/*000000013ff8*/ s_nop           0x0
/*000000013ffc*/ s_nop           0x0
add_long_get_num_groups_get_global_id:
.skip 256
/*000000014100*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000014108*/ s_clause        0x2
/*00000001410c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000014114*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001411c*/ s_load_dwordx2  s[6:7], s[6:7], 0x20
/*000000014124*/ v_lshl_or_b32   v0, s8, 1, v0
/*00000001412c*/ v_mov_b32       v5, 0
/*000000014130*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000014138*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000014140*/ v_mov_b32       v3, 0
/*000000014144*/ v_mov_b32       v1, v3
/*000000014148*/ s_waitcnt       lgkmcnt(0)
/*00000001414c*/ s_and_b32       s3, s0, -2
/*000000014150*/ v_add_co_u32    v2, vcc, s12, v0
/*000000014158*/ v_cmp_gt_u32    s[3:4], s0, s3
/*000000014160*/ v_add_co_ci_u32 v8, vcc, s13, v5, vcc
/*000000014164*/ s_lshr_b32      s0, s0, 1
/*000000014168*/ v_add_co_u32    v0, vcc, s14, v4
/*000000014170*/ s_cmpk_lg_u32   s3, 0x0
/*000000014174*/ v_add_co_ci_u32 v12, vcc, s15, v5, vcc
/*000000014178*/ s_addc_u32      s0, s0, 0
/*00000001417c*/ s_and_b32       s3, s1, -2
/*000000014180*/ v_add_co_u32    v4, vcc, s6, v6
/*000000014188*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000014190*/ v_add_co_ci_u32 v13, vcc, s7, v5, vcc
/*000000014194*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*00000001419c*/ v_add_co_u32    v7, vcc, v2, s0
/*0000000141a4*/ s_lshr_b32      s1, s1, 1
/*0000000141a8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000141ac*/ v_add_co_ci_u32 v8, vcc, 0, v8, vcc
/*0000000141b0*/ s_addc_u32      s1, s1, 0
/*0000000141b4*/ v_add_co_u32    v9, vcc, s4, v5
/*0000000141bc*/ s_and_b32       s3, s2, -4
/*0000000141c0*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*0000000141c8*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*0000000141cc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000141d4*/ v_add_co_u32    v11, vcc, v0, s1
/*0000000141dc*/ v_mov_b32       v5, v3
/*0000000141e0*/ v_add_co_ci_u32 v12, vcc, 0, v12, vcc
/*0000000141e4*/ v_add_co_u32    v17, vcc, s4, v1
/*0000000141ec*/ s_lshr_b32      s2, s2, 2
/*0000000141f0*/ s_cmpk_lg_u32   s3, 0x0
/*0000000141f4*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*0000000141f8*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*000000014200*/ s_addc_u32      s0, s2, 0
/*000000014204*/ v_add_co_u32    v4, vcc, v4, s0
/*00000001420c*/ v_add_co_ci_u32 v5, vcc, 0, v13, vcc
/*000000014210*/ v_add_co_u32    v2, vcc, s4, v2
/*000000014218*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000001421c*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000014224*/ global_store_dwordx2 v[17:18], v[11:12], off
/*00000001422c*/ global_store_dwordx2 v[2:3], v[4:5], off
/*000000014234*/ s_endpgm
/*000000014238*/ s_nop           0x0
/*00000001423c*/ s_nop           0x0
/*000000014240*/ s_nop           0x0
/*000000014244*/ s_nop           0x0
/*000000014248*/ s_nop           0x0
/*00000001424c*/ s_nop           0x0
/*000000014250*/ s_nop           0x0
/*000000014254*/ s_nop           0x0
/*000000014258*/ s_nop           0x0
/*00000001425c*/ s_nop           0x0
/*000000014260*/ s_nop           0x0
/*000000014264*/ s_nop           0x0
/*000000014268*/ s_nop           0x0
/*00000001426c*/ s_nop           0x0
/*000000014270*/ s_nop           0x0
/*000000014274*/ s_nop           0x0
/*000000014278*/ s_nop           0x0
/*00000001427c*/ s_nop           0x0
/*000000014280*/ s_nop           0x0
/*000000014284*/ s_nop           0x0
/*000000014288*/ s_nop           0x0
/*00000001428c*/ s_nop           0x0
/*000000014290*/ s_nop           0x0
/*000000014294*/ s_nop           0x0
/*000000014298*/ s_nop           0x0
/*00000001429c*/ s_nop           0x0
/*0000000142a0*/ s_nop           0x0
/*0000000142a4*/ s_nop           0x0
/*0000000142a8*/ s_nop           0x0
/*0000000142ac*/ s_nop           0x0
/*0000000142b0*/ s_nop           0x0
/*0000000142b4*/ s_nop           0x0
/*0000000142b8*/ s_nop           0x0
/*0000000142bc*/ s_nop           0x0
/*0000000142c0*/ s_nop           0x0
/*0000000142c4*/ s_nop           0x0
/*0000000142c8*/ s_nop           0x0
/*0000000142cc*/ s_nop           0x0
/*0000000142d0*/ s_nop           0x0
/*0000000142d4*/ s_nop           0x0
/*0000000142d8*/ s_nop           0x0
/*0000000142dc*/ s_nop           0x0
/*0000000142e0*/ s_nop           0x0
/*0000000142e4*/ s_nop           0x0
/*0000000142e8*/ s_nop           0x0
/*0000000142ec*/ s_nop           0x0
/*0000000142f0*/ s_nop           0x0
/*0000000142f4*/ s_nop           0x0
/*0000000142f8*/ s_nop           0x0
/*0000000142fc*/ s_nop           0x0
add_long_get_work_dim_get_global_id:
.skip 256
/*000000014400*/ v_mov_b32       v3, s4
/*000000014404*/ v_mov_b32       v4, s5
/*000000014408*/ s_clause        0x2
/*00000001440c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014414*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000001441c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000014424*/ v_lshl_or_b32   v0, s8, 1, v0
/*00000001442c*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000014434*/ global_load_ushort v12, v[3:4], off inst_offset:2
/*00000001443c*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000014444*/ v_mov_b32       v3, 0
/*000000014448*/ v_mov_b32       v1, v3
/*00000001444c*/ v_mov_b32       v5, v3
/*000000014450*/ s_waitcnt       lgkmcnt(0)
/*000000014454*/ v_add_co_u32    v2, s[0:1], s0, v0
/*00000001445c*/ v_add_co_ci_u32 v13, s[0:1], s1, 0, s[0:1]
/*000000014464*/ v_add_co_u32    v0, s[0:1], s2, v4
/*00000001446c*/ v_add_co_ci_u32 v14, s[0:1], s3, 0, s[0:1]
/*000000014474*/ v_add_co_u32    v4, s[0:1], s4, v6
/*00000001447c*/ v_lshlrev_b64   v[6:7], 3, v[2:3]
/*000000014484*/ v_lshlrev_b64   v[8:9], 3, v[0:1]
/*00000001448c*/ v_add_co_ci_u32 v15, s[0:1], s5, 0, s[0:1]
/*000000014494*/ v_lshlrev_b64   v[10:11], 3, v[4:5]
/*00000001449c*/ v_add_co_u32    v19, vcc, s6, v6
/*0000000144a4*/ v_add_co_ci_u32 v20, vcc, s7, v7, vcc
/*0000000144a8*/ v_add_co_u32    v5, vcc, s6, v8
/*0000000144b0*/ v_add_co_ci_u32 v6, vcc, s7, v9, vcc
/*0000000144b4*/ v_add_co_u32    v9, vcc, s6, v10
/*0000000144bc*/ v_add_co_ci_u32 v10, vcc, s7, v11, vcc
/*0000000144c0*/ s_waitcnt       vmcnt(0)
/*0000000144c4*/ v_and_b32       v3, 0xffff, v12
/*0000000144cc*/ v_add_co_u32    v1, vcc, v2, v3
/*0000000144d4*/ v_add_co_ci_u32 v2, vcc, 0, v13, vcc
/*0000000144d8*/ v_add_co_u32    v11, vcc, v0, v3
/*0000000144e0*/ v_add_co_ci_u32 v12, vcc, 0, v14, vcc
/*0000000144e4*/ v_add_co_u32    v3, vcc, v4, v3
/*0000000144ec*/ v_add_co_ci_u32 v4, vcc, 0, v15, vcc
/*0000000144f0*/ global_store_dwordx2 v[19:20], v[1:2], off
/*0000000144f8*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000014500*/ global_store_dwordx2 v[9:10], v[3:4], off
/*000000014508*/ s_endpgm
/*00000001450c*/ s_nop           0x0
/*000000014510*/ s_nop           0x0
/*000000014514*/ s_nop           0x0
/*000000014518*/ s_nop           0x0
/*00000001451c*/ s_nop           0x0
/*000000014520*/ s_nop           0x0
/*000000014524*/ s_nop           0x0
/*000000014528*/ s_nop           0x0
/*00000001452c*/ s_nop           0x0
/*000000014530*/ s_nop           0x0
/*000000014534*/ s_nop           0x0
/*000000014538*/ s_nop           0x0
/*00000001453c*/ s_nop           0x0
/*000000014540*/ s_nop           0x0
/*000000014544*/ s_nop           0x0
/*000000014548*/ s_nop           0x0
/*00000001454c*/ s_nop           0x0
/*000000014550*/ s_nop           0x0
/*000000014554*/ s_nop           0x0
/*000000014558*/ s_nop           0x0
/*00000001455c*/ s_nop           0x0
/*000000014560*/ s_nop           0x0
/*000000014564*/ s_nop           0x0
/*000000014568*/ s_nop           0x0
/*00000001456c*/ s_nop           0x0
/*000000014570*/ s_nop           0x0
/*000000014574*/ s_nop           0x0
/*000000014578*/ s_nop           0x0
/*00000001457c*/ s_nop           0x0
/*000000014580*/ s_nop           0x0
/*000000014584*/ s_nop           0x0
/*000000014588*/ s_nop           0x0
/*00000001458c*/ s_nop           0x0
/*000000014590*/ s_nop           0x0
/*000000014594*/ s_nop           0x0
/*000000014598*/ s_nop           0x0
/*00000001459c*/ s_nop           0x0
/*0000000145a0*/ s_nop           0x0
/*0000000145a4*/ s_nop           0x0
/*0000000145a8*/ s_nop           0x0
/*0000000145ac*/ s_nop           0x0
/*0000000145b0*/ s_nop           0x0
/*0000000145b4*/ s_nop           0x0
/*0000000145b8*/ s_nop           0x0
/*0000000145bc*/ s_nop           0x0
/*0000000145c0*/ s_nop           0x0
/*0000000145c4*/ s_nop           0x0
/*0000000145c8*/ s_nop           0x0
/*0000000145cc*/ s_nop           0x0
/*0000000145d0*/ s_nop           0x0
/*0000000145d4*/ s_nop           0x0
/*0000000145d8*/ s_nop           0x0
/*0000000145dc*/ s_nop           0x0
/*0000000145e0*/ s_nop           0x0
/*0000000145e4*/ s_nop           0x0
/*0000000145e8*/ s_nop           0x0
/*0000000145ec*/ s_nop           0x0
/*0000000145f0*/ s_nop           0x0
/*0000000145f4*/ s_nop           0x0
/*0000000145f8*/ s_nop           0x0
/*0000000145fc*/ s_nop           0x0
add_long_x_get_global_size:
.skip 256
/*000000014700*/ s_clause        0x1
/*000000014704*/ s_load_dword    s11, s[6:7], 0x8
/*00000001470c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014714*/ s_waitcnt       lgkmcnt(0)
/*000000014718*/ s_load_dword    s1, s[6:7], 0x20
/*000000014720*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014728*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000014730*/ v_mov_b32       v4, 0
/*000000014734*/ s_lshl_b32      s3, s8, 4
/*000000014738*/ s_lshl_b32      s6, s9, 1
/*00000001473c*/ s_lshl_b32      s7, s10, 1
/*000000014740*/ v_mov_b32       v6, v4
/*000000014744*/ v_mov_b32       v8, v4
/*000000014748*/ s_waitcnt       lgkmcnt(0)
/*00000001474c*/ v_add3_u32      v7, s1, s7, v2
/*000000014754*/ v_add3_u32      v3, s0, s3, v0
/*00000001475c*/ v_add3_u32      v5, s2, s6, v1
/*000000014764*/ s_ashr_i32      s8, s11, 31
/*000000014768*/ s_add_u32       s0, s12, s11
/*00000001476c*/ s_addc_u32      s1, 0, s8
/*000000014770*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014778*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014780*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014788*/ s_add_u32       s2, s13, s11
/*00000001478c*/ s_addc_u32      s3, 0, s8
/*000000014790*/ v_mov_b32       v3, s1
/*000000014794*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001479c*/ v_mov_b32       v2, s0
/*0000000147a0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000147a4*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000147ac*/ s_add_u32       s0, s14, s11
/*0000000147b0*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000147b4*/ s_addc_u32      s1, 0, s8
/*0000000147b8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000147c0*/ v_mov_b32       v9, s3
/*0000000147c4*/ v_mov_b32       v11, s1
/*0000000147c8*/ v_mov_b32       v8, s2
/*0000000147cc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000147d0*/ v_mov_b32       v10, s0
/*0000000147d4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000147dc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000147e4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000147ec*/ s_endpgm
/*0000000147f0*/ s_nop           0x0
/*0000000147f4*/ s_nop           0x0
/*0000000147f8*/ s_nop           0x0
/*0000000147fc*/ s_nop           0x0
add_long_get_global_offset_get_global_size:
.skip 256
/*000000014900*/ s_clause        0x1
/*000000014904*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001490c*/ s_load_dword    s11, s[6:7], 0x20
/*000000014914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001491c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014924*/ v_mov_b32       v4, 0
/*000000014928*/ s_waitcnt       lgkmcnt(0)
/*00000001492c*/ s_lshl_b32      s1, s8, 1
/*000000014930*/ s_lshl_b32      s3, s9, 4
/*000000014934*/ s_lshl_b32      s6, s10, 1
/*000000014938*/ v_mov_b32       v6, v4
/*00000001493c*/ v_mov_b32       v8, v4
/*000000014940*/ v_add3_u32      v3, s0, s1, v0
/*000000014948*/ v_add3_u32      v5, s2, s3, v1
/*000000014950*/ v_add3_u32      v7, s11, s6, v2
/*000000014958*/ s_add_u32       s0, s0, s12
/*00000001495c*/ s_addc_u32      s1, 0, 0
/*000000014960*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014968*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014970*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014978*/ s_add_u32       s2, s2, s13
/*00000001497c*/ s_addc_u32      s3, 0, 0
/*000000014980*/ v_mov_b32       v3, s1
/*000000014984*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001498c*/ v_mov_b32       v2, s0
/*000000014990*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000014994*/ v_add_co_u32    v14, vcc, s4, v4
/*00000001499c*/ s_add_u32       s0, s11, s14
/*0000000149a0*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000149a4*/ s_addc_u32      s1, 0, 0
/*0000000149a8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000149b0*/ v_mov_b32       v9, s3
/*0000000149b4*/ v_mov_b32       v11, s1
/*0000000149b8*/ v_mov_b32       v8, s2
/*0000000149bc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000149c0*/ v_mov_b32       v10, s0
/*0000000149c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000149cc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000149d4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000149dc*/ s_endpgm
/*0000000149e0*/ s_nop           0x0
/*0000000149e4*/ s_nop           0x0
/*0000000149e8*/ s_nop           0x0
/*0000000149ec*/ s_nop           0x0
/*0000000149f0*/ s_nop           0x0
/*0000000149f4*/ s_nop           0x0
/*0000000149f8*/ s_nop           0x0
/*0000000149fc*/ s_nop           0x0
add_long_get_local_id_get_global_size:
.skip 256
/*000000014b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014b08*/ s_waitcnt       lgkmcnt(0)
/*000000014b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000014b14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014b1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014b24*/ s_lshl_b32      s3, s8, 3
/*000000014b28*/ v_mov_b32       v4, 0
/*000000014b2c*/ s_lshl_b32      s6, s9, 2
/*000000014b30*/ v_mov_b32       v14, 0
/*000000014b34*/ v_mov_b32       v6, v4
/*000000014b38*/ v_add3_u32      v3, s0, s3, v0
/*000000014b40*/ v_add3_u32      v5, s2, s6, v1
/*000000014b48*/ s_waitcnt       lgkmcnt(0)
/*000000014b4c*/ v_add_co_u32    v10, vcc, s12, v0
/*000000014b54*/ s_lshl_b32      s0, s10, 1
/*000000014b58*/ v_add_co_ci_u32 v11, vcc, 0, v14, vcc
/*000000014b5c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000014b64*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000014b6c*/ v_add3_u32      v7, s1, s0, v2
/*000000014b74*/ v_add_co_u32    v12, vcc, s4, v8
/*000000014b7c*/ v_mov_b32       v8, v4
/*000000014b80*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*000000014b84*/ v_add_co_u32    v0, vcc, s13, v1
/*000000014b8c*/ v_add_co_ci_u32 v1, vcc, 0, v14, vcc
/*000000014b90*/ v_add_co_u32    v18, vcc, s4, v5
/*000000014b98*/ v_add_co_ci_u32 v19, vcc, s5, v6, vcc
/*000000014b9c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000014ba4*/ v_add_co_u32    v7, vcc, s14, v2
/*000000014bac*/ v_add_co_ci_u32 v8, vcc, 0, v14, vcc
/*000000014bb0*/ v_add_co_u32    v5, vcc, s4, v5
/*000000014bb8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000014bbc*/ global_store_dwordx2 v[12:13], v[10:11], off
/*000000014bc4*/ global_store_dwordx2 v[18:19], v[0:1], off
/*000000014bcc*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000014bd4*/ s_endpgm
/*000000014bd8*/ s_nop           0x0
/*000000014bdc*/ s_nop           0x0
/*000000014be0*/ s_nop           0x0
/*000000014be4*/ s_nop           0x0
/*000000014be8*/ s_nop           0x0
/*000000014bec*/ s_nop           0x0
/*000000014bf0*/ s_nop           0x0
/*000000014bf4*/ s_nop           0x0
/*000000014bf8*/ s_nop           0x0
/*000000014bfc*/ s_nop           0x0
add_long_get_group_id_get_global_size:
.skip 256
/*000000014d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014d08*/ s_waitcnt       lgkmcnt(0)
/*000000014d0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000014d14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014d1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014d24*/ v_mov_b32       v4, 0
/*000000014d28*/ s_lshl_b32      s3, s8, 1
/*000000014d2c*/ s_lshl_b32      s6, s9, 4
/*000000014d30*/ s_lshl_b32      s7, s10, 1
/*000000014d34*/ v_mov_b32       v6, v4
/*000000014d38*/ v_mov_b32       v8, v4
/*000000014d3c*/ s_waitcnt       lgkmcnt(0)
/*000000014d40*/ v_add3_u32      v7, s1, s7, v2
/*000000014d48*/ v_add3_u32      v3, s0, s3, v0
/*000000014d50*/ v_add3_u32      v5, s2, s6, v1
/*000000014d58*/ s_add_u32       s0, s12, s8
/*000000014d5c*/ s_addc_u32      s1, 0, 0
/*000000014d60*/ s_add_u32       s2, s13, s9
/*000000014d64*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014d6c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014d74*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014d7c*/ s_addc_u32      s3, 0, 0
/*000000014d80*/ v_mov_b32       v3, s1
/*000000014d84*/ v_mov_b32       v2, s0
/*000000014d88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000014d90*/ s_add_u32       s0, s14, s10
/*000000014d94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000014d98*/ v_add_co_u32    v14, vcc, s4, v4
/*000000014da0*/ s_addc_u32      s1, 0, 0
/*000000014da4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000014da8*/ v_add_co_u32    v4, vcc, s4, v6
/*000000014db0*/ v_mov_b32       v9, s3
/*000000014db4*/ v_mov_b32       v11, s1
/*000000014db8*/ v_mov_b32       v8, s2
/*000000014dbc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000014dc0*/ v_mov_b32       v10, s0
/*000000014dc4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000014dcc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000014dd4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000014ddc*/ s_endpgm
/*000000014de0*/ s_nop           0x0
/*000000014de4*/ s_nop           0x0
/*000000014de8*/ s_nop           0x0
/*000000014dec*/ s_nop           0x0
/*000000014df0*/ s_nop           0x0
/*000000014df4*/ s_nop           0x0
/*000000014df8*/ s_nop           0x0
/*000000014dfc*/ s_nop           0x0
add_long_get_local_size_get_global_size:
.skip 256
/*000000014f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014f08*/ s_waitcnt       lgkmcnt(0)
/*000000014f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000014f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014f24*/ v_mov_b32       v4, 0
/*000000014f28*/ s_lshl_b32      s3, s8, 1
/*000000014f2c*/ s_lshl_b32      s6, s9, 1
/*000000014f30*/ s_lshl_b32      s7, s10, 2
/*000000014f34*/ v_mov_b32       v6, v4
/*000000014f38*/ v_mov_b32       v8, v4
/*000000014f3c*/ s_waitcnt       lgkmcnt(0)
/*000000014f40*/ v_add3_u32      v7, s1, s7, v2
/*000000014f48*/ v_add3_u32      v3, s0, s3, v0
/*000000014f50*/ v_add3_u32      v5, s2, s6, v1
/*000000014f58*/ s_add_u32       s0, s12, 2
/*000000014f5c*/ s_addc_u32      s1, 0, 0
/*000000014f60*/ s_add_u32       s2, s13, 2
/*000000014f64*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000014f6c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000014f74*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000014f7c*/ s_addc_u32      s3, 0, 0
/*000000014f80*/ v_mov_b32       v3, s1
/*000000014f84*/ v_mov_b32       v2, s0
/*000000014f88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000014f90*/ s_add_u32       s0, s14, 4
/*000000014f94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000014f98*/ v_add_co_u32    v14, vcc, s4, v4
/*000000014fa0*/ s_addc_u32      s1, 0, 0
/*000000014fa4*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000014fa8*/ v_add_co_u32    v4, vcc, s4, v6
/*000000014fb0*/ v_mov_b32       v9, s3
/*000000014fb4*/ v_mov_b32       v11, s1
/*000000014fb8*/ v_mov_b32       v8, s2
/*000000014fbc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000014fc0*/ v_mov_b32       v10, s0
/*000000014fc4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000014fcc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000014fd4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000014fdc*/ s_endpgm
/*000000014fe0*/ s_nop           0x0
/*000000014fe4*/ s_nop           0x0
/*000000014fe8*/ s_nop           0x0
/*000000014fec*/ s_nop           0x0
/*000000014ff0*/ s_nop           0x0
/*000000014ff4*/ s_nop           0x0
/*000000014ff8*/ s_nop           0x0
/*000000014ffc*/ s_nop           0x0
add_long_get_global_id_get_global_size:
.skip 256
/*000000015100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015108*/ s_waitcnt       lgkmcnt(0)
/*00000001510c*/ s_load_dword    s1, s[6:7], 0x20
/*000000015114*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001511c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015124*/ v_lshl_or_b32   v3, s8, 1, v0
/*00000001512c*/ v_mov_b32       v4, 0
/*000000015130*/ s_lshl_b32      s3, s9, 1
/*000000015134*/ v_mov_b32       v13, 0
/*000000015138*/ s_lshl_b32      s6, s10, 2
/*00000001513c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000015144*/ v_mov_b32       v6, v4
/*000000015148*/ v_add_nc_u32    v0, s0, v3
/*00000001514c*/ v_add3_u32      v5, s2, s3, v1
/*000000015154*/ s_waitcnt       lgkmcnt(0)
/*000000015158*/ v_add3_u32      v3, s1, s6, v2
/*000000015160*/ v_add_co_u32    v0, vcc, v0, s12
/*000000015168*/ v_lshlrev_b64   v[9:10], 3, v[5:6]
/*000000015170*/ v_add_co_ci_u32 v1, vcc, 0, v13, vcc
/*000000015174*/ v_add_co_u32    v14, vcc, s4, v7
/*00000001517c*/ v_lshlrev_b64   v[11:12], 3, v[3:4]
/*000000015184*/ v_add_co_ci_u32 v15, vcc, s5, v8, vcc
/*000000015188*/ v_add_co_u32    v5, vcc, v5, s13
/*000000015190*/ v_add_co_ci_u32 v6, vcc, 0, v13, vcc
/*000000015194*/ v_add_co_u32    v7, vcc, s4, v9
/*00000001519c*/ v_add_co_ci_u32 v8, vcc, s5, v10, vcc
/*0000000151a0*/ v_add_co_u32    v9, vcc, v3, s14
/*0000000151a8*/ v_add_co_ci_u32 v10, vcc, 0, v13, vcc
/*0000000151ac*/ v_add_co_u32    v11, vcc, s4, v11
/*0000000151b4*/ v_add_co_ci_u32 v12, vcc, s5, v12, vcc
/*0000000151b8*/ global_store_dwordx2 v[14:15], v[0:1], off
/*0000000151c0*/ global_store_dwordx2 v[7:8], v[5:6], off
/*0000000151c8*/ global_store_dwordx2 v[11:12], v[9:10], off
/*0000000151d0*/ s_endpgm
/*0000000151d4*/ s_nop           0x0
/*0000000151d8*/ s_nop           0x0
/*0000000151dc*/ s_nop           0x0
/*0000000151e0*/ s_nop           0x0
/*0000000151e4*/ s_nop           0x0
/*0000000151e8*/ s_nop           0x0
/*0000000151ec*/ s_nop           0x0
/*0000000151f0*/ s_nop           0x0
/*0000000151f4*/ s_nop           0x0
/*0000000151f8*/ s_nop           0x0
/*0000000151fc*/ s_nop           0x0
add_long_get_global_size_get_global_size:
.skip 256
/*000000015300*/ s_clause        0x1
/*000000015304*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001530c*/ s_load_dword    s11, s[6:7], 0x20
/*000000015314*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001531c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000015324*/ v_mov_b32       v4, 0
/*000000015328*/ s_lshl_b32      s6, s8, 4
/*00000001532c*/ s_lshl_b32      s7, s9, 1
/*000000015330*/ s_lshl_b32      s8, s10, 1
/*000000015334*/ s_waitcnt       lgkmcnt(0)
/*000000015338*/ s_mov_b32       s1, 0
/*00000001533c*/ v_mov_b32       v6, v4
/*000000015340*/ v_mov_b32       v8, v4
/*000000015344*/ s_mov_b32       s3, s1
/*000000015348*/ s_mov_b32       s15, s1
/*00000001534c*/ v_add3_u32      v3, s0, s6, v0
/*000000015354*/ v_add3_u32      v5, s2, s7, v1
/*00000001535c*/ v_add3_u32      v7, s11, s8, v2
/*000000015364*/ s_mov_b32       s0, s12
/*000000015368*/ s_mov_b32       s2, s13
/*00000001536c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015374*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001537c*/ s_lshl_b64      s[0:1], s[0:1], 1
/*000000015380*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000015388*/ v_mov_b32       v3, s1
/*00000001538c*/ v_mov_b32       v2, s0
/*000000015390*/ v_add_co_u32    v0, vcc, s4, v0
/*000000015398*/ s_lshl_b64      s[0:1], s[2:3], 1
/*00000001539c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000153a0*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000153a8*/ v_mov_b32       v9, s1
/*0000000153ac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000153b0*/ v_mov_b32       v8, s0
/*0000000153b4*/ s_lshl_b64      s[0:1], s[14:15], 1
/*0000000153b8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000153c0*/ v_mov_b32       v11, s1
/*0000000153c4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000153c8*/ v_mov_b32       v10, s0
/*0000000153cc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000153d4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000153dc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000153e4*/ s_endpgm
/*0000000153e8*/ s_nop           0x0
/*0000000153ec*/ s_nop           0x0
/*0000000153f0*/ s_nop           0x0
/*0000000153f4*/ s_nop           0x0
/*0000000153f8*/ s_nop           0x0
/*0000000153fc*/ s_nop           0x0
add_long_get_num_groups_get_global_size:
.skip 256
/*000000015500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000015508*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000015510*/ s_waitcnt       lgkmcnt(0)
/*000000015514*/ s_clause        0x1
/*000000015518*/ s_load_dword    s3, s[6:7], 0x20
/*000000015520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015528*/ s_lshl_b32      s7, s8, 1
/*00000001552c*/ s_lshl_b32      s8, s9, 1
/*000000015530*/ s_lshl_b32      s9, s10, 2
/*000000015534*/ v_mov_b32       v4, 0
/*000000015538*/ v_mov_b32       v6, v4
/*00000001553c*/ v_mov_b32       v8, v4
/*000000015540*/ s_and_b32       s6, s0, -2
/*000000015544*/ s_lshr_b32      s10, s0, 1
/*000000015548*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000015550*/ v_add3_u32      v3, s12, s7, v0
/*000000015558*/ s_waitcnt       lgkmcnt(0)
/*00000001555c*/ v_add3_u32      v7, s3, s9, v2
/*000000015564*/ v_add3_u32      v5, s14, s8, v1
/*00000001556c*/ s_cmpk_lg_u32   s6, 0x0
/*000000015570*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015578*/ s_addc_u32      s6, s10, 0
/*00000001557c*/ s_and_b32       s7, s1, -2
/*000000015580*/ s_lshr_b32      s3, s1, 1
/*000000015584*/ v_cmp_gt_u32    s[7:8], s1, s7
/*00000001558c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015594*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001559c*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000155a4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000155a8*/ s_cmpk_lg_u32   s7, 0x0
/*0000000155ac*/ s_addc_u32      s3, s3, 0
/*0000000155b0*/ s_and_b32       s7, s2, -4
/*0000000155b4*/ s_lshr_b32      s8, s2, 2
/*0000000155b8*/ v_cmp_gt_u32    s[7:8], s2, s7
/*0000000155c0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000155c8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000155cc*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000155d4*/ s_cmpk_lg_u32   s7, 0x0
/*0000000155d8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000155dc*/ s_addc_u32      s8, s8, 0
/*0000000155e0*/ s_add_u32       s6, s6, s0
/*0000000155e4*/ s_addc_u32      s7, 0, 0
/*0000000155e8*/ s_add_u32       s0, s3, s1
/*0000000155ec*/ s_addc_u32      s1, 0, 0
/*0000000155f0*/ s_add_u32       s2, s8, s2
/*0000000155f4*/ s_addc_u32      s3, 0, 0
/*0000000155f8*/ v_mov_b32       v6, s6
/*0000000155fc*/ v_mov_b32       v9, s1
/*000000015600*/ v_mov_b32       v7, s7
/*000000015604*/ v_mov_b32       v11, s3
/*000000015608*/ v_mov_b32       v8, s0
/*00000001560c*/ v_mov_b32       v10, s2
/*000000015610*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000015618*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000015620*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015628*/ s_endpgm
/*00000001562c*/ s_nop           0x0
/*000000015630*/ s_nop           0x0
/*000000015634*/ s_nop           0x0
/*000000015638*/ s_nop           0x0
/*00000001563c*/ s_nop           0x0
/*000000015640*/ s_nop           0x0
/*000000015644*/ s_nop           0x0
/*000000015648*/ s_nop           0x0
/*00000001564c*/ s_nop           0x0
/*000000015650*/ s_nop           0x0
/*000000015654*/ s_nop           0x0
/*000000015658*/ s_nop           0x0
/*00000001565c*/ s_nop           0x0
/*000000015660*/ s_nop           0x0
/*000000015664*/ s_nop           0x0
/*000000015668*/ s_nop           0x0
/*00000001566c*/ s_nop           0x0
/*000000015670*/ s_nop           0x0
/*000000015674*/ s_nop           0x0
/*000000015678*/ s_nop           0x0
/*00000001567c*/ s_nop           0x0
/*000000015680*/ s_nop           0x0
/*000000015684*/ s_nop           0x0
/*000000015688*/ s_nop           0x0
/*00000001568c*/ s_nop           0x0
/*000000015690*/ s_nop           0x0
/*000000015694*/ s_nop           0x0
/*000000015698*/ s_nop           0x0
/*00000001569c*/ s_nop           0x0
/*0000000156a0*/ s_nop           0x0
/*0000000156a4*/ s_nop           0x0
/*0000000156a8*/ s_nop           0x0
/*0000000156ac*/ s_nop           0x0
/*0000000156b0*/ s_nop           0x0
/*0000000156b4*/ s_nop           0x0
/*0000000156b8*/ s_nop           0x0
/*0000000156bc*/ s_nop           0x0
/*0000000156c0*/ s_nop           0x0
/*0000000156c4*/ s_nop           0x0
/*0000000156c8*/ s_nop           0x0
/*0000000156cc*/ s_nop           0x0
/*0000000156d0*/ s_nop           0x0
/*0000000156d4*/ s_nop           0x0
/*0000000156d8*/ s_nop           0x0
/*0000000156dc*/ s_nop           0x0
/*0000000156e0*/ s_nop           0x0
/*0000000156e4*/ s_nop           0x0
/*0000000156e8*/ s_nop           0x0
/*0000000156ec*/ s_nop           0x0
/*0000000156f0*/ s_nop           0x0
/*0000000156f4*/ s_nop           0x0
/*0000000156f8*/ s_nop           0x0
/*0000000156fc*/ s_nop           0x0
add_long_get_work_dim_get_global_size:
.skip 256
/*000000015800*/ v_mov_b32       v3, s4
/*000000015804*/ v_mov_b32       v4, s5
/*000000015808*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015810*/ s_waitcnt       lgkmcnt(0)
/*000000015814*/ s_clause        0x1
/*000000015818*/ s_load_dword    s1, s[6:7], 0x20
/*000000015820*/ s_load_dwordx2  s[12:13], s[6:7], 0x8
/*000000015828*/ s_lshl_b32      s3, s8, 1
/*00000001582c*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000015834*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000001583c*/ v_mov_b32       v4, 0
/*000000015840*/ s_lshl_b32      s8, s9, 1
/*000000015844*/ s_lshl_b32      s9, s10, 2
/*000000015848*/ v_mov_b32       v11, 0
/*00000001584c*/ v_mov_b32       v6, v4
/*000000015850*/ v_mov_b32       v8, v4
/*000000015854*/ v_add3_u32      v3, s0, s3, v0
/*00000001585c*/ v_add3_u32      v5, s2, s8, v1
/*000000015864*/ s_waitcnt       lgkmcnt(0)
/*000000015868*/ v_add3_u32      v7, s1, s9, v2
/*000000015870*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015878*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015880*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000015888*/ v_add_co_u32    v0, vcc, s12, v0
/*000000015890*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*000000015894*/ v_add_co_u32    v2, vcc, s12, v2
/*00000001589c*/ v_add_co_ci_u32 v3, vcc, s13, v3, vcc
/*0000000158a0*/ v_add_co_u32    v4, vcc, s12, v4
/*0000000158a8*/ v_add_co_ci_u32 v5, vcc, s13, v5, vcc
/*0000000158ac*/ s_waitcnt       vmcnt(0)
/*0000000158b0*/ v_and_b32       v10, 0xffff, v9
/*0000000158b8*/ v_add_co_u32    v6, vcc, s4, v10
/*0000000158c0*/ v_add_co_ci_u32 v7, vcc, 0, v11, vcc
/*0000000158c4*/ v_add_co_u32    v8, vcc, s5, v10
/*0000000158cc*/ v_add_co_ci_u32 v9, vcc, 0, v11, vcc
/*0000000158d0*/ v_add_co_u32    v10, vcc, s6, v10
/*0000000158d8*/ v_add_co_ci_u32 v11, vcc, 0, v11, vcc
/*0000000158dc*/ global_store_dwordx2 v[0:1], v[6:7], off
/*0000000158e4*/ global_store_dwordx2 v[2:3], v[8:9], off
/*0000000158ec*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000158f4*/ s_endpgm
/*0000000158f8*/ s_nop           0x0
/*0000000158fc*/ s_nop           0x0
add_long_x_get_num_groups:
.skip 256
/*000000015a00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000015a08*/ s_waitcnt       lgkmcnt(0)
/*000000015a0c*/ s_clause        0x3
/*000000015a10*/ s_load_dword    s3, s[6:7], 0x8
/*000000015a18*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000015a20*/ s_load_dword    s11, s[6:7], 0x20
/*000000015a28*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000015a30*/ s_lshl_b32      s7, s8, 4
/*000000015a34*/ s_lshl_b32      s8, s9, 1
/*000000015a38*/ s_lshl_b32      s9, s10, 1
/*000000015a3c*/ v_mov_b32       v4, 0
/*000000015a40*/ v_mov_b32       v6, v4
/*000000015a44*/ v_mov_b32       v8, v4
/*000000015a48*/ s_waitcnt       lgkmcnt(0)
/*000000015a4c*/ s_ashr_i32      s10, s3, 31
/*000000015a50*/ v_add3_u32      v3, s12, s7, v0
/*000000015a58*/ s_and_b32       s6, s0, -16
/*000000015a5c*/ v_add3_u32      v5, s14, s8, v1
/*000000015a64*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000015a6c*/ s_lshr_b32      s0, s0, 4
/*000000015a70*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015a78*/ v_add3_u32      v7, s11, s9, v2
/*000000015a80*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015a88*/ s_cmpk_lg_u32   s6, 0x0
/*000000015a8c*/ s_addc_u32      s0, s0, 0
/*000000015a90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000015a98*/ s_add_u32       s6, s0, s3
/*000000015a9c*/ s_addc_u32      s7, 0, s10
/*000000015aa0*/ s_and_b32       s0, s1, -2
/*000000015aa4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000015aac*/ v_cmp_gt_u32    s[0:1], s1, s0
/*000000015ab4*/ s_lshr_b32      s1, s1, 1
/*000000015ab8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000015abc*/ v_add_co_u32    v2, vcc, s4, v2
/*000000015ac4*/ v_mov_b32       v6, s6
/*000000015ac8*/ s_cmpk_lg_u32   s0, 0x0
/*000000015acc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000015ad0*/ s_addc_u32      s0, s1, 0
/*000000015ad4*/ v_add_co_u32    v4, vcc, s4, v4
/*000000015adc*/ s_add_u32       s0, s0, s3
/*000000015ae0*/ s_addc_u32      s1, 0, s10
/*000000015ae4*/ s_and_b32       s8, s2, -2
/*000000015ae8*/ v_mov_b32       v9, s1
/*000000015aec*/ v_cmp_gt_u32    s[8:9], s2, s8
/*000000015af4*/ s_lshr_b32      s2, s2, 1
/*000000015af8*/ v_mov_b32       v8, s0
/*000000015afc*/ v_mov_b32       v7, s7
/*000000015b00*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000015b04*/ s_cmpk_lg_u32   s8, 0x0
/*000000015b08*/ s_addc_u32      s2, s2, 0
/*000000015b0c*/ s_add_u32       s0, s2, s3
/*000000015b10*/ s_addc_u32      s1, 0, s10
/*000000015b14*/ v_mov_b32       v11, s1
/*000000015b18*/ v_mov_b32       v10, s0
/*000000015b1c*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000015b24*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000015b2c*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015b34*/ s_endpgm
/*000000015b38*/ s_nop           0x0
/*000000015b3c*/ s_nop           0x0
/*000000015b40*/ s_nop           0x0
/*000000015b44*/ s_nop           0x0
/*000000015b48*/ s_nop           0x0
/*000000015b4c*/ s_nop           0x0
/*000000015b50*/ s_nop           0x0
/*000000015b54*/ s_nop           0x0
/*000000015b58*/ s_nop           0x0
/*000000015b5c*/ s_nop           0x0
/*000000015b60*/ s_nop           0x0
/*000000015b64*/ s_nop           0x0
/*000000015b68*/ s_nop           0x0
/*000000015b6c*/ s_nop           0x0
/*000000015b70*/ s_nop           0x0
/*000000015b74*/ s_nop           0x0
/*000000015b78*/ s_nop           0x0
/*000000015b7c*/ s_nop           0x0
/*000000015b80*/ s_nop           0x0
/*000000015b84*/ s_nop           0x0
/*000000015b88*/ s_nop           0x0
/*000000015b8c*/ s_nop           0x0
/*000000015b90*/ s_nop           0x0
/*000000015b94*/ s_nop           0x0
/*000000015b98*/ s_nop           0x0
/*000000015b9c*/ s_nop           0x0
/*000000015ba0*/ s_nop           0x0
/*000000015ba4*/ s_nop           0x0
/*000000015ba8*/ s_nop           0x0
/*000000015bac*/ s_nop           0x0
/*000000015bb0*/ s_nop           0x0
/*000000015bb4*/ s_nop           0x0
/*000000015bb8*/ s_nop           0x0
/*000000015bbc*/ s_nop           0x0
/*000000015bc0*/ s_nop           0x0
/*000000015bc4*/ s_nop           0x0
/*000000015bc8*/ s_nop           0x0
/*000000015bcc*/ s_nop           0x0
/*000000015bd0*/ s_nop           0x0
/*000000015bd4*/ s_nop           0x0
/*000000015bd8*/ s_nop           0x0
/*000000015bdc*/ s_nop           0x0
/*000000015be0*/ s_nop           0x0
/*000000015be4*/ s_nop           0x0
/*000000015be8*/ s_nop           0x0
/*000000015bec*/ s_nop           0x0
/*000000015bf0*/ s_nop           0x0
/*000000015bf4*/ s_nop           0x0
/*000000015bf8*/ s_nop           0x0
/*000000015bfc*/ s_nop           0x0
add_long_get_global_offset_get_num_groups:
.skip 256
/*000000015d00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000015d08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000015d10*/ s_waitcnt       lgkmcnt(0)
/*000000015d14*/ s_clause        0x1
/*000000015d18*/ s_load_dword    s3, s[6:7], 0x20
/*000000015d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015d28*/ s_lshl_b32      s7, s8, 1
/*000000015d2c*/ s_lshl_b32      s8, s9, 4
/*000000015d30*/ s_lshl_b32      s9, s10, 1
/*000000015d34*/ v_mov_b32       v4, 0
/*000000015d38*/ v_mov_b32       v6, v4
/*000000015d3c*/ v_mov_b32       v8, v4
/*000000015d40*/ s_and_b32       s6, s0, -2
/*000000015d44*/ v_add3_u32      v3, s12, s7, v0
/*000000015d4c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000015d54*/ s_lshr_b32      s0, s0, 1
/*000000015d58*/ v_add3_u32      v5, s14, s8, v1
/*000000015d60*/ s_waitcnt       lgkmcnt(0)
/*000000015d64*/ v_add3_u32      v7, s3, s9, v2
/*000000015d6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015d74*/ s_cmpk_lg_u32   s6, 0x0
/*000000015d78*/ s_addc_u32      s0, s0, 0
/*000000015d7c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000015d84*/ s_add_u32       s6, s12, s0
/*000000015d88*/ s_addc_u32      s7, 0, 0
/*000000015d8c*/ s_and_b32       s0, s1, -16
/*000000015d90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000015d98*/ v_cmp_gt_u32    s[0:1], s1, s0
/*000000015da0*/ s_lshr_b32      s1, s1, 4
/*000000015da4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000015dac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000015db0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000015db8*/ s_cmpk_lg_u32   s0, 0x0
/*000000015dbc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000015dc0*/ s_addc_u32      s0, s1, 0
/*000000015dc4*/ v_mov_b32       v6, s6
/*000000015dc8*/ s_add_u32       s0, s14, s0
/*000000015dcc*/ s_addc_u32      s1, 0, 0
/*000000015dd0*/ s_and_b32       s8, s2, -2
/*000000015dd4*/ v_mov_b32       v9, s1
/*000000015dd8*/ v_cmp_gt_u32    s[8:9], s2, s8
/*000000015de0*/ s_lshr_b32      s2, s2, 1
/*000000015de4*/ v_mov_b32       v8, s0
/*000000015de8*/ v_add_co_u32    v4, vcc, s4, v4
/*000000015df0*/ v_mov_b32       v7, s7
/*000000015df4*/ s_cmpk_lg_u32   s8, 0x0
/*000000015df8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000015dfc*/ s_addc_u32      s2, s2, 0
/*000000015e00*/ s_add_u32       s0, s3, s2
/*000000015e04*/ s_addc_u32      s1, 0, 0
/*000000015e08*/ v_mov_b32       v11, s1
/*000000015e0c*/ v_mov_b32       v10, s0
/*000000015e10*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000015e18*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000015e20*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015e28*/ s_endpgm
/*000000015e2c*/ s_nop           0x0
/*000000015e30*/ s_nop           0x0
/*000000015e34*/ s_nop           0x0
/*000000015e38*/ s_nop           0x0
/*000000015e3c*/ s_nop           0x0
/*000000015e40*/ s_nop           0x0
/*000000015e44*/ s_nop           0x0
/*000000015e48*/ s_nop           0x0
/*000000015e4c*/ s_nop           0x0
/*000000015e50*/ s_nop           0x0
/*000000015e54*/ s_nop           0x0
/*000000015e58*/ s_nop           0x0
/*000000015e5c*/ s_nop           0x0
/*000000015e60*/ s_nop           0x0
/*000000015e64*/ s_nop           0x0
/*000000015e68*/ s_nop           0x0
/*000000015e6c*/ s_nop           0x0
/*000000015e70*/ s_nop           0x0
/*000000015e74*/ s_nop           0x0
/*000000015e78*/ s_nop           0x0
/*000000015e7c*/ s_nop           0x0
/*000000015e80*/ s_nop           0x0
/*000000015e84*/ s_nop           0x0
/*000000015e88*/ s_nop           0x0
/*000000015e8c*/ s_nop           0x0
/*000000015e90*/ s_nop           0x0
/*000000015e94*/ s_nop           0x0
/*000000015e98*/ s_nop           0x0
/*000000015e9c*/ s_nop           0x0
/*000000015ea0*/ s_nop           0x0
/*000000015ea4*/ s_nop           0x0
/*000000015ea8*/ s_nop           0x0
/*000000015eac*/ s_nop           0x0
/*000000015eb0*/ s_nop           0x0
/*000000015eb4*/ s_nop           0x0
/*000000015eb8*/ s_nop           0x0
/*000000015ebc*/ s_nop           0x0
/*000000015ec0*/ s_nop           0x0
/*000000015ec4*/ s_nop           0x0
/*000000015ec8*/ s_nop           0x0
/*000000015ecc*/ s_nop           0x0
/*000000015ed0*/ s_nop           0x0
/*000000015ed4*/ s_nop           0x0
/*000000015ed8*/ s_nop           0x0
/*000000015edc*/ s_nop           0x0
/*000000015ee0*/ s_nop           0x0
/*000000015ee4*/ s_nop           0x0
/*000000015ee8*/ s_nop           0x0
/*000000015eec*/ s_nop           0x0
/*000000015ef0*/ s_nop           0x0
/*000000015ef4*/ s_nop           0x0
/*000000015ef8*/ s_nop           0x0
/*000000015efc*/ s_nop           0x0
add_long_get_local_id_get_num_groups:
.skip 256
/*000000016000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000016008*/ s_waitcnt       lgkmcnt(0)
/*00000001600c*/ s_load_dword    s1, s[6:7], 0x20
/*000000016014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001601c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016024*/ v_mov_b32       v4, 0
/*000000016028*/ s_lshl_b32      s3, s8, 3
/*00000001602c*/ s_lshl_b32      s7, s10, 1
/*000000016030*/ s_lshl_b32      s6, s9, 2
/*000000016034*/ v_mov_b32       v6, v4
/*000000016038*/ v_mov_b32       v8, v4
/*00000001603c*/ v_mov_b32       v10, v4
/*000000016040*/ s_waitcnt       lgkmcnt(0)
/*000000016044*/ v_add3_u32      v9, s1, s7, v2
/*00000001604c*/ v_add3_u32      v5, s0, s3, v0
/*000000016054*/ s_and_b32       s1, s12, -8
/*000000016058*/ s_lshr_b32      s0, s12, 3
/*00000001605c*/ v_cmp_gt_u32    vcc, s12, s1
/*000000016064*/ v_add3_u32      v7, s2, s6, v1
/*00000001606c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000016074*/ s_and_b32       s1, s13, -4
/*000000016078*/ s_lshr_b32      s2, s13, 2
/*00000001607c*/ v_add_co_ci_u32 v3, vcc, s0, v0, vcc
/*000000016080*/ s_and_b32       s0, s14, -2
/*000000016084*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000001608c*/ v_add_co_u32    v5, vcc, s4, v5
/*000000016094*/ v_cmp_gt_u32    s[0:1], s14, s0
/*00000001609c*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000160a0*/ v_cmp_gt_u32    vcc, s13, s1
/*0000000160a8*/ s_lshr_b32      s1, s14, 1
/*0000000160ac*/ s_cmpk_lg_u32   s0, 0x0
/*0000000160b0*/ global_store_dwordx2 v[5:6], v[3:4], off
/*0000000160b8*/ v_add_co_ci_u32 v3, vcc, s2, v1, vcc
/*0000000160bc*/ v_add_co_u32    v13, vcc, s4, v7
/*0000000160c4*/ v_lshlrev_b64   v[5:6], 3, v[9:10]
/*0000000160cc*/ v_add_co_ci_u32 v14, vcc, s5, v8, vcc
/*0000000160d0*/ v_mov_b32       v8, 0
/*0000000160d4*/ s_addc_u32      s0, s1, 0
/*0000000160d8*/ v_add_co_u32    v7, vcc, s0, v2
/*0000000160e0*/ v_add_co_ci_u32 v8, vcc, 0, v8, vcc
/*0000000160e4*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000160ec*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000160f0*/ global_store_dwordx2 v[13:14], v[3:4], off
/*0000000160f8*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000016100*/ s_endpgm
/*000000016104*/ s_nop           0x0
/*000000016108*/ s_nop           0x0
/*00000001610c*/ s_nop           0x0
/*000000016110*/ s_nop           0x0
/*000000016114*/ s_nop           0x0
/*000000016118*/ s_nop           0x0
/*00000001611c*/ s_nop           0x0
/*000000016120*/ s_nop           0x0
/*000000016124*/ s_nop           0x0
/*000000016128*/ s_nop           0x0
/*00000001612c*/ s_nop           0x0
/*000000016130*/ s_nop           0x0
/*000000016134*/ s_nop           0x0
/*000000016138*/ s_nop           0x0
/*00000001613c*/ s_nop           0x0
/*000000016140*/ s_nop           0x0
/*000000016144*/ s_nop           0x0
/*000000016148*/ s_nop           0x0
/*00000001614c*/ s_nop           0x0
/*000000016150*/ s_nop           0x0
/*000000016154*/ s_nop           0x0
/*000000016158*/ s_nop           0x0
/*00000001615c*/ s_nop           0x0
/*000000016160*/ s_nop           0x0
/*000000016164*/ s_nop           0x0
/*000000016168*/ s_nop           0x0
/*00000001616c*/ s_nop           0x0
/*000000016170*/ s_nop           0x0
/*000000016174*/ s_nop           0x0
/*000000016178*/ s_nop           0x0
/*00000001617c*/ s_nop           0x0
/*000000016180*/ s_nop           0x0
/*000000016184*/ s_nop           0x0
/*000000016188*/ s_nop           0x0
/*00000001618c*/ s_nop           0x0
/*000000016190*/ s_nop           0x0
/*000000016194*/ s_nop           0x0
/*000000016198*/ s_nop           0x0
/*00000001619c*/ s_nop           0x0
/*0000000161a0*/ s_nop           0x0
/*0000000161a4*/ s_nop           0x0
/*0000000161a8*/ s_nop           0x0
/*0000000161ac*/ s_nop           0x0
/*0000000161b0*/ s_nop           0x0
/*0000000161b4*/ s_nop           0x0
/*0000000161b8*/ s_nop           0x0
/*0000000161bc*/ s_nop           0x0
/*0000000161c0*/ s_nop           0x0
/*0000000161c4*/ s_nop           0x0
/*0000000161c8*/ s_nop           0x0
/*0000000161cc*/ s_nop           0x0
/*0000000161d0*/ s_nop           0x0
/*0000000161d4*/ s_nop           0x0
/*0000000161d8*/ s_nop           0x0
/*0000000161dc*/ s_nop           0x0
/*0000000161e0*/ s_nop           0x0
/*0000000161e4*/ s_nop           0x0
/*0000000161e8*/ s_nop           0x0
/*0000000161ec*/ s_nop           0x0
/*0000000161f0*/ s_nop           0x0
/*0000000161f4*/ s_nop           0x0
/*0000000161f8*/ s_nop           0x0
/*0000000161fc*/ s_nop           0x0
add_long_get_group_id_get_num_groups:
.skip 256
/*000000016300*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016308*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016310*/ s_waitcnt       lgkmcnt(0)
/*000000016314*/ s_clause        0x1
/*000000016318*/ s_load_dword    s3, s[6:7], 0x20
/*000000016320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016328*/ s_lshl_b32      s7, s8, 1
/*00000001632c*/ s_lshl_b32      s11, s9, 4
/*000000016330*/ s_lshl_b32      s13, s10, 1
/*000000016334*/ v_mov_b32       v4, 0
/*000000016338*/ v_mov_b32       v6, v4
/*00000001633c*/ v_mov_b32       v8, v4
/*000000016340*/ s_and_b32       s6, s0, -2
/*000000016344*/ v_add3_u32      v3, s12, s7, v0
/*00000001634c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000016354*/ s_lshr_b32      s0, s0, 1
/*000000016358*/ v_add3_u32      v5, s14, s11, v1
/*000000016360*/ s_waitcnt       lgkmcnt(0)
/*000000016364*/ v_add3_u32      v7, s3, s13, v2
/*00000001636c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016374*/ s_cmpk_lg_u32   s6, 0x0
/*000000016378*/ s_addc_u32      s0, s0, 0
/*00000001637c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000016384*/ s_add_u32       s6, s0, s8
/*000000016388*/ s_addc_u32      s7, 0, 0
/*00000001638c*/ s_and_b32       s0, s1, -16
/*000000016390*/ v_add_co_u32    v0, vcc, s4, v0
/*000000016398*/ v_cmp_gt_u32    s[0:1], s1, s0
/*0000000163a0*/ s_lshr_b32      s1, s1, 4
/*0000000163a4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000163ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000163b0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000163b8*/ s_cmpk_lg_u32   s0, 0x0
/*0000000163bc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000163c0*/ s_addc_u32      s0, s1, 0
/*0000000163c4*/ v_mov_b32       v6, s6
/*0000000163c8*/ s_add_u32       s0, s0, s9
/*0000000163cc*/ s_addc_u32      s1, 0, 0
/*0000000163d0*/ s_and_b32       s3, s2, -2
/*0000000163d4*/ v_mov_b32       v9, s1
/*0000000163d8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000163e0*/ s_lshr_b32      s2, s2, 1
/*0000000163e4*/ v_mov_b32       v8, s0
/*0000000163e8*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000163f0*/ v_mov_b32       v7, s7
/*0000000163f4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000163f8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000163fc*/ s_addc_u32      s2, s2, 0
/*000000016400*/ s_add_u32       s0, s2, s10
/*000000016404*/ s_addc_u32      s1, 0, 0
/*000000016408*/ v_mov_b32       v11, s1
/*00000001640c*/ v_mov_b32       v10, s0
/*000000016410*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000016418*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000016420*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000016428*/ s_endpgm
/*00000001642c*/ s_nop           0x0
/*000000016430*/ s_nop           0x0
/*000000016434*/ s_nop           0x0
/*000000016438*/ s_nop           0x0
/*00000001643c*/ s_nop           0x0
/*000000016440*/ s_nop           0x0
/*000000016444*/ s_nop           0x0
/*000000016448*/ s_nop           0x0
/*00000001644c*/ s_nop           0x0
/*000000016450*/ s_nop           0x0
/*000000016454*/ s_nop           0x0
/*000000016458*/ s_nop           0x0
/*00000001645c*/ s_nop           0x0
/*000000016460*/ s_nop           0x0
/*000000016464*/ s_nop           0x0
/*000000016468*/ s_nop           0x0
/*00000001646c*/ s_nop           0x0
/*000000016470*/ s_nop           0x0
/*000000016474*/ s_nop           0x0
/*000000016478*/ s_nop           0x0
/*00000001647c*/ s_nop           0x0
/*000000016480*/ s_nop           0x0
/*000000016484*/ s_nop           0x0
/*000000016488*/ s_nop           0x0
/*00000001648c*/ s_nop           0x0
/*000000016490*/ s_nop           0x0
/*000000016494*/ s_nop           0x0
/*000000016498*/ s_nop           0x0
/*00000001649c*/ s_nop           0x0
/*0000000164a0*/ s_nop           0x0
/*0000000164a4*/ s_nop           0x0
/*0000000164a8*/ s_nop           0x0
/*0000000164ac*/ s_nop           0x0
/*0000000164b0*/ s_nop           0x0
/*0000000164b4*/ s_nop           0x0
/*0000000164b8*/ s_nop           0x0
/*0000000164bc*/ s_nop           0x0
/*0000000164c0*/ s_nop           0x0
/*0000000164c4*/ s_nop           0x0
/*0000000164c8*/ s_nop           0x0
/*0000000164cc*/ s_nop           0x0
/*0000000164d0*/ s_nop           0x0
/*0000000164d4*/ s_nop           0x0
/*0000000164d8*/ s_nop           0x0
/*0000000164dc*/ s_nop           0x0
/*0000000164e0*/ s_nop           0x0
/*0000000164e4*/ s_nop           0x0
/*0000000164e8*/ s_nop           0x0
/*0000000164ec*/ s_nop           0x0
/*0000000164f0*/ s_nop           0x0
/*0000000164f4*/ s_nop           0x0
/*0000000164f8*/ s_nop           0x0
/*0000000164fc*/ s_nop           0x0
add_long_get_local_size_get_num_groups:
.skip 256
/*000000016600*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016608*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016610*/ s_waitcnt       lgkmcnt(0)
/*000000016614*/ s_clause        0x1
/*000000016618*/ s_load_dword    s3, s[6:7], 0x20
/*000000016620*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016628*/ s_lshl_b32      s7, s8, 1
/*00000001662c*/ s_lshl_b32      s8, s9, 1
/*000000016630*/ s_lshl_b32      s9, s10, 2
/*000000016634*/ v_mov_b32       v4, 0
/*000000016638*/ v_mov_b32       v6, v4
/*00000001663c*/ v_mov_b32       v8, v4
/*000000016640*/ s_and_b32       s6, s0, -2
/*000000016644*/ v_add3_u32      v3, s12, s7, v0
/*00000001664c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000016654*/ s_lshr_b32      s0, s0, 1
/*000000016658*/ v_add3_u32      v5, s14, s8, v1
/*000000016660*/ s_waitcnt       lgkmcnt(0)
/*000000016664*/ v_add3_u32      v7, s3, s9, v2
/*00000001666c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016674*/ s_cmpk_lg_u32   s6, 0x0
/*000000016678*/ s_addc_u32      s0, s0, 0
/*00000001667c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000016684*/ s_add_u32       s6, s0, 2
/*000000016688*/ s_addc_u32      s7, 0, 0
/*00000001668c*/ s_and_b32       s0, s1, -2
/*000000016690*/ v_add_co_u32    v15, vcc, s4, v0
/*000000016698*/ v_cmp_gt_u32    s[0:1], s1, s0
/*0000000166a0*/ s_lshr_b32      s1, s1, 1
/*0000000166a4*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*0000000166ac*/ v_add_co_ci_u32 v16, vcc, s5, v1, vcc
/*0000000166b0*/ v_add_co_u32    v1, vcc, s4, v2
/*0000000166b8*/ s_cmpk_lg_u32   s0, 0x0
/*0000000166bc*/ v_add_co_ci_u32 v2, vcc, s5, v3, vcc
/*0000000166c0*/ s_addc_u32      s0, s1, 0
/*0000000166c4*/ v_mov_b32       v10, s7
/*0000000166c8*/ s_add_u32       s0, s0, 2
/*0000000166cc*/ s_addc_u32      s1, 0, 0
/*0000000166d0*/ s_and_b32       s3, s2, -4
/*0000000166d4*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000166dc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000166e4*/ s_lshr_b32      s2, s2, 2
/*0000000166e8*/ v_mov_b32       v12, s1
/*0000000166ec*/ v_mov_b32       v9, s6
/*0000000166f0*/ v_mov_b32       v11, s0
/*0000000166f4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000166f8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000166fc*/ s_addc_u32      s2, s2, 4
/*000000016700*/ v_mov_b32       v3, s2
/*000000016704*/ global_store_dwordx2 v[15:16], v[9:10], off
/*00000001670c*/ global_store_dwordx2 v[1:2], v[11:12], off
/*000000016714*/ global_store_dwordx2 v[5:6], v[3:4], off
/*00000001671c*/ s_endpgm
/*000000016720*/ s_nop           0x0
/*000000016724*/ s_nop           0x0
/*000000016728*/ s_nop           0x0
/*00000001672c*/ s_nop           0x0
/*000000016730*/ s_nop           0x0
/*000000016734*/ s_nop           0x0
/*000000016738*/ s_nop           0x0
/*00000001673c*/ s_nop           0x0
/*000000016740*/ s_nop           0x0
/*000000016744*/ s_nop           0x0
/*000000016748*/ s_nop           0x0
/*00000001674c*/ s_nop           0x0
/*000000016750*/ s_nop           0x0
/*000000016754*/ s_nop           0x0
/*000000016758*/ s_nop           0x0
/*00000001675c*/ s_nop           0x0
/*000000016760*/ s_nop           0x0
/*000000016764*/ s_nop           0x0
/*000000016768*/ s_nop           0x0
/*00000001676c*/ s_nop           0x0
/*000000016770*/ s_nop           0x0
/*000000016774*/ s_nop           0x0
/*000000016778*/ s_nop           0x0
/*00000001677c*/ s_nop           0x0
/*000000016780*/ s_nop           0x0
/*000000016784*/ s_nop           0x0
/*000000016788*/ s_nop           0x0
/*00000001678c*/ s_nop           0x0
/*000000016790*/ s_nop           0x0
/*000000016794*/ s_nop           0x0
/*000000016798*/ s_nop           0x0
/*00000001679c*/ s_nop           0x0
/*0000000167a0*/ s_nop           0x0
/*0000000167a4*/ s_nop           0x0
/*0000000167a8*/ s_nop           0x0
/*0000000167ac*/ s_nop           0x0
/*0000000167b0*/ s_nop           0x0
/*0000000167b4*/ s_nop           0x0
/*0000000167b8*/ s_nop           0x0
/*0000000167bc*/ s_nop           0x0
/*0000000167c0*/ s_nop           0x0
/*0000000167c4*/ s_nop           0x0
/*0000000167c8*/ s_nop           0x0
/*0000000167cc*/ s_nop           0x0
/*0000000167d0*/ s_nop           0x0
/*0000000167d4*/ s_nop           0x0
/*0000000167d8*/ s_nop           0x0
/*0000000167dc*/ s_nop           0x0
/*0000000167e0*/ s_nop           0x0
/*0000000167e4*/ s_nop           0x0
/*0000000167e8*/ s_nop           0x0
/*0000000167ec*/ s_nop           0x0
/*0000000167f0*/ s_nop           0x0
/*0000000167f4*/ s_nop           0x0
/*0000000167f8*/ s_nop           0x0
/*0000000167fc*/ s_nop           0x0
add_long_get_global_id_get_num_groups:
.skip 256
/*000000016900*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016908*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016910*/ s_waitcnt       lgkmcnt(0)
/*000000016914*/ s_clause        0x1
/*000000016918*/ s_load_dword    s3, s[6:7], 0x20
/*000000016920*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016928*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000016930*/ v_mov_b32       v4, 0
/*000000016934*/ s_lshl_b32      s6, s9, 1
/*000000016938*/ s_lshl_b32      s8, s10, 2
/*00000001693c*/ v_mov_b32       v14, 0
/*000000016940*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000016948*/ v_mov_b32       v6, v4
/*00000001694c*/ s_and_b32       s7, s0, -2
/*000000016950*/ v_add3_u32      v5, s14, s6, v1
/*000000016958*/ v_cmp_gt_u32    s[7:8], s0, s7
/*000000016960*/ s_lshr_b32      s0, s0, 1
/*000000016964*/ v_add_nc_u32    v9, s12, v3
/*000000016968*/ s_waitcnt       lgkmcnt(0)
/*00000001696c*/ v_add3_u32      v3, s3, s8, v2
/*000000016974*/ v_add_co_u32    v18, vcc, s4, v7
/*00000001697c*/ s_cmpk_lg_u32   s7, 0x0
/*000000016980*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*000000016984*/ s_addc_u32      s0, s0, 0
/*000000016988*/ s_and_b32       s6, s1, -2
/*00000001698c*/ v_add_co_u32    v8, vcc, v9, s0
/*000000016994*/ v_cmp_gt_u32    s[3:4], s1, s6
/*00000001699c*/ s_lshr_b32      s1, s1, 1
/*0000000169a0*/ v_lshlrev_b64   v[6:7], 3, v[5:6]
/*0000000169a8*/ v_add_co_ci_u32 v9, vcc, 0, v14, vcc
/*0000000169ac*/ v_lshlrev_b64   v[12:13], 3, v[3:4]
/*0000000169b4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000169b8*/ s_addc_u32      s1, s1, 0
/*0000000169bc*/ s_and_b32       s3, s2, -4
/*0000000169c0*/ v_add_co_u32    v10, vcc, v5, s1
/*0000000169c8*/ v_cmp_gt_u32    s[0:1], s2, s3
/*0000000169d0*/ s_lshr_b32      s1, s2, 2
/*0000000169d4*/ v_add_co_ci_u32 v11, vcc, 0, v14, vcc
/*0000000169d8*/ v_add_co_u32    v0, vcc, s4, v6
/*0000000169e0*/ s_cmpk_lg_u32   s0, 0x0
/*0000000169e4*/ v_add_co_ci_u32 v1, vcc, s5, v7, vcc
/*0000000169e8*/ s_addc_u32      s0, s1, 0
/*0000000169ec*/ v_add_co_u32    v2, vcc, v3, s0
/*0000000169f4*/ v_add_co_ci_u32 v3, vcc, 0, v14, vcc
/*0000000169f8*/ v_add_co_u32    v12, vcc, s4, v12
/*000000016a00*/ v_add_co_ci_u32 v13, vcc, s5, v13, vcc
/*000000016a04*/ global_store_dwordx2 v[18:19], v[8:9], off
/*000000016a0c*/ global_store_dwordx2 v[0:1], v[10:11], off
/*000000016a14*/ global_store_dwordx2 v[12:13], v[2:3], off
/*000000016a1c*/ s_endpgm
/*000000016a20*/ s_nop           0x0
/*000000016a24*/ s_nop           0x0
/*000000016a28*/ s_nop           0x0
/*000000016a2c*/ s_nop           0x0
/*000000016a30*/ s_nop           0x0
/*000000016a34*/ s_nop           0x0
/*000000016a38*/ s_nop           0x0
/*000000016a3c*/ s_nop           0x0
/*000000016a40*/ s_nop           0x0
/*000000016a44*/ s_nop           0x0
/*000000016a48*/ s_nop           0x0
/*000000016a4c*/ s_nop           0x0
/*000000016a50*/ s_nop           0x0
/*000000016a54*/ s_nop           0x0
/*000000016a58*/ s_nop           0x0
/*000000016a5c*/ s_nop           0x0
/*000000016a60*/ s_nop           0x0
/*000000016a64*/ s_nop           0x0
/*000000016a68*/ s_nop           0x0
/*000000016a6c*/ s_nop           0x0
/*000000016a70*/ s_nop           0x0
/*000000016a74*/ s_nop           0x0
/*000000016a78*/ s_nop           0x0
/*000000016a7c*/ s_nop           0x0
/*000000016a80*/ s_nop           0x0
/*000000016a84*/ s_nop           0x0
/*000000016a88*/ s_nop           0x0
/*000000016a8c*/ s_nop           0x0
/*000000016a90*/ s_nop           0x0
/*000000016a94*/ s_nop           0x0
/*000000016a98*/ s_nop           0x0
/*000000016a9c*/ s_nop           0x0
/*000000016aa0*/ s_nop           0x0
/*000000016aa4*/ s_nop           0x0
/*000000016aa8*/ s_nop           0x0
/*000000016aac*/ s_nop           0x0
/*000000016ab0*/ s_nop           0x0
/*000000016ab4*/ s_nop           0x0
/*000000016ab8*/ s_nop           0x0
/*000000016abc*/ s_nop           0x0
/*000000016ac0*/ s_nop           0x0
/*000000016ac4*/ s_nop           0x0
/*000000016ac8*/ s_nop           0x0
/*000000016acc*/ s_nop           0x0
/*000000016ad0*/ s_nop           0x0
/*000000016ad4*/ s_nop           0x0
/*000000016ad8*/ s_nop           0x0
/*000000016adc*/ s_nop           0x0
/*000000016ae0*/ s_nop           0x0
/*000000016ae4*/ s_nop           0x0
/*000000016ae8*/ s_nop           0x0
/*000000016aec*/ s_nop           0x0
/*000000016af0*/ s_nop           0x0
/*000000016af4*/ s_nop           0x0
/*000000016af8*/ s_nop           0x0
/*000000016afc*/ s_nop           0x0
add_long_get_global_size_get_num_groups:
.skip 256
/*000000016c00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016c08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016c10*/ s_waitcnt       lgkmcnt(0)
/*000000016c14*/ s_clause        0x1
/*000000016c18*/ s_load_dword    s3, s[6:7], 0x20
/*000000016c20*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000016c28*/ s_lshl_b32      s7, s8, 4
/*000000016c2c*/ s_lshl_b32      s8, s9, 1
/*000000016c30*/ s_lshl_b32      s9, s10, 1
/*000000016c34*/ v_mov_b32       v4, 0
/*000000016c38*/ v_mov_b32       v6, v4
/*000000016c3c*/ v_mov_b32       v8, v4
/*000000016c40*/ s_and_b32       s6, s0, -16
/*000000016c44*/ s_lshr_b32      s10, s0, 4
/*000000016c48*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000016c50*/ v_add3_u32      v3, s12, s7, v0
/*000000016c58*/ s_waitcnt       lgkmcnt(0)
/*000000016c5c*/ v_add3_u32      v7, s3, s9, v2
/*000000016c64*/ v_add3_u32      v5, s14, s8, v1
/*000000016c6c*/ s_cmpk_lg_u32   s6, 0x0
/*000000016c70*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016c78*/ s_addc_u32      s6, s10, 0
/*000000016c7c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000016c84*/ s_add_u32       s6, s6, s0
/*000000016c88*/ s_addc_u32      s7, 0, 0
/*000000016c8c*/ s_and_b32       s0, s1, -2
/*000000016c90*/ s_lshr_b32      s3, s1, 1
/*000000016c94*/ v_cmp_gt_u32    s[0:1], s1, s0
/*000000016c9c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000016ca4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000016cac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000016cb0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000016cb8*/ s_cmpk_lg_u32   s0, 0x0
/*000000016cbc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000016cc0*/ s_addc_u32      s0, s3, 0
/*000000016cc4*/ v_mov_b32       v6, s6
/*000000016cc8*/ s_add_u32       s0, s0, s1
/*000000016ccc*/ s_addc_u32      s1, 0, 0
/*000000016cd0*/ s_and_b32       s3, s2, -2
/*000000016cd4*/ s_lshr_b32      s8, s2, 1
/*000000016cd8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000016ce0*/ v_mov_b32       v9, s1
/*000000016ce4*/ v_mov_b32       v8, s0
/*000000016ce8*/ v_add_co_u32    v4, vcc, s4, v4
/*000000016cf0*/ v_mov_b32       v7, s7
/*000000016cf4*/ s_cmpk_lg_u32   s3, 0x0
/*000000016cf8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000016cfc*/ s_addc_u32      s3, s8, 0
/*000000016d00*/ s_add_u32       s0, s3, s2
/*000000016d04*/ s_addc_u32      s1, 0, 0
/*000000016d08*/ v_mov_b32       v11, s1
/*000000016d0c*/ v_mov_b32       v10, s0
/*000000016d10*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000016d18*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000016d20*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000016d28*/ s_endpgm
/*000000016d2c*/ s_nop           0x0
/*000000016d30*/ s_nop           0x0
/*000000016d34*/ s_nop           0x0
/*000000016d38*/ s_nop           0x0
/*000000016d3c*/ s_nop           0x0
/*000000016d40*/ s_nop           0x0
/*000000016d44*/ s_nop           0x0
/*000000016d48*/ s_nop           0x0
/*000000016d4c*/ s_nop           0x0
/*000000016d50*/ s_nop           0x0
/*000000016d54*/ s_nop           0x0
/*000000016d58*/ s_nop           0x0
/*000000016d5c*/ s_nop           0x0
/*000000016d60*/ s_nop           0x0
/*000000016d64*/ s_nop           0x0
/*000000016d68*/ s_nop           0x0
/*000000016d6c*/ s_nop           0x0
/*000000016d70*/ s_nop           0x0
/*000000016d74*/ s_nop           0x0
/*000000016d78*/ s_nop           0x0
/*000000016d7c*/ s_nop           0x0
/*000000016d80*/ s_nop           0x0
/*000000016d84*/ s_nop           0x0
/*000000016d88*/ s_nop           0x0
/*000000016d8c*/ s_nop           0x0
/*000000016d90*/ s_nop           0x0
/*000000016d94*/ s_nop           0x0
/*000000016d98*/ s_nop           0x0
/*000000016d9c*/ s_nop           0x0
/*000000016da0*/ s_nop           0x0
/*000000016da4*/ s_nop           0x0
/*000000016da8*/ s_nop           0x0
/*000000016dac*/ s_nop           0x0
/*000000016db0*/ s_nop           0x0
/*000000016db4*/ s_nop           0x0
/*000000016db8*/ s_nop           0x0
/*000000016dbc*/ s_nop           0x0
/*000000016dc0*/ s_nop           0x0
/*000000016dc4*/ s_nop           0x0
/*000000016dc8*/ s_nop           0x0
/*000000016dcc*/ s_nop           0x0
/*000000016dd0*/ s_nop           0x0
/*000000016dd4*/ s_nop           0x0
/*000000016dd8*/ s_nop           0x0
/*000000016ddc*/ s_nop           0x0
/*000000016de0*/ s_nop           0x0
/*000000016de4*/ s_nop           0x0
/*000000016de8*/ s_nop           0x0
/*000000016dec*/ s_nop           0x0
/*000000016df0*/ s_nop           0x0
/*000000016df4*/ s_nop           0x0
/*000000016df8*/ s_nop           0x0
/*000000016dfc*/ s_nop           0x0
add_long_get_num_groups_get_num_groups:
.skip 256
/*000000016f00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016f08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016f10*/ s_waitcnt       lgkmcnt(0)
/*000000016f14*/ s_clause        0x1
/*000000016f18*/ s_load_dword    s3, s[6:7], 0x20
/*000000016f20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016f28*/ s_lshl_b32      s6, s8, 1
/*000000016f2c*/ s_lshl_b32      s11, s9, 1
/*000000016f30*/ s_lshl_b32      s10, s10, 2
/*000000016f34*/ v_mov_b32       v4, 0
/*000000016f38*/ s_mov_b32       s7, 0
/*000000016f3c*/ s_mov_b32       s9, s7
/*000000016f40*/ v_mov_b32       v6, v4
/*000000016f44*/ v_mov_b32       v8, v4
/*000000016f48*/ s_and_b32       s8, s0, -2
/*000000016f4c*/ v_add3_u32      v3, s12, s6, v0
/*000000016f54*/ v_cmp_gt_u32    s[8:9], s0, s8
/*000000016f5c*/ s_lshr_b32      s0, s0, 1
/*000000016f60*/ v_add3_u32      v5, s14, s11, v1
/*000000016f68*/ s_waitcnt       lgkmcnt(0)
/*000000016f6c*/ v_add3_u32      v7, s3, s10, v2
/*000000016f74*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016f7c*/ s_cmpk_lg_u32   s8, 0x0
/*000000016f80*/ s_addc_u32      s6, s0, 0
/*000000016f84*/ s_and_b32       s0, s1, -2
/*000000016f88*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000016f90*/ v_cmp_gt_u32    s[0:1], s1, s0
/*000000016f98*/ s_lshr_b32      s1, s1, 1
/*000000016f9c*/ v_add_co_u32    v15, vcc, s4, v0
/*000000016fa4*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000016fac*/ v_add_co_ci_u32 v16, vcc, s5, v1, vcc
/*000000016fb0*/ s_cmpk_lg_u32   s0, 0x0
/*000000016fb4*/ v_add_co_u32    v1, vcc, s4, v2
/*000000016fbc*/ s_addc_u32      s8, s1, 0
/*000000016fc0*/ s_and_b32       s0, s2, -4
/*000000016fc4*/ s_lshr_b32      s1, s2, 2
/*000000016fc8*/ v_cmp_gt_u32    s[0:1], s2, s0
/*000000016fd0*/ v_add_co_ci_u32 v2, vcc, s5, v3, vcc
/*000000016fd4*/ v_add_co_u32    v5, vcc, s4, v5
/*000000016fdc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000016fe0*/ s_cmpk_lg_u32   s0, 0x0
/*000000016fe4*/ s_addc_u32      s10, s1, 0
/*000000016fe8*/ s_lshl_b64      s[0:1], s[6:7], 1
/*000000016fec*/ s_lshl_b64      s[2:3], s[8:9], 1
/*000000016ff0*/ v_mov_b32       v10, s1
/*000000016ff4*/ v_mov_b32       v9, s0
/*000000016ff8*/ s_lshl_b32      s0, s10, 1
/*000000016ffc*/ v_mov_b32       v12, s3
/*000000017000*/ v_mov_b32       v11, s2
/*000000017004*/ v_mov_b32       v3, s0
/*000000017008*/ global_store_dwordx2 v[15:16], v[9:10], off
/*000000017010*/ global_store_dwordx2 v[1:2], v[11:12], off
/*000000017018*/ global_store_dwordx2 v[5:6], v[3:4], off
/*000000017020*/ s_endpgm
/*000000017024*/ s_nop           0x0
/*000000017028*/ s_nop           0x0
/*00000001702c*/ s_nop           0x0
/*000000017030*/ s_nop           0x0
/*000000017034*/ s_nop           0x0
/*000000017038*/ s_nop           0x0
/*00000001703c*/ s_nop           0x0
/*000000017040*/ s_nop           0x0
/*000000017044*/ s_nop           0x0
/*000000017048*/ s_nop           0x0
/*00000001704c*/ s_nop           0x0
/*000000017050*/ s_nop           0x0
/*000000017054*/ s_nop           0x0
/*000000017058*/ s_nop           0x0
/*00000001705c*/ s_nop           0x0
/*000000017060*/ s_nop           0x0
/*000000017064*/ s_nop           0x0
/*000000017068*/ s_nop           0x0
/*00000001706c*/ s_nop           0x0
/*000000017070*/ s_nop           0x0
/*000000017074*/ s_nop           0x0
/*000000017078*/ s_nop           0x0
/*00000001707c*/ s_nop           0x0
/*000000017080*/ s_nop           0x0
/*000000017084*/ s_nop           0x0
/*000000017088*/ s_nop           0x0
/*00000001708c*/ s_nop           0x0
/*000000017090*/ s_nop           0x0
/*000000017094*/ s_nop           0x0
/*000000017098*/ s_nop           0x0
/*00000001709c*/ s_nop           0x0
/*0000000170a0*/ s_nop           0x0
/*0000000170a4*/ s_nop           0x0
/*0000000170a8*/ s_nop           0x0
/*0000000170ac*/ s_nop           0x0
/*0000000170b0*/ s_nop           0x0
/*0000000170b4*/ s_nop           0x0
/*0000000170b8*/ s_nop           0x0
/*0000000170bc*/ s_nop           0x0
/*0000000170c0*/ s_nop           0x0
/*0000000170c4*/ s_nop           0x0
/*0000000170c8*/ s_nop           0x0
/*0000000170cc*/ s_nop           0x0
/*0000000170d0*/ s_nop           0x0
/*0000000170d4*/ s_nop           0x0
/*0000000170d8*/ s_nop           0x0
/*0000000170dc*/ s_nop           0x0
/*0000000170e0*/ s_nop           0x0
/*0000000170e4*/ s_nop           0x0
/*0000000170e8*/ s_nop           0x0
/*0000000170ec*/ s_nop           0x0
/*0000000170f0*/ s_nop           0x0
/*0000000170f4*/ s_nop           0x0
/*0000000170f8*/ s_nop           0x0
/*0000000170fc*/ s_nop           0x0
add_long_get_work_dim_get_num_groups:
.skip 256
/*000000017200*/ v_mov_b32       v3, s4
/*000000017204*/ v_mov_b32       v4, s5
/*000000017208*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000017210*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000017218*/ s_waitcnt       lgkmcnt(0)
/*00000001721c*/ s_clause        0x1
/*000000017220*/ s_load_dword    s3, s[6:7], 0x20
/*000000017228*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017230*/ s_lshl_b32      s6, s8, 1
/*000000017234*/ s_lshl_b32      s8, s9, 1
/*000000017238*/ global_load_ushort v7, v[3:4], off inst_offset:2
/*000000017240*/ v_mov_b32       v4, 0
/*000000017244*/ s_lshl_b32      s9, s10, 2
/*000000017248*/ v_mov_b32       v11, 0
/*00000001724c*/ v_mov_b32       v6, v4
/*000000017250*/ s_and_b32       s7, s0, -2
/*000000017254*/ v_add3_u32      v3, s12, s6, v0
/*00000001725c*/ v_cmp_gt_u32    s[7:8], s0, s7
/*000000017264*/ s_lshr_b32      s0, s0, 1
/*000000017268*/ v_add3_u32      v5, s14, s8, v1
/*000000017270*/ s_waitcnt       lgkmcnt(0)
/*000000017274*/ v_add3_u32      v0, s3, s9, v2
/*00000001727c*/ v_lshlrev_b64   v[2:3], 3, v[3:4]
/*000000017284*/ s_cmpk_lg_u32   s7, 0x0
/*000000017288*/ v_mov_b32       v1, v4
/*00000001728c*/ s_addc_u32      s0, s0, 0
/*000000017290*/ s_and_b32       s6, s1, -2
/*000000017294*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001729c*/ v_cmp_gt_u32    s[6:7], s1, s6
/*0000000172a4*/ v_add_co_u32    v12, vcc, s4, v2
/*0000000172ac*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*0000000172b4*/ s_lshr_b32      s1, s1, 1
/*0000000172b8*/ v_add_co_ci_u32 v13, vcc, s5, v3, vcc
/*0000000172bc*/ s_cmpk_lg_u32   s6, 0x0
/*0000000172c0*/ v_add_co_u32    v2, vcc, s4, v4
/*0000000172c8*/ s_addc_u32      s1, s1, 0
/*0000000172cc*/ s_and_b32       s3, s2, -4
/*0000000172d0*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*0000000172d4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000172dc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000172e4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000172e8*/ s_lshr_b32      s2, s2, 2
/*0000000172ec*/ s_cmpk_lg_u32   s3, 0x0
/*0000000172f0*/ s_addc_u32      s2, s2, 0
/*0000000172f4*/ s_waitcnt       vmcnt(0)
/*0000000172f8*/ v_and_b32       v10, 0xffff, v7
/*000000017300*/ v_add_co_u32    v6, vcc, s0, v10
/*000000017308*/ v_add_co_ci_u32 v7, vcc, 0, v11, vcc
/*00000001730c*/ v_add_co_u32    v8, vcc, s1, v10
/*000000017314*/ v_add_co_ci_u32 v9, vcc, 0, v11, vcc
/*000000017318*/ v_add_co_u32    v10, vcc, s2, v10
/*000000017320*/ v_add_co_ci_u32 v11, vcc, 0, v11, vcc
/*000000017324*/ global_store_dwordx2 v[12:13], v[6:7], off
/*00000001732c*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000017334*/ global_store_dwordx2 v[0:1], v[10:11], off
/*00000001733c*/ s_endpgm
/*000000017340*/ s_nop           0x0
/*000000017344*/ s_nop           0x0
/*000000017348*/ s_nop           0x0
/*00000001734c*/ s_nop           0x0
/*000000017350*/ s_nop           0x0
/*000000017354*/ s_nop           0x0
/*000000017358*/ s_nop           0x0
/*00000001735c*/ s_nop           0x0
/*000000017360*/ s_nop           0x0
/*000000017364*/ s_nop           0x0
/*000000017368*/ s_nop           0x0
/*00000001736c*/ s_nop           0x0
/*000000017370*/ s_nop           0x0
/*000000017374*/ s_nop           0x0
/*000000017378*/ s_nop           0x0
/*00000001737c*/ s_nop           0x0
/*000000017380*/ s_nop           0x0
/*000000017384*/ s_nop           0x0
/*000000017388*/ s_nop           0x0
/*00000001738c*/ s_nop           0x0
/*000000017390*/ s_nop           0x0
/*000000017394*/ s_nop           0x0
/*000000017398*/ s_nop           0x0
/*00000001739c*/ s_nop           0x0
/*0000000173a0*/ s_nop           0x0
/*0000000173a4*/ s_nop           0x0
/*0000000173a8*/ s_nop           0x0
/*0000000173ac*/ s_nop           0x0
/*0000000173b0*/ s_nop           0x0
/*0000000173b4*/ s_nop           0x0
/*0000000173b8*/ s_nop           0x0
/*0000000173bc*/ s_nop           0x0
/*0000000173c0*/ s_nop           0x0
/*0000000173c4*/ s_nop           0x0
/*0000000173c8*/ s_nop           0x0
/*0000000173cc*/ s_nop           0x0
/*0000000173d0*/ s_nop           0x0
/*0000000173d4*/ s_nop           0x0
/*0000000173d8*/ s_nop           0x0
/*0000000173dc*/ s_nop           0x0
/*0000000173e0*/ s_nop           0x0
/*0000000173e4*/ s_nop           0x0
/*0000000173e8*/ s_nop           0x0
/*0000000173ec*/ s_nop           0x0
/*0000000173f0*/ s_nop           0x0
/*0000000173f4*/ s_nop           0x0
/*0000000173f8*/ s_nop           0x0
/*0000000173fc*/ s_nop           0x0
add_long_x_get_work_dim:
.skip 256
/*000000017500*/ v_mov_b32       v3, s4
/*000000017504*/ v_mov_b32       v4, s5
/*000000017508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017510*/ s_waitcnt       lgkmcnt(0)
/*000000017514*/ s_clause        0x2
/*000000017518*/ s_load_dword    s1, s[6:7], 0x20
/*000000017520*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000017528*/ s_load_dword    s6, s[6:7], 0x8
/*000000017530*/ s_lshl_b32      s3, s8, 4
/*000000017534*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*00000001753c*/ v_mov_b32       v3, 0
/*000000017540*/ s_lshl_b32      s7, s9, 1
/*000000017544*/ s_lshl_b32      s8, s10, 1
/*000000017548*/ v_mov_b32       v5, v3
/*00000001754c*/ v_mov_b32       v7, v3
/*000000017550*/ v_mov_b32       v9, v3
/*000000017554*/ v_add3_u32      v4, s0, s3, v0
/*00000001755c*/ v_add3_u32      v6, s2, s7, v1
/*000000017564*/ s_waitcnt       lgkmcnt(0)
/*000000017568*/ v_add3_u32      v8, s1, s8, v2
/*000000017570*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017578*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000017580*/ v_lshlrev_b64   v[6:7], 3, v[8:9]
/*000000017588*/ v_add_co_u32    v0, vcc, s4, v0
/*000000017590*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017594*/ v_add_co_u32    v4, vcc, s4, v4
/*00000001759c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000175a0*/ v_add_co_u32    v8, vcc, s4, v6
/*0000000175a8*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000175ac*/ s_waitcnt       vmcnt(0)
/*0000000175b0*/ v_add_nc_u32    v2, s6, v10
/*0000000175b4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000175bc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000175c4*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000175cc*/ s_endpgm
/*0000000175d0*/ s_nop           0x0
/*0000000175d4*/ s_nop           0x0
/*0000000175d8*/ s_nop           0x0
/*0000000175dc*/ s_nop           0x0
/*0000000175e0*/ s_nop           0x0
/*0000000175e4*/ s_nop           0x0
/*0000000175e8*/ s_nop           0x0
/*0000000175ec*/ s_nop           0x0
/*0000000175f0*/ s_nop           0x0
/*0000000175f4*/ s_nop           0x0
/*0000000175f8*/ s_nop           0x0
/*0000000175fc*/ s_nop           0x0
add_long_get_global_offset_get_work_dim:
.skip 256
/*000000017700*/ v_mov_b32       v3, s4
/*000000017704*/ v_mov_b32       v4, s5
/*000000017708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017710*/ s_waitcnt       lgkmcnt(0)
/*000000017714*/ s_clause        0x1
/*000000017718*/ s_load_dword    s1, s[6:7], 0x20
/*000000017720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017728*/ s_lshl_b32      s3, s8, 1
/*00000001772c*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000017734*/ v_mov_b32       v3, 0
/*000000017738*/ v_mov_b32       v5, v3
/*00000001773c*/ v_mov_b32       v7, v3
/*000000017740*/ v_add3_u32      v4, s0, s3, v0
/*000000017748*/ s_lshl_b32      s3, s9, 4
/*00000001774c*/ v_add3_u32      v6, s2, s3, v1
/*000000017754*/ s_lshl_b32      s3, s10, 1
/*000000017758*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017760*/ s_waitcnt       lgkmcnt(0)
/*000000017764*/ v_add3_u32      v4, s1, s3, v2
/*00000001776c*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*000000017774*/ v_add_co_u32    v0, vcc, s4, v0
/*00000001777c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017780*/ v_add_co_u32    v12, vcc, s4, v6
/*000000017788*/ v_add_co_ci_u32 v13, vcc, s5, v7, vcc
/*00000001778c*/ s_waitcnt       vmcnt(0)
/*000000017790*/ v_add_nc_u32    v2, s0, v8
/*000000017794*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000001779c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*0000000177a4*/ v_add_nc_u32    v2, s2, v8
/*0000000177a8*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000177b0*/ global_store_dwordx2 v[12:13], v[2:3], off
/*0000000177b8*/ v_add_nc_u32    v2, s1, v8
/*0000000177bc*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000177c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000177c8*/ s_endpgm
/*0000000177cc*/ s_nop           0x0
/*0000000177d0*/ s_nop           0x0
/*0000000177d4*/ s_nop           0x0
/*0000000177d8*/ s_nop           0x0
/*0000000177dc*/ s_nop           0x0
/*0000000177e0*/ s_nop           0x0
/*0000000177e4*/ s_nop           0x0
/*0000000177e8*/ s_nop           0x0
/*0000000177ec*/ s_nop           0x0
/*0000000177f0*/ s_nop           0x0
/*0000000177f4*/ s_nop           0x0
/*0000000177f8*/ s_nop           0x0
/*0000000177fc*/ s_nop           0x0
add_long_get_local_id_get_work_dim:
.skip 256
/*000000017900*/ v_mov_b32       v3, s4
/*000000017904*/ v_mov_b32       v4, s5
/*000000017908*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017910*/ s_waitcnt       lgkmcnt(0)
/*000000017914*/ s_clause        0x1
/*000000017918*/ s_load_dword    s1, s[6:7], 0x20
/*000000017920*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017928*/ v_mov_b32       v15, 0
/*00000001792c*/ s_lshl_b32      s3, s8, 3
/*000000017930*/ global_load_ushort v11, v[3:4], off inst_offset:2
/*000000017938*/ v_mov_b32       v6, v15
/*00000001793c*/ v_mov_b32       v8, v15
/*000000017940*/ v_mov_b32       v10, v15
/*000000017944*/ v_add3_u32      v5, s0, s3, v0
/*00000001794c*/ s_lshl_b32      s0, s9, 2
/*000000017950*/ v_add3_u32      v7, s2, s0, v1
/*000000017958*/ s_lshl_b32      s0, s10, 1
/*00000001795c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000017964*/ s_waitcnt       lgkmcnt(0)
/*000000017968*/ v_add3_u32      v9, s1, s0, v2
/*000000017970*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000017978*/ v_add_co_u32    v4, vcc, s4, v5
/*000000017980*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000017984*/ v_add_co_u32    v7, vcc, s4, v7
/*00000001798c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000017990*/ s_waitcnt       vmcnt(0)
/*000000017994*/ v_add_nc_u32    v14, v0, v11
/*000000017998*/ global_store_dwordx2 v[4:5], v[14:15], off
/*0000000179a0*/ v_add_nc_u32    v14, v1, v11
/*0000000179a4*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*0000000179ac*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000179b4*/ v_add_nc_u32    v14, v2, v11
/*0000000179b8*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000179c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000179c4*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000179cc*/ s_endpgm
/*0000000179d0*/ s_nop           0x0
/*0000000179d4*/ s_nop           0x0
/*0000000179d8*/ s_nop           0x0
/*0000000179dc*/ s_nop           0x0
/*0000000179e0*/ s_nop           0x0
/*0000000179e4*/ s_nop           0x0
/*0000000179e8*/ s_nop           0x0
/*0000000179ec*/ s_nop           0x0
/*0000000179f0*/ s_nop           0x0
/*0000000179f4*/ s_nop           0x0
/*0000000179f8*/ s_nop           0x0
/*0000000179fc*/ s_nop           0x0
add_long_get_group_id_get_work_dim:
.skip 256
/*000000017b00*/ v_mov_b32       v3, s4
/*000000017b04*/ v_mov_b32       v4, s5
/*000000017b08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017b10*/ s_waitcnt       lgkmcnt(0)
/*000000017b14*/ s_clause        0x1
/*000000017b18*/ s_load_dword    s1, s[6:7], 0x20
/*000000017b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017b28*/ s_lshl_b32      s3, s8, 1
/*000000017b2c*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000017b34*/ v_mov_b32       v3, 0
/*000000017b38*/ v_mov_b32       v5, v3
/*000000017b3c*/ v_mov_b32       v7, v3
/*000000017b40*/ v_add3_u32      v4, s0, s3, v0
/*000000017b48*/ s_lshl_b32      s0, s9, 4
/*000000017b4c*/ v_add3_u32      v6, s2, s0, v1
/*000000017b54*/ s_lshl_b32      s0, s10, 1
/*000000017b58*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017b60*/ s_waitcnt       lgkmcnt(0)
/*000000017b64*/ v_add3_u32      v4, s1, s0, v2
/*000000017b6c*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*000000017b74*/ v_add_co_u32    v0, vcc, s4, v0
/*000000017b7c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017b80*/ v_add_co_u32    v12, vcc, s4, v6
/*000000017b88*/ v_add_co_ci_u32 v13, vcc, s5, v7, vcc
/*000000017b8c*/ s_waitcnt       vmcnt(0)
/*000000017b90*/ v_add_nc_u32    v2, s8, v8
/*000000017b94*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017b9c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017ba4*/ v_add_nc_u32    v2, s9, v8
/*000000017ba8*/ v_add_co_u32    v0, vcc, s4, v0
/*000000017bb0*/ global_store_dwordx2 v[12:13], v[2:3], off
/*000000017bb8*/ v_add_nc_u32    v2, s10, v8
/*000000017bbc*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017bc0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017bc8*/ s_endpgm
/*000000017bcc*/ s_nop           0x0
/*000000017bd0*/ s_nop           0x0
/*000000017bd4*/ s_nop           0x0
/*000000017bd8*/ s_nop           0x0
/*000000017bdc*/ s_nop           0x0
/*000000017be0*/ s_nop           0x0
/*000000017be4*/ s_nop           0x0
/*000000017be8*/ s_nop           0x0
/*000000017bec*/ s_nop           0x0
/*000000017bf0*/ s_nop           0x0
/*000000017bf4*/ s_nop           0x0
/*000000017bf8*/ s_nop           0x0
/*000000017bfc*/ s_nop           0x0
add_long_get_local_size_get_work_dim:
.skip 256
/*000000017d00*/ v_mov_b32       v3, s4
/*000000017d04*/ v_mov_b32       v4, s5
/*000000017d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017d10*/ s_waitcnt       lgkmcnt(0)
/*000000017d14*/ s_clause        0x1
/*000000017d18*/ s_load_dword    s1, s[6:7], 0x20
/*000000017d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017d28*/ s_lshl_b32      s3, s8, 1
/*000000017d2c*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000017d34*/ v_mov_b32       v3, 0
/*000000017d38*/ v_mov_b32       v5, v3
/*000000017d3c*/ v_mov_b32       v7, v3
/*000000017d40*/ v_add3_u32      v4, s0, s3, v0
/*000000017d48*/ s_lshl_b32      s0, s9, 1
/*000000017d4c*/ v_add3_u32      v6, s2, s0, v1
/*000000017d54*/ s_lshl_b32      s0, s10, 2
/*000000017d58*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000017d60*/ s_waitcnt       lgkmcnt(0)
/*000000017d64*/ v_add3_u32      v4, s1, s0, v2
/*000000017d6c*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*000000017d74*/ v_add_co_u32    v0, vcc, s4, v0
/*000000017d7c*/ v_lshlrev_b64   v[4:5], 3, v[4:5]
/*000000017d84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000017d88*/ v_add_co_u32    v12, vcc, s4, v6
/*000000017d90*/ v_add_co_ci_u32 v13, vcc, s5, v7, vcc
/*000000017d94*/ s_waitcnt       vmcnt(0)
/*000000017d98*/ v_add_nc_u32    v2, 2, v8
/*000000017d9c*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017da4*/ global_store_dwordx2 v[12:13], v[2:3], off
/*000000017dac*/ v_add_co_u32    v0, vcc, s4, v4
/*000000017db4*/ v_add_nc_u32    v2, 4, v8
/*000000017db8*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*000000017dbc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000017dc4*/ s_endpgm
/*000000017dc8*/ s_nop           0x0
/*000000017dcc*/ s_nop           0x0
/*000000017dd0*/ s_nop           0x0
/*000000017dd4*/ s_nop           0x0
/*000000017dd8*/ s_nop           0x0
/*000000017ddc*/ s_nop           0x0
/*000000017de0*/ s_nop           0x0
/*000000017de4*/ s_nop           0x0
/*000000017de8*/ s_nop           0x0
/*000000017dec*/ s_nop           0x0
/*000000017df0*/ s_nop           0x0
/*000000017df4*/ s_nop           0x0
/*000000017df8*/ s_nop           0x0
/*000000017dfc*/ s_nop           0x0
add_long_get_global_id_get_work_dim:
.skip 256
/*000000017f00*/ v_mov_b32       v3, s4
/*000000017f04*/ v_mov_b32       v4, s5
/*000000017f08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000017f10*/ s_waitcnt       lgkmcnt(0)
/*000000017f14*/ s_clause        0x1
/*000000017f18*/ s_load_dword    s1, s[6:7], 0x20
/*000000017f20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017f28*/ v_lshl_or_b32   v5, s9, 1, v1
/*000000017f30*/ v_lshl_or_b32   v7, s10, 2, v2
/*000000017f38*/ global_load_ushort v13, v[3:4], off inst_offset:2
/*000000017f40*/ v_mov_b32       v4, 0
/*000000017f44*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000017f4c*/ v_mov_b32       v1, v4
/*000000017f50*/ v_mov_b32       v8, v4
/*000000017f54*/ v_mov_b32       v2, v4
/*000000017f58*/ v_add_nc_u32    v0, s2, v5
/*000000017f5c*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000017f64*/ s_waitcnt       lgkmcnt(0)
/*000000017f68*/ v_add_nc_u32    v7, s1, v7
/*000000017f6c*/ v_lshlrev_b64   v[9:10], 3, v[0:1]
/*000000017f74*/ v_add_co_u32    v15, vcc, s4, v5
/*000000017f7c*/ v_lshlrev_b64   v[11:12], 3, v[7:8]
/*000000017f84*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000017f88*/ v_add_co_u32    v9, vcc, s4, v9
/*000000017f90*/ v_add_co_ci_u32 v10, vcc, s5, v10, vcc
/*000000017f94*/ s_waitcnt       vmcnt(0)
/*000000017f98*/ v_add3_u32      v1, v13, s0, v3
/*000000017fa0*/ v_add_nc_u32    v3, v13, v0
/*000000017fa4*/ global_store_dwordx2 v[15:16], v[1:2], off
/*000000017fac*/ global_store_dwordx2 v[9:10], v[3:4], off
/*000000017fb4*/ v_add_co_u32    v1, vcc, s4, v11
/*000000017fbc*/ v_add_nc_u32    v3, v13, v7
/*000000017fc0*/ v_add_co_ci_u32 v2, vcc, s5, v12, vcc
/*000000017fc4*/ global_store_dwordx2 v[1:2], v[3:4], off
/*000000017fcc*/ s_endpgm
/*000000017fd0*/ s_nop           0x0
/*000000017fd4*/ s_nop           0x0
/*000000017fd8*/ s_nop           0x0
/*000000017fdc*/ s_nop           0x0
/*000000017fe0*/ s_nop           0x0
/*000000017fe4*/ s_nop           0x0
/*000000017fe8*/ s_nop           0x0
/*000000017fec*/ s_nop           0x0
/*000000017ff0*/ s_nop           0x0
/*000000017ff4*/ s_nop           0x0
/*000000017ff8*/ s_nop           0x0
/*000000017ffc*/ s_nop           0x0
add_long_get_global_size_get_work_dim:
.skip 256
/*000000018100*/ v_mov_b32       v3, s4
/*000000018104*/ v_mov_b32       v4, s5
/*000000018108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018110*/ s_waitcnt       lgkmcnt(0)
/*000000018114*/ s_clause        0x1
/*000000018118*/ s_load_dword    s1, s[6:7], 0x20
/*000000018120*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*000000018128*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000018130*/ s_lshl_b32      s3, s8, 4
/*000000018134*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*00000001813c*/ v_mov_b32       v3, 0
/*000000018140*/ v_mov_b32       v5, v3
/*000000018144*/ v_mov_b32       v7, v3
/*000000018148*/ v_add3_u32      v4, s0, s3, v0
/*000000018150*/ s_lshl_b32      s0, s9, 1
/*000000018154*/ v_add3_u32      v6, s2, s0, v1
/*00000001815c*/ s_lshl_b32      s0, s10, 1
/*000000018160*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000018168*/ s_waitcnt       lgkmcnt(0)
/*00000001816c*/ v_add3_u32      v4, s1, s0, v2
/*000000018174*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*00000001817c*/ v_add_co_u32    v0, vcc, s12, v0
/*000000018184*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*000000018188*/ v_add_co_u32    v12, vcc, s12, v6
/*000000018190*/ v_add_co_ci_u32 v13, vcc, s13, v7, vcc
/*000000018194*/ s_waitcnt       vmcnt(0)
/*000000018198*/ v_add_nc_u32    v2, s4, v8
/*00000001819c*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000181a4*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*0000000181ac*/ v_add_nc_u32    v2, s5, v8
/*0000000181b0*/ v_add_co_u32    v0, vcc, s12, v0
/*0000000181b8*/ global_store_dwordx2 v[12:13], v[2:3], off
/*0000000181c0*/ v_add_nc_u32    v2, s6, v8
/*0000000181c4*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*0000000181c8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000181d0*/ s_endpgm
/*0000000181d4*/ s_nop           0x0
/*0000000181d8*/ s_nop           0x0
/*0000000181dc*/ s_nop           0x0
/*0000000181e0*/ s_nop           0x0
/*0000000181e4*/ s_nop           0x0
/*0000000181e8*/ s_nop           0x0
/*0000000181ec*/ s_nop           0x0
/*0000000181f0*/ s_nop           0x0
/*0000000181f4*/ s_nop           0x0
/*0000000181f8*/ s_nop           0x0
/*0000000181fc*/ s_nop           0x0
add_long_get_num_groups_get_work_dim:
.skip 256
/*000000018300*/ v_mov_b32       v3, s4
/*000000018304*/ v_mov_b32       v4, s5
/*000000018308*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018310*/ s_waitcnt       lgkmcnt(0)
/*000000018314*/ s_load_dword    s1, s[6:7], 0x20
/*00000001831c*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000018324*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001832c*/ s_lshl_b32      s3, s8, 1
/*000000018330*/ s_lshl_b32      s6, s9, 1
/*000000018334*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*00000001833c*/ v_mov_b32       v3, 0
/*000000018340*/ s_lshl_b32      s7, s10, 2
/*000000018344*/ v_mov_b32       v5, v3
/*000000018348*/ v_mov_b32       v7, v3
/*00000001834c*/ v_mov_b32       v9, v3
/*000000018350*/ s_waitcnt       lgkmcnt(0)
/*000000018354*/ v_add3_u32      v8, s1, s7, v2
/*00000001835c*/ v_add3_u32      v4, s0, s3, v0
/*000000018364*/ v_add3_u32      v6, s2, s6, v1
/*00000001836c*/ s_and_b32       s1, s12, -2
/*000000018370*/ s_lshr_b32      s0, s12, 1
/*000000018374*/ s_and_b32       s3, s13, -2
/*000000018378*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000018380*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000018388*/ s_lshr_b32      s2, s13, 1
/*00000001838c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000018394*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000018398*/ v_cmp_gt_u32    vcc, s12, s1
/*0000000183a0*/ s_and_b32       s1, s14, -4
/*0000000183a4*/ s_waitcnt       vmcnt(0)
/*0000000183a8*/ v_add_co_ci_u32 v2, vcc, s0, v10, vcc
/*0000000183ac*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000183b4*/ s_lshr_b32      s0, s14, 2
/*0000000183b8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000183bc*/ v_cmp_gt_u32    vcc, s13, s3
/*0000000183c4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000183cc*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*0000000183d4*/ v_add_co_ci_u32 v2, vcc, s2, v10, vcc
/*0000000183d8*/ v_cmp_gt_u32    vcc, s14, s1
/*0000000183e0*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000183e8*/ v_add_co_ci_u32 v2, vcc, s0, v10, vcc
/*0000000183ec*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000183f4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000183f8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000018400*/ s_endpgm
/*000000018404*/ s_nop           0x0
/*000000018408*/ s_nop           0x0
/*00000001840c*/ s_nop           0x0
/*000000018410*/ s_nop           0x0
/*000000018414*/ s_nop           0x0
/*000000018418*/ s_nop           0x0
/*00000001841c*/ s_nop           0x0
/*000000018420*/ s_nop           0x0
/*000000018424*/ s_nop           0x0
/*000000018428*/ s_nop           0x0
/*00000001842c*/ s_nop           0x0
/*000000018430*/ s_nop           0x0
/*000000018434*/ s_nop           0x0
/*000000018438*/ s_nop           0x0
/*00000001843c*/ s_nop           0x0
/*000000018440*/ s_nop           0x0
/*000000018444*/ s_nop           0x0
/*000000018448*/ s_nop           0x0
/*00000001844c*/ s_nop           0x0
/*000000018450*/ s_nop           0x0
/*000000018454*/ s_nop           0x0
/*000000018458*/ s_nop           0x0
/*00000001845c*/ s_nop           0x0
/*000000018460*/ s_nop           0x0
/*000000018464*/ s_nop           0x0
/*000000018468*/ s_nop           0x0
/*00000001846c*/ s_nop           0x0
/*000000018470*/ s_nop           0x0
/*000000018474*/ s_nop           0x0
/*000000018478*/ s_nop           0x0
/*00000001847c*/ s_nop           0x0
/*000000018480*/ s_nop           0x0
/*000000018484*/ s_nop           0x0
/*000000018488*/ s_nop           0x0
/*00000001848c*/ s_nop           0x0
/*000000018490*/ s_nop           0x0
/*000000018494*/ s_nop           0x0
/*000000018498*/ s_nop           0x0
/*00000001849c*/ s_nop           0x0
/*0000000184a0*/ s_nop           0x0
/*0000000184a4*/ s_nop           0x0
/*0000000184a8*/ s_nop           0x0
/*0000000184ac*/ s_nop           0x0
/*0000000184b0*/ s_nop           0x0
/*0000000184b4*/ s_nop           0x0
/*0000000184b8*/ s_nop           0x0
/*0000000184bc*/ s_nop           0x0
/*0000000184c0*/ s_nop           0x0
/*0000000184c4*/ s_nop           0x0
/*0000000184c8*/ s_nop           0x0
/*0000000184cc*/ s_nop           0x0
/*0000000184d0*/ s_nop           0x0
/*0000000184d4*/ s_nop           0x0
/*0000000184d8*/ s_nop           0x0
/*0000000184dc*/ s_nop           0x0
/*0000000184e0*/ s_nop           0x0
/*0000000184e4*/ s_nop           0x0
/*0000000184e8*/ s_nop           0x0
/*0000000184ec*/ s_nop           0x0
/*0000000184f0*/ s_nop           0x0
/*0000000184f4*/ s_nop           0x0
/*0000000184f8*/ s_nop           0x0
/*0000000184fc*/ s_nop           0x0
add_long_get_work_dim_get_work_dim:
.skip 256
/*000000018600*/ v_mov_b32       v3, s4
/*000000018604*/ v_mov_b32       v4, s5
/*000000018608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018610*/ s_waitcnt       lgkmcnt(0)
/*000000018614*/ s_clause        0x1
/*000000018618*/ s_load_dword    s1, s[6:7], 0x20
/*000000018620*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000018628*/ s_lshl_b32      s3, s8, 1
/*00000001862c*/ s_lshl_b32      s6, s9, 1
/*000000018630*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*000000018638*/ v_mov_b32       v3, 0
/*00000001863c*/ s_lshl_b32      s7, s10, 2
/*000000018640*/ v_mov_b32       v5, v3
/*000000018644*/ v_mov_b32       v7, v3
/*000000018648*/ v_mov_b32       v9, v3
/*00000001864c*/ v_add3_u32      v4, s0, s3, v0
/*000000018654*/ v_add3_u32      v6, s2, s6, v1
/*00000001865c*/ s_waitcnt       lgkmcnt(0)
/*000000018660*/ v_add3_u32      v8, s1, s7, v2
/*000000018668*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000018670*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000018678*/ v_lshlrev_b64   v[6:7], 3, v[8:9]
/*000000018680*/ v_add_co_u32    v0, vcc, s4, v0
/*000000018688*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000001868c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000018694*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000018698*/ v_add_co_u32    v8, vcc, s4, v6
/*0000000186a0*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000186a4*/ s_waitcnt       vmcnt(0)
/*0000000186a8*/ v_and_b32       v2, 0xffff, v10
/*0000000186b0*/ v_lshlrev_b64   v[2:3], 1, v[2:3]
/*0000000186b8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000186c0*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000186c8*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000186d0*/ s_endpgm
/*0000000186d4*/ s_nop           0x0
/*0000000186d8*/ s_nop           0x0
/*0000000186dc*/ s_nop           0x0
/*0000000186e0*/ s_nop           0x0
/*0000000186e4*/ s_nop           0x0
/*0000000186e8*/ s_nop           0x0
/*0000000186ec*/ s_nop           0x0
/*0000000186f0*/ s_nop           0x0
/*0000000186f4*/ s_nop           0x0
/*0000000186f8*/ s_nop           0x0
/*0000000186fc*/ s_nop           0x0
add_long_x_64:
.skip 256
/*000000018800*/ s_clause        0x2
/*000000018804*/ s_load_dword    s2, s[4:5], 0x10
/*00000001880c*/ s_load_dword    s3, s[4:5], 0x0
/*000000018814*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001881c*/ s_lshl_b32      s4, s6, 6
/*000000018820*/ v_mov_b32       v1, 0
/*000000018824*/ s_waitcnt       lgkmcnt(0)
/*000000018828*/ v_add3_u32      v0, s2, s4, v0
/*000000018830*/ s_lshl_b32      s2, s3, 1
/*000000018834*/ s_ashr_i32      s3, s2, 31
/*000000018838*/ v_mov_b32       v2, s2
/*00000001883c*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000018844*/ v_mov_b32       v3, s3
/*000000018848*/ v_add_co_u32    v0, vcc, s0, v0
/*000000018850*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*000000018854*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000001885c*/ s_endpgm
/*000000018860*/ s_nop           0x0
/*000000018864*/ s_nop           0x0
/*000000018868*/ s_nop           0x0
/*00000001886c*/ s_nop           0x0
/*000000018870*/ s_nop           0x0
/*000000018874*/ s_nop           0x0
/*000000018878*/ s_nop           0x0
/*00000001887c*/ s_nop           0x0
/*000000018880*/ s_nop           0x0
/*000000018884*/ s_nop           0x0
/*000000018888*/ s_nop           0x0
/*00000001888c*/ s_nop           0x0
/*000000018890*/ s_nop           0x0
/*000000018894*/ s_nop           0x0
/*000000018898*/ s_nop           0x0
/*00000001889c*/ s_nop           0x0
/*0000000188a0*/ s_nop           0x0
/*0000000188a4*/ s_nop           0x0
/*0000000188a8*/ s_nop           0x0
/*0000000188ac*/ s_nop           0x0
/*0000000188b0*/ s_nop           0x0
/*0000000188b4*/ s_nop           0x0
/*0000000188b8*/ s_nop           0x0
/*0000000188bc*/ s_nop           0x0
/*0000000188c0*/ s_nop           0x0
/*0000000188c4*/ s_nop           0x0
/*0000000188c8*/ s_nop           0x0
/*0000000188cc*/ s_nop           0x0
/*0000000188d0*/ s_nop           0x0
/*0000000188d4*/ s_nop           0x0
/*0000000188d8*/ s_nop           0x0
/*0000000188dc*/ s_nop           0x0
/*0000000188e0*/ s_nop           0x0
/*0000000188e4*/ s_nop           0x0
/*0000000188e8*/ s_nop           0x0
/*0000000188ec*/ s_nop           0x0
/*0000000188f0*/ s_nop           0x0
/*0000000188f4*/ s_nop           0x0
/*0000000188f8*/ s_nop           0x0
/*0000000188fc*/ s_nop           0x0
add_long_get_global_offset_64:
.skip 256
/*000000018a00*/ s_clause        0x1
/*000000018a04*/ s_load_dword    s2, s[4:5], 0x10
/*000000018a0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000018a14*/ v_mov_b32       v1, 0
/*000000018a18*/ s_lshl_b32      s3, s6, 6
/*000000018a1c*/ v_mov_b32       v3, v1
/*000000018a20*/ s_waitcnt       lgkmcnt(0)
/*000000018a24*/ v_add3_u32      v2, s2, s3, v0
/*000000018a2c*/ s_lshl_b32      s2, s2, 1
/*000000018a30*/ v_mov_b32       v0, s2
/*000000018a34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000018a3c*/ v_add_co_u32    v2, vcc, s0, v2
/*000000018a44*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000018a48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000018a50*/ s_endpgm
/*000000018a54*/ s_nop           0x0
/*000000018a58*/ s_nop           0x0
/*000000018a5c*/ s_nop           0x0
/*000000018a60*/ s_nop           0x0
/*000000018a64*/ s_nop           0x0
/*000000018a68*/ s_nop           0x0
/*000000018a6c*/ s_nop           0x0
/*000000018a70*/ s_nop           0x0
/*000000018a74*/ s_nop           0x0
/*000000018a78*/ s_nop           0x0
/*000000018a7c*/ s_nop           0x0
/*000000018a80*/ s_nop           0x0
/*000000018a84*/ s_nop           0x0
/*000000018a88*/ s_nop           0x0
/*000000018a8c*/ s_nop           0x0
/*000000018a90*/ s_nop           0x0
/*000000018a94*/ s_nop           0x0
/*000000018a98*/ s_nop           0x0
/*000000018a9c*/ s_nop           0x0
/*000000018aa0*/ s_nop           0x0
/*000000018aa4*/ s_nop           0x0
/*000000018aa8*/ s_nop           0x0
/*000000018aac*/ s_nop           0x0
/*000000018ab0*/ s_nop           0x0
/*000000018ab4*/ s_nop           0x0
/*000000018ab8*/ s_nop           0x0
/*000000018abc*/ s_nop           0x0
/*000000018ac0*/ s_nop           0x0
/*000000018ac4*/ s_nop           0x0
/*000000018ac8*/ s_nop           0x0
/*000000018acc*/ s_nop           0x0
/*000000018ad0*/ s_nop           0x0
/*000000018ad4*/ s_nop           0x0
/*000000018ad8*/ s_nop           0x0
/*000000018adc*/ s_nop           0x0
/*000000018ae0*/ s_nop           0x0
/*000000018ae4*/ s_nop           0x0
/*000000018ae8*/ s_nop           0x0
/*000000018aec*/ s_nop           0x0
/*000000018af0*/ s_nop           0x0
/*000000018af4*/ s_nop           0x0
/*000000018af8*/ s_nop           0x0
/*000000018afc*/ s_nop           0x0
add_long_get_local_id_64:
.skip 256
/*000000018c00*/ s_clause        0x1
/*000000018c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000018c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000018c14*/ v_mov_b32       v1, 0
/*000000018c18*/ s_lshl_b32      s3, s6, 6
/*000000018c1c*/ v_mov_b32       v3, v1
/*000000018c20*/ s_waitcnt       lgkmcnt(0)
/*000000018c24*/ v_add3_u32      v2, s2, s3, v0
/*000000018c2c*/ v_lshlrev_b32   v0, 1, v0
/*000000018c30*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000018c38*/ v_add_co_u32    v2, vcc, s0, v2
/*000000018c40*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000018c44*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000018c4c*/ s_endpgm
/*000000018c50*/ s_nop           0x0
/*000000018c54*/ s_nop           0x0
/*000000018c58*/ s_nop           0x0
/*000000018c5c*/ s_nop           0x0
/*000000018c60*/ s_nop           0x0
/*000000018c64*/ s_nop           0x0
/*000000018c68*/ s_nop           0x0
/*000000018c6c*/ s_nop           0x0
/*000000018c70*/ s_nop           0x0
/*000000018c74*/ s_nop           0x0
/*000000018c78*/ s_nop           0x0
/*000000018c7c*/ s_nop           0x0
/*000000018c80*/ s_nop           0x0
/*000000018c84*/ s_nop           0x0
/*000000018c88*/ s_nop           0x0
/*000000018c8c*/ s_nop           0x0
/*000000018c90*/ s_nop           0x0
/*000000018c94*/ s_nop           0x0
/*000000018c98*/ s_nop           0x0
/*000000018c9c*/ s_nop           0x0
/*000000018ca0*/ s_nop           0x0
/*000000018ca4*/ s_nop           0x0
/*000000018ca8*/ s_nop           0x0
/*000000018cac*/ s_nop           0x0
/*000000018cb0*/ s_nop           0x0
/*000000018cb4*/ s_nop           0x0
/*000000018cb8*/ s_nop           0x0
/*000000018cbc*/ s_nop           0x0
/*000000018cc0*/ s_nop           0x0
/*000000018cc4*/ s_nop           0x0
/*000000018cc8*/ s_nop           0x0
/*000000018ccc*/ s_nop           0x0
/*000000018cd0*/ s_nop           0x0
/*000000018cd4*/ s_nop           0x0
/*000000018cd8*/ s_nop           0x0
/*000000018cdc*/ s_nop           0x0
/*000000018ce0*/ s_nop           0x0
/*000000018ce4*/ s_nop           0x0
/*000000018ce8*/ s_nop           0x0
/*000000018cec*/ s_nop           0x0
/*000000018cf0*/ s_nop           0x0
/*000000018cf4*/ s_nop           0x0
/*000000018cf8*/ s_nop           0x0
/*000000018cfc*/ s_nop           0x0
add_long_get_group_id_64:
.skip 256
/*000000018e00*/ s_clause        0x1
/*000000018e04*/ s_load_dword    s2, s[4:5], 0x10
/*000000018e0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000018e14*/ v_mov_b32       v1, 0
/*000000018e18*/ s_lshl_b32      s3, s6, 6
/*000000018e1c*/ v_mov_b32       v3, v1
/*000000018e20*/ s_waitcnt       lgkmcnt(0)
/*000000018e24*/ v_add3_u32      v2, s2, s3, v0
/*000000018e2c*/ s_lshl_b32      s2, s6, 1
/*000000018e30*/ v_mov_b32       v0, s2
/*000000018e34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000018e3c*/ v_add_co_u32    v2, vcc, s0, v2
/*000000018e44*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000018e48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000018e50*/ s_endpgm
/*000000018e54*/ s_nop           0x0
/*000000018e58*/ s_nop           0x0
/*000000018e5c*/ s_nop           0x0
/*000000018e60*/ s_nop           0x0
/*000000018e64*/ s_nop           0x0
/*000000018e68*/ s_nop           0x0
/*000000018e6c*/ s_nop           0x0
/*000000018e70*/ s_nop           0x0
/*000000018e74*/ s_nop           0x0
/*000000018e78*/ s_nop           0x0
/*000000018e7c*/ s_nop           0x0
/*000000018e80*/ s_nop           0x0
/*000000018e84*/ s_nop           0x0
/*000000018e88*/ s_nop           0x0
/*000000018e8c*/ s_nop           0x0
/*000000018e90*/ s_nop           0x0
/*000000018e94*/ s_nop           0x0
/*000000018e98*/ s_nop           0x0
/*000000018e9c*/ s_nop           0x0
/*000000018ea0*/ s_nop           0x0
/*000000018ea4*/ s_nop           0x0
/*000000018ea8*/ s_nop           0x0
/*000000018eac*/ s_nop           0x0
/*000000018eb0*/ s_nop           0x0
/*000000018eb4*/ s_nop           0x0
/*000000018eb8*/ s_nop           0x0
/*000000018ebc*/ s_nop           0x0
/*000000018ec0*/ s_nop           0x0
/*000000018ec4*/ s_nop           0x0
/*000000018ec8*/ s_nop           0x0
/*000000018ecc*/ s_nop           0x0
/*000000018ed0*/ s_nop           0x0
/*000000018ed4*/ s_nop           0x0
/*000000018ed8*/ s_nop           0x0
/*000000018edc*/ s_nop           0x0
/*000000018ee0*/ s_nop           0x0
/*000000018ee4*/ s_nop           0x0
/*000000018ee8*/ s_nop           0x0
/*000000018eec*/ s_nop           0x0
/*000000018ef0*/ s_nop           0x0
/*000000018ef4*/ s_nop           0x0
/*000000018ef8*/ s_nop           0x0
/*000000018efc*/ s_nop           0x0
add_long_get_local_size_64:
.skip 256
/*000000019000*/ s_clause        0x1
/*000000019004*/ s_load_dword    s2, s[4:5], 0x10
/*00000001900c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019014*/ s_lshl_b32      s3, s6, 6
/*000000019018*/ v_mov_b32       v1, 0
/*00000001901c*/ s_waitcnt       lgkmcnt(0)
/*000000019020*/ v_add3_u32      v0, s2, s3, v0
/*000000019028*/ v_lshlrev_b64   v[2:3], 3, v[0:1]
/*000000019030*/ v_mov_b32       v0, 0x80
/*000000019038*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019040*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019044*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001904c*/ s_endpgm
/*000000019050*/ s_nop           0x0
/*000000019054*/ s_nop           0x0
/*000000019058*/ s_nop           0x0
/*00000001905c*/ s_nop           0x0
/*000000019060*/ s_nop           0x0
/*000000019064*/ s_nop           0x0
/*000000019068*/ s_nop           0x0
/*00000001906c*/ s_nop           0x0
/*000000019070*/ s_nop           0x0
/*000000019074*/ s_nop           0x0
/*000000019078*/ s_nop           0x0
/*00000001907c*/ s_nop           0x0
/*000000019080*/ s_nop           0x0
/*000000019084*/ s_nop           0x0
/*000000019088*/ s_nop           0x0
/*00000001908c*/ s_nop           0x0
/*000000019090*/ s_nop           0x0
/*000000019094*/ s_nop           0x0
/*000000019098*/ s_nop           0x0
/*00000001909c*/ s_nop           0x0
/*0000000190a0*/ s_nop           0x0
/*0000000190a4*/ s_nop           0x0
/*0000000190a8*/ s_nop           0x0
/*0000000190ac*/ s_nop           0x0
/*0000000190b0*/ s_nop           0x0
/*0000000190b4*/ s_nop           0x0
/*0000000190b8*/ s_nop           0x0
/*0000000190bc*/ s_nop           0x0
/*0000000190c0*/ s_nop           0x0
/*0000000190c4*/ s_nop           0x0
/*0000000190c8*/ s_nop           0x0
/*0000000190cc*/ s_nop           0x0
/*0000000190d0*/ s_nop           0x0
/*0000000190d4*/ s_nop           0x0
/*0000000190d8*/ s_nop           0x0
/*0000000190dc*/ s_nop           0x0
/*0000000190e0*/ s_nop           0x0
/*0000000190e4*/ s_nop           0x0
/*0000000190e8*/ s_nop           0x0
/*0000000190ec*/ s_nop           0x0
/*0000000190f0*/ s_nop           0x0
/*0000000190f4*/ s_nop           0x0
/*0000000190f8*/ s_nop           0x0
/*0000000190fc*/ s_nop           0x0
add_long_get_global_id_64:
.skip 256
/*000000019200*/ s_clause        0x1
/*000000019204*/ s_load_dword    s2, s[4:5], 0x10
/*00000001920c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019214*/ v_mov_b32       v1, 0
/*000000019218*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000019220*/ v_mov_b32       v3, v1
/*000000019224*/ s_waitcnt       lgkmcnt(0)
/*000000019228*/ v_add_nc_u32    v2, s2, v0
/*00000001922c*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*000000019234*/ v_lshlrev_b32   v0, 1, v2
/*000000019238*/ v_add_co_u32    v2, vcc, s0, v3
/*000000019240*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*000000019244*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001924c*/ s_endpgm
/*000000019250*/ s_nop           0x0
/*000000019254*/ s_nop           0x0
/*000000019258*/ s_nop           0x0
/*00000001925c*/ s_nop           0x0
/*000000019260*/ s_nop           0x0
/*000000019264*/ s_nop           0x0
/*000000019268*/ s_nop           0x0
/*00000001926c*/ s_nop           0x0
/*000000019270*/ s_nop           0x0
/*000000019274*/ s_nop           0x0
/*000000019278*/ s_nop           0x0
/*00000001927c*/ s_nop           0x0
/*000000019280*/ s_nop           0x0
/*000000019284*/ s_nop           0x0
/*000000019288*/ s_nop           0x0
/*00000001928c*/ s_nop           0x0
/*000000019290*/ s_nop           0x0
/*000000019294*/ s_nop           0x0
/*000000019298*/ s_nop           0x0
/*00000001929c*/ s_nop           0x0
/*0000000192a0*/ s_nop           0x0
/*0000000192a4*/ s_nop           0x0
/*0000000192a8*/ s_nop           0x0
/*0000000192ac*/ s_nop           0x0
/*0000000192b0*/ s_nop           0x0
/*0000000192b4*/ s_nop           0x0
/*0000000192b8*/ s_nop           0x0
/*0000000192bc*/ s_nop           0x0
/*0000000192c0*/ s_nop           0x0
/*0000000192c4*/ s_nop           0x0
/*0000000192c8*/ s_nop           0x0
/*0000000192cc*/ s_nop           0x0
/*0000000192d0*/ s_nop           0x0
/*0000000192d4*/ s_nop           0x0
/*0000000192d8*/ s_nop           0x0
/*0000000192dc*/ s_nop           0x0
/*0000000192e0*/ s_nop           0x0
/*0000000192e4*/ s_nop           0x0
/*0000000192e8*/ s_nop           0x0
/*0000000192ec*/ s_nop           0x0
/*0000000192f0*/ s_nop           0x0
/*0000000192f4*/ s_nop           0x0
/*0000000192f8*/ s_nop           0x0
/*0000000192fc*/ s_nop           0x0
add_long_get_global_size_64:
.skip 256
/*000000019400*/ s_load_dword    s2, s[6:7], 0x10
/*000000019408*/ s_load_dword    s3, s[4:5], 0xc
/*000000019410*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000019418*/ v_mov_b32       v1, 0
/*00000001941c*/ s_lshl_b32      s4, s8, 6
/*000000019420*/ v_mov_b32       v3, v1
/*000000019424*/ s_waitcnt       lgkmcnt(0)
/*000000019428*/ v_add3_u32      v2, s2, s4, v0
/*000000019430*/ s_lshl_b32      s2, s3, 1
/*000000019434*/ v_mov_b32       v0, s2
/*000000019438*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019440*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019448*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001944c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019454*/ s_endpgm
/*000000019458*/ s_nop           0x0
/*00000001945c*/ s_nop           0x0
/*000000019460*/ s_nop           0x0
/*000000019464*/ s_nop           0x0
/*000000019468*/ s_nop           0x0
/*00000001946c*/ s_nop           0x0
/*000000019470*/ s_nop           0x0
/*000000019474*/ s_nop           0x0
/*000000019478*/ s_nop           0x0
/*00000001947c*/ s_nop           0x0
/*000000019480*/ s_nop           0x0
/*000000019484*/ s_nop           0x0
/*000000019488*/ s_nop           0x0
/*00000001948c*/ s_nop           0x0
/*000000019490*/ s_nop           0x0
/*000000019494*/ s_nop           0x0
/*000000019498*/ s_nop           0x0
/*00000001949c*/ s_nop           0x0
/*0000000194a0*/ s_nop           0x0
/*0000000194a4*/ s_nop           0x0
/*0000000194a8*/ s_nop           0x0
/*0000000194ac*/ s_nop           0x0
/*0000000194b0*/ s_nop           0x0
/*0000000194b4*/ s_nop           0x0
/*0000000194b8*/ s_nop           0x0
/*0000000194bc*/ s_nop           0x0
/*0000000194c0*/ s_nop           0x0
/*0000000194c4*/ s_nop           0x0
/*0000000194c8*/ s_nop           0x0
/*0000000194cc*/ s_nop           0x0
/*0000000194d0*/ s_nop           0x0
/*0000000194d4*/ s_nop           0x0
/*0000000194d8*/ s_nop           0x0
/*0000000194dc*/ s_nop           0x0
/*0000000194e0*/ s_nop           0x0
/*0000000194e4*/ s_nop           0x0
/*0000000194e8*/ s_nop           0x0
/*0000000194ec*/ s_nop           0x0
/*0000000194f0*/ s_nop           0x0
/*0000000194f4*/ s_nop           0x0
/*0000000194f8*/ s_nop           0x0
/*0000000194fc*/ s_nop           0x0
add_long_get_num_groups_64:
.skip 256
/*000000019600*/ s_load_dword    s2, s[4:5], 0xc
/*000000019608*/ s_clause        0x1
/*00000001960c*/ s_load_dword    s3, s[6:7], 0x10
/*000000019614*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001961c*/ v_mov_b32       v1, 0
/*000000019620*/ s_lshl_b32      s4, s8, 6
/*000000019624*/ v_mov_b32       v3, v1
/*000000019628*/ s_waitcnt       lgkmcnt(0)
/*00000001962c*/ s_and_b32       s5, s2, 0xffffffc0
/*000000019634*/ v_add3_u32      v2, s3, s4, v0
/*00000001963c*/ v_cmp_gt_u32    s[5:6], s2, s5
/*000000019644*/ s_lshr_b32      s2, s2, 6
/*000000019648*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019650*/ s_cmpk_lg_u32   s5, 0x0
/*000000019654*/ s_addc_u32      s2, s2, 0
/*000000019658*/ s_lshl_b32      s2, s2, 1
/*00000001965c*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019664*/ v_mov_b32       v0, s2
/*000000019668*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001966c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019674*/ s_endpgm
/*000000019678*/ s_nop           0x0
/*00000001967c*/ s_nop           0x0
/*000000019680*/ s_nop           0x0
/*000000019684*/ s_nop           0x0
/*000000019688*/ s_nop           0x0
/*00000001968c*/ s_nop           0x0
/*000000019690*/ s_nop           0x0
/*000000019694*/ s_nop           0x0
/*000000019698*/ s_nop           0x0
/*00000001969c*/ s_nop           0x0
/*0000000196a0*/ s_nop           0x0
/*0000000196a4*/ s_nop           0x0
/*0000000196a8*/ s_nop           0x0
/*0000000196ac*/ s_nop           0x0
/*0000000196b0*/ s_nop           0x0
/*0000000196b4*/ s_nop           0x0
/*0000000196b8*/ s_nop           0x0
/*0000000196bc*/ s_nop           0x0
/*0000000196c0*/ s_nop           0x0
/*0000000196c4*/ s_nop           0x0
/*0000000196c8*/ s_nop           0x0
/*0000000196cc*/ s_nop           0x0
/*0000000196d0*/ s_nop           0x0
/*0000000196d4*/ s_nop           0x0
/*0000000196d8*/ s_nop           0x0
/*0000000196dc*/ s_nop           0x0
/*0000000196e0*/ s_nop           0x0
/*0000000196e4*/ s_nop           0x0
/*0000000196e8*/ s_nop           0x0
/*0000000196ec*/ s_nop           0x0
/*0000000196f0*/ s_nop           0x0
/*0000000196f4*/ s_nop           0x0
/*0000000196f8*/ s_nop           0x0
/*0000000196fc*/ s_nop           0x0
add_long_get_work_dim:
.skip 256
/*000000019800*/ v_mov_b32       v1, s4
/*000000019804*/ v_mov_b32       v2, s5
/*000000019808*/ s_clause        0x1
/*00000001980c*/ s_load_dword    s2, s[6:7], 0x10
/*000000019814*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001981c*/ s_lshl_b32      s3, s8, 6
/*000000019820*/ global_load_ushort v4, v[1:2], off inst_offset:2
/*000000019828*/ v_mov_b32       v1, 0
/*00000001982c*/ v_mov_b32       v3, v1
/*000000019830*/ s_waitcnt       lgkmcnt(0)
/*000000019834*/ v_add3_u32      v2, s2, s3, v0
/*00000001983c*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019844*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001984c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019850*/ s_waitcnt       vmcnt(0)
/*000000019854*/ v_and_b32       v0, 0xffff, v4
/*00000001985c*/ v_lshlrev_b64   v[0:1], 1, v[0:1]
/*000000019864*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001986c*/ s_endpgm
/*000000019870*/ s_nop           0x0
/*000000019874*/ s_nop           0x0
/*000000019878*/ s_nop           0x0
/*00000001987c*/ s_nop           0x0
/*000000019880*/ s_nop           0x0
/*000000019884*/ s_nop           0x0
/*000000019888*/ s_nop           0x0
/*00000001988c*/ s_nop           0x0
/*000000019890*/ s_nop           0x0
/*000000019894*/ s_nop           0x0
/*000000019898*/ s_nop           0x0
/*00000001989c*/ s_nop           0x0
/*0000000198a0*/ s_nop           0x0
/*0000000198a4*/ s_nop           0x0
/*0000000198a8*/ s_nop           0x0
/*0000000198ac*/ s_nop           0x0
/*0000000198b0*/ s_nop           0x0
/*0000000198b4*/ s_nop           0x0
/*0000000198b8*/ s_nop           0x0
/*0000000198bc*/ s_nop           0x0
/*0000000198c0*/ s_nop           0x0
/*0000000198c4*/ s_nop           0x0
/*0000000198c8*/ s_nop           0x0
/*0000000198cc*/ s_nop           0x0
/*0000000198d0*/ s_nop           0x0
/*0000000198d4*/ s_nop           0x0
/*0000000198d8*/ s_nop           0x0
/*0000000198dc*/ s_nop           0x0
/*0000000198e0*/ s_nop           0x0
/*0000000198e4*/ s_nop           0x0
/*0000000198e8*/ s_nop           0x0
/*0000000198ec*/ s_nop           0x0
/*0000000198f0*/ s_nop           0x0
/*0000000198f4*/ s_nop           0x0
/*0000000198f8*/ s_nop           0x0
/*0000000198fc*/ s_nop           0x0
add_long_x_8_8:
.skip 256
/*000000019a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000019a08*/ s_waitcnt       lgkmcnt(0)
/*000000019a0c*/ s_clause        0x1
/*000000019a10*/ s_load_dword    s1, s[4:5], 0x0
/*000000019a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000019a20*/ v_mov_b32       v2, 0
/*000000019a24*/ s_lshl_b32      s3, s6, 3
/*000000019a28*/ v_mov_b32       v4, v2
/*000000019a2c*/ v_add3_u32      v3, s0, s3, v0
/*000000019a34*/ s_lshl_b32      s0, s7, 3
/*000000019a38*/ s_waitcnt       lgkmcnt(0)
/*000000019a3c*/ s_add_i32       s1, s2, s1
/*000000019a40*/ v_add3_u32      v1, s1, s0, v1
/*000000019a48*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000019a50*/ v_add_co_u32    v3, vcc, s4, v3
/*000000019a58*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000019a5c*/ global_store_dwordx2 v[3:4], v[1:2], off
/*000000019a64*/ s_endpgm
/*000000019a68*/ s_nop           0x0
/*000000019a6c*/ s_nop           0x0
/*000000019a70*/ s_nop           0x0
/*000000019a74*/ s_nop           0x0
/*000000019a78*/ s_nop           0x0
/*000000019a7c*/ s_nop           0x0
/*000000019a80*/ s_nop           0x0
/*000000019a84*/ s_nop           0x0
/*000000019a88*/ s_nop           0x0
/*000000019a8c*/ s_nop           0x0
/*000000019a90*/ s_nop           0x0
/*000000019a94*/ s_nop           0x0
/*000000019a98*/ s_nop           0x0
/*000000019a9c*/ s_nop           0x0
/*000000019aa0*/ s_nop           0x0
/*000000019aa4*/ s_nop           0x0
/*000000019aa8*/ s_nop           0x0
/*000000019aac*/ s_nop           0x0
/*000000019ab0*/ s_nop           0x0
/*000000019ab4*/ s_nop           0x0
/*000000019ab8*/ s_nop           0x0
/*000000019abc*/ s_nop           0x0
/*000000019ac0*/ s_nop           0x0
/*000000019ac4*/ s_nop           0x0
/*000000019ac8*/ s_nop           0x0
/*000000019acc*/ s_nop           0x0
/*000000019ad0*/ s_nop           0x0
/*000000019ad4*/ s_nop           0x0
/*000000019ad8*/ s_nop           0x0
/*000000019adc*/ s_nop           0x0
/*000000019ae0*/ s_nop           0x0
/*000000019ae4*/ s_nop           0x0
/*000000019ae8*/ s_nop           0x0
/*000000019aec*/ s_nop           0x0
/*000000019af0*/ s_nop           0x0
/*000000019af4*/ s_nop           0x0
/*000000019af8*/ s_nop           0x0
/*000000019afc*/ s_nop           0x0
add_long_get_global_offset_8_8:
.skip 256
/*000000019c00*/ s_clause        0x1
/*000000019c04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000019c0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000019c14*/ v_mov_b32       v1, 0
/*000000019c18*/ s_waitcnt       lgkmcnt(0)
/*000000019c1c*/ s_lshl_b32      s1, s6, 3
/*000000019c20*/ v_mov_b32       v3, v1
/*000000019c24*/ v_add3_u32      v2, s0, s1, v0
/*000000019c2c*/ s_add_i32       s0, s2, s0
/*000000019c30*/ v_mov_b32       v0, s0
/*000000019c34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019c3c*/ v_add_co_u32    v2, vcc, s4, v2
/*000000019c44*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000019c48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019c50*/ s_endpgm
/*000000019c54*/ s_nop           0x0
/*000000019c58*/ s_nop           0x0
/*000000019c5c*/ s_nop           0x0
/*000000019c60*/ s_nop           0x0
/*000000019c64*/ s_nop           0x0
/*000000019c68*/ s_nop           0x0
/*000000019c6c*/ s_nop           0x0
/*000000019c70*/ s_nop           0x0
/*000000019c74*/ s_nop           0x0
/*000000019c78*/ s_nop           0x0
/*000000019c7c*/ s_nop           0x0
/*000000019c80*/ s_nop           0x0
/*000000019c84*/ s_nop           0x0
/*000000019c88*/ s_nop           0x0
/*000000019c8c*/ s_nop           0x0
/*000000019c90*/ s_nop           0x0
/*000000019c94*/ s_nop           0x0
/*000000019c98*/ s_nop           0x0
/*000000019c9c*/ s_nop           0x0
/*000000019ca0*/ s_nop           0x0
/*000000019ca4*/ s_nop           0x0
/*000000019ca8*/ s_nop           0x0
/*000000019cac*/ s_nop           0x0
/*000000019cb0*/ s_nop           0x0
/*000000019cb4*/ s_nop           0x0
/*000000019cb8*/ s_nop           0x0
/*000000019cbc*/ s_nop           0x0
/*000000019cc0*/ s_nop           0x0
/*000000019cc4*/ s_nop           0x0
/*000000019cc8*/ s_nop           0x0
/*000000019ccc*/ s_nop           0x0
/*000000019cd0*/ s_nop           0x0
/*000000019cd4*/ s_nop           0x0
/*000000019cd8*/ s_nop           0x0
/*000000019cdc*/ s_nop           0x0
/*000000019ce0*/ s_nop           0x0
/*000000019ce4*/ s_nop           0x0
/*000000019ce8*/ s_nop           0x0
/*000000019cec*/ s_nop           0x0
/*000000019cf0*/ s_nop           0x0
/*000000019cf4*/ s_nop           0x0
/*000000019cf8*/ s_nop           0x0
/*000000019cfc*/ s_nop           0x0
add_long_get_local_id_8_8:
.skip 256
/*000000019e00*/ s_clause        0x1
/*000000019e04*/ s_load_dword    s2, s[4:5], 0x10
/*000000019e0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019e14*/ v_mov_b32       v2, 0
/*000000019e18*/ s_lshl_b32      s3, s6, 3
/*000000019e1c*/ v_add_nc_u32    v1, v1, v0
/*000000019e20*/ v_mov_b32       v4, v2
/*000000019e24*/ s_waitcnt       lgkmcnt(0)
/*000000019e28*/ v_add3_u32      v3, s2, s3, v0
/*000000019e30*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000019e38*/ v_add_co_u32    v3, vcc, s0, v3
/*000000019e40*/ v_add_co_ci_u32 v4, vcc, s1, v4, vcc
/*000000019e44*/ global_store_dwordx2 v[3:4], v[1:2], off
/*000000019e4c*/ s_endpgm
/*000000019e50*/ s_nop           0x0
/*000000019e54*/ s_nop           0x0
/*000000019e58*/ s_nop           0x0
/*000000019e5c*/ s_nop           0x0
/*000000019e60*/ s_nop           0x0
/*000000019e64*/ s_nop           0x0
/*000000019e68*/ s_nop           0x0
/*000000019e6c*/ s_nop           0x0
/*000000019e70*/ s_nop           0x0
/*000000019e74*/ s_nop           0x0
/*000000019e78*/ s_nop           0x0
/*000000019e7c*/ s_nop           0x0
/*000000019e80*/ s_nop           0x0
/*000000019e84*/ s_nop           0x0
/*000000019e88*/ s_nop           0x0
/*000000019e8c*/ s_nop           0x0
/*000000019e90*/ s_nop           0x0
/*000000019e94*/ s_nop           0x0
/*000000019e98*/ s_nop           0x0
/*000000019e9c*/ s_nop           0x0
/*000000019ea0*/ s_nop           0x0
/*000000019ea4*/ s_nop           0x0
/*000000019ea8*/ s_nop           0x0
/*000000019eac*/ s_nop           0x0
/*000000019eb0*/ s_nop           0x0
/*000000019eb4*/ s_nop           0x0
/*000000019eb8*/ s_nop           0x0
/*000000019ebc*/ s_nop           0x0
/*000000019ec0*/ s_nop           0x0
/*000000019ec4*/ s_nop           0x0
/*000000019ec8*/ s_nop           0x0
/*000000019ecc*/ s_nop           0x0
/*000000019ed0*/ s_nop           0x0
/*000000019ed4*/ s_nop           0x0
/*000000019ed8*/ s_nop           0x0
/*000000019edc*/ s_nop           0x0
/*000000019ee0*/ s_nop           0x0
/*000000019ee4*/ s_nop           0x0
/*000000019ee8*/ s_nop           0x0
/*000000019eec*/ s_nop           0x0
/*000000019ef0*/ s_nop           0x0
/*000000019ef4*/ s_nop           0x0
/*000000019ef8*/ s_nop           0x0
/*000000019efc*/ s_nop           0x0
add_long_get_group_id_8_8:
.skip 256
/*00000001a000*/ s_clause        0x1
/*00000001a004*/ s_load_dword    s2, s[4:5], 0x10
/*00000001a00c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001a014*/ v_mov_b32       v1, 0
/*00000001a018*/ s_lshl_b32      s3, s6, 3
/*00000001a01c*/ s_add_i32       s7, s7, s6
/*00000001a020*/ v_mov_b32       v3, v1
/*00000001a024*/ s_waitcnt       lgkmcnt(0)
/*00000001a028*/ v_add3_u32      v2, s2, s3, v0
/*00000001a030*/ v_mov_b32       v0, s7
/*00000001a034*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a03c*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001a044*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001a048*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a050*/ s_endpgm
/*00000001a054*/ s_nop           0x0
/*00000001a058*/ s_nop           0x0
/*00000001a05c*/ s_nop           0x0
/*00000001a060*/ s_nop           0x0
/*00000001a064*/ s_nop           0x0
/*00000001a068*/ s_nop           0x0
/*00000001a06c*/ s_nop           0x0
/*00000001a070*/ s_nop           0x0
/*00000001a074*/ s_nop           0x0
/*00000001a078*/ s_nop           0x0
/*00000001a07c*/ s_nop           0x0
/*00000001a080*/ s_nop           0x0
/*00000001a084*/ s_nop           0x0
/*00000001a088*/ s_nop           0x0
/*00000001a08c*/ s_nop           0x0
/*00000001a090*/ s_nop           0x0
/*00000001a094*/ s_nop           0x0
/*00000001a098*/ s_nop           0x0
/*00000001a09c*/ s_nop           0x0
/*00000001a0a0*/ s_nop           0x0
/*00000001a0a4*/ s_nop           0x0
/*00000001a0a8*/ s_nop           0x0
/*00000001a0ac*/ s_nop           0x0
/*00000001a0b0*/ s_nop           0x0
/*00000001a0b4*/ s_nop           0x0
/*00000001a0b8*/ s_nop           0x0
/*00000001a0bc*/ s_nop           0x0
/*00000001a0c0*/ s_nop           0x0
/*00000001a0c4*/ s_nop           0x0
/*00000001a0c8*/ s_nop           0x0
/*00000001a0cc*/ s_nop           0x0
/*00000001a0d0*/ s_nop           0x0
/*00000001a0d4*/ s_nop           0x0
/*00000001a0d8*/ s_nop           0x0
/*00000001a0dc*/ s_nop           0x0
/*00000001a0e0*/ s_nop           0x0
/*00000001a0e4*/ s_nop           0x0
/*00000001a0e8*/ s_nop           0x0
/*00000001a0ec*/ s_nop           0x0
/*00000001a0f0*/ s_nop           0x0
/*00000001a0f4*/ s_nop           0x0
/*00000001a0f8*/ s_nop           0x0
/*00000001a0fc*/ s_nop           0x0
add_long_get_local_size_8_8:
.skip 256
/*00000001a200*/ s_clause        0x1
/*00000001a204*/ s_load_dword    s2, s[4:5], 0x10
/*00000001a20c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001a214*/ s_lshl_b32      s3, s6, 3
/*00000001a218*/ v_mov_b32       v1, 0
/*00000001a21c*/ s_waitcnt       lgkmcnt(0)
/*00000001a220*/ v_add3_u32      v0, s2, s3, v0
/*00000001a228*/ v_lshlrev_b64   v[2:3], 3, v[0:1]
/*00000001a230*/ v_mov_b32       v0, 16
/*00000001a234*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001a23c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001a240*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a248*/ s_endpgm
/*00000001a24c*/ s_nop           0x0
/*00000001a250*/ s_nop           0x0
/*00000001a254*/ s_nop           0x0
/*00000001a258*/ s_nop           0x0
/*00000001a25c*/ s_nop           0x0
/*00000001a260*/ s_nop           0x0
/*00000001a264*/ s_nop           0x0
/*00000001a268*/ s_nop           0x0
/*00000001a26c*/ s_nop           0x0
/*00000001a270*/ s_nop           0x0
/*00000001a274*/ s_nop           0x0
/*00000001a278*/ s_nop           0x0
/*00000001a27c*/ s_nop           0x0
/*00000001a280*/ s_nop           0x0
/*00000001a284*/ s_nop           0x0
/*00000001a288*/ s_nop           0x0
/*00000001a28c*/ s_nop           0x0
/*00000001a290*/ s_nop           0x0
/*00000001a294*/ s_nop           0x0
/*00000001a298*/ s_nop           0x0
/*00000001a29c*/ s_nop           0x0
/*00000001a2a0*/ s_nop           0x0
/*00000001a2a4*/ s_nop           0x0
/*00000001a2a8*/ s_nop           0x0
/*00000001a2ac*/ s_nop           0x0
/*00000001a2b0*/ s_nop           0x0
/*00000001a2b4*/ s_nop           0x0
/*00000001a2b8*/ s_nop           0x0
/*00000001a2bc*/ s_nop           0x0
/*00000001a2c0*/ s_nop           0x0
/*00000001a2c4*/ s_nop           0x0
/*00000001a2c8*/ s_nop           0x0
/*00000001a2cc*/ s_nop           0x0
/*00000001a2d0*/ s_nop           0x0
/*00000001a2d4*/ s_nop           0x0
/*00000001a2d8*/ s_nop           0x0
/*00000001a2dc*/ s_nop           0x0
/*00000001a2e0*/ s_nop           0x0
/*00000001a2e4*/ s_nop           0x0
/*00000001a2e8*/ s_nop           0x0
/*00000001a2ec*/ s_nop           0x0
/*00000001a2f0*/ s_nop           0x0
/*00000001a2f4*/ s_nop           0x0
/*00000001a2f8*/ s_nop           0x0
/*00000001a2fc*/ s_nop           0x0
add_long_get_global_id_8_8:
.skip 256
/*00000001a400*/ s_clause        0x1
/*00000001a404*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001a40c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001a414*/ v_mov_b32       v2, 0
/*00000001a418*/ v_lshl_or_b32   v0, s6, 3, v0
/*00000001a420*/ v_mov_b32       v4, v2
/*00000001a424*/ s_waitcnt       lgkmcnt(0)
/*00000001a428*/ v_add_nc_u32    v3, s0, v0
/*00000001a42c*/ s_lshl_b32      s0, s7, 3
/*00000001a430*/ s_add_i32       s0, s2, s0
/*00000001a434*/ v_lshlrev_b64   v[4:5], 3, v[3:4]
/*00000001a43c*/ v_add3_u32      v1, s0, v1, v3
/*00000001a444*/ v_add_co_u32    v3, vcc, s4, v4
/*00000001a44c*/ v_add_co_ci_u32 v4, vcc, s5, v5, vcc
/*00000001a450*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001a458*/ s_endpgm
/*00000001a45c*/ s_nop           0x0
/*00000001a460*/ s_nop           0x0
/*00000001a464*/ s_nop           0x0
/*00000001a468*/ s_nop           0x0
/*00000001a46c*/ s_nop           0x0
/*00000001a470*/ s_nop           0x0
/*00000001a474*/ s_nop           0x0
/*00000001a478*/ s_nop           0x0
/*00000001a47c*/ s_nop           0x0
/*00000001a480*/ s_nop           0x0
/*00000001a484*/ s_nop           0x0
/*00000001a488*/ s_nop           0x0
/*00000001a48c*/ s_nop           0x0
/*00000001a490*/ s_nop           0x0
/*00000001a494*/ s_nop           0x0
/*00000001a498*/ s_nop           0x0
/*00000001a49c*/ s_nop           0x0
/*00000001a4a0*/ s_nop           0x0
/*00000001a4a4*/ s_nop           0x0
/*00000001a4a8*/ s_nop           0x0
/*00000001a4ac*/ s_nop           0x0
/*00000001a4b0*/ s_nop           0x0
/*00000001a4b4*/ s_nop           0x0
/*00000001a4b8*/ s_nop           0x0
/*00000001a4bc*/ s_nop           0x0
/*00000001a4c0*/ s_nop           0x0
/*00000001a4c4*/ s_nop           0x0
/*00000001a4c8*/ s_nop           0x0
/*00000001a4cc*/ s_nop           0x0
/*00000001a4d0*/ s_nop           0x0
/*00000001a4d4*/ s_nop           0x0
/*00000001a4d8*/ s_nop           0x0
/*00000001a4dc*/ s_nop           0x0
/*00000001a4e0*/ s_nop           0x0
/*00000001a4e4*/ s_nop           0x0
/*00000001a4e8*/ s_nop           0x0
/*00000001a4ec*/ s_nop           0x0
/*00000001a4f0*/ s_nop           0x0
/*00000001a4f4*/ s_nop           0x0
/*00000001a4f8*/ s_nop           0x0
/*00000001a4fc*/ s_nop           0x0
add_long_get_global_size_8_8:
.skip 256
/*00000001a600*/ s_load_dword    s9, s[6:7], 0x10
/*00000001a608*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000001a610*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000001a618*/ v_mov_b32       v1, 0
/*00000001a61c*/ s_lshl_b32      s4, s8, 3
/*00000001a620*/ v_mov_b32       v3, v1
/*00000001a624*/ s_waitcnt       lgkmcnt(0)
/*00000001a628*/ v_add3_u32      v2, s9, s4, v0
/*00000001a630*/ s_add_i32       s0, s1, s0
/*00000001a634*/ v_mov_b32       v0, s0
/*00000001a638*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a640*/ v_add_co_u32    v2, vcc, s2, v2
/*00000001a648*/ v_add_co_ci_u32 v3, vcc, s3, v3, vcc
/*00000001a64c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a654*/ s_endpgm
/*00000001a658*/ s_nop           0x0
/*00000001a65c*/ s_nop           0x0
/*00000001a660*/ s_nop           0x0
/*00000001a664*/ s_nop           0x0
/*00000001a668*/ s_nop           0x0
/*00000001a66c*/ s_nop           0x0
/*00000001a670*/ s_nop           0x0
/*00000001a674*/ s_nop           0x0
/*00000001a678*/ s_nop           0x0
/*00000001a67c*/ s_nop           0x0
/*00000001a680*/ s_nop           0x0
/*00000001a684*/ s_nop           0x0
/*00000001a688*/ s_nop           0x0
/*00000001a68c*/ s_nop           0x0
/*00000001a690*/ s_nop           0x0
/*00000001a694*/ s_nop           0x0
/*00000001a698*/ s_nop           0x0
/*00000001a69c*/ s_nop           0x0
/*00000001a6a0*/ s_nop           0x0
/*00000001a6a4*/ s_nop           0x0
/*00000001a6a8*/ s_nop           0x0
/*00000001a6ac*/ s_nop           0x0
/*00000001a6b0*/ s_nop           0x0
/*00000001a6b4*/ s_nop           0x0
/*00000001a6b8*/ s_nop           0x0
/*00000001a6bc*/ s_nop           0x0
/*00000001a6c0*/ s_nop           0x0
/*00000001a6c4*/ s_nop           0x0
/*00000001a6c8*/ s_nop           0x0
/*00000001a6cc*/ s_nop           0x0
/*00000001a6d0*/ s_nop           0x0
/*00000001a6d4*/ s_nop           0x0
/*00000001a6d8*/ s_nop           0x0
/*00000001a6dc*/ s_nop           0x0
/*00000001a6e0*/ s_nop           0x0
/*00000001a6e4*/ s_nop           0x0
/*00000001a6e8*/ s_nop           0x0
/*00000001a6ec*/ s_nop           0x0
/*00000001a6f0*/ s_nop           0x0
/*00000001a6f4*/ s_nop           0x0
/*00000001a6f8*/ s_nop           0x0
/*00000001a6fc*/ s_nop           0x0
add_long_get_num_groups_8_8:
.skip 256
/*00000001a800*/ s_load_dword    s9, s[6:7], 0x10
/*00000001a808*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000001a810*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000001a818*/ v_mov_b32       v1, 0
/*00000001a81c*/ s_lshl_b32      s4, s8, 3
/*00000001a820*/ v_mov_b32       v3, v1
/*00000001a824*/ s_waitcnt       lgkmcnt(0)
/*00000001a828*/ v_add3_u32      v2, s9, s4, v0
/*00000001a830*/ s_and_b32       s5, s0, -8
/*00000001a834*/ s_lshr_b32      s4, s0, 3
/*00000001a838*/ v_cmp_gt_u32    s[0:1], s0, s5
/*00000001a840*/ s_and_b32       s7, s1, -8
/*00000001a844*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a84c*/ v_cmp_gt_u32    vcc, s1, s7
/*00000001a854*/ s_lshr_b32      s6, s1, 3
/*00000001a858*/ v_cndmask_b32   v0, 0, 1, s[0:1]
/*00000001a860*/ s_add_i32       s6, s6, s4
/*00000001a864*/ v_add_co_ci_u32 v0, vcc, s6, v0, vcc
/*00000001a868*/ v_add_co_u32    v2, vcc, s2, v2
/*00000001a870*/ v_add_co_ci_u32 v3, vcc, s3, v3, vcc
/*00000001a874*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a87c*/ s_endpgm
/*00000001a880*/ s_nop           0x0
/*00000001a884*/ s_nop           0x0
/*00000001a888*/ s_nop           0x0
/*00000001a88c*/ s_nop           0x0
/*00000001a890*/ s_nop           0x0
/*00000001a894*/ s_nop           0x0
/*00000001a898*/ s_nop           0x0
/*00000001a89c*/ s_nop           0x0
/*00000001a8a0*/ s_nop           0x0
/*00000001a8a4*/ s_nop           0x0
/*00000001a8a8*/ s_nop           0x0
/*00000001a8ac*/ s_nop           0x0
/*00000001a8b0*/ s_nop           0x0
/*00000001a8b4*/ s_nop           0x0
/*00000001a8b8*/ s_nop           0x0
/*00000001a8bc*/ s_nop           0x0
/*00000001a8c0*/ s_nop           0x0
/*00000001a8c4*/ s_nop           0x0
/*00000001a8c8*/ s_nop           0x0
/*00000001a8cc*/ s_nop           0x0
/*00000001a8d0*/ s_nop           0x0
/*00000001a8d4*/ s_nop           0x0
/*00000001a8d8*/ s_nop           0x0
/*00000001a8dc*/ s_nop           0x0
/*00000001a8e0*/ s_nop           0x0
/*00000001a8e4*/ s_nop           0x0
/*00000001a8e8*/ s_nop           0x0
/*00000001a8ec*/ s_nop           0x0
/*00000001a8f0*/ s_nop           0x0
/*00000001a8f4*/ s_nop           0x0
/*00000001a8f8*/ s_nop           0x0
/*00000001a8fc*/ s_nop           0x0
add_long_get_work_dim_8_8:
.skip 256
/*00000001aa00*/ v_mov_b32       v2, s4
/*00000001aa04*/ v_mov_b32       v3, s5
/*00000001aa08*/ s_clause        0x1
/*00000001aa0c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001aa14*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001aa1c*/ s_waitcnt       lgkmcnt(0)
/*00000001aa20*/ s_lshl_b32      s1, s8, 3
/*00000001aa24*/ global_load_ushort v5, v[2:3], off inst_offset:2
/*00000001aa2c*/ v_mov_b32       v2, 0
/*00000001aa30*/ v_mov_b32       v4, v2
/*00000001aa34*/ v_add3_u32      v3, s0, s1, v0
/*00000001aa3c*/ s_lshl_b32      s0, s9, 3
/*00000001aa40*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001aa48*/ v_add_co_u32    v3, vcc, s4, v3
/*00000001aa50*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000001aa54*/ s_waitcnt       vmcnt(0)
/*00000001aa58*/ v_add_nc_u32    v0, s2, v5
/*00000001aa5c*/ v_add3_u32      v1, v0, s0, v1
/*00000001aa64*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001aa6c*/ s_endpgm
/*00000001aa70*/ s_nop           0x0
/*00000001aa74*/ s_nop           0x0
/*00000001aa78*/ s_nop           0x0
/*00000001aa7c*/ s_nop           0x0
/*00000001aa80*/ s_nop           0x0
/*00000001aa84*/ s_nop           0x0
/*00000001aa88*/ s_nop           0x0
/*00000001aa8c*/ s_nop           0x0
/*00000001aa90*/ s_nop           0x0
/*00000001aa94*/ s_nop           0x0
/*00000001aa98*/ s_nop           0x0
/*00000001aa9c*/ s_nop           0x0
/*00000001aaa0*/ s_nop           0x0
/*00000001aaa4*/ s_nop           0x0
/*00000001aaa8*/ s_nop           0x0
/*00000001aaac*/ s_nop           0x0
/*00000001aab0*/ s_nop           0x0
/*00000001aab4*/ s_nop           0x0
/*00000001aab8*/ s_nop           0x0
/*00000001aabc*/ s_nop           0x0
/*00000001aac0*/ s_nop           0x0
/*00000001aac4*/ s_nop           0x0
/*00000001aac8*/ s_nop           0x0
/*00000001aacc*/ s_nop           0x0
/*00000001aad0*/ s_nop           0x0
/*00000001aad4*/ s_nop           0x0
/*00000001aad8*/ s_nop           0x0
/*00000001aadc*/ s_nop           0x0
/*00000001aae0*/ s_nop           0x0
/*00000001aae4*/ s_nop           0x0
/*00000001aae8*/ s_nop           0x0
/*00000001aaec*/ s_nop           0x0
/*00000001aaf0*/ s_nop           0x0
/*00000001aaf4*/ s_nop           0x0
/*00000001aaf8*/ s_nop           0x0
/*00000001aafc*/ s_nop           0x0
add_char_x_x:
.skip 256
/*00000001ac00*/ s_clause        0x2
/*00000001ac04*/ s_load_dword    s2, s[4:5], 0x10
/*00000001ac0c*/ s_load_dword    s3, s[4:5], 0x8
/*00000001ac14*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000001ac1c*/ s_lshl_b32      s4, s6, 6
/*00000001ac20*/ s_waitcnt       lgkmcnt(0)
/*00000001ac24*/ v_add3_u32      v0, s2, s4, v0
/*00000001ac2c*/ s_lshl_b32      s2, s3, 1
/*00000001ac30*/ v_mov_b32       v2, s2
/*00000001ac34*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001ac3c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000001ac44*/ global_store_byte v[0:1], v2, off
/*00000001ac4c*/ s_endpgm
/*00000001ac50*/ s_nop           0x0
/*00000001ac54*/ s_nop           0x0
/*00000001ac58*/ s_nop           0x0
/*00000001ac5c*/ s_nop           0x0
/*00000001ac60*/ s_nop           0x0
/*00000001ac64*/ s_nop           0x0
/*00000001ac68*/ s_nop           0x0
/*00000001ac6c*/ s_nop           0x0
/*00000001ac70*/ s_nop           0x0
/*00000001ac74*/ s_nop           0x0
/*00000001ac78*/ s_nop           0x0
/*00000001ac7c*/ s_nop           0x0
/*00000001ac80*/ s_nop           0x0
/*00000001ac84*/ s_nop           0x0
/*00000001ac88*/ s_nop           0x0
/*00000001ac8c*/ s_nop           0x0
/*00000001ac90*/ s_nop           0x0
/*00000001ac94*/ s_nop           0x0
/*00000001ac98*/ s_nop           0x0
/*00000001ac9c*/ s_nop           0x0
/*00000001aca0*/ s_nop           0x0
/*00000001aca4*/ s_nop           0x0
/*00000001aca8*/ s_nop           0x0
/*00000001acac*/ s_nop           0x0
/*00000001acb0*/ s_nop           0x0
/*00000001acb4*/ s_nop           0x0
/*00000001acb8*/ s_nop           0x0
/*00000001acbc*/ s_nop           0x0
/*00000001acc0*/ s_nop           0x0
/*00000001acc4*/ s_nop           0x0
/*00000001acc8*/ s_nop           0x0
/*00000001accc*/ s_nop           0x0
/*00000001acd0*/ s_nop           0x0
/*00000001acd4*/ s_nop           0x0
/*00000001acd8*/ s_nop           0x0
/*00000001acdc*/ s_nop           0x0
/*00000001ace0*/ s_nop           0x0
/*00000001ace4*/ s_nop           0x0
/*00000001ace8*/ s_nop           0x0
/*00000001acec*/ s_nop           0x0
/*00000001acf0*/ s_nop           0x0
/*00000001acf4*/ s_nop           0x0
/*00000001acf8*/ s_nop           0x0
/*00000001acfc*/ s_nop           0x0
add_char_get_global_offset_x:
.skip 256
/*00000001ae00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001ae08*/ s_waitcnt       lgkmcnt(0)
/*00000001ae0c*/ s_clause        0x2
/*00000001ae10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001ae18*/ s_load_dword    s3, s[4:5], 0x0
/*00000001ae20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001ae28*/ s_lshl_b32      s6, s6, 1
/*00000001ae2c*/ s_lshl_b32      s7, s7, 4
/*00000001ae30*/ s_lshl_b32      s8, s8, 1
/*00000001ae34*/ s_waitcnt       lgkmcnt(0)
/*00000001ae38*/ v_add3_u32      v4, s1, s8, v2
/*00000001ae40*/ v_add3_u32      v0, s0, s6, v0
/*00000001ae48*/ v_add3_u32      v3, s2, s7, v1
/*00000001ae50*/ s_add_i32       s0, s0, s3
/*00000001ae54*/ s_add_i32       s2, s2, s3
/*00000001ae58*/ v_mov_b32       v6, s0
/*00000001ae5c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ae64*/ v_mov_b32       v9, s2
/*00000001ae68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ae70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ae78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ae80*/ s_add_i32       s0, s1, s3
/*00000001ae84*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ae8c*/ v_mov_b32       v11, s0
/*00000001ae90*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ae98*/ global_store_byte v[0:1], v6, off
/*00000001aea0*/ global_store_byte v[2:3], v9, off
/*00000001aea8*/ global_store_byte v[4:5], v11, off
/*00000001aeb0*/ s_endpgm
/*00000001aeb4*/ s_nop           0x0
/*00000001aeb8*/ s_nop           0x0
/*00000001aebc*/ s_nop           0x0
/*00000001aec0*/ s_nop           0x0
/*00000001aec4*/ s_nop           0x0
/*00000001aec8*/ s_nop           0x0
/*00000001aecc*/ s_nop           0x0
/*00000001aed0*/ s_nop           0x0
/*00000001aed4*/ s_nop           0x0
/*00000001aed8*/ s_nop           0x0
/*00000001aedc*/ s_nop           0x0
/*00000001aee0*/ s_nop           0x0
/*00000001aee4*/ s_nop           0x0
/*00000001aee8*/ s_nop           0x0
/*00000001aeec*/ s_nop           0x0
/*00000001aef0*/ s_nop           0x0
/*00000001aef4*/ s_nop           0x0
/*00000001aef8*/ s_nop           0x0
/*00000001aefc*/ s_nop           0x0
add_char_get_local_id_x:
.skip 256
/*00000001b000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b008*/ s_waitcnt       lgkmcnt(0)
/*00000001b00c*/ s_clause        0x2
/*00000001b010*/ s_load_dword    s1, s[4:5], 0x20
/*00000001b018*/ s_load_dword    s3, s[4:5], 0x0
/*00000001b020*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b028*/ s_lshl_b32      s6, s6, 3
/*00000001b02c*/ s_lshl_b32      s7, s7, 2
/*00000001b030*/ s_lshl_b32      s8, s8, 1
/*00000001b034*/ s_waitcnt       lgkmcnt(0)
/*00000001b038*/ v_add3_u32      v5, s1, s8, v2
/*00000001b040*/ v_add3_u32      v3, s0, s6, v0
/*00000001b048*/ v_add3_u32      v4, s2, s7, v1
/*00000001b050*/ v_add_nc_u32    v6, s3, v0
/*00000001b054*/ v_add_nc_u32    v9, s3, v1
/*00000001b058*/ v_add_nc_u32    v11, s3, v2
/*00000001b05c*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001b064*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b06c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001b074*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001b07c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001b084*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001b08c*/ global_store_byte v[0:1], v6, off
/*00000001b094*/ global_store_byte v[2:3], v9, off
/*00000001b09c*/ global_store_byte v[4:5], v11, off
/*00000001b0a4*/ s_endpgm
/*00000001b0a8*/ s_nop           0x0
/*00000001b0ac*/ s_nop           0x0
/*00000001b0b0*/ s_nop           0x0
/*00000001b0b4*/ s_nop           0x0
/*00000001b0b8*/ s_nop           0x0
/*00000001b0bc*/ s_nop           0x0
/*00000001b0c0*/ s_nop           0x0
/*00000001b0c4*/ s_nop           0x0
/*00000001b0c8*/ s_nop           0x0
/*00000001b0cc*/ s_nop           0x0
/*00000001b0d0*/ s_nop           0x0
/*00000001b0d4*/ s_nop           0x0
/*00000001b0d8*/ s_nop           0x0
/*00000001b0dc*/ s_nop           0x0
/*00000001b0e0*/ s_nop           0x0
/*00000001b0e4*/ s_nop           0x0
/*00000001b0e8*/ s_nop           0x0
/*00000001b0ec*/ s_nop           0x0
/*00000001b0f0*/ s_nop           0x0
/*00000001b0f4*/ s_nop           0x0
/*00000001b0f8*/ s_nop           0x0
/*00000001b0fc*/ s_nop           0x0
add_char_get_group_id_x:
.skip 256
/*00000001b200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b208*/ s_waitcnt       lgkmcnt(0)
/*00000001b20c*/ s_clause        0x2
/*00000001b210*/ s_load_dword    s1, s[4:5], 0x20
/*00000001b218*/ s_load_dword    s3, s[4:5], 0x0
/*00000001b220*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b228*/ s_lshl_b32      s9, s6, 1
/*00000001b22c*/ s_lshl_b32      s10, s7, 4
/*00000001b230*/ s_lshl_b32      s11, s8, 1
/*00000001b234*/ s_waitcnt       lgkmcnt(0)
/*00000001b238*/ v_add3_u32      v4, s1, s11, v2
/*00000001b240*/ v_add3_u32      v0, s0, s9, v0
/*00000001b248*/ s_add_i32       s0, s6, s3
/*00000001b24c*/ v_add3_u32      v3, s2, s10, v1
/*00000001b254*/ v_mov_b32       v6, s0
/*00000001b258*/ s_add_i32       s1, s7, s3
/*00000001b25c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001b264*/ v_mov_b32       v9, s1
/*00000001b268*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b270*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001b278*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001b280*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001b288*/ s_add_i32       s0, s8, s3
/*00000001b28c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001b294*/ v_mov_b32       v11, s0
/*00000001b298*/ global_store_byte v[0:1], v6, off
/*00000001b2a0*/ global_store_byte v[2:3], v9, off
/*00000001b2a8*/ global_store_byte v[4:5], v11, off
/*00000001b2b0*/ s_endpgm
/*00000001b2b4*/ s_nop           0x0
/*00000001b2b8*/ s_nop           0x0
/*00000001b2bc*/ s_nop           0x0
/*00000001b2c0*/ s_nop           0x0
/*00000001b2c4*/ s_nop           0x0
/*00000001b2c8*/ s_nop           0x0
/*00000001b2cc*/ s_nop           0x0
/*00000001b2d0*/ s_nop           0x0
/*00000001b2d4*/ s_nop           0x0
/*00000001b2d8*/ s_nop           0x0
/*00000001b2dc*/ s_nop           0x0
/*00000001b2e0*/ s_nop           0x0
/*00000001b2e4*/ s_nop           0x0
/*00000001b2e8*/ s_nop           0x0
/*00000001b2ec*/ s_nop           0x0
/*00000001b2f0*/ s_nop           0x0
/*00000001b2f4*/ s_nop           0x0
/*00000001b2f8*/ s_nop           0x0
/*00000001b2fc*/ s_nop           0x0
add_char_get_local_size_x:
.skip 256
/*00000001b400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b408*/ s_waitcnt       lgkmcnt(0)
/*00000001b40c*/ s_clause        0x2
/*00000001b410*/ s_load_dword    s1, s[4:5], 0x20
/*00000001b418*/ s_load_dword    s3, s[4:5], 0x0
/*00000001b420*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b428*/ s_lshl_b32      s6, s6, 1
/*00000001b42c*/ s_lshl_b32      s7, s7, 1
/*00000001b430*/ s_lshl_b32      s8, s8, 2
/*00000001b434*/ s_waitcnt       lgkmcnt(0)
/*00000001b438*/ v_add3_u32      v4, s1, s8, v2
/*00000001b440*/ v_add3_u32      v0, s0, s6, v0
/*00000001b448*/ s_add_i32       s0, s3, 4
/*00000001b44c*/ v_add3_u32      v3, s2, s7, v1
/*00000001b454*/ v_mov_b32       v7, s0
/*00000001b458*/ v_add_nc_u16    v6, s3, 2
/*00000001b460*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001b468*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b470*/ v_add_co_u32    v11, s[0:1], s4, v3
/*00000001b478*/ v_add_co_ci_u32 v12, s[0:1], s5, 0, s[0:1]
/*00000001b480*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001b488*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001b490*/ global_store_byte v[0:1], v6, off
/*00000001b498*/ global_store_byte v[11:12], v6, off
/*00000001b4a0*/ global_store_byte v[4:5], v7, off
/*00000001b4a8*/ s_endpgm
/*00000001b4ac*/ s_nop           0x0
/*00000001b4b0*/ s_nop           0x0
/*00000001b4b4*/ s_nop           0x0
/*00000001b4b8*/ s_nop           0x0
/*00000001b4bc*/ s_nop           0x0
/*00000001b4c0*/ s_nop           0x0
/*00000001b4c4*/ s_nop           0x0
/*00000001b4c8*/ s_nop           0x0
/*00000001b4cc*/ s_nop           0x0
/*00000001b4d0*/ s_nop           0x0
/*00000001b4d4*/ s_nop           0x0
/*00000001b4d8*/ s_nop           0x0
/*00000001b4dc*/ s_nop           0x0
/*00000001b4e0*/ s_nop           0x0
/*00000001b4e4*/ s_nop           0x0
/*00000001b4e8*/ s_nop           0x0
/*00000001b4ec*/ s_nop           0x0
/*00000001b4f0*/ s_nop           0x0
/*00000001b4f4*/ s_nop           0x0
/*00000001b4f8*/ s_nop           0x0
/*00000001b4fc*/ s_nop           0x0
add_char_get_global_id_x:
.skip 256
/*00000001b600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b608*/ s_waitcnt       lgkmcnt(0)
/*00000001b60c*/ s_clause        0x2
/*00000001b610*/ s_load_dword    s1, s[4:5], 0x20
/*00000001b618*/ s_load_dword    s3, s[4:5], 0x0
/*00000001b620*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b628*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001b630*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001b638*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001b640*/ s_waitcnt       lgkmcnt(0)
/*00000001b644*/ v_add_nc_u32    v4, s1, v2
/*00000001b648*/ v_add_nc_u32    v3, s2, v1
/*00000001b64c*/ v_add3_u32      v6, s0, s3, v0
/*00000001b654*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001b65c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b664*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001b66c*/ v_add_nc_u32    v9, s3, v3
/*00000001b670*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001b678*/ v_add_nc_u32    v11, s3, v4
/*00000001b67c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001b684*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001b68c*/ global_store_byte v[0:1], v6, off
/*00000001b694*/ global_store_byte v[2:3], v9, off
/*00000001b69c*/ global_store_byte v[4:5], v11, off
/*00000001b6a4*/ s_endpgm
/*00000001b6a8*/ s_nop           0x0
/*00000001b6ac*/ s_nop           0x0
/*00000001b6b0*/ s_nop           0x0
/*00000001b6b4*/ s_nop           0x0
/*00000001b6b8*/ s_nop           0x0
/*00000001b6bc*/ s_nop           0x0
/*00000001b6c0*/ s_nop           0x0
/*00000001b6c4*/ s_nop           0x0
/*00000001b6c8*/ s_nop           0x0
/*00000001b6cc*/ s_nop           0x0
/*00000001b6d0*/ s_nop           0x0
/*00000001b6d4*/ s_nop           0x0
/*00000001b6d8*/ s_nop           0x0
/*00000001b6dc*/ s_nop           0x0
/*00000001b6e0*/ s_nop           0x0
/*00000001b6e4*/ s_nop           0x0
/*00000001b6e8*/ s_nop           0x0
/*00000001b6ec*/ s_nop           0x0
/*00000001b6f0*/ s_nop           0x0
/*00000001b6f4*/ s_nop           0x0
/*00000001b6f8*/ s_nop           0x0
/*00000001b6fc*/ s_nop           0x0
add_char_get_global_size_x:
.skip 256
/*00000001b800*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001b808*/ s_waitcnt       lgkmcnt(0)
/*00000001b80c*/ s_clause        0x1
/*00000001b810*/ s_load_dword    s1, s[6:7], 0x8
/*00000001b818*/ s_load_dword    s3, s[6:7], 0x20
/*00000001b820*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001b828*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001b830*/ s_lshl_b32      s6, s8, 4
/*00000001b834*/ s_lshl_b32      s7, s9, 1
/*00000001b838*/ s_lshl_b32      s8, s10, 1
/*00000001b83c*/ s_waitcnt       lgkmcnt(0)
/*00000001b840*/ v_add3_u32      v4, s3, s8, v2
/*00000001b848*/ v_add3_u32      v0, s0, s6, v0
/*00000001b850*/ v_add3_u32      v3, s2, s7, v1
/*00000001b858*/ s_add_i32       s0, s12, s1
/*00000001b85c*/ s_add_i32       s2, s13, s1
/*00000001b860*/ v_mov_b32       v6, s0
/*00000001b864*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001b86c*/ v_mov_b32       v9, s2
/*00000001b870*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001b878*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001b880*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001b888*/ s_add_i32       s0, s14, s1
/*00000001b88c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001b894*/ v_mov_b32       v11, s0
/*00000001b898*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001b8a0*/ global_store_byte v[0:1], v6, off
/*00000001b8a8*/ global_store_byte v[2:3], v9, off
/*00000001b8b0*/ global_store_byte v[4:5], v11, off
/*00000001b8b8*/ s_endpgm
/*00000001b8bc*/ s_nop           0x0
/*00000001b8c0*/ s_nop           0x0
/*00000001b8c4*/ s_nop           0x0
/*00000001b8c8*/ s_nop           0x0
/*00000001b8cc*/ s_nop           0x0
/*00000001b8d0*/ s_nop           0x0
/*00000001b8d4*/ s_nop           0x0
/*00000001b8d8*/ s_nop           0x0
/*00000001b8dc*/ s_nop           0x0
/*00000001b8e0*/ s_nop           0x0
/*00000001b8e4*/ s_nop           0x0
/*00000001b8e8*/ s_nop           0x0
/*00000001b8ec*/ s_nop           0x0
/*00000001b8f0*/ s_nop           0x0
/*00000001b8f4*/ s_nop           0x0
/*00000001b8f8*/ s_nop           0x0
/*00000001b8fc*/ s_nop           0x0
add_char_get_num_groups_x:
.skip 256
/*00000001ba00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001ba08*/ s_waitcnt       lgkmcnt(0)
/*00000001ba0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001ba14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001ba1c*/ s_clause        0x1
/*00000001ba20*/ s_load_dword    s3, s[6:7], 0x0
/*00000001ba28*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001ba30*/ s_lshl_b32      s6, s8, 1
/*00000001ba34*/ s_lshl_b32      s8, s10, 2
/*00000001ba38*/ s_lshl_b32      s7, s9, 1
/*00000001ba3c*/ s_waitcnt       lgkmcnt(0)
/*00000001ba40*/ v_add3_u32      v4, s1, s8, v2
/*00000001ba48*/ s_and_b32       s1, s12, -2
/*00000001ba4c*/ v_add3_u32      v0, s0, s6, v0
/*00000001ba54*/ v_cmp_gt_u32    s[1:2], s12, s1
/*00000001ba5c*/ s_and_b32       s6, s13, -2
/*00000001ba60*/ v_add3_u32      v3, s2, s7, v1
/*00000001ba68*/ v_cmp_gt_u32    s[6:7], s13, s6
/*00000001ba70*/ s_lshr_b32      s0, s12, 1
/*00000001ba74*/ s_lshr_b32      s2, s13, 1
/*00000001ba78*/ s_lshr_b32      s7, s14, 2
/*00000001ba7c*/ s_and_b32       s8, s14, -4
/*00000001ba80*/ s_cmpk_lg_u32   s1, 0x0
/*00000001ba84*/ v_cmp_gt_u32    s[1:2], s14, s8
/*00000001ba8c*/ s_addc_u32      s0, s0, s3
/*00000001ba90*/ s_cmpk_lg_u32   s6, 0x0
/*00000001ba94*/ v_mov_b32       v6, s0
/*00000001ba98*/ s_addc_u32      s0, s2, s3
/*00000001ba9c*/ v_add_co_u32    v0, s[8:9], s4, v0
/*00000001baa4*/ s_cmpk_lg_u32   s1, 0x0
/*00000001baa8*/ v_add_co_u32    v2, s[2:3], s4, v3
/*00000001bab0*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001bab8*/ v_mov_b32       v9, s0
/*00000001babc*/ s_addc_u32      s0, s7, s3
/*00000001bac0*/ v_add_co_ci_u32 v1, s[8:9], s5, 0, s[8:9]
/*00000001bac8*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*00000001bad0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001bad8*/ v_mov_b32       v11, s0
/*00000001badc*/ global_store_byte v[0:1], v6, off
/*00000001bae4*/ global_store_byte v[2:3], v9, off
/*00000001baec*/ global_store_byte v[4:5], v11, off
/*00000001baf4*/ s_endpgm
/*00000001baf8*/ s_nop           0x0
/*00000001bafc*/ s_nop           0x0
add_char_get_work_dim_x:
.skip 256
/*00000001bc00*/ v_mov_b32       v1, s4
/*00000001bc04*/ v_mov_b32       v2, s5
/*00000001bc08*/ s_clause        0x2
/*00000001bc0c*/ s_load_dword    s2, s[6:7], 0x10
/*00000001bc14*/ s_load_dword    s3, s[6:7], 0x0
/*00000001bc1c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001bc24*/ s_lshl_b32      s4, s8, 1
/*00000001bc28*/ global_load_ushort v1, v[1:2], off inst_offset:2
/*00000001bc30*/ s_waitcnt       lgkmcnt(0)
/*00000001bc34*/ v_add3_u32      v0, s2, s4, v0
/*00000001bc3c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001bc44*/ s_waitcnt       vmcnt(0)
/*00000001bc48*/ v_add_nc_u32    v2, s3, v1
/*00000001bc4c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000001bc54*/ global_store_byte v[0:1], v2, off
/*00000001bc5c*/ s_endpgm
/*00000001bc60*/ s_nop           0x0
/*00000001bc64*/ s_nop           0x0
/*00000001bc68*/ s_nop           0x0
/*00000001bc6c*/ s_nop           0x0
/*00000001bc70*/ s_nop           0x0
/*00000001bc74*/ s_nop           0x0
/*00000001bc78*/ s_nop           0x0
/*00000001bc7c*/ s_nop           0x0
/*00000001bc80*/ s_nop           0x0
/*00000001bc84*/ s_nop           0x0
/*00000001bc88*/ s_nop           0x0
/*00000001bc8c*/ s_nop           0x0
/*00000001bc90*/ s_nop           0x0
/*00000001bc94*/ s_nop           0x0
/*00000001bc98*/ s_nop           0x0
/*00000001bc9c*/ s_nop           0x0
/*00000001bca0*/ s_nop           0x0
/*00000001bca4*/ s_nop           0x0
/*00000001bca8*/ s_nop           0x0
/*00000001bcac*/ s_nop           0x0
/*00000001bcb0*/ s_nop           0x0
/*00000001bcb4*/ s_nop           0x0
/*00000001bcb8*/ s_nop           0x0
/*00000001bcbc*/ s_nop           0x0
/*00000001bcc0*/ s_nop           0x0
/*00000001bcc4*/ s_nop           0x0
/*00000001bcc8*/ s_nop           0x0
/*00000001bccc*/ s_nop           0x0
/*00000001bcd0*/ s_nop           0x0
/*00000001bcd4*/ s_nop           0x0
/*00000001bcd8*/ s_nop           0x0
/*00000001bcdc*/ s_nop           0x0
/*00000001bce0*/ s_nop           0x0
/*00000001bce4*/ s_nop           0x0
/*00000001bce8*/ s_nop           0x0
/*00000001bcec*/ s_nop           0x0
/*00000001bcf0*/ s_nop           0x0
/*00000001bcf4*/ s_nop           0x0
/*00000001bcf8*/ s_nop           0x0
/*00000001bcfc*/ s_nop           0x0
add_char_x_get_global_offset:
.skip 256
/*00000001be00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001be08*/ s_waitcnt       lgkmcnt(0)
/*00000001be0c*/ s_clause        0x2
/*00000001be10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001be18*/ s_load_dword    s3, s[4:5], 0x8
/*00000001be20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001be28*/ s_lshl_b32      s6, s6, 4
/*00000001be2c*/ s_lshl_b32      s7, s7, 1
/*00000001be30*/ s_lshl_b32      s8, s8, 1
/*00000001be34*/ s_waitcnt       lgkmcnt(0)
/*00000001be38*/ v_add3_u32      v4, s1, s8, v2
/*00000001be40*/ v_add3_u32      v0, s0, s6, v0
/*00000001be48*/ v_add3_u32      v3, s2, s7, v1
/*00000001be50*/ s_add_i32       s0, s0, s3
/*00000001be54*/ s_add_i32       s2, s2, s3
/*00000001be58*/ v_mov_b32       v6, s0
/*00000001be5c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001be64*/ v_mov_b32       v9, s2
/*00000001be68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001be70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001be78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001be80*/ s_add_i32       s0, s1, s3
/*00000001be84*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001be8c*/ v_mov_b32       v11, s0
/*00000001be90*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001be98*/ global_store_byte v[0:1], v6, off
/*00000001bea0*/ global_store_byte v[2:3], v9, off
/*00000001bea8*/ global_store_byte v[4:5], v11, off
/*00000001beb0*/ s_endpgm
/*00000001beb4*/ s_nop           0x0
/*00000001beb8*/ s_nop           0x0
/*00000001bebc*/ s_nop           0x0
/*00000001bec0*/ s_nop           0x0
/*00000001bec4*/ s_nop           0x0
/*00000001bec8*/ s_nop           0x0
/*00000001becc*/ s_nop           0x0
/*00000001bed0*/ s_nop           0x0
/*00000001bed4*/ s_nop           0x0
/*00000001bed8*/ s_nop           0x0
/*00000001bedc*/ s_nop           0x0
/*00000001bee0*/ s_nop           0x0
/*00000001bee4*/ s_nop           0x0
/*00000001bee8*/ s_nop           0x0
/*00000001beec*/ s_nop           0x0
/*00000001bef0*/ s_nop           0x0
/*00000001bef4*/ s_nop           0x0
/*00000001bef8*/ s_nop           0x0
/*00000001befc*/ s_nop           0x0
add_char_get_global_offset_get_global_offset:
.skip 256
/*00000001c000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c008*/ s_waitcnt       lgkmcnt(0)
/*00000001c00c*/ s_clause        0x1
/*00000001c010*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c018*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c020*/ s_lshl_b32      s3, s6, 1
/*00000001c024*/ s_lshl_b32      s6, s7, 4
/*00000001c028*/ s_lshl_b32      s7, s8, 1
/*00000001c02c*/ v_add3_u32      v0, s0, s3, v0
/*00000001c034*/ v_add3_u32      v3, s2, s6, v1
/*00000001c03c*/ s_lshl_b32      s0, s0, 1
/*00000001c040*/ s_waitcnt       lgkmcnt(0)
/*00000001c044*/ v_add3_u32      v4, s1, s7, v2
/*00000001c04c*/ v_mov_b32       v6, s0
/*00000001c050*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c058*/ s_lshl_b32      s2, s2, 1
/*00000001c05c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c064*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c06c*/ v_mov_b32       v9, s2
/*00000001c070*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c078*/ s_lshl_b32      s0, s1, 1
/*00000001c07c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c084*/ v_mov_b32       v11, s0
/*00000001c088*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c090*/ global_store_byte v[0:1], v6, off
/*00000001c098*/ global_store_byte v[2:3], v9, off
/*00000001c0a0*/ global_store_byte v[4:5], v11, off
/*00000001c0a8*/ s_endpgm
/*00000001c0ac*/ s_nop           0x0
/*00000001c0b0*/ s_nop           0x0
/*00000001c0b4*/ s_nop           0x0
/*00000001c0b8*/ s_nop           0x0
/*00000001c0bc*/ s_nop           0x0
/*00000001c0c0*/ s_nop           0x0
/*00000001c0c4*/ s_nop           0x0
/*00000001c0c8*/ s_nop           0x0
/*00000001c0cc*/ s_nop           0x0
/*00000001c0d0*/ s_nop           0x0
/*00000001c0d4*/ s_nop           0x0
/*00000001c0d8*/ s_nop           0x0
/*00000001c0dc*/ s_nop           0x0
/*00000001c0e0*/ s_nop           0x0
/*00000001c0e4*/ s_nop           0x0
/*00000001c0e8*/ s_nop           0x0
/*00000001c0ec*/ s_nop           0x0
/*00000001c0f0*/ s_nop           0x0
/*00000001c0f4*/ s_nop           0x0
/*00000001c0f8*/ s_nop           0x0
/*00000001c0fc*/ s_nop           0x0
add_char_get_local_id_get_global_offset:
.skip 256
/*00000001c200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c208*/ s_waitcnt       lgkmcnt(0)
/*00000001c20c*/ s_clause        0x1
/*00000001c210*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c220*/ s_lshl_b32      s3, s6, 3
/*00000001c224*/ s_lshl_b32      s6, s7, 2
/*00000001c228*/ s_lshl_b32      s7, s8, 1
/*00000001c22c*/ v_add3_u32      v3, s0, s3, v0
/*00000001c234*/ v_add3_u32      v4, s2, s6, v1
/*00000001c23c*/ v_add_nc_u32    v6, s0, v0
/*00000001c240*/ s_waitcnt       lgkmcnt(0)
/*00000001c244*/ v_add3_u32      v5, s1, s7, v2
/*00000001c24c*/ v_add_nc_u32    v9, s2, v1
/*00000001c250*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001c258*/ v_add_nc_u32    v11, s1, v2
/*00000001c25c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c264*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001c26c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c274*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001c27c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001c284*/ global_store_byte v[0:1], v6, off
/*00000001c28c*/ global_store_byte v[2:3], v9, off
/*00000001c294*/ global_store_byte v[4:5], v11, off
/*00000001c29c*/ s_endpgm
/*00000001c2a0*/ s_nop           0x0
/*00000001c2a4*/ s_nop           0x0
/*00000001c2a8*/ s_nop           0x0
/*00000001c2ac*/ s_nop           0x0
/*00000001c2b0*/ s_nop           0x0
/*00000001c2b4*/ s_nop           0x0
/*00000001c2b8*/ s_nop           0x0
/*00000001c2bc*/ s_nop           0x0
/*00000001c2c0*/ s_nop           0x0
/*00000001c2c4*/ s_nop           0x0
/*00000001c2c8*/ s_nop           0x0
/*00000001c2cc*/ s_nop           0x0
/*00000001c2d0*/ s_nop           0x0
/*00000001c2d4*/ s_nop           0x0
/*00000001c2d8*/ s_nop           0x0
/*00000001c2dc*/ s_nop           0x0
/*00000001c2e0*/ s_nop           0x0
/*00000001c2e4*/ s_nop           0x0
/*00000001c2e8*/ s_nop           0x0
/*00000001c2ec*/ s_nop           0x0
/*00000001c2f0*/ s_nop           0x0
/*00000001c2f4*/ s_nop           0x0
/*00000001c2f8*/ s_nop           0x0
/*00000001c2fc*/ s_nop           0x0
add_char_get_group_id_get_global_offset:
.skip 256
/*00000001c400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c408*/ s_waitcnt       lgkmcnt(0)
/*00000001c40c*/ s_clause        0x1
/*00000001c410*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c420*/ s_lshl_b32      s3, s6, 1
/*00000001c424*/ s_lshl_b32      s9, s7, 4
/*00000001c428*/ s_lshl_b32      s10, s8, 1
/*00000001c42c*/ v_add3_u32      v0, s0, s3, v0
/*00000001c434*/ v_add3_u32      v3, s2, s9, v1
/*00000001c43c*/ s_add_i32       s0, s0, s6
/*00000001c440*/ s_waitcnt       lgkmcnt(0)
/*00000001c444*/ v_add3_u32      v4, s1, s10, v2
/*00000001c44c*/ v_mov_b32       v6, s0
/*00000001c450*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c458*/ s_add_i32       s2, s2, s7
/*00000001c45c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c464*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c46c*/ v_mov_b32       v9, s2
/*00000001c470*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c478*/ s_add_i32       s0, s1, s8
/*00000001c47c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c484*/ v_mov_b32       v11, s0
/*00000001c488*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c490*/ global_store_byte v[0:1], v6, off
/*00000001c498*/ global_store_byte v[2:3], v9, off
/*00000001c4a0*/ global_store_byte v[4:5], v11, off
/*00000001c4a8*/ s_endpgm
/*00000001c4ac*/ s_nop           0x0
/*00000001c4b0*/ s_nop           0x0
/*00000001c4b4*/ s_nop           0x0
/*00000001c4b8*/ s_nop           0x0
/*00000001c4bc*/ s_nop           0x0
/*00000001c4c0*/ s_nop           0x0
/*00000001c4c4*/ s_nop           0x0
/*00000001c4c8*/ s_nop           0x0
/*00000001c4cc*/ s_nop           0x0
/*00000001c4d0*/ s_nop           0x0
/*00000001c4d4*/ s_nop           0x0
/*00000001c4d8*/ s_nop           0x0
/*00000001c4dc*/ s_nop           0x0
/*00000001c4e0*/ s_nop           0x0
/*00000001c4e4*/ s_nop           0x0
/*00000001c4e8*/ s_nop           0x0
/*00000001c4ec*/ s_nop           0x0
/*00000001c4f0*/ s_nop           0x0
/*00000001c4f4*/ s_nop           0x0
/*00000001c4f8*/ s_nop           0x0
/*00000001c4fc*/ s_nop           0x0
add_char_get_local_size_get_global_offset:
.skip 256
/*00000001c600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c608*/ s_waitcnt       lgkmcnt(0)
/*00000001c60c*/ s_clause        0x1
/*00000001c610*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c620*/ s_lshl_b32      s3, s6, 1
/*00000001c624*/ s_lshl_b32      s6, s7, 1
/*00000001c628*/ s_lshl_b32      s7, s8, 2
/*00000001c62c*/ v_add3_u32      v0, s0, s3, v0
/*00000001c634*/ v_add3_u32      v3, s2, s6, v1
/*00000001c63c*/ s_add_i32       s0, s0, 2
/*00000001c640*/ s_waitcnt       lgkmcnt(0)
/*00000001c644*/ v_add3_u32      v4, s1, s7, v2
/*00000001c64c*/ v_mov_b32       v6, s0
/*00000001c650*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c658*/ s_add_i32       s2, s2, 2
/*00000001c65c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c664*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c66c*/ v_mov_b32       v9, s2
/*00000001c670*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c678*/ s_add_i32       s0, s1, 4
/*00000001c67c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c684*/ v_mov_b32       v11, s0
/*00000001c688*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c690*/ global_store_byte v[0:1], v6, off
/*00000001c698*/ global_store_byte v[2:3], v9, off
/*00000001c6a0*/ global_store_byte v[4:5], v11, off
/*00000001c6a8*/ s_endpgm
/*00000001c6ac*/ s_nop           0x0
/*00000001c6b0*/ s_nop           0x0
/*00000001c6b4*/ s_nop           0x0
/*00000001c6b8*/ s_nop           0x0
/*00000001c6bc*/ s_nop           0x0
/*00000001c6c0*/ s_nop           0x0
/*00000001c6c4*/ s_nop           0x0
/*00000001c6c8*/ s_nop           0x0
/*00000001c6cc*/ s_nop           0x0
/*00000001c6d0*/ s_nop           0x0
/*00000001c6d4*/ s_nop           0x0
/*00000001c6d8*/ s_nop           0x0
/*00000001c6dc*/ s_nop           0x0
/*00000001c6e0*/ s_nop           0x0
/*00000001c6e4*/ s_nop           0x0
/*00000001c6e8*/ s_nop           0x0
/*00000001c6ec*/ s_nop           0x0
/*00000001c6f0*/ s_nop           0x0
/*00000001c6f4*/ s_nop           0x0
/*00000001c6f8*/ s_nop           0x0
/*00000001c6fc*/ s_nop           0x0
add_char_get_global_id_get_global_offset:
.skip 256
/*00000001c800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c808*/ s_waitcnt       lgkmcnt(0)
/*00000001c80c*/ s_clause        0x1
/*00000001c810*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c820*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001c828*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001c830*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001c838*/ v_add_nc_u32    v3, s2, v1
/*00000001c83c*/ v_lshl_add_u32  v6, s0, 1, v0
/*00000001c844*/ s_waitcnt       lgkmcnt(0)
/*00000001c848*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c850*/ v_add_nc_u32    v4, s1, v2
/*00000001c854*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c85c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c864*/ v_add_nc_u32    v9, s2, v3
/*00000001c868*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c870*/ v_add_nc_u32    v11, s1, v4
/*00000001c874*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001c87c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001c884*/ global_store_byte v[0:1], v6, off
/*00000001c88c*/ global_store_byte v[2:3], v9, off
/*00000001c894*/ global_store_byte v[4:5], v11, off
/*00000001c89c*/ s_endpgm
/*00000001c8a0*/ s_nop           0x0
/*00000001c8a4*/ s_nop           0x0
/*00000001c8a8*/ s_nop           0x0
/*00000001c8ac*/ s_nop           0x0
/*00000001c8b0*/ s_nop           0x0
/*00000001c8b4*/ s_nop           0x0
/*00000001c8b8*/ s_nop           0x0
/*00000001c8bc*/ s_nop           0x0
/*00000001c8c0*/ s_nop           0x0
/*00000001c8c4*/ s_nop           0x0
/*00000001c8c8*/ s_nop           0x0
/*00000001c8cc*/ s_nop           0x0
/*00000001c8d0*/ s_nop           0x0
/*00000001c8d4*/ s_nop           0x0
/*00000001c8d8*/ s_nop           0x0
/*00000001c8dc*/ s_nop           0x0
/*00000001c8e0*/ s_nop           0x0
/*00000001c8e4*/ s_nop           0x0
/*00000001c8e8*/ s_nop           0x0
/*00000001c8ec*/ s_nop           0x0
/*00000001c8f0*/ s_nop           0x0
/*00000001c8f4*/ s_nop           0x0
/*00000001c8f8*/ s_nop           0x0
/*00000001c8fc*/ s_nop           0x0
add_char_get_global_size_get_global_offset:
.skip 256
/*00000001ca00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001ca08*/ s_waitcnt       lgkmcnt(0)
/*00000001ca0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001ca14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001ca1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001ca24*/ s_lshl_b32      s3, s8, 4
/*00000001ca28*/ s_lshl_b32      s6, s9, 1
/*00000001ca2c*/ s_lshl_b32      s7, s10, 1
/*00000001ca30*/ s_waitcnt       lgkmcnt(0)
/*00000001ca34*/ v_add3_u32      v4, s1, s7, v2
/*00000001ca3c*/ v_add3_u32      v0, s0, s3, v0
/*00000001ca44*/ v_add3_u32      v3, s2, s6, v1
/*00000001ca4c*/ s_add_i32       s0, s0, s12
/*00000001ca50*/ s_add_i32       s2, s2, s13
/*00000001ca54*/ v_mov_b32       v6, s0
/*00000001ca58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ca60*/ v_mov_b32       v9, s2
/*00000001ca64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ca6c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ca74*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ca7c*/ s_add_i32       s0, s1, s14
/*00000001ca80*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ca88*/ v_mov_b32       v11, s0
/*00000001ca8c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ca94*/ global_store_byte v[0:1], v6, off
/*00000001ca9c*/ global_store_byte v[2:3], v9, off
/*00000001caa4*/ global_store_byte v[4:5], v11, off
/*00000001caac*/ s_endpgm
/*00000001cab0*/ s_nop           0x0
/*00000001cab4*/ s_nop           0x0
/*00000001cab8*/ s_nop           0x0
/*00000001cabc*/ s_nop           0x0
/*00000001cac0*/ s_nop           0x0
/*00000001cac4*/ s_nop           0x0
/*00000001cac8*/ s_nop           0x0
/*00000001cacc*/ s_nop           0x0
/*00000001cad0*/ s_nop           0x0
/*00000001cad4*/ s_nop           0x0
/*00000001cad8*/ s_nop           0x0
/*00000001cadc*/ s_nop           0x0
/*00000001cae0*/ s_nop           0x0
/*00000001cae4*/ s_nop           0x0
/*00000001cae8*/ s_nop           0x0
/*00000001caec*/ s_nop           0x0
/*00000001caf0*/ s_nop           0x0
/*00000001caf4*/ s_nop           0x0
/*00000001caf8*/ s_nop           0x0
/*00000001cafc*/ s_nop           0x0
add_char_get_num_groups_get_global_offset:
.skip 256
/*00000001cc00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001cc08*/ s_waitcnt       lgkmcnt(0)
/*00000001cc0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001cc14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001cc1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001cc24*/ s_lshl_b32      s6, s9, 1
/*00000001cc28*/ s_lshl_b32      s3, s8, 1
/*00000001cc2c*/ s_lshl_b32      s7, s10, 2
/*00000001cc30*/ s_waitcnt       lgkmcnt(0)
/*00000001cc34*/ v_add3_u32      v4, s1, s7, v2
/*00000001cc3c*/ v_add3_u32      v3, s2, s6, v1
/*00000001cc44*/ s_and_b32       s6, s12, -2
/*00000001cc48*/ s_and_b32       s8, s13, -2
/*00000001cc4c*/ v_cmp_gt_u32    s[6:7], s12, s6
/*00000001cc54*/ v_cmp_gt_u32    s[8:9], s13, s8
/*00000001cc5c*/ v_add3_u32      v0, s0, s3, v0
/*00000001cc64*/ s_lshr_b32      s3, s12, 1
/*00000001cc68*/ s_lshr_b32      s7, s13, 1
/*00000001cc6c*/ s_lshr_b32      s9, s14, 2
/*00000001cc70*/ s_and_b32       s10, s14, -4
/*00000001cc74*/ s_cmpk_lg_u32   s6, 0x0
/*00000001cc78*/ v_cmp_gt_u32    s[6:7], s14, s10
/*00000001cc80*/ s_addc_u32      s0, s0, s3
/*00000001cc84*/ s_cmpk_lg_u32   s8, 0x0
/*00000001cc88*/ v_mov_b32       v6, s0
/*00000001cc8c*/ s_addc_u32      s0, s2, s7
/*00000001cc90*/ v_add_co_u32    v0, s[3:4], s4, v0
/*00000001cc98*/ s_cmpk_lg_u32   s6, 0x0
/*00000001cc9c*/ v_add_co_u32    v2, s[2:3], s4, v3
/*00000001cca4*/ v_mov_b32       v9, s0
/*00000001cca8*/ s_addc_u32      s0, s1, s9
/*00000001ccac*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ccb4*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*00000001ccbc*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*00000001ccc4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001cccc*/ v_mov_b32       v11, s0
/*00000001ccd0*/ global_store_byte v[0:1], v6, off
/*00000001ccd8*/ global_store_byte v[2:3], v9, off
/*00000001cce0*/ global_store_byte v[4:5], v11, off
/*00000001cce8*/ s_endpgm
/*00000001ccec*/ s_nop           0x0
/*00000001ccf0*/ s_nop           0x0
/*00000001ccf4*/ s_nop           0x0
/*00000001ccf8*/ s_nop           0x0
/*00000001ccfc*/ s_nop           0x0
add_char_get_work_dim_get_global_offset:
.skip 256
/*00000001ce00*/ v_mov_b32       v3, s4
/*00000001ce04*/ v_mov_b32       v4, s5
/*00000001ce08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001ce10*/ s_waitcnt       lgkmcnt(0)
/*00000001ce14*/ s_clause        0x1
/*00000001ce18*/ s_load_dword    s1, s[6:7], 0x20
/*00000001ce20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001ce28*/ s_lshl_b32      s3, s8, 1
/*00000001ce2c*/ s_lshl_b32      s6, s9, 1
/*00000001ce30*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*00000001ce38*/ v_add3_u32      v0, s0, s3, v0
/*00000001ce40*/ s_lshl_b32      s3, s10, 2
/*00000001ce44*/ v_add3_u32      v3, s2, s6, v1
/*00000001ce4c*/ s_waitcnt       lgkmcnt(0)
/*00000001ce50*/ v_add3_u32      v4, s1, s3, v2
/*00000001ce58*/ v_add_co_u32    v0, s[3:4], s4, v0
/*00000001ce60*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*00000001ce68*/ v_add_co_u32    v2, s[3:4], s4, v3
/*00000001ce70*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*00000001ce78*/ v_add_co_u32    v4, s[3:4], s4, v4
/*00000001ce80*/ v_add_co_ci_u32 v5, s[3:4], s5, 0, s[3:4]
/*00000001ce88*/ s_waitcnt       vmcnt(0)
/*00000001ce8c*/ v_add_nc_u32    v7, s0, v6
/*00000001ce90*/ v_add_nc_u32    v8, s2, v6
/*00000001ce94*/ v_add_nc_u32    v6, s1, v6
/*00000001ce98*/ global_store_byte v[0:1], v7, off
/*00000001cea0*/ global_store_byte v[2:3], v8, off
/*00000001cea8*/ global_store_byte v[4:5], v6, off
/*00000001ceb0*/ s_endpgm
/*00000001ceb4*/ s_nop           0x0
/*00000001ceb8*/ s_nop           0x0
/*00000001cebc*/ s_nop           0x0
/*00000001cec0*/ s_nop           0x0
/*00000001cec4*/ s_nop           0x0
/*00000001cec8*/ s_nop           0x0
/*00000001cecc*/ s_nop           0x0
/*00000001ced0*/ s_nop           0x0
/*00000001ced4*/ s_nop           0x0
/*00000001ced8*/ s_nop           0x0
/*00000001cedc*/ s_nop           0x0
/*00000001cee0*/ s_nop           0x0
/*00000001cee4*/ s_nop           0x0
/*00000001cee8*/ s_nop           0x0
/*00000001ceec*/ s_nop           0x0
/*00000001cef0*/ s_nop           0x0
/*00000001cef4*/ s_nop           0x0
/*00000001cef8*/ s_nop           0x0
/*00000001cefc*/ s_nop           0x0
add_char_x_get_local_id:
.skip 256
/*00000001d000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d008*/ s_waitcnt       lgkmcnt(0)
/*00000001d00c*/ s_clause        0x2
/*00000001d010*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d018*/ s_load_dword    s3, s[4:5], 0x8
/*00000001d020*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001d028*/ s_lshl_b32      s6, s6, 4
/*00000001d02c*/ s_lshl_b32      s7, s7, 1
/*00000001d030*/ s_lshl_b32      s8, s8, 1
/*00000001d034*/ s_waitcnt       lgkmcnt(0)
/*00000001d038*/ v_add3_u32      v5, s1, s8, v2
/*00000001d040*/ v_add3_u32      v3, s0, s6, v0
/*00000001d048*/ v_add3_u32      v4, s2, s7, v1
/*00000001d050*/ v_add_nc_u32    v6, s3, v0
/*00000001d054*/ v_add_nc_u32    v9, s3, v1
/*00000001d058*/ v_add_nc_u32    v11, s3, v2
/*00000001d05c*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001d064*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d06c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001d074*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d07c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001d084*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d08c*/ global_store_byte v[0:1], v6, off
/*00000001d094*/ global_store_byte v[2:3], v9, off
/*00000001d09c*/ global_store_byte v[4:5], v11, off
/*00000001d0a4*/ s_endpgm
/*00000001d0a8*/ s_nop           0x0
/*00000001d0ac*/ s_nop           0x0
/*00000001d0b0*/ s_nop           0x0
/*00000001d0b4*/ s_nop           0x0
/*00000001d0b8*/ s_nop           0x0
/*00000001d0bc*/ s_nop           0x0
/*00000001d0c0*/ s_nop           0x0
/*00000001d0c4*/ s_nop           0x0
/*00000001d0c8*/ s_nop           0x0
/*00000001d0cc*/ s_nop           0x0
/*00000001d0d0*/ s_nop           0x0
/*00000001d0d4*/ s_nop           0x0
/*00000001d0d8*/ s_nop           0x0
/*00000001d0dc*/ s_nop           0x0
/*00000001d0e0*/ s_nop           0x0
/*00000001d0e4*/ s_nop           0x0
/*00000001d0e8*/ s_nop           0x0
/*00000001d0ec*/ s_nop           0x0
/*00000001d0f0*/ s_nop           0x0
/*00000001d0f4*/ s_nop           0x0
/*00000001d0f8*/ s_nop           0x0
/*00000001d0fc*/ s_nop           0x0
add_char_get_global_offset_get_local_id:
.skip 256
/*00000001d200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d208*/ s_waitcnt       lgkmcnt(0)
/*00000001d20c*/ s_clause        0x1
/*00000001d210*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d220*/ s_lshl_b32      s3, s6, 1
/*00000001d224*/ s_lshl_b32      s6, s7, 4
/*00000001d228*/ s_lshl_b32      s7, s8, 1
/*00000001d22c*/ v_add3_u32      v3, s0, s3, v0
/*00000001d234*/ v_add3_u32      v4, s2, s6, v1
/*00000001d23c*/ v_add_nc_u32    v6, s0, v0
/*00000001d240*/ s_waitcnt       lgkmcnt(0)
/*00000001d244*/ v_add3_u32      v5, s1, s7, v2
/*00000001d24c*/ v_add_nc_u32    v9, s2, v1
/*00000001d250*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001d258*/ v_add_nc_u32    v11, s1, v2
/*00000001d25c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d264*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001d26c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d274*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001d27c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d284*/ global_store_byte v[0:1], v6, off
/*00000001d28c*/ global_store_byte v[2:3], v9, off
/*00000001d294*/ global_store_byte v[4:5], v11, off
/*00000001d29c*/ s_endpgm
/*00000001d2a0*/ s_nop           0x0
/*00000001d2a4*/ s_nop           0x0
/*00000001d2a8*/ s_nop           0x0
/*00000001d2ac*/ s_nop           0x0
/*00000001d2b0*/ s_nop           0x0
/*00000001d2b4*/ s_nop           0x0
/*00000001d2b8*/ s_nop           0x0
/*00000001d2bc*/ s_nop           0x0
/*00000001d2c0*/ s_nop           0x0
/*00000001d2c4*/ s_nop           0x0
/*00000001d2c8*/ s_nop           0x0
/*00000001d2cc*/ s_nop           0x0
/*00000001d2d0*/ s_nop           0x0
/*00000001d2d4*/ s_nop           0x0
/*00000001d2d8*/ s_nop           0x0
/*00000001d2dc*/ s_nop           0x0
/*00000001d2e0*/ s_nop           0x0
/*00000001d2e4*/ s_nop           0x0
/*00000001d2e8*/ s_nop           0x0
/*00000001d2ec*/ s_nop           0x0
/*00000001d2f0*/ s_nop           0x0
/*00000001d2f4*/ s_nop           0x0
/*00000001d2f8*/ s_nop           0x0
/*00000001d2fc*/ s_nop           0x0
add_char_get_local_id_get_local_id:
.skip 256
/*00000001d400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d408*/ s_waitcnt       lgkmcnt(0)
/*00000001d40c*/ s_clause        0x1
/*00000001d410*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d420*/ s_lshl_b32      s3, s6, 3
/*00000001d424*/ v_lshlrev_b16   v6, 1, v0
/*00000001d42c*/ s_lshl_b32      s6, s7, 2
/*00000001d430*/ s_lshl_b32      s7, s8, 1
/*00000001d434*/ v_lshlrev_b16   v9, 1, v1
/*00000001d43c*/ v_lshlrev_b16   v11, 1, v2
/*00000001d444*/ v_add3_u32      v0, s0, s3, v0
/*00000001d44c*/ v_add3_u32      v3, s2, s6, v1
/*00000001d454*/ s_waitcnt       lgkmcnt(0)
/*00000001d458*/ v_add3_u32      v4, s1, s7, v2
/*00000001d460*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d468*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d470*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d478*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d480*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001d488*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d490*/ global_store_byte v[0:1], v6, off
/*00000001d498*/ global_store_byte v[2:3], v9, off
/*00000001d4a0*/ global_store_byte v[4:5], v11, off
/*00000001d4a8*/ s_endpgm
/*00000001d4ac*/ s_nop           0x0
/*00000001d4b0*/ s_nop           0x0
/*00000001d4b4*/ s_nop           0x0
/*00000001d4b8*/ s_nop           0x0
/*00000001d4bc*/ s_nop           0x0
/*00000001d4c0*/ s_nop           0x0
/*00000001d4c4*/ s_nop           0x0
/*00000001d4c8*/ s_nop           0x0
/*00000001d4cc*/ s_nop           0x0
/*00000001d4d0*/ s_nop           0x0
/*00000001d4d4*/ s_nop           0x0
/*00000001d4d8*/ s_nop           0x0
/*00000001d4dc*/ s_nop           0x0
/*00000001d4e0*/ s_nop           0x0
/*00000001d4e4*/ s_nop           0x0
/*00000001d4e8*/ s_nop           0x0
/*00000001d4ec*/ s_nop           0x0
/*00000001d4f0*/ s_nop           0x0
/*00000001d4f4*/ s_nop           0x0
/*00000001d4f8*/ s_nop           0x0
/*00000001d4fc*/ s_nop           0x0
add_char_get_group_id_get_local_id:
.skip 256
/*00000001d600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d608*/ s_waitcnt       lgkmcnt(0)
/*00000001d60c*/ s_clause        0x1
/*00000001d610*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d620*/ s_lshl_b32      s3, s6, 1
/*00000001d624*/ v_add_nc_u16    v6, v0, s6
/*00000001d62c*/ s_lshl_b32      s9, s7, 4
/*00000001d630*/ s_lshl_b32      s10, s8, 1
/*00000001d634*/ v_add_nc_u16    v9, v1, s7
/*00000001d63c*/ v_add_nc_u16    v11, v2, s8
/*00000001d644*/ v_add3_u32      v0, s0, s3, v0
/*00000001d64c*/ v_add3_u32      v3, s2, s9, v1
/*00000001d654*/ s_waitcnt       lgkmcnt(0)
/*00000001d658*/ v_add3_u32      v4, s1, s10, v2
/*00000001d660*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d668*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d670*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d678*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d680*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001d688*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d690*/ global_store_byte v[0:1], v6, off
/*00000001d698*/ global_store_byte v[2:3], v9, off
/*00000001d6a0*/ global_store_byte v[4:5], v11, off
/*00000001d6a8*/ s_endpgm
/*00000001d6ac*/ s_nop           0x0
/*00000001d6b0*/ s_nop           0x0
/*00000001d6b4*/ s_nop           0x0
/*00000001d6b8*/ s_nop           0x0
/*00000001d6bc*/ s_nop           0x0
/*00000001d6c0*/ s_nop           0x0
/*00000001d6c4*/ s_nop           0x0
/*00000001d6c8*/ s_nop           0x0
/*00000001d6cc*/ s_nop           0x0
/*00000001d6d0*/ s_nop           0x0
/*00000001d6d4*/ s_nop           0x0
/*00000001d6d8*/ s_nop           0x0
/*00000001d6dc*/ s_nop           0x0
/*00000001d6e0*/ s_nop           0x0
/*00000001d6e4*/ s_nop           0x0
/*00000001d6e8*/ s_nop           0x0
/*00000001d6ec*/ s_nop           0x0
/*00000001d6f0*/ s_nop           0x0
/*00000001d6f4*/ s_nop           0x0
/*00000001d6f8*/ s_nop           0x0
/*00000001d6fc*/ s_nop           0x0
add_char_get_local_size_get_local_id:
.skip 256
/*00000001d800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d808*/ s_waitcnt       lgkmcnt(0)
/*00000001d80c*/ s_clause        0x1
/*00000001d810*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d820*/ s_lshl_b32      s3, s6, 1
/*00000001d824*/ v_or_b32        v6, 2, v0
/*00000001d828*/ s_lshl_b32      s6, s7, 1
/*00000001d82c*/ s_lshl_b32      s7, s8, 2
/*00000001d830*/ v_or_b32        v9, 2, v1
/*00000001d834*/ v_or_b32        v11, 4, v2
/*00000001d838*/ v_add3_u32      v0, s0, s3, v0
/*00000001d840*/ v_add3_u32      v3, s2, s6, v1
/*00000001d848*/ s_waitcnt       lgkmcnt(0)
/*00000001d84c*/ v_add3_u32      v4, s1, s7, v2
/*00000001d854*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d85c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d864*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d86c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d874*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001d87c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d884*/ global_store_byte v[0:1], v6, off
/*00000001d88c*/ global_store_byte v[2:3], v9, off
/*00000001d894*/ global_store_byte v[4:5], v11, off
/*00000001d89c*/ s_endpgm
/*00000001d8a0*/ s_nop           0x0
/*00000001d8a4*/ s_nop           0x0
/*00000001d8a8*/ s_nop           0x0
/*00000001d8ac*/ s_nop           0x0
/*00000001d8b0*/ s_nop           0x0
/*00000001d8b4*/ s_nop           0x0
/*00000001d8b8*/ s_nop           0x0
/*00000001d8bc*/ s_nop           0x0
/*00000001d8c0*/ s_nop           0x0
/*00000001d8c4*/ s_nop           0x0
/*00000001d8c8*/ s_nop           0x0
/*00000001d8cc*/ s_nop           0x0
/*00000001d8d0*/ s_nop           0x0
/*00000001d8d4*/ s_nop           0x0
/*00000001d8d8*/ s_nop           0x0
/*00000001d8dc*/ s_nop           0x0
/*00000001d8e0*/ s_nop           0x0
/*00000001d8e4*/ s_nop           0x0
/*00000001d8e8*/ s_nop           0x0
/*00000001d8ec*/ s_nop           0x0
/*00000001d8f0*/ s_nop           0x0
/*00000001d8f4*/ s_nop           0x0
/*00000001d8f8*/ s_nop           0x0
/*00000001d8fc*/ s_nop           0x0
add_char_get_global_id_get_local_id:
.skip 256
/*00000001da00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001da08*/ s_waitcnt       lgkmcnt(0)
/*00000001da0c*/ s_clause        0x1
/*00000001da10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001da18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001da20*/ v_lshl_or_b32   v3, s7, 1, v1
/*00000001da28*/ v_lshl_or_b32   v5, s6, 1, v0
/*00000001da30*/ v_lshl_or_b32   v4, s8, 2, v2
/*00000001da38*/ v_add_nc_u32    v6, s2, v3
/*00000001da3c*/ v_add3_u32      v10, v5, v0, s0
/*00000001da44*/ s_waitcnt       lgkmcnt(0)
/*00000001da48*/ v_add_co_u32    v3, s[0:1], s4, v5
/*00000001da50*/ v_add_nc_u32    v7, s1, v4
/*00000001da54*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001da5c*/ v_add_co_u32    v0, s[0:1], s4, v6
/*00000001da64*/ v_add_nc_u32    v15, v6, v1
/*00000001da68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001da70*/ v_add_co_u32    v5, s[0:1], s4, v7
/*00000001da78*/ v_add_nc_u32    v11, v7, v2
/*00000001da7c*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001da84*/ global_store_byte v[3:4], v10, off
/*00000001da8c*/ global_store_byte v[0:1], v15, off
/*00000001da94*/ global_store_byte v[5:6], v11, off
/*00000001da9c*/ s_endpgm
/*00000001daa0*/ s_nop           0x0
/*00000001daa4*/ s_nop           0x0
/*00000001daa8*/ s_nop           0x0
/*00000001daac*/ s_nop           0x0
/*00000001dab0*/ s_nop           0x0
/*00000001dab4*/ s_nop           0x0
/*00000001dab8*/ s_nop           0x0
/*00000001dabc*/ s_nop           0x0
/*00000001dac0*/ s_nop           0x0
/*00000001dac4*/ s_nop           0x0
/*00000001dac8*/ s_nop           0x0
/*00000001dacc*/ s_nop           0x0
/*00000001dad0*/ s_nop           0x0
/*00000001dad4*/ s_nop           0x0
/*00000001dad8*/ s_nop           0x0
/*00000001dadc*/ s_nop           0x0
/*00000001dae0*/ s_nop           0x0
/*00000001dae4*/ s_nop           0x0
/*00000001dae8*/ s_nop           0x0
/*00000001daec*/ s_nop           0x0
/*00000001daf0*/ s_nop           0x0
/*00000001daf4*/ s_nop           0x0
/*00000001daf8*/ s_nop           0x0
/*00000001dafc*/ s_nop           0x0
add_char_get_global_size_get_local_id:
.skip 256
/*00000001dc00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001dc08*/ s_waitcnt       lgkmcnt(0)
/*00000001dc0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001dc14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001dc1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001dc24*/ s_lshl_b32      s3, s8, 4
/*00000001dc28*/ s_lshl_b32      s6, s9, 1
/*00000001dc2c*/ s_lshl_b32      s7, s10, 1
/*00000001dc30*/ s_waitcnt       lgkmcnt(0)
/*00000001dc34*/ v_add3_u32      v5, s1, s7, v2
/*00000001dc3c*/ v_add3_u32      v3, s0, s3, v0
/*00000001dc44*/ v_add3_u32      v4, s2, s6, v1
/*00000001dc4c*/ v_add_nc_u16    v7, s12, v0
/*00000001dc54*/ v_add_nc_u16    v10, s13, v1
/*00000001dc5c*/ v_add_nc_u16    v11, s14, v2
/*00000001dc64*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001dc6c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001dc74*/ v_add_co_u32    v3, s[0:1], s4, v4
/*00000001dc7c*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001dc84*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000001dc8c*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001dc94*/ global_store_byte v[0:1], v7, off
/*00000001dc9c*/ global_store_byte v[3:4], v10, off
/*00000001dca4*/ global_store_byte v[5:6], v11, off
/*00000001dcac*/ s_endpgm
/*00000001dcb0*/ s_nop           0x0
/*00000001dcb4*/ s_nop           0x0
/*00000001dcb8*/ s_nop           0x0
/*00000001dcbc*/ s_nop           0x0
/*00000001dcc0*/ s_nop           0x0
/*00000001dcc4*/ s_nop           0x0
/*00000001dcc8*/ s_nop           0x0
/*00000001dccc*/ s_nop           0x0
/*00000001dcd0*/ s_nop           0x0
/*00000001dcd4*/ s_nop           0x0
/*00000001dcd8*/ s_nop           0x0
/*00000001dcdc*/ s_nop           0x0
/*00000001dce0*/ s_nop           0x0
/*00000001dce4*/ s_nop           0x0
/*00000001dce8*/ s_nop           0x0
/*00000001dcec*/ s_nop           0x0
/*00000001dcf0*/ s_nop           0x0
/*00000001dcf4*/ s_nop           0x0
/*00000001dcf8*/ s_nop           0x0
/*00000001dcfc*/ s_nop           0x0
add_char_get_num_groups_get_local_id:
.skip 256
/*00000001de00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001de08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001de10*/ s_waitcnt       lgkmcnt(0)
/*00000001de14*/ s_clause        0x1
/*00000001de18*/ s_load_dword    s3, s[6:7], 0x20
/*00000001de20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001de28*/ s_lshl_b32      s6, s8, 1
/*00000001de2c*/ s_lshl_b32      s8, s9, 1
/*00000001de30*/ s_lshl_b32      s9, s10, 2
/*00000001de34*/ s_and_b32       s7, s0, -2
/*00000001de38*/ s_waitcnt       lgkmcnt(0)
/*00000001de3c*/ v_add3_u32      v7, s3, s9, v2
/*00000001de44*/ v_cmp_gt_u32    s[7:8], s0, s7
/*00000001de4c*/ s_lshr_b32      s0, s0, 1
/*00000001de50*/ v_add3_u32      v3, s12, s6, v0
/*00000001de58*/ v_add3_u32      v5, s14, s8, v1
/*00000001de60*/ s_cmpk_lg_u32   s7, 0x0
/*00000001de64*/ s_addc_u32      s0, s0, 0
/*00000001de68*/ s_and_b32       s3, s1, -2
/*00000001de6c*/ v_add_nc_u16    v10, s0, v0
/*00000001de74*/ v_cmp_gt_u32    s[3:4], s1, s3
/*00000001de7c*/ s_lshr_b32      s1, s1, 1
/*00000001de80*/ v_add_co_u32    v3, s[6:7], s4, v3
/*00000001de88*/ v_add_co_ci_u32 v4, s[6:7], s5, 0, s[6:7]
/*00000001de90*/ s_cmpk_lg_u32   s3, 0x0
/*00000001de94*/ v_add_co_u32    v5, s[6:7], s4, v5
/*00000001de9c*/ s_addc_u32      s0, s1, 0
/*00000001dea0*/ s_and_b32       s3, s2, -4
/*00000001dea4*/ v_add_nc_u16    v11, s0, v1
/*00000001deac*/ v_cmp_gt_u32    vcc, s2, s3
/*00000001deb4*/ v_add_co_u32    v0, s[0:1], s4, v7
/*00000001debc*/ s_lshr_b32      s1, s2, 2
/*00000001dec0*/ v_add_co_ci_u32 v6, s[6:7], s5, 0, s[6:7]
/*00000001dec8*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ded0*/ v_add_co_ci_u32 v2, vcc, s1, v2, vcc
/*00000001ded4*/ global_store_byte v[3:4], v10, off
/*00000001dedc*/ global_store_byte v[5:6], v11, off
/*00000001dee4*/ global_store_byte v[0:1], v2, off
/*00000001deec*/ s_endpgm
/*00000001def0*/ s_nop           0x0
/*00000001def4*/ s_nop           0x0
/*00000001def8*/ s_nop           0x0
/*00000001defc*/ s_nop           0x0
add_char_get_work_dim_get_local_id:
.skip 256
/*00000001e000*/ v_mov_b32       v3, s4
/*00000001e004*/ v_mov_b32       v4, s5
/*00000001e008*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001e010*/ s_waitcnt       lgkmcnt(0)
/*00000001e014*/ s_clause        0x1
/*00000001e018*/ s_load_dword    s1, s[6:7], 0x20
/*00000001e020*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001e028*/ s_lshl_b32      s3, s8, 1
/*00000001e02c*/ s_lshl_b32      s6, s9, 1
/*00000001e030*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*00000001e038*/ v_add3_u32      v3, s0, s3, v0
/*00000001e040*/ s_lshl_b32      s0, s10, 2
/*00000001e044*/ v_add3_u32      v5, s2, s6, v1
/*00000001e04c*/ s_waitcnt       lgkmcnt(0)
/*00000001e050*/ v_add3_u32      v7, s1, s0, v2
/*00000001e058*/ v_add_co_u32    v3, s[0:1], s4, v3
/*00000001e060*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001e068*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000001e070*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001e078*/ v_add_co_u32    v7, s[0:1], s4, v7
/*00000001e080*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000001e088*/ s_waitcnt       vmcnt(0)
/*00000001e08c*/ v_add_nc_u16    v10, v15, v0
/*00000001e094*/ v_add_nc_u16    v11, v15, v1
/*00000001e09c*/ v_add_nc_u16    v2, v15, v2
/*00000001e0a4*/ global_store_byte v[3:4], v10, off
/*00000001e0ac*/ global_store_byte v[5:6], v11, off
/*00000001e0b4*/ global_store_byte v[7:8], v2, off
/*00000001e0bc*/ s_endpgm
/*00000001e0c0*/ s_nop           0x0
/*00000001e0c4*/ s_nop           0x0
/*00000001e0c8*/ s_nop           0x0
/*00000001e0cc*/ s_nop           0x0
/*00000001e0d0*/ s_nop           0x0
/*00000001e0d4*/ s_nop           0x0
/*00000001e0d8*/ s_nop           0x0
/*00000001e0dc*/ s_nop           0x0
/*00000001e0e0*/ s_nop           0x0
/*00000001e0e4*/ s_nop           0x0
/*00000001e0e8*/ s_nop           0x0
/*00000001e0ec*/ s_nop           0x0
/*00000001e0f0*/ s_nop           0x0
/*00000001e0f4*/ s_nop           0x0
/*00000001e0f8*/ s_nop           0x0
/*00000001e0fc*/ s_nop           0x0
add_char_x_get_group_id:
.skip 256
/*00000001e200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e208*/ s_waitcnt       lgkmcnt(0)
/*00000001e20c*/ s_clause        0x2
/*00000001e210*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e218*/ s_load_dword    s3, s[4:5], 0x8
/*00000001e220*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001e228*/ s_lshl_b32      s9, s6, 4
/*00000001e22c*/ s_lshl_b32      s10, s7, 1
/*00000001e230*/ s_lshl_b32      s11, s8, 1
/*00000001e234*/ s_waitcnt       lgkmcnt(0)
/*00000001e238*/ v_add3_u32      v4, s1, s11, v2
/*00000001e240*/ v_add3_u32      v0, s0, s9, v0
/*00000001e248*/ s_add_i32       s0, s3, s6
/*00000001e24c*/ v_add3_u32      v3, s2, s10, v1
/*00000001e254*/ v_mov_b32       v6, s0
/*00000001e258*/ s_add_i32       s1, s3, s7
/*00000001e25c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e264*/ v_mov_b32       v9, s1
/*00000001e268*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e270*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e278*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001e280*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e288*/ s_add_i32       s0, s3, s8
/*00000001e28c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001e294*/ v_mov_b32       v11, s0
/*00000001e298*/ global_store_byte v[0:1], v6, off
/*00000001e2a0*/ global_store_byte v[2:3], v9, off
/*00000001e2a8*/ global_store_byte v[4:5], v11, off
/*00000001e2b0*/ s_endpgm
/*00000001e2b4*/ s_nop           0x0
/*00000001e2b8*/ s_nop           0x0
/*00000001e2bc*/ s_nop           0x0
/*00000001e2c0*/ s_nop           0x0
/*00000001e2c4*/ s_nop           0x0
/*00000001e2c8*/ s_nop           0x0
/*00000001e2cc*/ s_nop           0x0
/*00000001e2d0*/ s_nop           0x0
/*00000001e2d4*/ s_nop           0x0
/*00000001e2d8*/ s_nop           0x0
/*00000001e2dc*/ s_nop           0x0
/*00000001e2e0*/ s_nop           0x0
/*00000001e2e4*/ s_nop           0x0
/*00000001e2e8*/ s_nop           0x0
/*00000001e2ec*/ s_nop           0x0
/*00000001e2f0*/ s_nop           0x0
/*00000001e2f4*/ s_nop           0x0
/*00000001e2f8*/ s_nop           0x0
/*00000001e2fc*/ s_nop           0x0
add_char_get_global_offset_get_group_id:
.skip 256
/*00000001e400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e408*/ s_waitcnt       lgkmcnt(0)
/*00000001e40c*/ s_clause        0x1
/*00000001e410*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e420*/ s_lshl_b32      s3, s6, 1
/*00000001e424*/ s_lshl_b32      s9, s7, 4
/*00000001e428*/ s_lshl_b32      s10, s8, 1
/*00000001e42c*/ v_add3_u32      v0, s0, s3, v0
/*00000001e434*/ v_add3_u32      v3, s2, s9, v1
/*00000001e43c*/ s_add_i32       s0, s0, s6
/*00000001e440*/ s_waitcnt       lgkmcnt(0)
/*00000001e444*/ v_add3_u32      v4, s1, s10, v2
/*00000001e44c*/ v_mov_b32       v6, s0
/*00000001e450*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e458*/ s_add_i32       s2, s2, s7
/*00000001e45c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e464*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e46c*/ v_mov_b32       v9, s2
/*00000001e470*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e478*/ s_add_i32       s0, s1, s8
/*00000001e47c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001e484*/ v_mov_b32       v11, s0
/*00000001e488*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001e490*/ global_store_byte v[0:1], v6, off
/*00000001e498*/ global_store_byte v[2:3], v9, off
/*00000001e4a0*/ global_store_byte v[4:5], v11, off
/*00000001e4a8*/ s_endpgm
/*00000001e4ac*/ s_nop           0x0
/*00000001e4b0*/ s_nop           0x0
/*00000001e4b4*/ s_nop           0x0
/*00000001e4b8*/ s_nop           0x0
/*00000001e4bc*/ s_nop           0x0
/*00000001e4c0*/ s_nop           0x0
/*00000001e4c4*/ s_nop           0x0
/*00000001e4c8*/ s_nop           0x0
/*00000001e4cc*/ s_nop           0x0
/*00000001e4d0*/ s_nop           0x0
/*00000001e4d4*/ s_nop           0x0
/*00000001e4d8*/ s_nop           0x0
/*00000001e4dc*/ s_nop           0x0
/*00000001e4e0*/ s_nop           0x0
/*00000001e4e4*/ s_nop           0x0
/*00000001e4e8*/ s_nop           0x0
/*00000001e4ec*/ s_nop           0x0
/*00000001e4f0*/ s_nop           0x0
/*00000001e4f4*/ s_nop           0x0
/*00000001e4f8*/ s_nop           0x0
/*00000001e4fc*/ s_nop           0x0
add_char_get_local_id_get_group_id:
.skip 256
/*00000001e600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e608*/ s_waitcnt       lgkmcnt(0)
/*00000001e60c*/ s_clause        0x1
/*00000001e610*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e620*/ s_lshl_b32      s3, s6, 3
/*00000001e624*/ v_add_nc_u16    v6, s6, v0
/*00000001e62c*/ s_lshl_b32      s9, s7, 2
/*00000001e630*/ s_lshl_b32      s10, s8, 1
/*00000001e634*/ v_add_nc_u16    v9, s7, v1
/*00000001e63c*/ v_add_nc_u16    v11, s8, v2
/*00000001e644*/ v_add3_u32      v0, s0, s3, v0
/*00000001e64c*/ v_add3_u32      v3, s2, s9, v1
/*00000001e654*/ s_waitcnt       lgkmcnt(0)
/*00000001e658*/ v_add3_u32      v4, s1, s10, v2
/*00000001e660*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e668*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e670*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e678*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e680*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001e688*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e690*/ global_store_byte v[0:1], v6, off
/*00000001e698*/ global_store_byte v[2:3], v9, off
/*00000001e6a0*/ global_store_byte v[4:5], v11, off
/*00000001e6a8*/ s_endpgm
/*00000001e6ac*/ s_nop           0x0
/*00000001e6b0*/ s_nop           0x0
/*00000001e6b4*/ s_nop           0x0
/*00000001e6b8*/ s_nop           0x0
/*00000001e6bc*/ s_nop           0x0
/*00000001e6c0*/ s_nop           0x0
/*00000001e6c4*/ s_nop           0x0
/*00000001e6c8*/ s_nop           0x0
/*00000001e6cc*/ s_nop           0x0
/*00000001e6d0*/ s_nop           0x0
/*00000001e6d4*/ s_nop           0x0
/*00000001e6d8*/ s_nop           0x0
/*00000001e6dc*/ s_nop           0x0
/*00000001e6e0*/ s_nop           0x0
/*00000001e6e4*/ s_nop           0x0
/*00000001e6e8*/ s_nop           0x0
/*00000001e6ec*/ s_nop           0x0
/*00000001e6f0*/ s_nop           0x0
/*00000001e6f4*/ s_nop           0x0
/*00000001e6f8*/ s_nop           0x0
/*00000001e6fc*/ s_nop           0x0
add_char_get_group_id_get_group_id:
.skip 256
/*00000001e800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e808*/ s_waitcnt       lgkmcnt(0)
/*00000001e80c*/ s_clause        0x1
/*00000001e810*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e820*/ s_lshl_b32      s3, s6, 1
/*00000001e824*/ s_lshl_b32      s6, s7, 4
/*00000001e828*/ s_lshl_b32      s8, s8, 1
/*00000001e82c*/ s_lshl_b32      s7, s7, 1
/*00000001e830*/ v_mov_b32       v6, s3
/*00000001e834*/ v_mov_b32       v9, s7
/*00000001e838*/ v_mov_b32       v11, s8
/*00000001e83c*/ v_add3_u32      v0, s0, s3, v0
/*00000001e844*/ v_add3_u32      v3, s2, s6, v1
/*00000001e84c*/ s_waitcnt       lgkmcnt(0)
/*00000001e850*/ v_add3_u32      v4, s1, s8, v2
/*00000001e858*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e860*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e868*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e870*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e878*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001e880*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e888*/ global_store_byte v[0:1], v6, off
/*00000001e890*/ global_store_byte v[2:3], v9, off
/*00000001e898*/ global_store_byte v[4:5], v11, off
/*00000001e8a0*/ s_endpgm
/*00000001e8a4*/ s_nop           0x0
/*00000001e8a8*/ s_nop           0x0
/*00000001e8ac*/ s_nop           0x0
/*00000001e8b0*/ s_nop           0x0
/*00000001e8b4*/ s_nop           0x0
/*00000001e8b8*/ s_nop           0x0
/*00000001e8bc*/ s_nop           0x0
/*00000001e8c0*/ s_nop           0x0
/*00000001e8c4*/ s_nop           0x0
/*00000001e8c8*/ s_nop           0x0
/*00000001e8cc*/ s_nop           0x0
/*00000001e8d0*/ s_nop           0x0
/*00000001e8d4*/ s_nop           0x0
/*00000001e8d8*/ s_nop           0x0
/*00000001e8dc*/ s_nop           0x0
/*00000001e8e0*/ s_nop           0x0
/*00000001e8e4*/ s_nop           0x0
/*00000001e8e8*/ s_nop           0x0
/*00000001e8ec*/ s_nop           0x0
/*00000001e8f0*/ s_nop           0x0
/*00000001e8f4*/ s_nop           0x0
/*00000001e8f8*/ s_nop           0x0
/*00000001e8fc*/ s_nop           0x0
add_char_get_local_size_get_group_id:
.skip 256
/*00000001ea00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001ea08*/ s_waitcnt       lgkmcnt(0)
/*00000001ea0c*/ s_clause        0x1
/*00000001ea10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001ea18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001ea20*/ s_lshl_b32      s3, s6, 1
/*00000001ea24*/ s_lshl_b32      s9, s7, 1
/*00000001ea28*/ s_lshl_b32      s10, s8, 2
/*00000001ea2c*/ s_add_i32       s6, s6, 2
/*00000001ea30*/ s_add_i32       s7, s7, 2
/*00000001ea34*/ v_mov_b32       v6, s6
/*00000001ea38*/ v_mov_b32       v9, s7
/*00000001ea3c*/ v_add3_u32      v0, s0, s3, v0
/*00000001ea44*/ v_add3_u32      v3, s2, s9, v1
/*00000001ea4c*/ s_waitcnt       lgkmcnt(0)
/*00000001ea50*/ v_add3_u32      v4, s1, s10, v2
/*00000001ea58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ea60*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ea68*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ea70*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ea78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ea80*/ s_add_i32       s0, s8, 4
/*00000001ea84*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ea8c*/ v_mov_b32       v11, s0
/*00000001ea90*/ global_store_byte v[0:1], v6, off
/*00000001ea98*/ global_store_byte v[2:3], v9, off
/*00000001eaa0*/ global_store_byte v[4:5], v11, off
/*00000001eaa8*/ s_endpgm
/*00000001eaac*/ s_nop           0x0
/*00000001eab0*/ s_nop           0x0
/*00000001eab4*/ s_nop           0x0
/*00000001eab8*/ s_nop           0x0
/*00000001eabc*/ s_nop           0x0
/*00000001eac0*/ s_nop           0x0
/*00000001eac4*/ s_nop           0x0
/*00000001eac8*/ s_nop           0x0
/*00000001eacc*/ s_nop           0x0
/*00000001ead0*/ s_nop           0x0
/*00000001ead4*/ s_nop           0x0
/*00000001ead8*/ s_nop           0x0
/*00000001eadc*/ s_nop           0x0
/*00000001eae0*/ s_nop           0x0
/*00000001eae4*/ s_nop           0x0
/*00000001eae8*/ s_nop           0x0
/*00000001eaec*/ s_nop           0x0
/*00000001eaf0*/ s_nop           0x0
/*00000001eaf4*/ s_nop           0x0
/*00000001eaf8*/ s_nop           0x0
/*00000001eafc*/ s_nop           0x0
add_char_get_global_id_get_group_id:
.skip 256
/*00000001ec00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001ec08*/ s_waitcnt       lgkmcnt(0)
/*00000001ec0c*/ s_clause        0x1
/*00000001ec10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001ec18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001ec20*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001ec28*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001ec30*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001ec38*/ v_add_nc_u32    v3, s2, v1
/*00000001ec3c*/ v_add3_u32      v6, s0, s6, v0
/*00000001ec44*/ s_waitcnt       lgkmcnt(0)
/*00000001ec48*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ec50*/ v_add_nc_u32    v4, s1, v2
/*00000001ec54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ec5c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ec64*/ v_add_nc_u32    v9, s7, v3
/*00000001ec68*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ec70*/ v_add_nc_u32    v11, s8, v4
/*00000001ec74*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001ec7c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001ec84*/ global_store_byte v[0:1], v6, off
/*00000001ec8c*/ global_store_byte v[2:3], v9, off
/*00000001ec94*/ global_store_byte v[4:5], v11, off
/*00000001ec9c*/ s_endpgm
/*00000001eca0*/ s_nop           0x0
/*00000001eca4*/ s_nop           0x0
/*00000001eca8*/ s_nop           0x0
/*00000001ecac*/ s_nop           0x0
/*00000001ecb0*/ s_nop           0x0
/*00000001ecb4*/ s_nop           0x0
/*00000001ecb8*/ s_nop           0x0
/*00000001ecbc*/ s_nop           0x0
/*00000001ecc0*/ s_nop           0x0
/*00000001ecc4*/ s_nop           0x0
/*00000001ecc8*/ s_nop           0x0
/*00000001eccc*/ s_nop           0x0
/*00000001ecd0*/ s_nop           0x0
/*00000001ecd4*/ s_nop           0x0
/*00000001ecd8*/ s_nop           0x0
/*00000001ecdc*/ s_nop           0x0
/*00000001ece0*/ s_nop           0x0
/*00000001ece4*/ s_nop           0x0
/*00000001ece8*/ s_nop           0x0
/*00000001ecec*/ s_nop           0x0
/*00000001ecf0*/ s_nop           0x0
/*00000001ecf4*/ s_nop           0x0
/*00000001ecf8*/ s_nop           0x0
/*00000001ecfc*/ s_nop           0x0
add_char_get_global_size_get_group_id:
.skip 256
/*00000001ee00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001ee08*/ s_waitcnt       lgkmcnt(0)
/*00000001ee0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001ee14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001ee1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001ee24*/ s_lshl_b32      s3, s8, 4
/*00000001ee28*/ s_lshl_b32      s6, s9, 1
/*00000001ee2c*/ s_lshl_b32      s7, s10, 1
/*00000001ee30*/ s_waitcnt       lgkmcnt(0)
/*00000001ee34*/ v_add3_u32      v4, s1, s7, v2
/*00000001ee3c*/ v_add3_u32      v0, s0, s3, v0
/*00000001ee44*/ s_add_i32       s0, s12, s8
/*00000001ee48*/ v_add3_u32      v3, s2, s6, v1
/*00000001ee50*/ v_mov_b32       v6, s0
/*00000001ee54*/ s_add_i32       s1, s13, s9
/*00000001ee58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001ee60*/ v_mov_b32       v9, s1
/*00000001ee64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ee6c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001ee74*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ee7c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001ee84*/ s_add_i32       s0, s14, s10
/*00000001ee88*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ee90*/ v_mov_b32       v11, s0
/*00000001ee94*/ global_store_byte v[0:1], v6, off
/*00000001ee9c*/ global_store_byte v[2:3], v9, off
/*00000001eea4*/ global_store_byte v[4:5], v11, off
/*00000001eeac*/ s_endpgm
/*00000001eeb0*/ s_nop           0x0
/*00000001eeb4*/ s_nop           0x0
/*00000001eeb8*/ s_nop           0x0
/*00000001eebc*/ s_nop           0x0
/*00000001eec0*/ s_nop           0x0
/*00000001eec4*/ s_nop           0x0
/*00000001eec8*/ s_nop           0x0
/*00000001eecc*/ s_nop           0x0
/*00000001eed0*/ s_nop           0x0
/*00000001eed4*/ s_nop           0x0
/*00000001eed8*/ s_nop           0x0
/*00000001eedc*/ s_nop           0x0
/*00000001eee0*/ s_nop           0x0
/*00000001eee4*/ s_nop           0x0
/*00000001eee8*/ s_nop           0x0
/*00000001eeec*/ s_nop           0x0
/*00000001eef0*/ s_nop           0x0
/*00000001eef4*/ s_nop           0x0
/*00000001eef8*/ s_nop           0x0
/*00000001eefc*/ s_nop           0x0
add_char_get_num_groups_get_group_id:
.skip 256
/*00000001f000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001f008*/ s_waitcnt       lgkmcnt(0)
/*00000001f00c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001f014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001f01c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001f024*/ s_lshl_b32      s7, s10, 2
/*00000001f028*/ s_lshl_b32      s3, s8, 1
/*00000001f02c*/ s_lshl_b32      s6, s9, 1
/*00000001f030*/ s_waitcnt       lgkmcnt(0)
/*00000001f034*/ v_add3_u32      v4, s1, s7, v2
/*00000001f03c*/ s_and_b32       s1, s12, -2
/*00000001f040*/ v_add3_u32      v0, s0, s3, v0
/*00000001f048*/ v_cmp_gt_u32    s[1:2], s12, s1
/*00000001f050*/ s_and_b32       s3, s13, -2
/*00000001f054*/ v_add3_u32      v3, s2, s6, v1
/*00000001f05c*/ v_cmp_gt_u32    s[3:4], s13, s3
/*00000001f064*/ s_lshr_b32      s0, s12, 1
/*00000001f068*/ s_lshr_b32      s2, s13, 1
/*00000001f06c*/ s_lshr_b32      s6, s14, 2
/*00000001f070*/ s_and_b32       s7, s14, -4
/*00000001f074*/ s_cmpk_lg_u32   s1, 0x0
/*00000001f078*/ v_cmp_gt_u32    s[1:2], s14, s7
/*00000001f080*/ s_addc_u32      s0, s8, s0
/*00000001f084*/ s_cmpk_lg_u32   s3, 0x0
/*00000001f088*/ v_mov_b32       v6, s0
/*00000001f08c*/ s_addc_u32      s0, s9, s2
/*00000001f090*/ v_add_co_u32    v0, s[7:8], s4, v0
/*00000001f098*/ s_cmpk_lg_u32   s1, 0x0
/*00000001f09c*/ v_add_co_u32    v2, s[2:3], s4, v3
/*00000001f0a4*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001f0ac*/ v_mov_b32       v9, s0
/*00000001f0b0*/ s_addc_u32      s0, s10, s6
/*00000001f0b4*/ v_add_co_ci_u32 v1, s[7:8], s5, 0, s[7:8]
/*00000001f0bc*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*00000001f0c4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001f0cc*/ v_mov_b32       v11, s0
/*00000001f0d0*/ global_store_byte v[0:1], v6, off
/*00000001f0d8*/ global_store_byte v[2:3], v9, off
/*00000001f0e0*/ global_store_byte v[4:5], v11, off
/*00000001f0e8*/ s_endpgm
/*00000001f0ec*/ s_nop           0x0
/*00000001f0f0*/ s_nop           0x0
/*00000001f0f4*/ s_nop           0x0
/*00000001f0f8*/ s_nop           0x0
/*00000001f0fc*/ s_nop           0x0
add_char_get_work_dim_get_group_id:
.skip 256
/*00000001f200*/ v_mov_b32       v3, s4
/*00000001f204*/ v_mov_b32       v4, s5
/*00000001f208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001f210*/ s_waitcnt       lgkmcnt(0)
/*00000001f214*/ s_clause        0x1
/*00000001f218*/ s_load_dword    s1, s[6:7], 0x20
/*00000001f220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001f228*/ s_lshl_b32      s3, s8, 1
/*00000001f22c*/ s_lshl_b32      s6, s9, 1
/*00000001f230*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*00000001f238*/ v_add3_u32      v0, s0, s3, v0
/*00000001f240*/ s_lshl_b32      s0, s10, 2
/*00000001f244*/ v_add3_u32      v3, s2, s6, v1
/*00000001f24c*/ s_waitcnt       lgkmcnt(0)
/*00000001f250*/ v_add3_u32      v4, s1, s0, v2
/*00000001f258*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f260*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f268*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f270*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f278*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f280*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f288*/ s_waitcnt       vmcnt(0)
/*00000001f28c*/ v_and_b32       v7, 0xffff, v6
/*00000001f294*/ v_add_nc_u32    v6, s10, v6
/*00000001f298*/ v_add_nc_u32    v11, s8, v7
/*00000001f29c*/ v_add_nc_u32    v9, s9, v7
/*00000001f2a0*/ global_store_byte v[0:1], v11, off
/*00000001f2a8*/ global_store_byte v[2:3], v9, off
/*00000001f2b0*/ global_store_byte v[4:5], v6, off
/*00000001f2b8*/ s_endpgm
/*00000001f2bc*/ s_nop           0x0
/*00000001f2c0*/ s_nop           0x0
/*00000001f2c4*/ s_nop           0x0
/*00000001f2c8*/ s_nop           0x0
/*00000001f2cc*/ s_nop           0x0
/*00000001f2d0*/ s_nop           0x0
/*00000001f2d4*/ s_nop           0x0
/*00000001f2d8*/ s_nop           0x0
/*00000001f2dc*/ s_nop           0x0
/*00000001f2e0*/ s_nop           0x0
/*00000001f2e4*/ s_nop           0x0
/*00000001f2e8*/ s_nop           0x0
/*00000001f2ec*/ s_nop           0x0
/*00000001f2f0*/ s_nop           0x0
/*00000001f2f4*/ s_nop           0x0
/*00000001f2f8*/ s_nop           0x0
/*00000001f2fc*/ s_nop           0x0
add_char_x_get_local_size:
.skip 256
/*00000001f400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f408*/ s_waitcnt       lgkmcnt(0)
/*00000001f40c*/ s_clause        0x2
/*00000001f410*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f418*/ s_load_dword    s3, s[4:5], 0x8
/*00000001f420*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001f428*/ s_lshl_b32      s6, s6, 4
/*00000001f42c*/ s_lshl_b32      s7, s7, 1
/*00000001f430*/ s_lshl_b32      s8, s8, 1
/*00000001f434*/ s_waitcnt       lgkmcnt(0)
/*00000001f438*/ v_add3_u32      v4, s1, s8, v2
/*00000001f440*/ v_add3_u32      v0, s0, s6, v0
/*00000001f448*/ s_add_i32       s0, s3, 16
/*00000001f44c*/ v_add3_u32      v3, s2, s7, v1
/*00000001f454*/ v_mov_b32       v7, s0
/*00000001f458*/ v_add_nc_u16    v6, s3, 2
/*00000001f460*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f468*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f470*/ v_add_co_u32    v11, s[0:1], s4, v3
/*00000001f478*/ v_add_co_ci_u32 v12, s[0:1], s5, 0, s[0:1]
/*00000001f480*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f488*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f490*/ global_store_byte v[0:1], v7, off
/*00000001f498*/ global_store_byte v[11:12], v6, off
/*00000001f4a0*/ global_store_byte v[4:5], v6, off
/*00000001f4a8*/ s_endpgm
/*00000001f4ac*/ s_nop           0x0
/*00000001f4b0*/ s_nop           0x0
/*00000001f4b4*/ s_nop           0x0
/*00000001f4b8*/ s_nop           0x0
/*00000001f4bc*/ s_nop           0x0
/*00000001f4c0*/ s_nop           0x0
/*00000001f4c4*/ s_nop           0x0
/*00000001f4c8*/ s_nop           0x0
/*00000001f4cc*/ s_nop           0x0
/*00000001f4d0*/ s_nop           0x0
/*00000001f4d4*/ s_nop           0x0
/*00000001f4d8*/ s_nop           0x0
/*00000001f4dc*/ s_nop           0x0
/*00000001f4e0*/ s_nop           0x0
/*00000001f4e4*/ s_nop           0x0
/*00000001f4e8*/ s_nop           0x0
/*00000001f4ec*/ s_nop           0x0
/*00000001f4f0*/ s_nop           0x0
/*00000001f4f4*/ s_nop           0x0
/*00000001f4f8*/ s_nop           0x0
/*00000001f4fc*/ s_nop           0x0
add_char_get_global_offset_get_local_size:
.skip 256
/*00000001f600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f608*/ s_waitcnt       lgkmcnt(0)
/*00000001f60c*/ s_clause        0x1
/*00000001f610*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f620*/ s_lshl_b32      s3, s6, 1
/*00000001f624*/ s_lshl_b32      s6, s7, 4
/*00000001f628*/ s_lshl_b32      s7, s8, 1
/*00000001f62c*/ v_add3_u32      v0, s0, s3, v0
/*00000001f634*/ v_add3_u32      v3, s2, s6, v1
/*00000001f63c*/ s_add_i32       s0, s0, 2
/*00000001f640*/ s_waitcnt       lgkmcnt(0)
/*00000001f644*/ v_add3_u32      v4, s1, s7, v2
/*00000001f64c*/ v_mov_b32       v6, s0
/*00000001f650*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f658*/ s_add_i32       s2, s2, 16
/*00000001f65c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f664*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f66c*/ v_mov_b32       v9, s2
/*00000001f670*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f678*/ s_add_i32       s0, s1, 2
/*00000001f67c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001f684*/ v_mov_b32       v11, s0
/*00000001f688*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001f690*/ global_store_byte v[0:1], v6, off
/*00000001f698*/ global_store_byte v[2:3], v9, off
/*00000001f6a0*/ global_store_byte v[4:5], v11, off
/*00000001f6a8*/ s_endpgm
/*00000001f6ac*/ s_nop           0x0
/*00000001f6b0*/ s_nop           0x0
/*00000001f6b4*/ s_nop           0x0
/*00000001f6b8*/ s_nop           0x0
/*00000001f6bc*/ s_nop           0x0
/*00000001f6c0*/ s_nop           0x0
/*00000001f6c4*/ s_nop           0x0
/*00000001f6c8*/ s_nop           0x0
/*00000001f6cc*/ s_nop           0x0
/*00000001f6d0*/ s_nop           0x0
/*00000001f6d4*/ s_nop           0x0
/*00000001f6d8*/ s_nop           0x0
/*00000001f6dc*/ s_nop           0x0
/*00000001f6e0*/ s_nop           0x0
/*00000001f6e4*/ s_nop           0x0
/*00000001f6e8*/ s_nop           0x0
/*00000001f6ec*/ s_nop           0x0
/*00000001f6f0*/ s_nop           0x0
/*00000001f6f4*/ s_nop           0x0
/*00000001f6f8*/ s_nop           0x0
/*00000001f6fc*/ s_nop           0x0
add_char_get_local_id_get_local_size:
.skip 256
/*00000001f800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f808*/ s_waitcnt       lgkmcnt(0)
/*00000001f80c*/ s_clause        0x1
/*00000001f810*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f820*/ s_lshl_b32      s3, s6, 3
/*00000001f824*/ v_or_b32        v6, 8, v0
/*00000001f828*/ s_lshl_b32      s6, s7, 2
/*00000001f82c*/ s_lshl_b32      s7, s8, 1
/*00000001f830*/ v_or_b32        v9, 4, v1
/*00000001f834*/ v_or_b32        v11, 2, v2
/*00000001f838*/ v_add3_u32      v0, s0, s3, v0
/*00000001f840*/ v_add3_u32      v3, s2, s6, v1
/*00000001f848*/ s_waitcnt       lgkmcnt(0)
/*00000001f84c*/ v_add3_u32      v4, s1, s7, v2
/*00000001f854*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f85c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f864*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f86c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f874*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f87c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f884*/ global_store_byte v[0:1], v6, off
/*00000001f88c*/ global_store_byte v[2:3], v9, off
/*00000001f894*/ global_store_byte v[4:5], v11, off
/*00000001f89c*/ s_endpgm
/*00000001f8a0*/ s_nop           0x0
/*00000001f8a4*/ s_nop           0x0
/*00000001f8a8*/ s_nop           0x0
/*00000001f8ac*/ s_nop           0x0
/*00000001f8b0*/ s_nop           0x0
/*00000001f8b4*/ s_nop           0x0
/*00000001f8b8*/ s_nop           0x0
/*00000001f8bc*/ s_nop           0x0
/*00000001f8c0*/ s_nop           0x0
/*00000001f8c4*/ s_nop           0x0
/*00000001f8c8*/ s_nop           0x0
/*00000001f8cc*/ s_nop           0x0
/*00000001f8d0*/ s_nop           0x0
/*00000001f8d4*/ s_nop           0x0
/*00000001f8d8*/ s_nop           0x0
/*00000001f8dc*/ s_nop           0x0
/*00000001f8e0*/ s_nop           0x0
/*00000001f8e4*/ s_nop           0x0
/*00000001f8e8*/ s_nop           0x0
/*00000001f8ec*/ s_nop           0x0
/*00000001f8f0*/ s_nop           0x0
/*00000001f8f4*/ s_nop           0x0
/*00000001f8f8*/ s_nop           0x0
/*00000001f8fc*/ s_nop           0x0
add_char_get_group_id_get_local_size:
.skip 256
/*00000001fa00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001fa08*/ s_waitcnt       lgkmcnt(0)
/*00000001fa0c*/ s_clause        0x1
/*00000001fa10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001fa18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001fa20*/ s_lshl_b32      s3, s6, 1
/*00000001fa24*/ s_lshl_b32      s9, s7, 4
/*00000001fa28*/ s_lshl_b32      s10, s8, 1
/*00000001fa2c*/ s_add_i32       s6, s6, 2
/*00000001fa30*/ s_add_i32       s7, s7, 16
/*00000001fa34*/ v_mov_b32       v6, s6
/*00000001fa38*/ v_mov_b32       v9, s7
/*00000001fa3c*/ v_add3_u32      v0, s0, s3, v0
/*00000001fa44*/ v_add3_u32      v3, s2, s9, v1
/*00000001fa4c*/ s_waitcnt       lgkmcnt(0)
/*00000001fa50*/ v_add3_u32      v4, s1, s10, v2
/*00000001fa58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001fa60*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001fa68*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001fa70*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001fa78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001fa80*/ s_add_i32       s0, s8, 2
/*00000001fa84*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001fa8c*/ v_mov_b32       v11, s0
/*00000001fa90*/ global_store_byte v[0:1], v6, off
/*00000001fa98*/ global_store_byte v[2:3], v9, off
/*00000001faa0*/ global_store_byte v[4:5], v11, off
/*00000001faa8*/ s_endpgm
/*00000001faac*/ s_nop           0x0
/*00000001fab0*/ s_nop           0x0
/*00000001fab4*/ s_nop           0x0
/*00000001fab8*/ s_nop           0x0
/*00000001fabc*/ s_nop           0x0
/*00000001fac0*/ s_nop           0x0
/*00000001fac4*/ s_nop           0x0
/*00000001fac8*/ s_nop           0x0
/*00000001facc*/ s_nop           0x0
/*00000001fad0*/ s_nop           0x0
/*00000001fad4*/ s_nop           0x0
/*00000001fad8*/ s_nop           0x0
/*00000001fadc*/ s_nop           0x0
/*00000001fae0*/ s_nop           0x0
/*00000001fae4*/ s_nop           0x0
/*00000001fae8*/ s_nop           0x0
/*00000001faec*/ s_nop           0x0
/*00000001faf0*/ s_nop           0x0
/*00000001faf4*/ s_nop           0x0
/*00000001faf8*/ s_nop           0x0
/*00000001fafc*/ s_nop           0x0
add_char_get_local_size_get_local_size:
.skip 256
/*00000001fc00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001fc08*/ s_waitcnt       lgkmcnt(0)
/*00000001fc0c*/ s_clause        0x1
/*00000001fc10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001fc18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001fc20*/ s_lshl_b32      s3, s6, 1
/*00000001fc24*/ s_lshl_b32      s6, s7, 1
/*00000001fc28*/ v_mov_b32       v6, 4
/*00000001fc2c*/ v_mov_b32       v7, 8
/*00000001fc30*/ v_add3_u32      v0, s0, s3, v0
/*00000001fc38*/ s_lshl_b32      s0, s8, 2
/*00000001fc3c*/ v_add3_u32      v3, s2, s6, v1
/*00000001fc44*/ s_waitcnt       lgkmcnt(0)
/*00000001fc48*/ v_add3_u32      v4, s1, s0, v2
/*00000001fc50*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001fc58*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001fc60*/ v_add_co_u32    v11, s[0:1], s4, v3
/*00000001fc68*/ v_add_co_ci_u32 v12, s[0:1], s5, 0, s[0:1]
/*00000001fc70*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001fc78*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001fc80*/ global_store_byte v[0:1], v6, off
/*00000001fc88*/ global_store_byte v[11:12], v6, off
/*00000001fc90*/ global_store_byte v[4:5], v7, off
/*00000001fc98*/ s_endpgm
/*00000001fc9c*/ s_nop           0x0
/*00000001fca0*/ s_nop           0x0
/*00000001fca4*/ s_nop           0x0
/*00000001fca8*/ s_nop           0x0
/*00000001fcac*/ s_nop           0x0
/*00000001fcb0*/ s_nop           0x0
/*00000001fcb4*/ s_nop           0x0
/*00000001fcb8*/ s_nop           0x0
/*00000001fcbc*/ s_nop           0x0
/*00000001fcc0*/ s_nop           0x0
/*00000001fcc4*/ s_nop           0x0
/*00000001fcc8*/ s_nop           0x0
/*00000001fccc*/ s_nop           0x0
/*00000001fcd0*/ s_nop           0x0
/*00000001fcd4*/ s_nop           0x0
/*00000001fcd8*/ s_nop           0x0
/*00000001fcdc*/ s_nop           0x0
/*00000001fce0*/ s_nop           0x0
/*00000001fce4*/ s_nop           0x0
/*00000001fce8*/ s_nop           0x0
/*00000001fcec*/ s_nop           0x0
/*00000001fcf0*/ s_nop           0x0
/*00000001fcf4*/ s_nop           0x0
/*00000001fcf8*/ s_nop           0x0
/*00000001fcfc*/ s_nop           0x0
add_char_get_global_id_get_local_size:
.skip 256
/*00000001fe00*/ s_clause        0x2
/*00000001fe04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001fe0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000001fe14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001fe1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001fe24*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001fe2c*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001fe34*/ s_waitcnt       lgkmcnt(0)
/*00000001fe38*/ v_add_nc_u32    v3, s0, v0
/*00000001fe3c*/ v_add_co_u32    v4, s[0:1], s2, v1
/*00000001fe44*/ v_add_co_u32    v5, s[0:1], s10, v2
/*00000001fe4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001fe54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001fe5c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001fe64*/ v_add_nc_u16    v6, v3, 2
/*00000001fe6c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001fe74*/ v_add_nc_u16    v9, v4, 2
/*00000001fe7c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001fe84*/ v_add_nc_u16    v11, v5, 4
/*00000001fe8c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001fe94*/ global_store_byte v[0:1], v6, off
/*00000001fe9c*/ global_store_byte v[2:3], v9, off
/*00000001fea4*/ global_store_byte v[4:5], v11, off
/*00000001feac*/ s_endpgm
/*00000001feb0*/ s_nop           0x0
/*00000001feb4*/ s_nop           0x0
/*00000001feb8*/ s_nop           0x0
/*00000001febc*/ s_nop           0x0
/*00000001fec0*/ s_nop           0x0
/*00000001fec4*/ s_nop           0x0
/*00000001fec8*/ s_nop           0x0
/*00000001fecc*/ s_nop           0x0
/*00000001fed0*/ s_nop           0x0
/*00000001fed4*/ s_nop           0x0
/*00000001fed8*/ s_nop           0x0
/*00000001fedc*/ s_nop           0x0
/*00000001fee0*/ s_nop           0x0
/*00000001fee4*/ s_nop           0x0
/*00000001fee8*/ s_nop           0x0
/*00000001feec*/ s_nop           0x0
/*00000001fef0*/ s_nop           0x0
/*00000001fef4*/ s_nop           0x0
/*00000001fef8*/ s_nop           0x0
/*00000001fefc*/ s_nop           0x0
add_char_get_global_size_get_local_size:
.skip 256
/*000000020000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000020008*/ s_waitcnt       lgkmcnt(0)
/*00000002000c*/ s_load_dword    s1, s[6:7], 0x20
/*000000020014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002001c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000020024*/ s_lshl_b32      s3, s8, 4
/*000000020028*/ s_lshl_b32      s6, s9, 1
/*00000002002c*/ s_lshl_b32      s7, s10, 1
/*000000020030*/ s_waitcnt       lgkmcnt(0)
/*000000020034*/ v_add3_u32      v4, s1, s7, v2
/*00000002003c*/ v_add3_u32      v0, s0, s3, v0
/*000000020044*/ s_add_i32       s0, s12, 16
/*000000020048*/ v_add3_u32      v3, s2, s6, v1
/*000000020050*/ v_mov_b32       v6, s0
/*000000020054*/ s_add_i32       s1, s13, 2
/*000000020058*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020060*/ v_mov_b32       v9, s1
/*000000020064*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002006c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020074*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000002007c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020084*/ s_add_i32       s0, s14, 2
/*000000020088*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000020090*/ v_mov_b32       v11, s0
/*000000020094*/ global_store_byte v[0:1], v6, off
/*00000002009c*/ global_store_byte v[2:3], v9, off
/*0000000200a4*/ global_store_byte v[4:5], v11, off
/*0000000200ac*/ s_endpgm
/*0000000200b0*/ s_nop           0x0
/*0000000200b4*/ s_nop           0x0
/*0000000200b8*/ s_nop           0x0
/*0000000200bc*/ s_nop           0x0
/*0000000200c0*/ s_nop           0x0
/*0000000200c4*/ s_nop           0x0
/*0000000200c8*/ s_nop           0x0
/*0000000200cc*/ s_nop           0x0
/*0000000200d0*/ s_nop           0x0
/*0000000200d4*/ s_nop           0x0
/*0000000200d8*/ s_nop           0x0
/*0000000200dc*/ s_nop           0x0
/*0000000200e0*/ s_nop           0x0
/*0000000200e4*/ s_nop           0x0
/*0000000200e8*/ s_nop           0x0
/*0000000200ec*/ s_nop           0x0
/*0000000200f0*/ s_nop           0x0
/*0000000200f4*/ s_nop           0x0
/*0000000200f8*/ s_nop           0x0
/*0000000200fc*/ s_nop           0x0
add_char_get_num_groups_get_local_size:
.skip 256
/*000000020200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000020208*/ s_waitcnt       lgkmcnt(0)
/*00000002020c*/ s_load_dword    s1, s[6:7], 0x20
/*000000020214*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002021c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000020224*/ s_lshl_b32      s7, s10, 2
/*000000020228*/ s_lshl_b32      s3, s8, 1
/*00000002022c*/ s_lshl_b32      s6, s9, 1
/*000000020230*/ s_waitcnt       lgkmcnt(0)
/*000000020234*/ v_add3_u32      v4, s1, s7, v2
/*00000002023c*/ s_and_b32       s1, s12, -2
/*000000020240*/ v_add3_u32      v0, s0, s3, v0
/*000000020248*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000020250*/ s_and_b32       s3, s13, -2
/*000000020254*/ v_add3_u32      v3, s2, s6, v1
/*00000002025c*/ v_cmp_gt_u32    s[3:4], s13, s3
/*000000020264*/ s_lshr_b32      s0, s12, 1
/*000000020268*/ s_lshr_b32      s2, s13, 1
/*00000002026c*/ s_lshr_b32      s6, s14, 2
/*000000020270*/ s_and_b32       s7, s14, -4
/*000000020274*/ s_cmpk_lg_u32   s1, 0x0
/*000000020278*/ v_cmp_gt_u32    s[1:2], s14, s7
/*000000020280*/ s_addc_u32      s0, s0, 2
/*000000020284*/ s_cmpk_lg_u32   s3, 0x0
/*000000020288*/ v_mov_b32       v6, s0
/*00000002028c*/ s_addc_u32      s0, s2, 2
/*000000020290*/ v_add_co_u32    v0, s[7:8], s4, v0
/*000000020298*/ s_cmpk_lg_u32   s1, 0x0
/*00000002029c*/ v_add_co_u32    v2, s[2:3], s4, v3
/*0000000202a4*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000202ac*/ v_mov_b32       v9, s0
/*0000000202b0*/ s_addc_u32      s0, s6, 4
/*0000000202b4*/ v_add_co_ci_u32 v1, s[7:8], s5, 0, s[7:8]
/*0000000202bc*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*0000000202c4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000202cc*/ v_mov_b32       v11, s0
/*0000000202d0*/ global_store_byte v[0:1], v6, off
/*0000000202d8*/ global_store_byte v[2:3], v9, off
/*0000000202e0*/ global_store_byte v[4:5], v11, off
/*0000000202e8*/ s_endpgm
/*0000000202ec*/ s_nop           0x0
/*0000000202f0*/ s_nop           0x0
/*0000000202f4*/ s_nop           0x0
/*0000000202f8*/ s_nop           0x0
/*0000000202fc*/ s_nop           0x0
add_char_get_work_dim_get_local_size:
.skip 256
/*000000020400*/ v_mov_b32       v3, s4
/*000000020404*/ v_mov_b32       v4, s5
/*000000020408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000020410*/ s_waitcnt       lgkmcnt(0)
/*000000020414*/ s_clause        0x1
/*000000020418*/ s_load_dword    s1, s[6:7], 0x20
/*000000020420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000020428*/ s_lshl_b32      s3, s8, 1
/*00000002042c*/ s_lshl_b32      s6, s9, 1
/*000000020430*/ global_load_ubyte v6, v[3:4], off inst_offset:2
/*000000020438*/ v_add3_u32      v0, s0, s3, v0
/*000000020440*/ s_lshl_b32      s0, s10, 2
/*000000020444*/ v_add3_u32      v3, s2, s6, v1
/*00000002044c*/ s_waitcnt       lgkmcnt(0)
/*000000020450*/ v_add3_u32      v4, s1, s0, v2
/*000000020458*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020460*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020468*/ v_add_co_u32    v9, s[0:1], s4, v3
/*000000020470*/ v_add_co_ci_u32 v10, s[0:1], s5, 0, s[0:1]
/*000000020478*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020480*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020488*/ s_waitcnt       vmcnt(0)
/*00000002048c*/ v_add_nc_u16    v7, v6, 2
/*000000020494*/ v_add_nc_u32    v6, 4, v6
/*000000020498*/ global_store_byte v[0:1], v7, off
/*0000000204a0*/ global_store_byte v[9:10], v7, off
/*0000000204a8*/ global_store_byte v[4:5], v6, off
/*0000000204b0*/ s_endpgm
/*0000000204b4*/ s_nop           0x0
/*0000000204b8*/ s_nop           0x0
/*0000000204bc*/ s_nop           0x0
/*0000000204c0*/ s_nop           0x0
/*0000000204c4*/ s_nop           0x0
/*0000000204c8*/ s_nop           0x0
/*0000000204cc*/ s_nop           0x0
/*0000000204d0*/ s_nop           0x0
/*0000000204d4*/ s_nop           0x0
/*0000000204d8*/ s_nop           0x0
/*0000000204dc*/ s_nop           0x0
/*0000000204e0*/ s_nop           0x0
/*0000000204e4*/ s_nop           0x0
/*0000000204e8*/ s_nop           0x0
/*0000000204ec*/ s_nop           0x0
/*0000000204f0*/ s_nop           0x0
/*0000000204f4*/ s_nop           0x0
/*0000000204f8*/ s_nop           0x0
/*0000000204fc*/ s_nop           0x0
add_char_x_get_global_id:
.skip 256
/*000000020600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020608*/ s_waitcnt       lgkmcnt(0)
/*00000002060c*/ s_clause        0x2
/*000000020610*/ s_load_dword    s1, s[4:5], 0x20
/*000000020618*/ s_load_dword    s3, s[4:5], 0x8
/*000000020620*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000020628*/ v_lshl_or_b32   v0, s6, 4, v0
/*000000020630*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000020638*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000020640*/ s_waitcnt       lgkmcnt(0)
/*000000020644*/ v_add_nc_u32    v4, s1, v2
/*000000020648*/ v_add_nc_u32    v0, s0, v0
/*00000002064c*/ v_add_nc_u32    v3, s2, v1
/*000000020650*/ v_add_nc_u32    v11, s3, v4
/*000000020654*/ v_add_nc_u32    v6, s3, v0
/*000000020658*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020660*/ v_add_nc_u32    v9, s3, v3
/*000000020664*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002066c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020674*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000002067c*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020684*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000002068c*/ global_store_byte v[0:1], v6, off
/*000000020694*/ global_store_byte v[2:3], v9, off
/*00000002069c*/ global_store_byte v[4:5], v11, off
/*0000000206a4*/ s_endpgm
/*0000000206a8*/ s_nop           0x0
/*0000000206ac*/ s_nop           0x0
/*0000000206b0*/ s_nop           0x0
/*0000000206b4*/ s_nop           0x0
/*0000000206b8*/ s_nop           0x0
/*0000000206bc*/ s_nop           0x0
/*0000000206c0*/ s_nop           0x0
/*0000000206c4*/ s_nop           0x0
/*0000000206c8*/ s_nop           0x0
/*0000000206cc*/ s_nop           0x0
/*0000000206d0*/ s_nop           0x0
/*0000000206d4*/ s_nop           0x0
/*0000000206d8*/ s_nop           0x0
/*0000000206dc*/ s_nop           0x0
/*0000000206e0*/ s_nop           0x0
/*0000000206e4*/ s_nop           0x0
/*0000000206e8*/ s_nop           0x0
/*0000000206ec*/ s_nop           0x0
/*0000000206f0*/ s_nop           0x0
/*0000000206f4*/ s_nop           0x0
/*0000000206f8*/ s_nop           0x0
/*0000000206fc*/ s_nop           0x0
add_char_get_global_offset_get_global_id:
.skip 256
/*000000020800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020808*/ s_waitcnt       lgkmcnt(0)
/*00000002080c*/ s_clause        0x1
/*000000020810*/ s_load_dword    s1, s[4:5], 0x20
/*000000020818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020820*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020828*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000020830*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000020838*/ v_add_nc_u32    v0, s0, v0
/*00000002083c*/ v_add_nc_u32    v3, s2, v1
/*000000020840*/ s_waitcnt       lgkmcnt(0)
/*000000020844*/ v_add_nc_u32    v4, s1, v2
/*000000020848*/ v_add_nc_u32    v6, s0, v0
/*00000002084c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020854*/ v_add_nc_u32    v9, s2, v3
/*000000020858*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020860*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020868*/ v_add_nc_u32    v11, s1, v4
/*00000002086c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020874*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000002087c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020884*/ global_store_byte v[0:1], v6, off
/*00000002088c*/ global_store_byte v[2:3], v9, off
/*000000020894*/ global_store_byte v[4:5], v11, off
/*00000002089c*/ s_endpgm
/*0000000208a0*/ s_nop           0x0
/*0000000208a4*/ s_nop           0x0
/*0000000208a8*/ s_nop           0x0
/*0000000208ac*/ s_nop           0x0
/*0000000208b0*/ s_nop           0x0
/*0000000208b4*/ s_nop           0x0
/*0000000208b8*/ s_nop           0x0
/*0000000208bc*/ s_nop           0x0
/*0000000208c0*/ s_nop           0x0
/*0000000208c4*/ s_nop           0x0
/*0000000208c8*/ s_nop           0x0
/*0000000208cc*/ s_nop           0x0
/*0000000208d0*/ s_nop           0x0
/*0000000208d4*/ s_nop           0x0
/*0000000208d8*/ s_nop           0x0
/*0000000208dc*/ s_nop           0x0
/*0000000208e0*/ s_nop           0x0
/*0000000208e4*/ s_nop           0x0
/*0000000208e8*/ s_nop           0x0
/*0000000208ec*/ s_nop           0x0
/*0000000208f0*/ s_nop           0x0
/*0000000208f4*/ s_nop           0x0
/*0000000208f8*/ s_nop           0x0
/*0000000208fc*/ s_nop           0x0
add_char_get_local_id_get_global_id:
.skip 256
/*000000020a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020a08*/ s_waitcnt       lgkmcnt(0)
/*000000020a0c*/ s_clause        0x1
/*000000020a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000020a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020a20*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000020a28*/ v_lshl_or_b32   v4, s7, 2, v1
/*000000020a30*/ v_lshl_or_b32   v5, s8, 1, v2
/*000000020a38*/ v_add_nc_u32    v3, s0, v3
/*000000020a3c*/ v_add_nc_u32    v6, s2, v4
/*000000020a40*/ s_waitcnt       lgkmcnt(0)
/*000000020a44*/ v_add_nc_u32    v5, s1, v5
/*000000020a48*/ v_add_nc_u32    v10, v3, v0
/*000000020a4c*/ v_add_co_u32    v3, s[0:1], s4, v3
/*000000020a54*/ v_add_nc_u32    v15, v6, v1
/*000000020a58*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*000000020a60*/ v_add_co_u32    v0, s[0:1], s4, v6
/*000000020a68*/ v_add_nc_u32    v11, v5, v2
/*000000020a6c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020a74*/ v_add_co_u32    v5, s[0:1], s4, v5
/*000000020a7c*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*000000020a84*/ global_store_byte v[3:4], v10, off
/*000000020a8c*/ global_store_byte v[0:1], v15, off
/*000000020a94*/ global_store_byte v[5:6], v11, off
/*000000020a9c*/ s_endpgm
/*000000020aa0*/ s_nop           0x0
/*000000020aa4*/ s_nop           0x0
/*000000020aa8*/ s_nop           0x0
/*000000020aac*/ s_nop           0x0
/*000000020ab0*/ s_nop           0x0
/*000000020ab4*/ s_nop           0x0
/*000000020ab8*/ s_nop           0x0
/*000000020abc*/ s_nop           0x0
/*000000020ac0*/ s_nop           0x0
/*000000020ac4*/ s_nop           0x0
/*000000020ac8*/ s_nop           0x0
/*000000020acc*/ s_nop           0x0
/*000000020ad0*/ s_nop           0x0
/*000000020ad4*/ s_nop           0x0
/*000000020ad8*/ s_nop           0x0
/*000000020adc*/ s_nop           0x0
/*000000020ae0*/ s_nop           0x0
/*000000020ae4*/ s_nop           0x0
/*000000020ae8*/ s_nop           0x0
/*000000020aec*/ s_nop           0x0
/*000000020af0*/ s_nop           0x0
/*000000020af4*/ s_nop           0x0
/*000000020af8*/ s_nop           0x0
/*000000020afc*/ s_nop           0x0
add_char_get_group_id_get_global_id:
.skip 256
/*000000020c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020c08*/ s_waitcnt       lgkmcnt(0)
/*000000020c0c*/ s_clause        0x1
/*000000020c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000020c18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020c20*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020c28*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000020c30*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000020c38*/ v_add_nc_u32    v0, s0, v0
/*000000020c3c*/ v_add_nc_u32    v3, s2, v1
/*000000020c40*/ s_waitcnt       lgkmcnt(0)
/*000000020c44*/ v_add_nc_u32    v4, s1, v2
/*000000020c48*/ v_add_nc_u32    v6, s6, v0
/*000000020c4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020c54*/ v_add_nc_u32    v9, s7, v3
/*000000020c58*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020c60*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020c68*/ v_add_nc_u32    v11, s8, v4
/*000000020c6c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020c74*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020c7c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020c84*/ global_store_byte v[0:1], v6, off
/*000000020c8c*/ global_store_byte v[2:3], v9, off
/*000000020c94*/ global_store_byte v[4:5], v11, off
/*000000020c9c*/ s_endpgm
/*000000020ca0*/ s_nop           0x0
/*000000020ca4*/ s_nop           0x0
/*000000020ca8*/ s_nop           0x0
/*000000020cac*/ s_nop           0x0
/*000000020cb0*/ s_nop           0x0
/*000000020cb4*/ s_nop           0x0
/*000000020cb8*/ s_nop           0x0
/*000000020cbc*/ s_nop           0x0
/*000000020cc0*/ s_nop           0x0
/*000000020cc4*/ s_nop           0x0
/*000000020cc8*/ s_nop           0x0
/*000000020ccc*/ s_nop           0x0
/*000000020cd0*/ s_nop           0x0
/*000000020cd4*/ s_nop           0x0
/*000000020cd8*/ s_nop           0x0
/*000000020cdc*/ s_nop           0x0
/*000000020ce0*/ s_nop           0x0
/*000000020ce4*/ s_nop           0x0
/*000000020ce8*/ s_nop           0x0
/*000000020cec*/ s_nop           0x0
/*000000020cf0*/ s_nop           0x0
/*000000020cf4*/ s_nop           0x0
/*000000020cf8*/ s_nop           0x0
/*000000020cfc*/ s_nop           0x0
add_char_get_local_size_get_global_id:
.skip 256
/*000000020e00*/ s_clause        0x2
/*000000020e04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020e0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000020e14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020e1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020e24*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000020e2c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000020e34*/ s_waitcnt       lgkmcnt(0)
/*000000020e38*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000020e40*/ v_add_co_u32    v3, s[0:1], s2, v1
/*000000020e48*/ v_add_co_u32    v4, s[0:1], s10, v2
/*000000020e50*/ v_add_nc_u16    v6, v0, 2
/*000000020e58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020e60*/ v_add_nc_u16    v9, v3, 2
/*000000020e68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020e70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020e78*/ v_add_nc_u16    v11, v4, 4
/*000000020e80*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020e88*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020e90*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020e98*/ global_store_byte v[0:1], v6, off
/*000000020ea0*/ global_store_byte v[2:3], v9, off
/*000000020ea8*/ global_store_byte v[4:5], v11, off
/*000000020eb0*/ s_endpgm
/*000000020eb4*/ s_nop           0x0
/*000000020eb8*/ s_nop           0x0
/*000000020ebc*/ s_nop           0x0
/*000000020ec0*/ s_nop           0x0
/*000000020ec4*/ s_nop           0x0
/*000000020ec8*/ s_nop           0x0
/*000000020ecc*/ s_nop           0x0
/*000000020ed0*/ s_nop           0x0
/*000000020ed4*/ s_nop           0x0
/*000000020ed8*/ s_nop           0x0
/*000000020edc*/ s_nop           0x0
/*000000020ee0*/ s_nop           0x0
/*000000020ee4*/ s_nop           0x0
/*000000020ee8*/ s_nop           0x0
/*000000020eec*/ s_nop           0x0
/*000000020ef0*/ s_nop           0x0
/*000000020ef4*/ s_nop           0x0
/*000000020ef8*/ s_nop           0x0
/*000000020efc*/ s_nop           0x0
add_char_get_global_id_get_global_id:
.skip 256
/*000000021000*/ s_clause        0x2
/*000000021004*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000002100c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000021014*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000002101c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000021024*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000002102c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000021034*/ s_waitcnt       lgkmcnt(0)
/*000000021038*/ v_add_nc_u32    v3, s0, v0
/*00000002103c*/ v_add_co_u32    v4, s[0:1], s2, v1
/*000000021044*/ v_add_co_u32    v5, s[0:1], s10, v2
/*00000002104c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021054*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002105c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*000000021064*/ v_lshlrev_b16   v6, 1, v3
/*00000002106c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021074*/ v_lshlrev_b16   v9, 1, v4
/*00000002107c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000021084*/ v_lshlrev_b16   v11, 1, v5
/*00000002108c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021094*/ global_store_byte v[0:1], v6, off
/*00000002109c*/ global_store_byte v[2:3], v9, off
/*0000000210a4*/ global_store_byte v[4:5], v11, off
/*0000000210ac*/ s_endpgm
/*0000000210b0*/ s_nop           0x0
/*0000000210b4*/ s_nop           0x0
/*0000000210b8*/ s_nop           0x0
/*0000000210bc*/ s_nop           0x0
/*0000000210c0*/ s_nop           0x0
/*0000000210c4*/ s_nop           0x0
/*0000000210c8*/ s_nop           0x0
/*0000000210cc*/ s_nop           0x0
/*0000000210d0*/ s_nop           0x0
/*0000000210d4*/ s_nop           0x0
/*0000000210d8*/ s_nop           0x0
/*0000000210dc*/ s_nop           0x0
/*0000000210e0*/ s_nop           0x0
/*0000000210e4*/ s_nop           0x0
/*0000000210e8*/ s_nop           0x0
/*0000000210ec*/ s_nop           0x0
/*0000000210f0*/ s_nop           0x0
/*0000000210f4*/ s_nop           0x0
/*0000000210f8*/ s_nop           0x0
/*0000000210fc*/ s_nop           0x0
add_char_get_global_size_get_global_id:
.skip 256
/*000000021200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021208*/ s_waitcnt       lgkmcnt(0)
/*00000002120c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021214*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002121c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000021224*/ v_lshl_or_b32   v0, s8, 4, v0
/*00000002122c*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000021234*/ v_lshl_or_b32   v2, s10, 1, v2
/*00000002123c*/ s_waitcnt       lgkmcnt(0)
/*000000021240*/ v_add_nc_u32    v4, s1, v2
/*000000021244*/ v_add_nc_u32    v0, s0, v0
/*000000021248*/ v_add_nc_u32    v3, s2, v1
/*00000002124c*/ v_add_nc_u32    v11, s14, v4
/*000000021250*/ v_add_nc_u32    v6, s12, v0
/*000000021254*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000002125c*/ v_add_nc_u32    v9, s13, v3
/*000000021260*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021268*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000021270*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021278*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000021280*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021288*/ global_store_byte v[0:1], v6, off
/*000000021290*/ global_store_byte v[2:3], v9, off
/*000000021298*/ global_store_byte v[4:5], v11, off
/*0000000212a0*/ s_endpgm
/*0000000212a4*/ s_nop           0x0
/*0000000212a8*/ s_nop           0x0
/*0000000212ac*/ s_nop           0x0
/*0000000212b0*/ s_nop           0x0
/*0000000212b4*/ s_nop           0x0
/*0000000212b8*/ s_nop           0x0
/*0000000212bc*/ s_nop           0x0
/*0000000212c0*/ s_nop           0x0
/*0000000212c4*/ s_nop           0x0
/*0000000212c8*/ s_nop           0x0
/*0000000212cc*/ s_nop           0x0
/*0000000212d0*/ s_nop           0x0
/*0000000212d4*/ s_nop           0x0
/*0000000212d8*/ s_nop           0x0
/*0000000212dc*/ s_nop           0x0
/*0000000212e0*/ s_nop           0x0
/*0000000212e4*/ s_nop           0x0
/*0000000212e8*/ s_nop           0x0
/*0000000212ec*/ s_nop           0x0
/*0000000212f0*/ s_nop           0x0
/*0000000212f4*/ s_nop           0x0
/*0000000212f8*/ s_nop           0x0
/*0000000212fc*/ s_nop           0x0
add_char_get_num_groups_get_global_id:
.skip 256
/*000000021400*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021408*/ s_waitcnt       lgkmcnt(0)
/*00000002140c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021414*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002141c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000021424*/ v_lshl_or_b32   v2, s10, 2, v2
/*00000002142c*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000021434*/ v_lshl_or_b32   v1, s9, 1, v1
/*00000002143c*/ s_waitcnt       lgkmcnt(0)
/*000000021440*/ v_add_nc_u32    v4, s1, v2
/*000000021444*/ s_and_b32       s1, s12, -2
/*000000021448*/ v_add_nc_u32    v0, s0, v0
/*00000002144c*/ v_cmp_gt_u32    vcc, s12, s1
/*000000021454*/ s_lshr_b32      s0, s12, 1
/*000000021458*/ s_and_b32       s3, s13, -2
/*00000002145c*/ v_add_nc_u32    v3, s2, v1
/*000000021460*/ s_lshr_b32      s2, s13, 1
/*000000021464*/ v_add_co_ci_u32 v6, vcc, s0, v0, vcc
/*000000021468*/ v_cmp_gt_u32    vcc, s13, s3
/*000000021470*/ s_and_b32       s7, s14, -4
/*000000021474*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000002147c*/ s_lshr_b32      s6, s14, 2
/*000000021480*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021488*/ v_add_co_ci_u32 v9, vcc, s2, v3, vcc
/*00000002148c*/ v_cmp_gt_u32    vcc, s14, s7
/*000000021494*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000002149c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*0000000214a4*/ v_add_co_ci_u32 v11, vcc, s6, v4, vcc
/*0000000214a8*/ v_add_co_u32    v4, s[0:1], s4, v4
/*0000000214b0*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*0000000214b8*/ global_store_byte v[0:1], v6, off
/*0000000214c0*/ global_store_byte v[2:3], v9, off
/*0000000214c8*/ global_store_byte v[4:5], v11, off
/*0000000214d0*/ s_endpgm
/*0000000214d4*/ s_nop           0x0
/*0000000214d8*/ s_nop           0x0
/*0000000214dc*/ s_nop           0x0
/*0000000214e0*/ s_nop           0x0
/*0000000214e4*/ s_nop           0x0
/*0000000214e8*/ s_nop           0x0
/*0000000214ec*/ s_nop           0x0
/*0000000214f0*/ s_nop           0x0
/*0000000214f4*/ s_nop           0x0
/*0000000214f8*/ s_nop           0x0
/*0000000214fc*/ s_nop           0x0
add_char_get_work_dim_get_global_id:
.skip 256
/*000000021600*/ v_mov_b32       v3, s4
/*000000021604*/ v_mov_b32       v4, s5
/*000000021608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021610*/ s_waitcnt       lgkmcnt(0)
/*000000021614*/ s_clause        0x1
/*000000021618*/ s_load_dword    s1, s[6:7], 0x20
/*000000021620*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000021628*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000021630*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000021638*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000021640*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000021648*/ v_add_nc_u32    v7, s0, v0
/*00000002164c*/ v_add_nc_u32    v8, s2, v1
/*000000021650*/ s_waitcnt       lgkmcnt(0)
/*000000021654*/ v_add_nc_u32    v9, s1, v2
/*000000021658*/ v_add_co_u32    v0, s[0:1], s4, v7
/*000000021660*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021668*/ v_add_co_u32    v2, s[0:1], s4, v8
/*000000021670*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021678*/ v_add_co_u32    v4, s[0:1], s4, v9
/*000000021680*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021688*/ s_waitcnt       vmcnt(0)
/*00000002168c*/ v_add_nc_u32    v7, v7, v6
/*000000021690*/ v_add_nc_u32    v8, v8, v6
/*000000021694*/ v_add_nc_u32    v6, v9, v6
/*000000021698*/ global_store_byte v[0:1], v7, off
/*0000000216a0*/ global_store_byte v[2:3], v8, off
/*0000000216a8*/ global_store_byte v[4:5], v6, off
/*0000000216b0*/ s_endpgm
/*0000000216b4*/ s_nop           0x0
/*0000000216b8*/ s_nop           0x0
/*0000000216bc*/ s_nop           0x0
/*0000000216c0*/ s_nop           0x0
/*0000000216c4*/ s_nop           0x0
/*0000000216c8*/ s_nop           0x0
/*0000000216cc*/ s_nop           0x0
/*0000000216d0*/ s_nop           0x0
/*0000000216d4*/ s_nop           0x0
/*0000000216d8*/ s_nop           0x0
/*0000000216dc*/ s_nop           0x0
/*0000000216e0*/ s_nop           0x0
/*0000000216e4*/ s_nop           0x0
/*0000000216e8*/ s_nop           0x0
/*0000000216ec*/ s_nop           0x0
/*0000000216f0*/ s_nop           0x0
/*0000000216f4*/ s_nop           0x0
/*0000000216f8*/ s_nop           0x0
/*0000000216fc*/ s_nop           0x0
add_char_x_get_global_size:
.skip 256
/*000000021800*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021808*/ s_waitcnt       lgkmcnt(0)
/*00000002180c*/ s_clause        0x1
/*000000021810*/ s_load_dword    s1, s[6:7], 0x8
/*000000021818*/ s_load_dword    s3, s[6:7], 0x20
/*000000021820*/ s_clause        0x1
/*000000021824*/ s_load_dword    s11, s[4:5], 0xc
/*00000002182c*/ s_load_dword    s12, s[4:5], 0x10
/*000000021834*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*00000002183c*/ s_load_dword    s4, s[4:5], 0x14
/*000000021844*/ s_lshl_b32      s5, s8, 4
/*000000021848*/ s_lshl_b32      s8, s9, 1
/*00000002184c*/ s_lshl_b32      s9, s10, 1
/*000000021850*/ s_waitcnt       lgkmcnt(0)
/*000000021854*/ v_add3_u32      v4, s3, s9, v2
/*00000002185c*/ v_add3_u32      v0, s0, s5, v0
/*000000021864*/ v_add3_u32      v3, s2, s8, v1
/*00000002186c*/ s_add_i32       s0, s11, s1
/*000000021870*/ s_add_i32       s2, s12, s1
/*000000021874*/ v_mov_b32       v6, s0
/*000000021878*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000021880*/ v_mov_b32       v9, s2
/*000000021884*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*00000002188c*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000021894*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*00000002189c*/ s_add_i32       s0, s4, s1
/*0000000218a0*/ v_add_co_u32    v4, s[1:2], s6, v4
/*0000000218a8*/ v_mov_b32       v11, s0
/*0000000218ac*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*0000000218b4*/ global_store_byte v[0:1], v6, off
/*0000000218bc*/ global_store_byte v[2:3], v9, off
/*0000000218c4*/ global_store_byte v[4:5], v11, off
/*0000000218cc*/ s_endpgm
/*0000000218d0*/ s_nop           0x0
/*0000000218d4*/ s_nop           0x0
/*0000000218d8*/ s_nop           0x0
/*0000000218dc*/ s_nop           0x0
/*0000000218e0*/ s_nop           0x0
/*0000000218e4*/ s_nop           0x0
/*0000000218e8*/ s_nop           0x0
/*0000000218ec*/ s_nop           0x0
/*0000000218f0*/ s_nop           0x0
/*0000000218f4*/ s_nop           0x0
/*0000000218f8*/ s_nop           0x0
/*0000000218fc*/ s_nop           0x0
add_char_get_global_offset_get_global_size:
.skip 256
/*000000021a00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021a08*/ s_waitcnt       lgkmcnt(0)
/*000000021a0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021a14*/ s_clause        0x1
/*000000021a18*/ s_load_dword    s3, s[4:5], 0xc
/*000000021a20*/ s_load_dword    s11, s[4:5], 0x10
/*000000021a28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000021a30*/ s_load_dword    s4, s[4:5], 0x14
/*000000021a38*/ s_lshl_b32      s5, s8, 1
/*000000021a3c*/ s_lshl_b32      s8, s9, 4
/*000000021a40*/ s_lshl_b32      s9, s10, 1
/*000000021a44*/ s_waitcnt       lgkmcnt(0)
/*000000021a48*/ v_add3_u32      v4, s1, s9, v2
/*000000021a50*/ v_add3_u32      v0, s0, s5, v0
/*000000021a58*/ v_add3_u32      v3, s2, s8, v1
/*000000021a60*/ s_add_i32       s0, s0, s3
/*000000021a64*/ s_add_i32       s2, s2, s11
/*000000021a68*/ v_mov_b32       v6, s0
/*000000021a6c*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000021a74*/ v_mov_b32       v9, s2
/*000000021a78*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000021a80*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000021a88*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000021a90*/ s_add_i32       s0, s1, s4
/*000000021a94*/ v_add_co_u32    v4, s[1:2], s6, v4
/*000000021a9c*/ v_mov_b32       v11, s0
/*000000021aa0*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*000000021aa8*/ global_store_byte v[0:1], v6, off
/*000000021ab0*/ global_store_byte v[2:3], v9, off
/*000000021ab8*/ global_store_byte v[4:5], v11, off
/*000000021ac0*/ s_endpgm
/*000000021ac4*/ s_nop           0x0
/*000000021ac8*/ s_nop           0x0
/*000000021acc*/ s_nop           0x0
/*000000021ad0*/ s_nop           0x0
/*000000021ad4*/ s_nop           0x0
/*000000021ad8*/ s_nop           0x0
/*000000021adc*/ s_nop           0x0
/*000000021ae0*/ s_nop           0x0
/*000000021ae4*/ s_nop           0x0
/*000000021ae8*/ s_nop           0x0
/*000000021aec*/ s_nop           0x0
/*000000021af0*/ s_nop           0x0
/*000000021af4*/ s_nop           0x0
/*000000021af8*/ s_nop           0x0
/*000000021afc*/ s_nop           0x0
add_char_get_local_id_get_global_size:
.skip 256
/*000000021c00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021c08*/ s_waitcnt       lgkmcnt(0)
/*000000021c0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021c14*/ s_clause        0x1
/*000000021c18*/ s_load_dword    s3, s[4:5], 0xc
/*000000021c20*/ s_load_dword    s11, s[4:5], 0x10
/*000000021c28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000021c30*/ s_load_dword    s4, s[4:5], 0x14
/*000000021c38*/ s_lshl_b32      s5, s8, 3
/*000000021c3c*/ s_lshl_b32      s8, s9, 2
/*000000021c40*/ s_lshl_b32      s9, s10, 1
/*000000021c44*/ s_waitcnt       lgkmcnt(0)
/*000000021c48*/ v_add3_u32      v5, s1, s9, v2
/*000000021c50*/ v_add_nc_u16    v7, s3, v0
/*000000021c58*/ v_add_nc_u16    v10, s11, v1
/*000000021c60*/ v_add3_u32      v3, s0, s5, v0
/*000000021c68*/ v_add3_u32      v4, s2, s8, v1
/*000000021c70*/ v_add_nc_u16    v11, s4, v2
/*000000021c78*/ v_add_co_u32    v0, s[0:1], s6, v3
/*000000021c80*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000021c88*/ v_add_co_u32    v3, s[0:1], s6, v4
/*000000021c90*/ v_add_co_ci_u32 v4, s[0:1], s7, 0, s[0:1]
/*000000021c98*/ v_add_co_u32    v5, s[0:1], s6, v5
/*000000021ca0*/ v_add_co_ci_u32 v6, s[0:1], s7, 0, s[0:1]
/*000000021ca8*/ global_store_byte v[0:1], v7, off
/*000000021cb0*/ global_store_byte v[3:4], v10, off
/*000000021cb8*/ global_store_byte v[5:6], v11, off
/*000000021cc0*/ s_endpgm
/*000000021cc4*/ s_nop           0x0
/*000000021cc8*/ s_nop           0x0
/*000000021ccc*/ s_nop           0x0
/*000000021cd0*/ s_nop           0x0
/*000000021cd4*/ s_nop           0x0
/*000000021cd8*/ s_nop           0x0
/*000000021cdc*/ s_nop           0x0
/*000000021ce0*/ s_nop           0x0
/*000000021ce4*/ s_nop           0x0
/*000000021ce8*/ s_nop           0x0
/*000000021cec*/ s_nop           0x0
/*000000021cf0*/ s_nop           0x0
/*000000021cf4*/ s_nop           0x0
/*000000021cf8*/ s_nop           0x0
/*000000021cfc*/ s_nop           0x0
add_char_get_group_id_get_global_size:
.skip 256
/*000000021e00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021e08*/ s_waitcnt       lgkmcnt(0)
/*000000021e0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000021e14*/ s_clause        0x1
/*000000021e18*/ s_load_dword    s3, s[4:5], 0xc
/*000000021e20*/ s_load_dword    s11, s[4:5], 0x10
/*000000021e28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000021e30*/ s_load_dword    s4, s[4:5], 0x14
/*000000021e38*/ s_lshl_b32      s5, s8, 1
/*000000021e3c*/ s_lshl_b32      s12, s9, 4
/*000000021e40*/ s_lshl_b32      s13, s10, 1
/*000000021e44*/ s_waitcnt       lgkmcnt(0)
/*000000021e48*/ v_add3_u32      v4, s1, s13, v2
/*000000021e50*/ s_add_i32       s1, s11, s9
/*000000021e54*/ v_add3_u32      v0, s0, s5, v0
/*000000021e5c*/ s_add_i32       s0, s3, s8
/*000000021e60*/ v_add3_u32      v3, s2, s12, v1
/*000000021e68*/ v_mov_b32       v6, s0
/*000000021e6c*/ v_mov_b32       v9, s1
/*000000021e70*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000021e78*/ v_add_co_u32    v4, s[1:2], s6, v4
/*000000021e80*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000021e88*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000021e90*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*000000021e98*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000021ea0*/ s_add_i32       s0, s4, s10
/*000000021ea4*/ v_mov_b32       v11, s0
/*000000021ea8*/ global_store_byte v[0:1], v6, off
/*000000021eb0*/ global_store_byte v[2:3], v9, off
/*000000021eb8*/ global_store_byte v[4:5], v11, off
/*000000021ec0*/ s_endpgm
/*000000021ec4*/ s_nop           0x0
/*000000021ec8*/ s_nop           0x0
/*000000021ecc*/ s_nop           0x0
/*000000021ed0*/ s_nop           0x0
/*000000021ed4*/ s_nop           0x0
/*000000021ed8*/ s_nop           0x0
/*000000021edc*/ s_nop           0x0
/*000000021ee0*/ s_nop           0x0
/*000000021ee4*/ s_nop           0x0
/*000000021ee8*/ s_nop           0x0
/*000000021eec*/ s_nop           0x0
/*000000021ef0*/ s_nop           0x0
/*000000021ef4*/ s_nop           0x0
/*000000021ef8*/ s_nop           0x0
/*000000021efc*/ s_nop           0x0
add_char_get_local_size_get_global_size:
.skip 256
/*000000022000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022008*/ s_waitcnt       lgkmcnt(0)
/*00000002200c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002201c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022024*/ s_lshl_b32      s3, s8, 1
/*000000022028*/ s_lshl_b32      s6, s9, 1
/*00000002202c*/ s_lshl_b32      s7, s10, 2
/*000000022030*/ s_waitcnt       lgkmcnt(0)
/*000000022034*/ v_add3_u32      v4, s1, s7, v2
/*00000002203c*/ v_add3_u32      v0, s0, s3, v0
/*000000022044*/ s_add_i32       s0, s12, 2
/*000000022048*/ v_add3_u32      v3, s2, s6, v1
/*000000022050*/ v_mov_b32       v6, s0
/*000000022054*/ s_add_i32       s1, s13, 2
/*000000022058*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000022060*/ v_mov_b32       v9, s1
/*000000022064*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002206c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000022074*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000002207c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000022084*/ s_add_i32       s0, s14, 4
/*000000022088*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000022090*/ v_mov_b32       v11, s0
/*000000022094*/ global_store_byte v[0:1], v6, off
/*00000002209c*/ global_store_byte v[2:3], v9, off
/*0000000220a4*/ global_store_byte v[4:5], v11, off
/*0000000220ac*/ s_endpgm
/*0000000220b0*/ s_nop           0x0
/*0000000220b4*/ s_nop           0x0
/*0000000220b8*/ s_nop           0x0
/*0000000220bc*/ s_nop           0x0
/*0000000220c0*/ s_nop           0x0
/*0000000220c4*/ s_nop           0x0
/*0000000220c8*/ s_nop           0x0
/*0000000220cc*/ s_nop           0x0
/*0000000220d0*/ s_nop           0x0
/*0000000220d4*/ s_nop           0x0
/*0000000220d8*/ s_nop           0x0
/*0000000220dc*/ s_nop           0x0
/*0000000220e0*/ s_nop           0x0
/*0000000220e4*/ s_nop           0x0
/*0000000220e8*/ s_nop           0x0
/*0000000220ec*/ s_nop           0x0
/*0000000220f0*/ s_nop           0x0
/*0000000220f4*/ s_nop           0x0
/*0000000220f8*/ s_nop           0x0
/*0000000220fc*/ s_nop           0x0
add_char_get_global_id_get_global_size:
.skip 256
/*000000022200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022208*/ s_waitcnt       lgkmcnt(0)
/*00000002220c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022214*/ s_load_dword    s3, s[4:5], 0xc
/*00000002221c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022224*/ s_clause        0x1
/*000000022228*/ s_load_dword    s11, s[4:5], 0x10
/*000000022230*/ s_load_dword    s4, s[4:5], 0x14
/*000000022238*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000022240*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000022248*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000022250*/ s_waitcnt       lgkmcnt(0)
/*000000022254*/ v_add_nc_u32    v4, s1, v2
/*000000022258*/ v_add_nc_u32    v3, s2, v1
/*00000002225c*/ v_add3_u32      v6, s3, s0, v0
/*000000022264*/ v_add_co_u32    v0, s[0:1], s6, v0
/*00000002226c*/ v_add_nc_u32    v11, s4, v4
/*000000022270*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000022278*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000022280*/ v_add_nc_u32    v9, s11, v3
/*000000022284*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*00000002228c*/ v_add_co_u32    v4, s[0:1], s6, v4
/*000000022294*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*00000002229c*/ global_store_byte v[0:1], v6, off
/*0000000222a4*/ global_store_byte v[2:3], v9, off
/*0000000222ac*/ global_store_byte v[4:5], v11, off
/*0000000222b4*/ s_endpgm
/*0000000222b8*/ s_nop           0x0
/*0000000222bc*/ s_nop           0x0
/*0000000222c0*/ s_nop           0x0
/*0000000222c4*/ s_nop           0x0
/*0000000222c8*/ s_nop           0x0
/*0000000222cc*/ s_nop           0x0
/*0000000222d0*/ s_nop           0x0
/*0000000222d4*/ s_nop           0x0
/*0000000222d8*/ s_nop           0x0
/*0000000222dc*/ s_nop           0x0
/*0000000222e0*/ s_nop           0x0
/*0000000222e4*/ s_nop           0x0
/*0000000222e8*/ s_nop           0x0
/*0000000222ec*/ s_nop           0x0
/*0000000222f0*/ s_nop           0x0
/*0000000222f4*/ s_nop           0x0
/*0000000222f8*/ s_nop           0x0
/*0000000222fc*/ s_nop           0x0
add_char_get_global_size_get_global_size:
.skip 256
/*000000022400*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022408*/ s_waitcnt       lgkmcnt(0)
/*00000002240c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022414*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002241c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000022424*/ s_lshl_b32      s3, s8, 4
/*000000022428*/ s_lshl_b32      s6, s9, 1
/*00000002242c*/ s_lshl_b32      s7, s10, 1
/*000000022430*/ s_waitcnt       lgkmcnt(0)
/*000000022434*/ v_add3_u32      v4, s1, s7, v2
/*00000002243c*/ v_add3_u32      v0, s0, s3, v0
/*000000022444*/ s_lshl_b32      s0, s12, 1
/*000000022448*/ v_add3_u32      v3, s2, s6, v1
/*000000022450*/ v_mov_b32       v6, s0
/*000000022454*/ s_lshl_b32      s1, s13, 1
/*000000022458*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000022460*/ v_mov_b32       v9, s1
/*000000022464*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002246c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000022474*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000002247c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000022484*/ s_lshl_b32      s0, s14, 1
/*000000022488*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000022490*/ v_mov_b32       v11, s0
/*000000022494*/ global_store_byte v[0:1], v6, off
/*00000002249c*/ global_store_byte v[2:3], v9, off
/*0000000224a4*/ global_store_byte v[4:5], v11, off
/*0000000224ac*/ s_endpgm
/*0000000224b0*/ s_nop           0x0
/*0000000224b4*/ s_nop           0x0
/*0000000224b8*/ s_nop           0x0
/*0000000224bc*/ s_nop           0x0
/*0000000224c0*/ s_nop           0x0
/*0000000224c4*/ s_nop           0x0
/*0000000224c8*/ s_nop           0x0
/*0000000224cc*/ s_nop           0x0
/*0000000224d0*/ s_nop           0x0
/*0000000224d4*/ s_nop           0x0
/*0000000224d8*/ s_nop           0x0
/*0000000224dc*/ s_nop           0x0
/*0000000224e0*/ s_nop           0x0
/*0000000224e4*/ s_nop           0x0
/*0000000224e8*/ s_nop           0x0
/*0000000224ec*/ s_nop           0x0
/*0000000224f0*/ s_nop           0x0
/*0000000224f4*/ s_nop           0x0
/*0000000224f8*/ s_nop           0x0
/*0000000224fc*/ s_nop           0x0
add_char_get_num_groups_get_global_size:
.skip 256
/*000000022600*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022608*/ s_waitcnt       lgkmcnt(0)
/*00000002260c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022614*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002261c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022624*/ s_lshl_b32      s7, s10, 2
/*000000022628*/ s_lshl_b32      s3, s8, 1
/*00000002262c*/ s_lshl_b32      s6, s9, 1
/*000000022630*/ s_waitcnt       lgkmcnt(0)
/*000000022634*/ v_add3_u32      v4, s1, s7, v2
/*00000002263c*/ s_and_b32       s1, s12, -2
/*000000022640*/ v_add3_u32      v0, s0, s3, v0
/*000000022648*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000022650*/ s_and_b32       s3, s13, -2
/*000000022654*/ v_add3_u32      v3, s2, s6, v1
/*00000002265c*/ v_cmp_gt_u32    s[3:4], s13, s3
/*000000022664*/ s_lshr_b32      s0, s12, 1
/*000000022668*/ s_lshr_b32      s2, s13, 1
/*00000002266c*/ s_lshr_b32      s6, s14, 2
/*000000022670*/ s_and_b32       s7, s14, -4
/*000000022674*/ s_cmpk_lg_u32   s1, 0x0
/*000000022678*/ v_cmp_gt_u32    s[1:2], s14, s7
/*000000022680*/ s_addc_u32      s0, s12, s0
/*000000022684*/ s_cmpk_lg_u32   s3, 0x0
/*000000022688*/ v_mov_b32       v6, s0
/*00000002268c*/ s_addc_u32      s0, s13, s2
/*000000022690*/ v_add_co_u32    v0, s[7:8], s4, v0
/*000000022698*/ s_cmpk_lg_u32   s1, 0x0
/*00000002269c*/ v_add_co_u32    v2, s[2:3], s4, v3
/*0000000226a4*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000226ac*/ v_mov_b32       v9, s0
/*0000000226b0*/ s_addc_u32      s0, s14, s6
/*0000000226b4*/ v_add_co_ci_u32 v1, s[7:8], s5, 0, s[7:8]
/*0000000226bc*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*0000000226c4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000226cc*/ v_mov_b32       v11, s0
/*0000000226d0*/ global_store_byte v[0:1], v6, off
/*0000000226d8*/ global_store_byte v[2:3], v9, off
/*0000000226e0*/ global_store_byte v[4:5], v11, off
/*0000000226e8*/ s_endpgm
/*0000000226ec*/ s_nop           0x0
/*0000000226f0*/ s_nop           0x0
/*0000000226f4*/ s_nop           0x0
/*0000000226f8*/ s_nop           0x0
/*0000000226fc*/ s_nop           0x0
add_char_get_work_dim_get_global_size:
.skip 256
/*000000022800*/ v_mov_b32       v3, s4
/*000000022804*/ v_mov_b32       v4, s5
/*000000022808*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022810*/ s_waitcnt       lgkmcnt(0)
/*000000022814*/ s_clause        0x1
/*000000022818*/ s_load_dword    s1, s[6:7], 0x20
/*000000022820*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022828*/ s_lshl_b32      s3, s8, 1
/*00000002282c*/ s_lshl_b32      s8, s9, 1
/*000000022830*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000022838*/ s_clause        0x2
/*00000002283c*/ s_load_dword    s9, s[4:5], 0xc
/*000000022844*/ s_load_dword    s11, s[4:5], 0x10
/*00000002284c*/ s_load_dword    s4, s[4:5], 0x14
/*000000022854*/ v_add3_u32      v0, s0, s3, v0
/*00000002285c*/ s_lshl_b32      s0, s10, 2
/*000000022860*/ v_add3_u32      v3, s2, s8, v1
/*000000022868*/ s_waitcnt       lgkmcnt(0)
/*00000002286c*/ v_add3_u32      v4, s1, s0, v2
/*000000022874*/ v_add_co_u32    v0, s[0:1], s6, v0
/*00000002287c*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000022884*/ v_add_co_u32    v2, s[0:1], s6, v3
/*00000002288c*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000022894*/ v_add_co_u32    v4, s[0:1], s6, v4
/*00000002289c*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*0000000228a4*/ s_waitcnt       vmcnt(0)
/*0000000228a8*/ v_and_b32       v7, 0xffff, v6
/*0000000228b0*/ v_add_nc_u32    v6, s4, v6
/*0000000228b4*/ v_add_nc_u32    v11, s9, v7
/*0000000228b8*/ v_add_nc_u32    v9, s11, v7
/*0000000228bc*/ global_store_byte v[0:1], v11, off
/*0000000228c4*/ global_store_byte v[2:3], v9, off
/*0000000228cc*/ global_store_byte v[4:5], v6, off
/*0000000228d4*/ s_endpgm
/*0000000228d8*/ s_nop           0x0
/*0000000228dc*/ s_nop           0x0
/*0000000228e0*/ s_nop           0x0
/*0000000228e4*/ s_nop           0x0
/*0000000228e8*/ s_nop           0x0
/*0000000228ec*/ s_nop           0x0
/*0000000228f0*/ s_nop           0x0
/*0000000228f4*/ s_nop           0x0
/*0000000228f8*/ s_nop           0x0
/*0000000228fc*/ s_nop           0x0
add_char_x_get_num_groups:
.skip 256
/*000000022a00*/ s_load_dword    s11, s[4:5], 0xc
/*000000022a08*/ s_load_dword    s12, s[6:7], 0x8
/*000000022a10*/ s_load_dword    s13, s[4:5], 0x10
/*000000022a18*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022a20*/ s_waitcnt       lgkmcnt(0)
/*000000022a24*/ s_load_dword    s1, s[6:7], 0x20
/*000000022a2c*/ s_load_dword    s3, s[4:5], 0x14
/*000000022a34*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000022a3c*/ s_lshl_b32      s7, s8, 4
/*000000022a40*/ s_lshl_b32      s8, s9, 1
/*000000022a44*/ s_lshl_b32      s9, s10, 1
/*000000022a48*/ s_and_b32       s14, s11, -16
/*000000022a4c*/ s_lshr_b32      s10, s11, 4
/*000000022a50*/ v_cmp_gt_u32    s[6:7], s11, s14
/*000000022a58*/ v_add3_u32      v0, s0, s7, v0
/*000000022a60*/ v_add3_u32      v3, s2, s8, v1
/*000000022a68*/ s_waitcnt       lgkmcnt(0)
/*000000022a6c*/ v_add3_u32      v4, s1, s9, v2
/*000000022a74*/ s_cmpk_lg_u32   s6, 0x0
/*000000022a78*/ v_add_co_u32    v0, s[2:3], s4, v0
/*000000022a80*/ s_addc_u32      s6, s12, s10
/*000000022a84*/ s_and_b32       s10, s13, -2
/*000000022a88*/ s_lshr_b32      s0, s13, 1
/*000000022a8c*/ v_cmp_gt_u32    s[10:11], s13, s10
/*000000022a94*/ v_add_co_ci_u32 v1, s[2:3], s5, 0, s[2:3]
/*000000022a9c*/ v_add_co_u32    v2, s[2:3], s4, v3
/*000000022aa4*/ v_mov_b32       v6, s6
/*000000022aa8*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*000000022ab0*/ s_cmpk_lg_u32   s10, 0x0
/*000000022ab4*/ s_addc_u32      s0, s12, s0
/*000000022ab8*/ s_and_b32       s1, s3, -2
/*000000022abc*/ s_lshr_b32      s2, s3, 1
/*000000022ac0*/ v_cmp_gt_u32    s[1:2], s3, s1
/*000000022ac8*/ v_mov_b32       v9, s0
/*000000022acc*/ s_cmpk_lg_u32   s1, 0x0
/*000000022ad0*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000022ad8*/ s_addc_u32      s0, s12, s2
/*000000022adc*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000022ae4*/ v_mov_b32       v11, s0
/*000000022ae8*/ global_store_byte v[0:1], v6, off
/*000000022af0*/ global_store_byte v[2:3], v9, off
/*000000022af8*/ global_store_byte v[4:5], v11, off
/*000000022b00*/ s_endpgm
/*000000022b04*/ s_nop           0x0
/*000000022b08*/ s_nop           0x0
/*000000022b0c*/ s_nop           0x0
/*000000022b10*/ s_nop           0x0
/*000000022b14*/ s_nop           0x0
/*000000022b18*/ s_nop           0x0
/*000000022b1c*/ s_nop           0x0
/*000000022b20*/ s_nop           0x0
/*000000022b24*/ s_nop           0x0
/*000000022b28*/ s_nop           0x0
/*000000022b2c*/ s_nop           0x0
/*000000022b30*/ s_nop           0x0
/*000000022b34*/ s_nop           0x0
/*000000022b38*/ s_nop           0x0
/*000000022b3c*/ s_nop           0x0
/*000000022b40*/ s_nop           0x0
/*000000022b44*/ s_nop           0x0
/*000000022b48*/ s_nop           0x0
/*000000022b4c*/ s_nop           0x0
/*000000022b50*/ s_nop           0x0
/*000000022b54*/ s_nop           0x0
/*000000022b58*/ s_nop           0x0
/*000000022b5c*/ s_nop           0x0
/*000000022b60*/ s_nop           0x0
/*000000022b64*/ s_nop           0x0
/*000000022b68*/ s_nop           0x0
/*000000022b6c*/ s_nop           0x0
/*000000022b70*/ s_nop           0x0
/*000000022b74*/ s_nop           0x0
/*000000022b78*/ s_nop           0x0
/*000000022b7c*/ s_nop           0x0
/*000000022b80*/ s_nop           0x0
/*000000022b84*/ s_nop           0x0
/*000000022b88*/ s_nop           0x0
/*000000022b8c*/ s_nop           0x0
/*000000022b90*/ s_nop           0x0
/*000000022b94*/ s_nop           0x0
/*000000022b98*/ s_nop           0x0
/*000000022b9c*/ s_nop           0x0
/*000000022ba0*/ s_nop           0x0
/*000000022ba4*/ s_nop           0x0
/*000000022ba8*/ s_nop           0x0
/*000000022bac*/ s_nop           0x0
/*000000022bb0*/ s_nop           0x0
/*000000022bb4*/ s_nop           0x0
/*000000022bb8*/ s_nop           0x0
/*000000022bbc*/ s_nop           0x0
/*000000022bc0*/ s_nop           0x0
/*000000022bc4*/ s_nop           0x0
/*000000022bc8*/ s_nop           0x0
/*000000022bcc*/ s_nop           0x0
/*000000022bd0*/ s_nop           0x0
/*000000022bd4*/ s_nop           0x0
/*000000022bd8*/ s_nop           0x0
/*000000022bdc*/ s_nop           0x0
/*000000022be0*/ s_nop           0x0
/*000000022be4*/ s_nop           0x0
/*000000022be8*/ s_nop           0x0
/*000000022bec*/ s_nop           0x0
/*000000022bf0*/ s_nop           0x0
/*000000022bf4*/ s_nop           0x0
/*000000022bf8*/ s_nop           0x0
/*000000022bfc*/ s_nop           0x0
add_char_get_global_offset_get_num_groups:
.skip 256
/*000000022d00*/ s_load_dword    s11, s[4:5], 0xc
/*000000022d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022d10*/ s_waitcnt       lgkmcnt(0)
/*000000022d14*/ s_load_dword    s1, s[4:5], 0x10
/*000000022d1c*/ s_load_dword    s3, s[6:7], 0x20
/*000000022d24*/ s_load_dword    s12, s[4:5], 0x14
/*000000022d2c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022d34*/ s_lshl_b32      s7, s8, 1
/*000000022d38*/ s_lshl_b32      s8, s9, 4
/*000000022d3c*/ s_lshl_b32      s9, s10, 1
/*000000022d40*/ s_and_b32       s13, s11, -2
/*000000022d44*/ s_lshr_b32      s10, s11, 1
/*000000022d48*/ v_cmp_gt_u32    s[6:7], s11, s13
/*000000022d50*/ v_add3_u32      v0, s0, s7, v0
/*000000022d58*/ v_add3_u32      v3, s2, s8, v1
/*000000022d60*/ s_waitcnt       lgkmcnt(0)
/*000000022d64*/ v_add3_u32      v4, s3, s9, v2
/*000000022d6c*/ s_cmpk_lg_u32   s6, 0x0
/*000000022d70*/ s_addc_u32      s6, s0, s10
/*000000022d74*/ s_and_b32       s10, s1, -16
/*000000022d78*/ s_lshr_b32      s0, s1, 4
/*000000022d7c*/ v_cmp_gt_u32    s[10:11], s1, s10
/*000000022d84*/ v_mov_b32       v6, s6
/*000000022d88*/ s_cmpk_lg_u32   s10, 0x0
/*000000022d8c*/ s_addc_u32      s0, s2, s0
/*000000022d90*/ s_and_b32       s1, s12, -2
/*000000022d94*/ v_add_co_u32    v0, s[2:3], s4, v0
/*000000022d9c*/ v_cmp_gt_u32    s[1:2], s12, s1
/*000000022da4*/ v_add_co_ci_u32 v1, s[2:3], s5, 0, s[2:3]
/*000000022dac*/ v_add_co_u32    v2, s[2:3], s4, v3
/*000000022db4*/ v_mov_b32       v9, s0
/*000000022db8*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*000000022dc0*/ s_lshr_b32      s2, s12, 1
/*000000022dc4*/ s_cmpk_lg_u32   s1, 0x0
/*000000022dc8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000022dd0*/ s_addc_u32      s0, s3, s2
/*000000022dd4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000022ddc*/ v_mov_b32       v11, s0
/*000000022de0*/ global_store_byte v[0:1], v6, off
/*000000022de8*/ global_store_byte v[2:3], v9, off
/*000000022df0*/ global_store_byte v[4:5], v11, off
/*000000022df8*/ s_endpgm
/*000000022dfc*/ s_nop           0x0
add_char_get_local_id_get_num_groups:
.skip 256
/*000000022f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022f08*/ s_waitcnt       lgkmcnt(0)
/*000000022f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022f14*/ s_clause        0x1
/*000000022f18*/ s_load_dword    s3, s[4:5], 0xc
/*000000022f20*/ s_load_dword    s11, s[4:5], 0x14
/*000000022f28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022f30*/ s_load_dword    s4, s[4:5], 0x10
/*000000022f38*/ s_lshl_b32      s5, s8, 3
/*000000022f3c*/ s_lshl_b32      s8, s9, 2
/*000000022f40*/ s_lshl_b32      s9, s10, 1
/*000000022f44*/ v_mov_b32       v8, 0
/*000000022f48*/ s_waitcnt       lgkmcnt(0)
/*000000022f4c*/ v_add3_u32      v6, s1, s9, v2
/*000000022f54*/ s_lshr_b32      s1, s3, 3
/*000000022f58*/ v_add3_u32      v3, s0, s5, v0
/*000000022f60*/ s_and_b32       s0, s3, -8
/*000000022f64*/ v_add3_u32      v5, s2, s8, v1
/*000000022f6c*/ v_cmp_gt_u32    vcc, s3, s0
/*000000022f74*/ s_and_b32       s2, s4, -4
/*000000022f78*/ s_and_b32       s0, s11, -2
/*000000022f7c*/ s_lshr_b32      s3, s11, 1
/*000000022f80*/ v_cmp_gt_u32    s[0:1], s11, s0
/*000000022f88*/ v_add_co_ci_u32 v10, vcc, s1, v0, vcc
/*000000022f8c*/ v_add_co_u32    v3, vcc, s6, v3
/*000000022f94*/ s_lshr_b32      s1, s4, 2
/*000000022f98*/ v_add_co_ci_u32 v4, vcc, s7, v8, vcc
/*000000022f9c*/ v_cmp_gt_u32    vcc, s4, s2
/*000000022fa4*/ s_cmpk_lg_u32   s0, 0x0
/*000000022fa8*/ s_addc_u32      s0, s3, 0
/*000000022fac*/ v_add_co_ci_u32 v15, vcc, s1, v1, vcc
/*000000022fb0*/ v_add_co_u32    v0, vcc, s6, v5
/*000000022fb8*/ v_add_nc_u16    v11, s0, v2
/*000000022fc0*/ v_add_co_ci_u32 v1, vcc, s7, v8, vcc
/*000000022fc4*/ v_add_co_u32    v5, vcc, s6, v6
/*000000022fcc*/ v_add_co_ci_u32 v6, vcc, s7, v8, vcc
/*000000022fd0*/ global_store_byte v[3:4], v10, off
/*000000022fd8*/ global_store_byte v[0:1], v15, off
/*000000022fe0*/ global_store_byte v[5:6], v11, off
/*000000022fe8*/ s_endpgm
/*000000022fec*/ s_nop           0x0
/*000000022ff0*/ s_nop           0x0
/*000000022ff4*/ s_nop           0x0
/*000000022ff8*/ s_nop           0x0
/*000000022ffc*/ s_nop           0x0
add_char_get_group_id_get_num_groups:
.skip 256
/*000000023100*/ s_clause        0x1
/*000000023104*/ s_load_dword    s11, s[4:5], 0xc
/*00000002310c*/ s_load_dword    s12, s[4:5], 0x10
/*000000023114*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000002311c*/ s_waitcnt       lgkmcnt(0)
/*000000023120*/ s_load_dword    s1, s[6:7], 0x20
/*000000023128*/ s_load_dword    s3, s[4:5], 0x14
/*000000023130*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023138*/ s_lshl_b32      s7, s8, 1
/*00000002313c*/ s_lshl_b32      s14, s10, 1
/*000000023140*/ s_and_b32       s13, s11, -2
/*000000023144*/ v_cmp_gt_u32    s[6:7], s11, s13
/*00000002314c*/ s_lshl_b32      s13, s9, 4
/*000000023150*/ s_lshr_b32      s11, s11, 1
/*000000023154*/ v_add3_u32      v0, s0, s7, v0
/*00000002315c*/ v_add3_u32      v3, s2, s13, v1
/*000000023164*/ s_cmpk_lg_u32   s6, 0x0
/*000000023168*/ s_waitcnt       lgkmcnt(0)
/*00000002316c*/ v_add3_u32      v4, s1, s14, v2
/*000000023174*/ s_addc_u32      s6, s8, s11
/*000000023178*/ s_and_b32       s8, s12, -16
/*00000002317c*/ s_lshr_b32      s0, s12, 4
/*000000023180*/ v_cmp_gt_u32    s[8:9], s12, s8
/*000000023188*/ v_add_co_u32    v0, s[2:3], s4, v0
/*000000023190*/ v_mov_b32       v6, s6
/*000000023194*/ v_add_co_ci_u32 v1, s[2:3], s5, 0, s[2:3]
/*00000002319c*/ v_add_co_u32    v2, s[2:3], s4, v3
/*0000000231a4*/ s_cmpk_lg_u32   s8, 0x0
/*0000000231a8*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*0000000231b0*/ s_addc_u32      s0, s9, s0
/*0000000231b4*/ s_and_b32       s1, s3, -2
/*0000000231b8*/ s_lshr_b32      s2, s3, 1
/*0000000231bc*/ v_cmp_gt_u32    s[1:2], s3, s1
/*0000000231c4*/ v_mov_b32       v9, s0
/*0000000231c8*/ s_cmpk_lg_u32   s1, 0x0
/*0000000231cc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000231d4*/ s_addc_u32      s0, s10, s2
/*0000000231d8*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000231e0*/ v_mov_b32       v11, s0
/*0000000231e4*/ global_store_byte v[0:1], v6, off
/*0000000231ec*/ global_store_byte v[2:3], v9, off
/*0000000231f4*/ global_store_byte v[4:5], v11, off
/*0000000231fc*/ s_endpgm
add_char_get_local_size_get_num_groups:
.skip 256
/*000000023300*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000023308*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000023310*/ s_waitcnt       lgkmcnt(0)
/*000000023314*/ s_clause        0x1
/*000000023318*/ s_load_dword    s3, s[6:7], 0x20
/*000000023320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023328*/ s_lshl_b32      s7, s8, 1
/*00000002332c*/ s_lshl_b32      s8, s9, 1
/*000000023330*/ s_lshl_b32      s9, s10, 2
/*000000023334*/ s_and_b32       s11, s0, -2
/*000000023338*/ v_add3_u32      v0, s12, s7, v0
/*000000023340*/ v_cmp_gt_u32    s[6:7], s0, s11
/*000000023348*/ s_lshr_b32      s0, s0, 1
/*00000002334c*/ s_waitcnt       lgkmcnt(0)
/*000000023350*/ v_add3_u32      v4, s3, s9, v2
/*000000023358*/ v_add3_u32      v3, s14, s8, v1
/*000000023360*/ s_cmpk_lg_u32   s6, 0x0
/*000000023364*/ s_addc_u32      s0, s0, 2
/*000000023368*/ s_and_b32       s6, s1, -2
/*00000002336c*/ v_mov_b32       v6, s0
/*000000023370*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000023378*/ s_lshr_b32      s1, s1, 1
/*00000002337c*/ s_cmpk_lg_u32   s6, 0x0
/*000000023380*/ v_add_co_u32    v0, s[6:7], s4, v0
/*000000023388*/ s_addc_u32      s1, s1, 2
/*00000002338c*/ s_and_b32       s3, s2, -4
/*000000023390*/ s_lshr_b32      s0, s2, 2
/*000000023394*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000002339c*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*0000000233a4*/ v_add_co_u32    v2, s[6:7], s4, v3
/*0000000233ac*/ v_mov_b32       v9, s1
/*0000000233b0*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000233b8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000233bc*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*0000000233c4*/ s_addc_u32      s0, s0, 4
/*0000000233c8*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000233d0*/ v_mov_b32       v11, s0
/*0000000233d4*/ global_store_byte v[0:1], v6, off
/*0000000233dc*/ global_store_byte v[2:3], v9, off
/*0000000233e4*/ global_store_byte v[4:5], v11, off
/*0000000233ec*/ s_endpgm
/*0000000233f0*/ s_nop           0x0
/*0000000233f4*/ s_nop           0x0
/*0000000233f8*/ s_nop           0x0
/*0000000233fc*/ s_nop           0x0
add_char_get_global_id_get_num_groups:
.skip 256
/*000000023500*/ s_load_dword    s11, s[4:5], 0xc
/*000000023508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023510*/ s_waitcnt       lgkmcnt(0)
/*000000023514*/ s_clause        0x1
/*000000023518*/ s_load_dword    s1, s[6:7], 0x20
/*000000023520*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000023528*/ s_clause        0x1
/*00000002352c*/ s_load_dword    s3, s[4:5], 0x10
/*000000023534*/ s_load_dword    s4, s[4:5], 0x14
/*00000002353c*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000023544*/ v_lshl_or_b32   v2, s10, 2, v2
/*00000002354c*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000023554*/ s_waitcnt       lgkmcnt(0)
/*000000023558*/ v_add_nc_u32    v5, s1, v2
/*00000002355c*/ s_and_b32       s5, s11, -2
/*000000023560*/ v_add_nc_u32    v4, s2, v1
/*000000023564*/ v_cmp_gt_u32    s[5:6], s11, s5
/*00000002356c*/ v_add_co_u32    v0, s[2:3], s6, v3
/*000000023574*/ s_lshr_b32      s1, s11, 1
/*000000023578*/ v_add_co_ci_u32 v1, s[2:3], s7, 0, s[2:3]
/*000000023580*/ s_cmpk_lg_u32   s5, 0x0
/*000000023584*/ s_addc_u32      s0, s0, s1
/*000000023588*/ s_and_b32       s2, s3, -2
/*00000002358c*/ v_add_nc_u32    v6, s0, v3
/*000000023590*/ v_cmp_gt_u32    vcc, s3, s2
/*000000023598*/ v_add_co_u32    v2, s[0:1], s6, v4
/*0000000235a0*/ s_lshr_b32      s1, s3, 1
/*0000000235a4*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*0000000235ac*/ s_and_b32       s0, s4, -4
/*0000000235b0*/ v_add_co_ci_u32 v9, vcc, s1, v4, vcc
/*0000000235b4*/ v_cmp_gt_u32    vcc, s4, s0
/*0000000235bc*/ s_lshr_b32      s1, s4, 2
/*0000000235c0*/ v_add_co_u32    v4, s[0:1], s6, v5
/*0000000235c8*/ v_add_co_ci_u32 v11, vcc, s1, v5, vcc
/*0000000235cc*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*0000000235d4*/ global_store_byte v[0:1], v6, off
/*0000000235dc*/ global_store_byte v[2:3], v9, off
/*0000000235e4*/ global_store_byte v[4:5], v11, off
/*0000000235ec*/ s_endpgm
/*0000000235f0*/ s_nop           0x0
/*0000000235f4*/ s_nop           0x0
/*0000000235f8*/ s_nop           0x0
/*0000000235fc*/ s_nop           0x0
add_char_get_global_size_get_num_groups:
.skip 256
/*000000023700*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000023708*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000023710*/ s_waitcnt       lgkmcnt(0)
/*000000023714*/ s_clause        0x1
/*000000023718*/ s_load_dword    s3, s[6:7], 0x20
/*000000023720*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000023728*/ s_lshl_b32      s7, s8, 4
/*00000002372c*/ s_lshl_b32      s8, s9, 1
/*000000023730*/ s_lshl_b32      s9, s10, 1
/*000000023734*/ s_and_b32       s11, s0, -16
/*000000023738*/ s_lshr_b32      s10, s0, 4
/*00000002373c*/ v_cmp_gt_u32    s[6:7], s0, s11
/*000000023744*/ v_add3_u32      v0, s12, s7, v0
/*00000002374c*/ s_waitcnt       lgkmcnt(0)
/*000000023750*/ v_add3_u32      v4, s3, s9, v2
/*000000023758*/ v_add3_u32      v3, s14, s8, v1
/*000000023760*/ s_cmpk_lg_u32   s6, 0x0
/*000000023764*/ s_addc_u32      s0, s0, s10
/*000000023768*/ s_and_b32       s6, s1, -2
/*00000002376c*/ s_lshr_b32      s7, s1, 1
/*000000023770*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000023778*/ v_mov_b32       v6, s0
/*00000002377c*/ s_cmpk_lg_u32   s6, 0x0
/*000000023780*/ v_add_co_u32    v0, s[6:7], s4, v0
/*000000023788*/ s_addc_u32      s1, s1, s7
/*00000002378c*/ s_and_b32       s3, s2, -2
/*000000023790*/ s_lshr_b32      s0, s2, 1
/*000000023794*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000002379c*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*0000000237a4*/ v_add_co_u32    v2, s[6:7], s4, v3
/*0000000237ac*/ v_mov_b32       v9, s1
/*0000000237b0*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000237b8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000237bc*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*0000000237c4*/ s_addc_u32      s0, s2, s0
/*0000000237c8*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000237d0*/ v_mov_b32       v11, s0
/*0000000237d4*/ global_store_byte v[0:1], v6, off
/*0000000237dc*/ global_store_byte v[2:3], v9, off
/*0000000237e4*/ global_store_byte v[4:5], v11, off
/*0000000237ec*/ s_endpgm
/*0000000237f0*/ s_nop           0x0
/*0000000237f4*/ s_nop           0x0
/*0000000237f8*/ s_nop           0x0
/*0000000237fc*/ s_nop           0x0
add_char_get_num_groups_get_num_groups:
.skip 256
/*000000023900*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000023908*/ s_clause        0x2
/*00000002390c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000023914*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000002391c*/ s_load_dword    s6, s[6:7], 0x20
/*000000023924*/ s_lshl_b32      s7, s8, 1
/*000000023928*/ s_lshl_b32      s8, s9, 1
/*00000002392c*/ s_lshl_b32      s9, s10, 2
/*000000023930*/ s_waitcnt       lgkmcnt(0)
/*000000023934*/ s_and_b32       s3, s0, -2
/*000000023938*/ v_add3_u32      v0, s12, s7, v0
/*000000023940*/ v_cmp_gt_u32    s[3:4], s0, s3
/*000000023948*/ s_lshr_b32      s0, s0, 1
/*00000002394c*/ v_add3_u32      v3, s14, s8, v1
/*000000023954*/ v_add3_u32      v4, s6, s9, v2
/*00000002395c*/ v_add_co_u32    v0, s[6:7], s4, v0
/*000000023964*/ s_cmpk_lg_u32   s3, 0x0
/*000000023968*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*000000023970*/ s_addc_u32      s0, s0, 0
/*000000023974*/ s_and_b32       s3, s1, -2
/*000000023978*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000023980*/ s_lshr_b32      s1, s1, 1
/*000000023984*/ s_cmpk_lg_u32   s3, 0x0
/*000000023988*/ s_addc_u32      s1, s1, 0
/*00000002398c*/ s_and_b32       s3, s2, -4
/*000000023990*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000023998*/ s_lshr_b32      s2, s2, 2
/*00000002399c*/ s_cmpk_lg_u32   s3, 0x0
/*0000000239a0*/ v_add_co_u32    v2, s[3:4], s4, v3
/*0000000239a8*/ s_addc_u32      s2, s2, 0
/*0000000239ac*/ s_lshl_b32      s0, s0, 1
/*0000000239b0*/ s_lshl_b32      s1, s1, 1
/*0000000239b4*/ v_mov_b32       v6, s0
/*0000000239b8*/ v_mov_b32       v9, s1
/*0000000239bc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000239c4*/ s_lshl_b32      s0, s2, 1
/*0000000239c8*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*0000000239d0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000239d8*/ v_mov_b32       v11, s0
/*0000000239dc*/ global_store_byte v[0:1], v6, off
/*0000000239e4*/ global_store_byte v[2:3], v9, off
/*0000000239ec*/ global_store_byte v[4:5], v11, off
/*0000000239f4*/ s_endpgm
/*0000000239f8*/ s_nop           0x0
/*0000000239fc*/ s_nop           0x0
add_char_get_work_dim_get_num_groups:
.skip 256
/*000000023b00*/ v_mov_b32       v3, s4
/*000000023b04*/ v_mov_b32       v4, s5
/*000000023b08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023b10*/ s_waitcnt       lgkmcnt(0)
/*000000023b14*/ s_load_dword    s1, s[6:7], 0x20
/*000000023b1c*/ s_clause        0x2
/*000000023b20*/ s_load_dword    s3, s[4:5], 0xc
/*000000023b28*/ s_load_dword    s11, s[4:5], 0x10
/*000000023b30*/ s_load_dword    s12, s[4:5], 0x14
/*000000023b38*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023b40*/ s_lshl_b32      s6, s8, 1
/*000000023b44*/ s_lshl_b32      s8, s10, 2
/*000000023b48*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000023b50*/ s_lshl_b32      s7, s9, 1
/*000000023b54*/ s_waitcnt       lgkmcnt(0)
/*000000023b58*/ v_add3_u32      v4, s1, s8, v2
/*000000023b60*/ s_and_b32       s1, s3, -2
/*000000023b64*/ v_cmp_gt_u32    vcc, s3, s1
/*000000023b6c*/ v_add3_u32      v0, s0, s6, v0
/*000000023b74*/ s_lshr_b32      s0, s3, 1
/*000000023b78*/ s_and_b32       s6, s11, -2
/*000000023b7c*/ v_add3_u32      v3, s2, s7, v1
/*000000023b84*/ s_lshr_b32      s2, s11, 1
/*000000023b88*/ s_and_b32       s8, s12, -4
/*000000023b8c*/ v_add_co_u32    v0, s[9:10], s4, v0
/*000000023b94*/ s_lshr_b32      s7, s12, 2
/*000000023b98*/ v_add_co_ci_u32 v1, s[9:10], s5, 0, s[9:10]
/*000000023ba0*/ v_add_co_u32    v2, s[9:10], s4, v3
/*000000023ba8*/ v_add_co_u32    v4, s[4:5], s4, v4
/*000000023bb0*/ v_add_co_ci_u32 v3, s[9:10], s5, 0, s[9:10]
/*000000023bb8*/ v_add_co_ci_u32 v5, s[4:5], s5, 0, s[4:5]
/*000000023bc0*/ s_waitcnt       vmcnt(0)
/*000000023bc4*/ v_and_b32       v7, 0xffff, v6
/*000000023bcc*/ v_add_co_ci_u32 v11, vcc, s0, v7, vcc
/*000000023bd0*/ v_cmp_gt_u32    vcc, s11, s6
/*000000023bd8*/ v_add_co_ci_u32 v9, vcc, s2, v7, vcc
/*000000023bdc*/ v_cmp_gt_u32    vcc, s12, s8
/*000000023be4*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*000000023be8*/ global_store_byte v[0:1], v11, off
/*000000023bf0*/ global_store_byte v[2:3], v9, off
/*000000023bf8*/ global_store_byte v[4:5], v6, off
/*000000023c00*/ s_endpgm
/*000000023c04*/ s_nop           0x0
/*000000023c08*/ s_nop           0x0
/*000000023c0c*/ s_nop           0x0
/*000000023c10*/ s_nop           0x0
/*000000023c14*/ s_nop           0x0
/*000000023c18*/ s_nop           0x0
/*000000023c1c*/ s_nop           0x0
/*000000023c20*/ s_nop           0x0
/*000000023c24*/ s_nop           0x0
/*000000023c28*/ s_nop           0x0
/*000000023c2c*/ s_nop           0x0
/*000000023c30*/ s_nop           0x0
/*000000023c34*/ s_nop           0x0
/*000000023c38*/ s_nop           0x0
/*000000023c3c*/ s_nop           0x0
/*000000023c40*/ s_nop           0x0
/*000000023c44*/ s_nop           0x0
/*000000023c48*/ s_nop           0x0
/*000000023c4c*/ s_nop           0x0
/*000000023c50*/ s_nop           0x0
/*000000023c54*/ s_nop           0x0
/*000000023c58*/ s_nop           0x0
/*000000023c5c*/ s_nop           0x0
/*000000023c60*/ s_nop           0x0
/*000000023c64*/ s_nop           0x0
/*000000023c68*/ s_nop           0x0
/*000000023c6c*/ s_nop           0x0
/*000000023c70*/ s_nop           0x0
/*000000023c74*/ s_nop           0x0
/*000000023c78*/ s_nop           0x0
/*000000023c7c*/ s_nop           0x0
/*000000023c80*/ s_nop           0x0
/*000000023c84*/ s_nop           0x0
/*000000023c88*/ s_nop           0x0
/*000000023c8c*/ s_nop           0x0
/*000000023c90*/ s_nop           0x0
/*000000023c94*/ s_nop           0x0
/*000000023c98*/ s_nop           0x0
/*000000023c9c*/ s_nop           0x0
/*000000023ca0*/ s_nop           0x0
/*000000023ca4*/ s_nop           0x0
/*000000023ca8*/ s_nop           0x0
/*000000023cac*/ s_nop           0x0
/*000000023cb0*/ s_nop           0x0
/*000000023cb4*/ s_nop           0x0
/*000000023cb8*/ s_nop           0x0
/*000000023cbc*/ s_nop           0x0
/*000000023cc0*/ s_nop           0x0
/*000000023cc4*/ s_nop           0x0
/*000000023cc8*/ s_nop           0x0
/*000000023ccc*/ s_nop           0x0
/*000000023cd0*/ s_nop           0x0
/*000000023cd4*/ s_nop           0x0
/*000000023cd8*/ s_nop           0x0
/*000000023cdc*/ s_nop           0x0
/*000000023ce0*/ s_nop           0x0
/*000000023ce4*/ s_nop           0x0
/*000000023ce8*/ s_nop           0x0
/*000000023cec*/ s_nop           0x0
/*000000023cf0*/ s_nop           0x0
/*000000023cf4*/ s_nop           0x0
/*000000023cf8*/ s_nop           0x0
/*000000023cfc*/ s_nop           0x0
add_char_x_get_work_dim:
.skip 256
/*000000023e00*/ v_mov_b32       v3, s4
/*000000023e04*/ v_mov_b32       v4, s5
/*000000023e08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023e10*/ s_waitcnt       lgkmcnt(0)
/*000000023e14*/ s_clause        0x2
/*000000023e18*/ s_load_dword    s1, s[6:7], 0x20
/*000000023e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000023e28*/ s_load_dword    s3, s[6:7], 0x8
/*000000023e30*/ s_lshl_b32      s6, s8, 4
/*000000023e34*/ s_lshl_b32      s7, s9, 1
/*000000023e38*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000023e40*/ v_add3_u32      v0, s0, s6, v0
/*000000023e48*/ s_lshl_b32      s0, s10, 1
/*000000023e4c*/ v_add3_u32      v3, s2, s7, v1
/*000000023e54*/ s_waitcnt       lgkmcnt(0)
/*000000023e58*/ v_add3_u32      v5, s1, s0, v2
/*000000023e60*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000023e68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000023e70*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000023e78*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000023e80*/ s_waitcnt       vmcnt(0)
/*000000023e84*/ v_add_nc_u32    v6, s3, v4
/*000000023e88*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000023e90*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000023e98*/ global_store_byte v[0:1], v6, off
/*000000023ea0*/ global_store_byte v[7:8], v6, off
/*000000023ea8*/ global_store_byte v[4:5], v6, off
/*000000023eb0*/ s_endpgm
/*000000023eb4*/ s_nop           0x0
/*000000023eb8*/ s_nop           0x0
/*000000023ebc*/ s_nop           0x0
/*000000023ec0*/ s_nop           0x0
/*000000023ec4*/ s_nop           0x0
/*000000023ec8*/ s_nop           0x0
/*000000023ecc*/ s_nop           0x0
/*000000023ed0*/ s_nop           0x0
/*000000023ed4*/ s_nop           0x0
/*000000023ed8*/ s_nop           0x0
/*000000023edc*/ s_nop           0x0
/*000000023ee0*/ s_nop           0x0
/*000000023ee4*/ s_nop           0x0
/*000000023ee8*/ s_nop           0x0
/*000000023eec*/ s_nop           0x0
/*000000023ef0*/ s_nop           0x0
/*000000023ef4*/ s_nop           0x0
/*000000023ef8*/ s_nop           0x0
/*000000023efc*/ s_nop           0x0
add_char_get_global_offset_get_work_dim:
.skip 256
/*000000024000*/ v_mov_b32       v3, s4
/*000000024004*/ v_mov_b32       v4, s5
/*000000024008*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024010*/ s_waitcnt       lgkmcnt(0)
/*000000024014*/ s_clause        0x1
/*000000024018*/ s_load_dword    s1, s[6:7], 0x20
/*000000024020*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024028*/ s_lshl_b32      s3, s8, 1
/*00000002402c*/ s_lshl_b32      s6, s9, 4
/*000000024030*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024038*/ v_add3_u32      v0, s0, s3, v0
/*000000024040*/ s_lshl_b32      s3, s10, 1
/*000000024044*/ v_add3_u32      v3, s2, s6, v1
/*00000002404c*/ s_waitcnt       lgkmcnt(0)
/*000000024050*/ v_add3_u32      v4, s1, s3, v2
/*000000024058*/ v_add_co_u32    v0, s[3:4], s4, v0
/*000000024060*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*000000024068*/ v_add_co_u32    v2, s[3:4], s4, v3
/*000000024070*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*000000024078*/ v_add_co_u32    v4, s[3:4], s4, v4
/*000000024080*/ v_add_co_ci_u32 v5, s[3:4], s5, 0, s[3:4]
/*000000024088*/ s_waitcnt       vmcnt(0)
/*00000002408c*/ v_and_b32       v7, 0xffff, v6
/*000000024094*/ v_add_nc_u32    v6, s1, v6
/*000000024098*/ v_add_nc_u32    v11, s0, v7
/*00000002409c*/ v_add_nc_u32    v9, s2, v7
/*0000000240a0*/ global_store_byte v[0:1], v11, off
/*0000000240a8*/ global_store_byte v[2:3], v9, off
/*0000000240b0*/ global_store_byte v[4:5], v6, off
/*0000000240b8*/ s_endpgm
/*0000000240bc*/ s_nop           0x0
/*0000000240c0*/ s_nop           0x0
/*0000000240c4*/ s_nop           0x0
/*0000000240c8*/ s_nop           0x0
/*0000000240cc*/ s_nop           0x0
/*0000000240d0*/ s_nop           0x0
/*0000000240d4*/ s_nop           0x0
/*0000000240d8*/ s_nop           0x0
/*0000000240dc*/ s_nop           0x0
/*0000000240e0*/ s_nop           0x0
/*0000000240e4*/ s_nop           0x0
/*0000000240e8*/ s_nop           0x0
/*0000000240ec*/ s_nop           0x0
/*0000000240f0*/ s_nop           0x0
/*0000000240f4*/ s_nop           0x0
/*0000000240f8*/ s_nop           0x0
/*0000000240fc*/ s_nop           0x0
add_char_get_local_id_get_work_dim:
.skip 256
/*000000024200*/ v_mov_b32       v3, s4
/*000000024204*/ v_mov_b32       v4, s5
/*000000024208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024210*/ s_waitcnt       lgkmcnt(0)
/*000000024214*/ s_clause        0x1
/*000000024218*/ s_load_dword    s1, s[6:7], 0x20
/*000000024220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024228*/ s_lshl_b32      s3, s8, 3
/*00000002422c*/ s_lshl_b32      s6, s9, 2
/*000000024230*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000024238*/ v_add3_u32      v3, s0, s3, v0
/*000000024240*/ s_lshl_b32      s0, s10, 1
/*000000024244*/ v_add3_u32      v5, s2, s6, v1
/*00000002424c*/ s_waitcnt       lgkmcnt(0)
/*000000024250*/ v_add3_u32      v7, s1, s0, v2
/*000000024258*/ v_add_co_u32    v3, s[0:1], s4, v3
/*000000024260*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*000000024268*/ v_add_co_u32    v5, s[0:1], s4, v5
/*000000024270*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*000000024278*/ v_add_co_u32    v7, s[0:1], s4, v7
/*000000024280*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000024288*/ s_waitcnt       vmcnt(0)
/*00000002428c*/ v_add_nc_u32    v10, v0, v15
/*000000024290*/ v_add_nc_u32    v11, v1, v15
/*000000024294*/ v_add_nc_u32    v2, v2, v15
/*000000024298*/ global_store_byte v[3:4], v10, off
/*0000000242a0*/ global_store_byte v[5:6], v11, off
/*0000000242a8*/ global_store_byte v[7:8], v2, off
/*0000000242b0*/ s_endpgm
/*0000000242b4*/ s_nop           0x0
/*0000000242b8*/ s_nop           0x0
/*0000000242bc*/ s_nop           0x0
/*0000000242c0*/ s_nop           0x0
/*0000000242c4*/ s_nop           0x0
/*0000000242c8*/ s_nop           0x0
/*0000000242cc*/ s_nop           0x0
/*0000000242d0*/ s_nop           0x0
/*0000000242d4*/ s_nop           0x0
/*0000000242d8*/ s_nop           0x0
/*0000000242dc*/ s_nop           0x0
/*0000000242e0*/ s_nop           0x0
/*0000000242e4*/ s_nop           0x0
/*0000000242e8*/ s_nop           0x0
/*0000000242ec*/ s_nop           0x0
/*0000000242f0*/ s_nop           0x0
/*0000000242f4*/ s_nop           0x0
/*0000000242f8*/ s_nop           0x0
/*0000000242fc*/ s_nop           0x0
add_char_get_group_id_get_work_dim:
.skip 256
/*000000024400*/ v_mov_b32       v3, s4
/*000000024404*/ v_mov_b32       v4, s5
/*000000024408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024410*/ s_waitcnt       lgkmcnt(0)
/*000000024414*/ s_clause        0x1
/*000000024418*/ s_load_dword    s1, s[6:7], 0x20
/*000000024420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024428*/ s_lshl_b32      s3, s8, 1
/*00000002442c*/ s_lshl_b32      s6, s9, 4
/*000000024430*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024438*/ v_add3_u32      v0, s0, s3, v0
/*000000024440*/ s_lshl_b32      s0, s10, 1
/*000000024444*/ v_add3_u32      v3, s2, s6, v1
/*00000002444c*/ s_waitcnt       lgkmcnt(0)
/*000000024450*/ v_add3_u32      v4, s1, s0, v2
/*000000024458*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000024460*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000024468*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000024470*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000024478*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000024480*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024488*/ s_waitcnt       vmcnt(0)
/*00000002448c*/ v_add_nc_u32    v7, s8, v6
/*000000024490*/ v_add_nc_u32    v8, s9, v6
/*000000024494*/ v_add_nc_u32    v6, s10, v6
/*000000024498*/ global_store_byte v[0:1], v7, off
/*0000000244a0*/ global_store_byte v[2:3], v8, off
/*0000000244a8*/ global_store_byte v[4:5], v6, off
/*0000000244b0*/ s_endpgm
/*0000000244b4*/ s_nop           0x0
/*0000000244b8*/ s_nop           0x0
/*0000000244bc*/ s_nop           0x0
/*0000000244c0*/ s_nop           0x0
/*0000000244c4*/ s_nop           0x0
/*0000000244c8*/ s_nop           0x0
/*0000000244cc*/ s_nop           0x0
/*0000000244d0*/ s_nop           0x0
/*0000000244d4*/ s_nop           0x0
/*0000000244d8*/ s_nop           0x0
/*0000000244dc*/ s_nop           0x0
/*0000000244e0*/ s_nop           0x0
/*0000000244e4*/ s_nop           0x0
/*0000000244e8*/ s_nop           0x0
/*0000000244ec*/ s_nop           0x0
/*0000000244f0*/ s_nop           0x0
/*0000000244f4*/ s_nop           0x0
/*0000000244f8*/ s_nop           0x0
/*0000000244fc*/ s_nop           0x0
add_char_get_local_size_get_work_dim:
.skip 256
/*000000024600*/ v_mov_b32       v3, s4
/*000000024604*/ v_mov_b32       v4, s5
/*000000024608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024610*/ s_waitcnt       lgkmcnt(0)
/*000000024614*/ s_clause        0x1
/*000000024618*/ s_load_dword    s1, s[6:7], 0x20
/*000000024620*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024628*/ s_lshl_b32      s3, s8, 1
/*00000002462c*/ s_lshl_b32      s6, s9, 1
/*000000024630*/ global_load_ubyte v6, v[3:4], off inst_offset:2
/*000000024638*/ v_add3_u32      v0, s0, s3, v0
/*000000024640*/ s_lshl_b32      s0, s10, 2
/*000000024644*/ v_add3_u32      v3, s2, s6, v1
/*00000002464c*/ s_waitcnt       lgkmcnt(0)
/*000000024650*/ v_add3_u32      v4, s1, s0, v2
/*000000024658*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000024660*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000024668*/ v_add_co_u32    v9, s[0:1], s4, v3
/*000000024670*/ v_add_co_ci_u32 v10, s[0:1], s5, 0, s[0:1]
/*000000024678*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000024680*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024688*/ s_waitcnt       vmcnt(0)
/*00000002468c*/ v_add_nc_u16    v7, v6, 2
/*000000024694*/ v_add_nc_u32    v6, 4, v6
/*000000024698*/ global_store_byte v[0:1], v7, off
/*0000000246a0*/ global_store_byte v[9:10], v7, off
/*0000000246a8*/ global_store_byte v[4:5], v6, off
/*0000000246b0*/ s_endpgm
/*0000000246b4*/ s_nop           0x0
/*0000000246b8*/ s_nop           0x0
/*0000000246bc*/ s_nop           0x0
/*0000000246c0*/ s_nop           0x0
/*0000000246c4*/ s_nop           0x0
/*0000000246c8*/ s_nop           0x0
/*0000000246cc*/ s_nop           0x0
/*0000000246d0*/ s_nop           0x0
/*0000000246d4*/ s_nop           0x0
/*0000000246d8*/ s_nop           0x0
/*0000000246dc*/ s_nop           0x0
/*0000000246e0*/ s_nop           0x0
/*0000000246e4*/ s_nop           0x0
/*0000000246e8*/ s_nop           0x0
/*0000000246ec*/ s_nop           0x0
/*0000000246f0*/ s_nop           0x0
/*0000000246f4*/ s_nop           0x0
/*0000000246f8*/ s_nop           0x0
/*0000000246fc*/ s_nop           0x0
add_char_get_global_id_get_work_dim:
.skip 256
/*000000024800*/ v_mov_b32       v3, s4
/*000000024804*/ v_mov_b32       v4, s5
/*000000024808*/ s_clause        0x2
/*00000002480c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024814*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000002481c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000024824*/ v_lshl_or_b32   v1, s9, 1, v1
/*00000002482c*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000024834*/ v_lshl_or_b32   v7, s8, 1, v0
/*00000002483c*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024844*/ s_waitcnt       lgkmcnt(0)
/*000000024848*/ v_add_co_u32    v8, s[1:2], s2, v1
/*000000024850*/ v_add_co_u32    v9, s[1:2], s4, v2
/*000000024858*/ v_add_co_u32    v0, s[1:2], s6, v7
/*000000024860*/ v_add_co_ci_u32 v1, s[1:2], s7, 0, s[1:2]
/*000000024868*/ v_add_co_u32    v2, s[1:2], s6, v8
/*000000024870*/ v_add_co_ci_u32 v3, s[1:2], s7, 0, s[1:2]
/*000000024878*/ v_add_co_u32    v4, s[1:2], s6, v9
/*000000024880*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*000000024888*/ s_waitcnt       vmcnt(0)
/*00000002488c*/ v_add3_u32      v7, v6, s0, v7
/*000000024894*/ v_add_nc_u16    v8, v6, v8
/*00000002489c*/ v_add_nc_u16    v6, v6, v9
/*0000000248a4*/ global_store_byte v[0:1], v7, off
/*0000000248ac*/ global_store_byte v[2:3], v8, off
/*0000000248b4*/ global_store_byte v[4:5], v6, off
/*0000000248bc*/ s_endpgm
/*0000000248c0*/ s_nop           0x0
/*0000000248c4*/ s_nop           0x0
/*0000000248c8*/ s_nop           0x0
/*0000000248cc*/ s_nop           0x0
/*0000000248d0*/ s_nop           0x0
/*0000000248d4*/ s_nop           0x0
/*0000000248d8*/ s_nop           0x0
/*0000000248dc*/ s_nop           0x0
/*0000000248e0*/ s_nop           0x0
/*0000000248e4*/ s_nop           0x0
/*0000000248e8*/ s_nop           0x0
/*0000000248ec*/ s_nop           0x0
/*0000000248f0*/ s_nop           0x0
/*0000000248f4*/ s_nop           0x0
/*0000000248f8*/ s_nop           0x0
/*0000000248fc*/ s_nop           0x0
add_char_get_global_size_get_work_dim:
.skip 256
/*000000024a00*/ v_mov_b32       v3, s4
/*000000024a04*/ v_mov_b32       v4, s5
/*000000024a08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024a10*/ s_waitcnt       lgkmcnt(0)
/*000000024a14*/ s_clause        0x1
/*000000024a18*/ s_load_dword    s1, s[6:7], 0x20
/*000000024a20*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*000000024a28*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000024a30*/ s_lshl_b32      s3, s8, 4
/*000000024a34*/ s_waitcnt       lgkmcnt(0)
/*000000024a38*/ s_lshl_b32      s7, s9, 1
/*000000024a3c*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024a44*/ v_add3_u32      v0, s0, s3, v0
/*000000024a4c*/ s_lshl_b32      s0, s10, 1
/*000000024a50*/ v_add3_u32      v3, s2, s7, v1
/*000000024a58*/ v_add3_u32      v4, s1, s0, v2
/*000000024a60*/ v_add_co_u32    v0, s[0:1], s12, v0
/*000000024a68*/ v_add_co_ci_u32 v1, s[0:1], s13, 0, s[0:1]
/*000000024a70*/ v_add_co_u32    v2, s[0:1], s12, v3
/*000000024a78*/ v_add_co_ci_u32 v3, s[0:1], s13, 0, s[0:1]
/*000000024a80*/ v_add_co_u32    v4, s[0:1], s12, v4
/*000000024a88*/ v_add_co_ci_u32 v5, s[0:1], s13, 0, s[0:1]
/*000000024a90*/ s_waitcnt       vmcnt(0)
/*000000024a94*/ v_add_nc_u32    v7, s4, v6
/*000000024a98*/ v_add_nc_u32    v8, s5, v6
/*000000024a9c*/ v_add_nc_u32    v6, s6, v6
/*000000024aa0*/ global_store_byte v[0:1], v7, off
/*000000024aa8*/ global_store_byte v[2:3], v8, off
/*000000024ab0*/ global_store_byte v[4:5], v6, off
/*000000024ab8*/ s_endpgm
/*000000024abc*/ s_nop           0x0
/*000000024ac0*/ s_nop           0x0
/*000000024ac4*/ s_nop           0x0
/*000000024ac8*/ s_nop           0x0
/*000000024acc*/ s_nop           0x0
/*000000024ad0*/ s_nop           0x0
/*000000024ad4*/ s_nop           0x0
/*000000024ad8*/ s_nop           0x0
/*000000024adc*/ s_nop           0x0
/*000000024ae0*/ s_nop           0x0
/*000000024ae4*/ s_nop           0x0
/*000000024ae8*/ s_nop           0x0
/*000000024aec*/ s_nop           0x0
/*000000024af0*/ s_nop           0x0
/*000000024af4*/ s_nop           0x0
/*000000024af8*/ s_nop           0x0
/*000000024afc*/ s_nop           0x0
add_char_get_num_groups_get_work_dim:
.skip 256
/*000000024c00*/ v_mov_b32       v3, s4
/*000000024c04*/ v_mov_b32       v4, s5
/*000000024c08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024c10*/ s_waitcnt       lgkmcnt(0)
/*000000024c14*/ s_load_dword    s1, s[6:7], 0x20
/*000000024c1c*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000024c24*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024c2c*/ s_lshl_b32      s7, s10, 2
/*000000024c30*/ s_lshl_b32      s3, s8, 1
/*000000024c34*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000024c3c*/ s_lshl_b32      s6, s9, 1
/*000000024c40*/ s_waitcnt       lgkmcnt(0)
/*000000024c44*/ v_add3_u32      v4, s1, s7, v2
/*000000024c4c*/ s_and_b32       s1, s12, -2
/*000000024c50*/ v_add3_u32      v0, s0, s3, v0
/*000000024c58*/ v_cmp_gt_u32    vcc, s12, s1
/*000000024c60*/ s_lshr_b32      s0, s12, 1
/*000000024c64*/ s_and_b32       s3, s13, -2
/*000000024c68*/ v_add3_u32      v3, s2, s6, v1
/*000000024c70*/ s_lshr_b32      s2, s13, 1
/*000000024c74*/ s_and_b32       s7, s14, -4
/*000000024c78*/ v_add_co_u32    v0, s[8:9], s4, v0
/*000000024c80*/ s_lshr_b32      s6, s14, 2
/*000000024c84*/ v_add_co_ci_u32 v1, s[8:9], s5, 0, s[8:9]
/*000000024c8c*/ v_add_co_u32    v2, s[8:9], s4, v3
/*000000024c94*/ v_add_co_u32    v4, s[4:5], s4, v4
/*000000024c9c*/ v_add_co_ci_u32 v3, s[8:9], s5, 0, s[8:9]
/*000000024ca4*/ v_add_co_ci_u32 v5, s[4:5], s5, 0, s[4:5]
/*000000024cac*/ s_waitcnt       vmcnt(0)
/*000000024cb0*/ v_add_co_ci_u32 v7, vcc, s0, v6, vcc
/*000000024cb4*/ v_cmp_gt_u32    vcc, s13, s3
/*000000024cbc*/ v_add_co_ci_u32 v8, vcc, s2, v6, vcc
/*000000024cc0*/ v_cmp_gt_u32    vcc, s14, s7
/*000000024cc8*/ v_add_co_ci_u32 v6, vcc, s6, v6, vcc
/*000000024ccc*/ global_store_byte v[0:1], v7, off
/*000000024cd4*/ global_store_byte v[2:3], v8, off
/*000000024cdc*/ global_store_byte v[4:5], v6, off
/*000000024ce4*/ s_endpgm
/*000000024ce8*/ s_nop           0x0
/*000000024cec*/ s_nop           0x0
/*000000024cf0*/ s_nop           0x0
/*000000024cf4*/ s_nop           0x0
/*000000024cf8*/ s_nop           0x0
/*000000024cfc*/ s_nop           0x0
add_char_get_work_dim_get_work_dim:
.skip 256
/*000000024e00*/ v_mov_b32       v3, s4
/*000000024e04*/ v_mov_b32       v4, s5
/*000000024e08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024e10*/ s_waitcnt       lgkmcnt(0)
/*000000024e14*/ s_clause        0x1
/*000000024e18*/ s_load_dword    s1, s[6:7], 0x20
/*000000024e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024e28*/ s_lshl_b32      s3, s8, 1
/*000000024e2c*/ s_lshl_b32      s6, s9, 1
/*000000024e30*/ global_load_ubyte v4, v[3:4], off inst_offset:2
/*000000024e38*/ v_add3_u32      v0, s0, s3, v0
/*000000024e40*/ s_lshl_b32      s0, s10, 2
/*000000024e44*/ v_add3_u32      v3, s2, s6, v1
/*000000024e4c*/ s_waitcnt       lgkmcnt(0)
/*000000024e50*/ v_add3_u32      v5, s1, s0, v2
/*000000024e58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000024e60*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000024e68*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000024e70*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000024e78*/ s_waitcnt       vmcnt(0)
/*000000024e7c*/ v_lshlrev_b32   v6, 1, v4
/*000000024e80*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000024e88*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024e90*/ global_store_byte v[0:1], v6, off
/*000000024e98*/ global_store_byte v[7:8], v6, off
/*000000024ea0*/ global_store_byte v[4:5], v6, off
/*000000024ea8*/ s_endpgm
/*000000024eac*/ s_nop           0x0
/*000000024eb0*/ s_nop           0x0
/*000000024eb4*/ s_nop           0x0
/*000000024eb8*/ s_nop           0x0
/*000000024ebc*/ s_nop           0x0
/*000000024ec0*/ s_nop           0x0
/*000000024ec4*/ s_nop           0x0
/*000000024ec8*/ s_nop           0x0
/*000000024ecc*/ s_nop           0x0
/*000000024ed0*/ s_nop           0x0
/*000000024ed4*/ s_nop           0x0
/*000000024ed8*/ s_nop           0x0
/*000000024edc*/ s_nop           0x0
/*000000024ee0*/ s_nop           0x0
/*000000024ee4*/ s_nop           0x0
/*000000024ee8*/ s_nop           0x0
/*000000024eec*/ s_nop           0x0
/*000000024ef0*/ s_nop           0x0
/*000000024ef4*/ s_nop           0x0
/*000000024ef8*/ s_nop           0x0
/*000000024efc*/ s_nop           0x0
add_char_x_64:
.skip 256
/*000000025000*/ s_clause        0x2
/*000000025004*/ s_load_dword    s2, s[4:5], 0x10
/*00000002500c*/ s_load_dword    s3, s[4:5], 0x0
/*000000025014*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000002501c*/ s_lshl_b32      s4, s6, 6
/*000000025020*/ s_waitcnt       lgkmcnt(0)
/*000000025024*/ v_add3_u32      v0, s2, s4, v0
/*00000002502c*/ s_lshl_b32      s2, s3, 1
/*000000025030*/ v_mov_b32       v2, s2
/*000000025034*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000002503c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000025044*/ global_store_byte v[0:1], v2, off
/*00000002504c*/ s_endpgm
/*000000025050*/ s_nop           0x0
/*000000025054*/ s_nop           0x0
/*000000025058*/ s_nop           0x0
/*00000002505c*/ s_nop           0x0
/*000000025060*/ s_nop           0x0
/*000000025064*/ s_nop           0x0
/*000000025068*/ s_nop           0x0
/*00000002506c*/ s_nop           0x0
/*000000025070*/ s_nop           0x0
/*000000025074*/ s_nop           0x0
/*000000025078*/ s_nop           0x0
/*00000002507c*/ s_nop           0x0
/*000000025080*/ s_nop           0x0
/*000000025084*/ s_nop           0x0
/*000000025088*/ s_nop           0x0
/*00000002508c*/ s_nop           0x0
/*000000025090*/ s_nop           0x0
/*000000025094*/ s_nop           0x0
/*000000025098*/ s_nop           0x0
/*00000002509c*/ s_nop           0x0
/*0000000250a0*/ s_nop           0x0
/*0000000250a4*/ s_nop           0x0
/*0000000250a8*/ s_nop           0x0
/*0000000250ac*/ s_nop           0x0
/*0000000250b0*/ s_nop           0x0
/*0000000250b4*/ s_nop           0x0
/*0000000250b8*/ s_nop           0x0
/*0000000250bc*/ s_nop           0x0
/*0000000250c0*/ s_nop           0x0
/*0000000250c4*/ s_nop           0x0
/*0000000250c8*/ s_nop           0x0
/*0000000250cc*/ s_nop           0x0
/*0000000250d0*/ s_nop           0x0
/*0000000250d4*/ s_nop           0x0
/*0000000250d8*/ s_nop           0x0
/*0000000250dc*/ s_nop           0x0
/*0000000250e0*/ s_nop           0x0
/*0000000250e4*/ s_nop           0x0
/*0000000250e8*/ s_nop           0x0
/*0000000250ec*/ s_nop           0x0
/*0000000250f0*/ s_nop           0x0
/*0000000250f4*/ s_nop           0x0
/*0000000250f8*/ s_nop           0x0
/*0000000250fc*/ s_nop           0x0
add_char_get_global_offset_64:
.skip 256
/*000000025200*/ s_clause        0x1
/*000000025204*/ s_load_dword    s2, s[4:5], 0x10
/*00000002520c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000025214*/ s_lshl_b32      s3, s6, 6
/*000000025218*/ s_waitcnt       lgkmcnt(0)
/*00000002521c*/ v_add3_u32      v0, s2, s3, v0
/*000000025224*/ s_lshl_b32      s2, s2, 1
/*000000025228*/ v_mov_b32       v2, s2
/*00000002522c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025234*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002523c*/ global_store_byte v[0:1], v2, off
/*000000025244*/ s_endpgm
/*000000025248*/ s_nop           0x0
/*00000002524c*/ s_nop           0x0
/*000000025250*/ s_nop           0x0
/*000000025254*/ s_nop           0x0
/*000000025258*/ s_nop           0x0
/*00000002525c*/ s_nop           0x0
/*000000025260*/ s_nop           0x0
/*000000025264*/ s_nop           0x0
/*000000025268*/ s_nop           0x0
/*00000002526c*/ s_nop           0x0
/*000000025270*/ s_nop           0x0
/*000000025274*/ s_nop           0x0
/*000000025278*/ s_nop           0x0
/*00000002527c*/ s_nop           0x0
/*000000025280*/ s_nop           0x0
/*000000025284*/ s_nop           0x0
/*000000025288*/ s_nop           0x0
/*00000002528c*/ s_nop           0x0
/*000000025290*/ s_nop           0x0
/*000000025294*/ s_nop           0x0
/*000000025298*/ s_nop           0x0
/*00000002529c*/ s_nop           0x0
/*0000000252a0*/ s_nop           0x0
/*0000000252a4*/ s_nop           0x0
/*0000000252a8*/ s_nop           0x0
/*0000000252ac*/ s_nop           0x0
/*0000000252b0*/ s_nop           0x0
/*0000000252b4*/ s_nop           0x0
/*0000000252b8*/ s_nop           0x0
/*0000000252bc*/ s_nop           0x0
/*0000000252c0*/ s_nop           0x0
/*0000000252c4*/ s_nop           0x0
/*0000000252c8*/ s_nop           0x0
/*0000000252cc*/ s_nop           0x0
/*0000000252d0*/ s_nop           0x0
/*0000000252d4*/ s_nop           0x0
/*0000000252d8*/ s_nop           0x0
/*0000000252dc*/ s_nop           0x0
/*0000000252e0*/ s_nop           0x0
/*0000000252e4*/ s_nop           0x0
/*0000000252e8*/ s_nop           0x0
/*0000000252ec*/ s_nop           0x0
/*0000000252f0*/ s_nop           0x0
/*0000000252f4*/ s_nop           0x0
/*0000000252f8*/ s_nop           0x0
/*0000000252fc*/ s_nop           0x0
add_char_get_local_id_64:
.skip 256
/*000000025400*/ s_clause        0x1
/*000000025404*/ s_load_dword    s2, s[4:5], 0x10
/*00000002540c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000025414*/ s_lshl_b32      s3, s6, 6
/*000000025418*/ v_lshlrev_b16   v2, 1, v0
/*000000025420*/ s_waitcnt       lgkmcnt(0)
/*000000025424*/ v_add3_u32      v1, s2, s3, v0
/*00000002542c*/ v_add_co_u32    v0, s[0:1], s0, v1
/*000000025434*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002543c*/ global_store_byte v[0:1], v2, off
/*000000025444*/ s_endpgm
/*000000025448*/ s_nop           0x0
/*00000002544c*/ s_nop           0x0
/*000000025450*/ s_nop           0x0
/*000000025454*/ s_nop           0x0
/*000000025458*/ s_nop           0x0
/*00000002545c*/ s_nop           0x0
/*000000025460*/ s_nop           0x0
/*000000025464*/ s_nop           0x0
/*000000025468*/ s_nop           0x0
/*00000002546c*/ s_nop           0x0
/*000000025470*/ s_nop           0x0
/*000000025474*/ s_nop           0x0
/*000000025478*/ s_nop           0x0
/*00000002547c*/ s_nop           0x0
/*000000025480*/ s_nop           0x0
/*000000025484*/ s_nop           0x0
/*000000025488*/ s_nop           0x0
/*00000002548c*/ s_nop           0x0
/*000000025490*/ s_nop           0x0
/*000000025494*/ s_nop           0x0
/*000000025498*/ s_nop           0x0
/*00000002549c*/ s_nop           0x0
/*0000000254a0*/ s_nop           0x0
/*0000000254a4*/ s_nop           0x0
/*0000000254a8*/ s_nop           0x0
/*0000000254ac*/ s_nop           0x0
/*0000000254b0*/ s_nop           0x0
/*0000000254b4*/ s_nop           0x0
/*0000000254b8*/ s_nop           0x0
/*0000000254bc*/ s_nop           0x0
/*0000000254c0*/ s_nop           0x0
/*0000000254c4*/ s_nop           0x0
/*0000000254c8*/ s_nop           0x0
/*0000000254cc*/ s_nop           0x0
/*0000000254d0*/ s_nop           0x0
/*0000000254d4*/ s_nop           0x0
/*0000000254d8*/ s_nop           0x0
/*0000000254dc*/ s_nop           0x0
/*0000000254e0*/ s_nop           0x0
/*0000000254e4*/ s_nop           0x0
/*0000000254e8*/ s_nop           0x0
/*0000000254ec*/ s_nop           0x0
/*0000000254f0*/ s_nop           0x0
/*0000000254f4*/ s_nop           0x0
/*0000000254f8*/ s_nop           0x0
/*0000000254fc*/ s_nop           0x0
add_char_get_group_id_64:
.skip 256
/*000000025600*/ s_clause        0x1
/*000000025604*/ s_load_dword    s2, s[4:5], 0x10
/*00000002560c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000025614*/ s_lshl_b32      s3, s6, 6
/*000000025618*/ s_waitcnt       lgkmcnt(0)
/*00000002561c*/ v_add3_u32      v0, s2, s3, v0
/*000000025624*/ s_lshl_b32      s2, s6, 1
/*000000025628*/ v_mov_b32       v2, s2
/*00000002562c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025634*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002563c*/ global_store_byte v[0:1], v2, off
/*000000025644*/ s_endpgm
/*000000025648*/ s_nop           0x0
/*00000002564c*/ s_nop           0x0
/*000000025650*/ s_nop           0x0
/*000000025654*/ s_nop           0x0
/*000000025658*/ s_nop           0x0
/*00000002565c*/ s_nop           0x0
/*000000025660*/ s_nop           0x0
/*000000025664*/ s_nop           0x0
/*000000025668*/ s_nop           0x0
/*00000002566c*/ s_nop           0x0
/*000000025670*/ s_nop           0x0
/*000000025674*/ s_nop           0x0
/*000000025678*/ s_nop           0x0
/*00000002567c*/ s_nop           0x0
/*000000025680*/ s_nop           0x0
/*000000025684*/ s_nop           0x0
/*000000025688*/ s_nop           0x0
/*00000002568c*/ s_nop           0x0
/*000000025690*/ s_nop           0x0
/*000000025694*/ s_nop           0x0
/*000000025698*/ s_nop           0x0
/*00000002569c*/ s_nop           0x0
/*0000000256a0*/ s_nop           0x0
/*0000000256a4*/ s_nop           0x0
/*0000000256a8*/ s_nop           0x0
/*0000000256ac*/ s_nop           0x0
/*0000000256b0*/ s_nop           0x0
/*0000000256b4*/ s_nop           0x0
/*0000000256b8*/ s_nop           0x0
/*0000000256bc*/ s_nop           0x0
/*0000000256c0*/ s_nop           0x0
/*0000000256c4*/ s_nop           0x0
/*0000000256c8*/ s_nop           0x0
/*0000000256cc*/ s_nop           0x0
/*0000000256d0*/ s_nop           0x0
/*0000000256d4*/ s_nop           0x0
/*0000000256d8*/ s_nop           0x0
/*0000000256dc*/ s_nop           0x0
/*0000000256e0*/ s_nop           0x0
/*0000000256e4*/ s_nop           0x0
/*0000000256e8*/ s_nop           0x0
/*0000000256ec*/ s_nop           0x0
/*0000000256f0*/ s_nop           0x0
/*0000000256f4*/ s_nop           0x0
/*0000000256f8*/ s_nop           0x0
/*0000000256fc*/ s_nop           0x0
add_char_get_local_size_64:
.skip 256
/*000000025800*/ s_clause        0x1
/*000000025804*/ s_load_dword    s2, s[4:5], 0x10
/*00000002580c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000025814*/ s_lshl_b32      s3, s6, 6
/*000000025818*/ v_mov_b32       v2, 0x80
/*000000025820*/ s_waitcnt       lgkmcnt(0)
/*000000025824*/ v_add3_u32      v0, s2, s3, v0
/*00000002582c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025834*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002583c*/ global_store_byte v[0:1], v2, off
/*000000025844*/ s_endpgm
/*000000025848*/ s_nop           0x0
/*00000002584c*/ s_nop           0x0
/*000000025850*/ s_nop           0x0
/*000000025854*/ s_nop           0x0
/*000000025858*/ s_nop           0x0
/*00000002585c*/ s_nop           0x0
/*000000025860*/ s_nop           0x0
/*000000025864*/ s_nop           0x0
/*000000025868*/ s_nop           0x0
/*00000002586c*/ s_nop           0x0
/*000000025870*/ s_nop           0x0
/*000000025874*/ s_nop           0x0
/*000000025878*/ s_nop           0x0
/*00000002587c*/ s_nop           0x0
/*000000025880*/ s_nop           0x0
/*000000025884*/ s_nop           0x0
/*000000025888*/ s_nop           0x0
/*00000002588c*/ s_nop           0x0
/*000000025890*/ s_nop           0x0
/*000000025894*/ s_nop           0x0
/*000000025898*/ s_nop           0x0
/*00000002589c*/ s_nop           0x0
/*0000000258a0*/ s_nop           0x0
/*0000000258a4*/ s_nop           0x0
/*0000000258a8*/ s_nop           0x0
/*0000000258ac*/ s_nop           0x0
/*0000000258b0*/ s_nop           0x0
/*0000000258b4*/ s_nop           0x0
/*0000000258b8*/ s_nop           0x0
/*0000000258bc*/ s_nop           0x0
/*0000000258c0*/ s_nop           0x0
/*0000000258c4*/ s_nop           0x0
/*0000000258c8*/ s_nop           0x0
/*0000000258cc*/ s_nop           0x0
/*0000000258d0*/ s_nop           0x0
/*0000000258d4*/ s_nop           0x0
/*0000000258d8*/ s_nop           0x0
/*0000000258dc*/ s_nop           0x0
/*0000000258e0*/ s_nop           0x0
/*0000000258e4*/ s_nop           0x0
/*0000000258e8*/ s_nop           0x0
/*0000000258ec*/ s_nop           0x0
/*0000000258f0*/ s_nop           0x0
/*0000000258f4*/ s_nop           0x0
/*0000000258f8*/ s_nop           0x0
/*0000000258fc*/ s_nop           0x0
add_char_get_global_id_64:
.skip 256
/*000000025a00*/ s_clause        0x1
/*000000025a04*/ s_load_dwordx2  s[0:1], s[4:5], 0x10
/*000000025a0c*/ s_load_dwordx2  s[2:3], s[4:5], 0x8
/*000000025a14*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000025a1c*/ s_waitcnt       lgkmcnt(0)
/*000000025a20*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025a28*/ v_lshlrev_b16   v2, 1, v0
/*000000025a30*/ v_add_co_u32    v0, s[0:1], s2, v0
/*000000025a38*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000025a40*/ global_store_byte v[0:1], v2, off
/*000000025a48*/ s_endpgm
/*000000025a4c*/ s_nop           0x0
/*000000025a50*/ s_nop           0x0
/*000000025a54*/ s_nop           0x0
/*000000025a58*/ s_nop           0x0
/*000000025a5c*/ s_nop           0x0
/*000000025a60*/ s_nop           0x0
/*000000025a64*/ s_nop           0x0
/*000000025a68*/ s_nop           0x0
/*000000025a6c*/ s_nop           0x0
/*000000025a70*/ s_nop           0x0
/*000000025a74*/ s_nop           0x0
/*000000025a78*/ s_nop           0x0
/*000000025a7c*/ s_nop           0x0
/*000000025a80*/ s_nop           0x0
/*000000025a84*/ s_nop           0x0
/*000000025a88*/ s_nop           0x0
/*000000025a8c*/ s_nop           0x0
/*000000025a90*/ s_nop           0x0
/*000000025a94*/ s_nop           0x0
/*000000025a98*/ s_nop           0x0
/*000000025a9c*/ s_nop           0x0
/*000000025aa0*/ s_nop           0x0
/*000000025aa4*/ s_nop           0x0
/*000000025aa8*/ s_nop           0x0
/*000000025aac*/ s_nop           0x0
/*000000025ab0*/ s_nop           0x0
/*000000025ab4*/ s_nop           0x0
/*000000025ab8*/ s_nop           0x0
/*000000025abc*/ s_nop           0x0
/*000000025ac0*/ s_nop           0x0
/*000000025ac4*/ s_nop           0x0
/*000000025ac8*/ s_nop           0x0
/*000000025acc*/ s_nop           0x0
/*000000025ad0*/ s_nop           0x0
/*000000025ad4*/ s_nop           0x0
/*000000025ad8*/ s_nop           0x0
/*000000025adc*/ s_nop           0x0
/*000000025ae0*/ s_nop           0x0
/*000000025ae4*/ s_nop           0x0
/*000000025ae8*/ s_nop           0x0
/*000000025aec*/ s_nop           0x0
/*000000025af0*/ s_nop           0x0
/*000000025af4*/ s_nop           0x0
/*000000025af8*/ s_nop           0x0
/*000000025afc*/ s_nop           0x0
add_char_get_global_size_64:
.skip 256
/*000000025c00*/ s_load_dword    s2, s[6:7], 0x10
/*000000025c08*/ s_load_dword    s3, s[4:5], 0xc
/*000000025c10*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000025c18*/ s_lshl_b32      s4, s8, 6
/*000000025c1c*/ s_waitcnt       lgkmcnt(0)
/*000000025c20*/ v_add3_u32      v0, s2, s4, v0
/*000000025c28*/ s_lshl_b32      s2, s3, 1
/*000000025c2c*/ v_mov_b32       v2, s2
/*000000025c30*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025c38*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000025c40*/ global_store_byte v[0:1], v2, off
/*000000025c48*/ s_endpgm
/*000000025c4c*/ s_nop           0x0
/*000000025c50*/ s_nop           0x0
/*000000025c54*/ s_nop           0x0
/*000000025c58*/ s_nop           0x0
/*000000025c5c*/ s_nop           0x0
/*000000025c60*/ s_nop           0x0
/*000000025c64*/ s_nop           0x0
/*000000025c68*/ s_nop           0x0
/*000000025c6c*/ s_nop           0x0
/*000000025c70*/ s_nop           0x0
/*000000025c74*/ s_nop           0x0
/*000000025c78*/ s_nop           0x0
/*000000025c7c*/ s_nop           0x0
/*000000025c80*/ s_nop           0x0
/*000000025c84*/ s_nop           0x0
/*000000025c88*/ s_nop           0x0
/*000000025c8c*/ s_nop           0x0
/*000000025c90*/ s_nop           0x0
/*000000025c94*/ s_nop           0x0
/*000000025c98*/ s_nop           0x0
/*000000025c9c*/ s_nop           0x0
/*000000025ca0*/ s_nop           0x0
/*000000025ca4*/ s_nop           0x0
/*000000025ca8*/ s_nop           0x0
/*000000025cac*/ s_nop           0x0
/*000000025cb0*/ s_nop           0x0
/*000000025cb4*/ s_nop           0x0
/*000000025cb8*/ s_nop           0x0
/*000000025cbc*/ s_nop           0x0
/*000000025cc0*/ s_nop           0x0
/*000000025cc4*/ s_nop           0x0
/*000000025cc8*/ s_nop           0x0
/*000000025ccc*/ s_nop           0x0
/*000000025cd0*/ s_nop           0x0
/*000000025cd4*/ s_nop           0x0
/*000000025cd8*/ s_nop           0x0
/*000000025cdc*/ s_nop           0x0
/*000000025ce0*/ s_nop           0x0
/*000000025ce4*/ s_nop           0x0
/*000000025ce8*/ s_nop           0x0
/*000000025cec*/ s_nop           0x0
/*000000025cf0*/ s_nop           0x0
/*000000025cf4*/ s_nop           0x0
/*000000025cf8*/ s_nop           0x0
/*000000025cfc*/ s_nop           0x0
add_char_get_num_groups_64:
.skip 256
/*000000025e00*/ s_load_dword    s2, s[4:5], 0xc
/*000000025e08*/ s_clause        0x1
/*000000025e0c*/ s_load_dword    s3, s[6:7], 0x10
/*000000025e14*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000025e1c*/ s_lshl_b32      s5, s8, 6
/*000000025e20*/ s_waitcnt       lgkmcnt(0)
/*000000025e24*/ s_and_b32       s4, s2, 0xffffffc0
/*000000025e2c*/ v_add3_u32      v0, s3, s5, v0
/*000000025e34*/ v_cmp_gt_u32    s[4:5], s2, s4
/*000000025e3c*/ s_lshr_b32      s2, s2, 6
/*000000025e40*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000025e48*/ s_cmpk_lg_u32   s4, 0x0
/*000000025e4c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000025e54*/ s_addc_u32      s2, s2, 0
/*000000025e58*/ s_lshl_b32      s2, s2, 1
/*000000025e5c*/ v_mov_b32       v2, s2
/*000000025e60*/ global_store_byte v[0:1], v2, off
/*000000025e68*/ s_endpgm
/*000000025e6c*/ s_nop           0x0
/*000000025e70*/ s_nop           0x0
/*000000025e74*/ s_nop           0x0
/*000000025e78*/ s_nop           0x0
/*000000025e7c*/ s_nop           0x0
/*000000025e80*/ s_nop           0x0
/*000000025e84*/ s_nop           0x0
/*000000025e88*/ s_nop           0x0
/*000000025e8c*/ s_nop           0x0
/*000000025e90*/ s_nop           0x0
/*000000025e94*/ s_nop           0x0
/*000000025e98*/ s_nop           0x0
/*000000025e9c*/ s_nop           0x0
/*000000025ea0*/ s_nop           0x0
/*000000025ea4*/ s_nop           0x0
/*000000025ea8*/ s_nop           0x0
/*000000025eac*/ s_nop           0x0
/*000000025eb0*/ s_nop           0x0
/*000000025eb4*/ s_nop           0x0
/*000000025eb8*/ s_nop           0x0
/*000000025ebc*/ s_nop           0x0
/*000000025ec0*/ s_nop           0x0
/*000000025ec4*/ s_nop           0x0
/*000000025ec8*/ s_nop           0x0
/*000000025ecc*/ s_nop           0x0
/*000000025ed0*/ s_nop           0x0
/*000000025ed4*/ s_nop           0x0
/*000000025ed8*/ s_nop           0x0
/*000000025edc*/ s_nop           0x0
/*000000025ee0*/ s_nop           0x0
/*000000025ee4*/ s_nop           0x0
/*000000025ee8*/ s_nop           0x0
/*000000025eec*/ s_nop           0x0
/*000000025ef0*/ s_nop           0x0
/*000000025ef4*/ s_nop           0x0
/*000000025ef8*/ s_nop           0x0
/*000000025efc*/ s_nop           0x0
add_char_get_work_dim:
.skip 256
/*000000026000*/ v_mov_b32       v1, s4
/*000000026004*/ v_mov_b32       v2, s5
/*000000026008*/ s_clause        0x1
/*00000002600c*/ s_load_dword    s2, s[6:7], 0x10
/*000000026014*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000002601c*/ s_lshl_b32      s3, s8, 6
/*000000026020*/ global_load_ubyte v1, v[1:2], off inst_offset:2
/*000000026028*/ s_waitcnt       lgkmcnt(0)
/*00000002602c*/ v_add3_u32      v0, s2, s3, v0
/*000000026034*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000002603c*/ s_waitcnt       vmcnt(0)
/*000000026040*/ v_lshlrev_b32   v2, 1, v1
/*000000026044*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002604c*/ global_store_byte v[0:1], v2, off
/*000000026054*/ s_endpgm
/*000000026058*/ s_nop           0x0
/*00000002605c*/ s_nop           0x0
/*000000026060*/ s_nop           0x0
/*000000026064*/ s_nop           0x0
/*000000026068*/ s_nop           0x0
/*00000002606c*/ s_nop           0x0
/*000000026070*/ s_nop           0x0
/*000000026074*/ s_nop           0x0
/*000000026078*/ s_nop           0x0
/*00000002607c*/ s_nop           0x0
/*000000026080*/ s_nop           0x0
/*000000026084*/ s_nop           0x0
/*000000026088*/ s_nop           0x0
/*00000002608c*/ s_nop           0x0
/*000000026090*/ s_nop           0x0
/*000000026094*/ s_nop           0x0
/*000000026098*/ s_nop           0x0
/*00000002609c*/ s_nop           0x0
/*0000000260a0*/ s_nop           0x0
/*0000000260a4*/ s_nop           0x0
/*0000000260a8*/ s_nop           0x0
/*0000000260ac*/ s_nop           0x0
/*0000000260b0*/ s_nop           0x0
/*0000000260b4*/ s_nop           0x0
/*0000000260b8*/ s_nop           0x0
/*0000000260bc*/ s_nop           0x0
/*0000000260c0*/ s_nop           0x0
/*0000000260c4*/ s_nop           0x0
/*0000000260c8*/ s_nop           0x0
/*0000000260cc*/ s_nop           0x0
/*0000000260d0*/ s_nop           0x0
/*0000000260d4*/ s_nop           0x0
/*0000000260d8*/ s_nop           0x0
/*0000000260dc*/ s_nop           0x0
/*0000000260e0*/ s_nop           0x0
/*0000000260e4*/ s_nop           0x0
/*0000000260e8*/ s_nop           0x0
/*0000000260ec*/ s_nop           0x0
/*0000000260f0*/ s_nop           0x0
/*0000000260f4*/ s_nop           0x0
/*0000000260f8*/ s_nop           0x0
/*0000000260fc*/ s_nop           0x0
add_char_x_8_8:
.skip 256
/*000000026200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000026208*/ s_waitcnt       lgkmcnt(0)
/*00000002620c*/ s_clause        0x1
/*000000026210*/ s_load_dword    s1, s[4:5], 0x0
/*000000026218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000026220*/ s_lshl_b32      s3, s6, 3
/*000000026224*/ s_lshl_b32      s6, s7, 3
/*000000026228*/ v_add3_u32      v0, s0, s3, v0
/*000000026230*/ s_waitcnt       lgkmcnt(0)
/*000000026234*/ s_add_i32       s0, s2, s1
/*000000026238*/ v_add3_u32      v2, s0, s6, v1
/*000000026240*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000026248*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000026250*/ global_store_byte v[0:1], v2, off
/*000000026258*/ s_endpgm
/*00000002625c*/ s_nop           0x0
/*000000026260*/ s_nop           0x0
/*000000026264*/ s_nop           0x0
/*000000026268*/ s_nop           0x0
/*00000002626c*/ s_nop           0x0
/*000000026270*/ s_nop           0x0
/*000000026274*/ s_nop           0x0
/*000000026278*/ s_nop           0x0
/*00000002627c*/ s_nop           0x0
/*000000026280*/ s_nop           0x0
/*000000026284*/ s_nop           0x0
/*000000026288*/ s_nop           0x0
/*00000002628c*/ s_nop           0x0
/*000000026290*/ s_nop           0x0
/*000000026294*/ s_nop           0x0
/*000000026298*/ s_nop           0x0
/*00000002629c*/ s_nop           0x0
/*0000000262a0*/ s_nop           0x0
/*0000000262a4*/ s_nop           0x0
/*0000000262a8*/ s_nop           0x0
/*0000000262ac*/ s_nop           0x0
/*0000000262b0*/ s_nop           0x0
/*0000000262b4*/ s_nop           0x0
/*0000000262b8*/ s_nop           0x0
/*0000000262bc*/ s_nop           0x0
/*0000000262c0*/ s_nop           0x0
/*0000000262c4*/ s_nop           0x0
/*0000000262c8*/ s_nop           0x0
/*0000000262cc*/ s_nop           0x0
/*0000000262d0*/ s_nop           0x0
/*0000000262d4*/ s_nop           0x0
/*0000000262d8*/ s_nop           0x0
/*0000000262dc*/ s_nop           0x0
/*0000000262e0*/ s_nop           0x0
/*0000000262e4*/ s_nop           0x0
/*0000000262e8*/ s_nop           0x0
/*0000000262ec*/ s_nop           0x0
/*0000000262f0*/ s_nop           0x0
/*0000000262f4*/ s_nop           0x0
/*0000000262f8*/ s_nop           0x0
/*0000000262fc*/ s_nop           0x0
add_char_get_global_offset_8_8:
.skip 256
/*000000026400*/ s_clause        0x1
/*000000026404*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000002640c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000026414*/ s_waitcnt       lgkmcnt(0)
/*000000026418*/ s_lshl_b32      s1, s6, 3
/*00000002641c*/ v_add3_u32      v0, s0, s1, v0
/*000000026424*/ s_add_i32       s0, s2, s0
/*000000026428*/ v_mov_b32       v2, s0
/*00000002642c*/ v_add_co_u32    v0, s[1:2], s4, v0
/*000000026434*/ v_add_co_ci_u32 v1, s[1:2], s5, 0, s[1:2]
/*00000002643c*/ global_store_byte v[0:1], v2, off
/*000000026444*/ s_endpgm
/*000000026448*/ s_nop           0x0
/*00000002644c*/ s_nop           0x0
/*000000026450*/ s_nop           0x0
/*000000026454*/ s_nop           0x0
/*000000026458*/ s_nop           0x0
/*00000002645c*/ s_nop           0x0
/*000000026460*/ s_nop           0x0
/*000000026464*/ s_nop           0x0
/*000000026468*/ s_nop           0x0
/*00000002646c*/ s_nop           0x0
/*000000026470*/ s_nop           0x0
/*000000026474*/ s_nop           0x0
/*000000026478*/ s_nop           0x0
/*00000002647c*/ s_nop           0x0
/*000000026480*/ s_nop           0x0
/*000000026484*/ s_nop           0x0
/*000000026488*/ s_nop           0x0
/*00000002648c*/ s_nop           0x0
/*000000026490*/ s_nop           0x0
/*000000026494*/ s_nop           0x0
/*000000026498*/ s_nop           0x0
/*00000002649c*/ s_nop           0x0
/*0000000264a0*/ s_nop           0x0
/*0000000264a4*/ s_nop           0x0
/*0000000264a8*/ s_nop           0x0
/*0000000264ac*/ s_nop           0x0
/*0000000264b0*/ s_nop           0x0
/*0000000264b4*/ s_nop           0x0
/*0000000264b8*/ s_nop           0x0
/*0000000264bc*/ s_nop           0x0
/*0000000264c0*/ s_nop           0x0
/*0000000264c4*/ s_nop           0x0
/*0000000264c8*/ s_nop           0x0
/*0000000264cc*/ s_nop           0x0
/*0000000264d0*/ s_nop           0x0
/*0000000264d4*/ s_nop           0x0
/*0000000264d8*/ s_nop           0x0
/*0000000264dc*/ s_nop           0x0
/*0000000264e0*/ s_nop           0x0
/*0000000264e4*/ s_nop           0x0
/*0000000264e8*/ s_nop           0x0
/*0000000264ec*/ s_nop           0x0
/*0000000264f0*/ s_nop           0x0
/*0000000264f4*/ s_nop           0x0
/*0000000264f8*/ s_nop           0x0
/*0000000264fc*/ s_nop           0x0
add_char_get_local_id_8_8:
.skip 256
/*000000026600*/ s_clause        0x1
/*000000026604*/ s_load_dword    s2, s[4:5], 0x10
/*00000002660c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026614*/ s_lshl_b32      s3, s6, 3
/*000000026618*/ v_add_nc_u16    v3, v1, v0
/*000000026620*/ s_waitcnt       lgkmcnt(0)
/*000000026624*/ v_add3_u32      v2, s2, s3, v0
/*00000002662c*/ v_add_co_u32    v0, s[0:1], s0, v2
/*000000026634*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002663c*/ global_store_byte v[0:1], v3, off
/*000000026644*/ s_endpgm
/*000000026648*/ s_nop           0x0
/*00000002664c*/ s_nop           0x0
/*000000026650*/ s_nop           0x0
/*000000026654*/ s_nop           0x0
/*000000026658*/ s_nop           0x0
/*00000002665c*/ s_nop           0x0
/*000000026660*/ s_nop           0x0
/*000000026664*/ s_nop           0x0
/*000000026668*/ s_nop           0x0
/*00000002666c*/ s_nop           0x0
/*000000026670*/ s_nop           0x0
/*000000026674*/ s_nop           0x0
/*000000026678*/ s_nop           0x0
/*00000002667c*/ s_nop           0x0
/*000000026680*/ s_nop           0x0
/*000000026684*/ s_nop           0x0
/*000000026688*/ s_nop           0x0
/*00000002668c*/ s_nop           0x0
/*000000026690*/ s_nop           0x0
/*000000026694*/ s_nop           0x0
/*000000026698*/ s_nop           0x0
/*00000002669c*/ s_nop           0x0
/*0000000266a0*/ s_nop           0x0
/*0000000266a4*/ s_nop           0x0
/*0000000266a8*/ s_nop           0x0
/*0000000266ac*/ s_nop           0x0
/*0000000266b0*/ s_nop           0x0
/*0000000266b4*/ s_nop           0x0
/*0000000266b8*/ s_nop           0x0
/*0000000266bc*/ s_nop           0x0
/*0000000266c0*/ s_nop           0x0
/*0000000266c4*/ s_nop           0x0
/*0000000266c8*/ s_nop           0x0
/*0000000266cc*/ s_nop           0x0
/*0000000266d0*/ s_nop           0x0
/*0000000266d4*/ s_nop           0x0
/*0000000266d8*/ s_nop           0x0
/*0000000266dc*/ s_nop           0x0
/*0000000266e0*/ s_nop           0x0
/*0000000266e4*/ s_nop           0x0
/*0000000266e8*/ s_nop           0x0
/*0000000266ec*/ s_nop           0x0
/*0000000266f0*/ s_nop           0x0
/*0000000266f4*/ s_nop           0x0
/*0000000266f8*/ s_nop           0x0
/*0000000266fc*/ s_nop           0x0
add_char_get_group_id_8_8:
.skip 256
/*000000026800*/ s_clause        0x1
/*000000026804*/ s_load_dword    s2, s[4:5], 0x10
/*00000002680c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026814*/ s_lshl_b32      s3, s6, 3
/*000000026818*/ s_waitcnt       lgkmcnt(0)
/*00000002681c*/ v_add3_u32      v0, s2, s3, v0
/*000000026824*/ s_add_i32       s2, s7, s6
/*000000026828*/ v_mov_b32       v2, s2
/*00000002682c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026834*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002683c*/ global_store_byte v[0:1], v2, off
/*000000026844*/ s_endpgm
/*000000026848*/ s_nop           0x0
/*00000002684c*/ s_nop           0x0
/*000000026850*/ s_nop           0x0
/*000000026854*/ s_nop           0x0
/*000000026858*/ s_nop           0x0
/*00000002685c*/ s_nop           0x0
/*000000026860*/ s_nop           0x0
/*000000026864*/ s_nop           0x0
/*000000026868*/ s_nop           0x0
/*00000002686c*/ s_nop           0x0
/*000000026870*/ s_nop           0x0
/*000000026874*/ s_nop           0x0
/*000000026878*/ s_nop           0x0
/*00000002687c*/ s_nop           0x0
/*000000026880*/ s_nop           0x0
/*000000026884*/ s_nop           0x0
/*000000026888*/ s_nop           0x0
/*00000002688c*/ s_nop           0x0
/*000000026890*/ s_nop           0x0
/*000000026894*/ s_nop           0x0
/*000000026898*/ s_nop           0x0
/*00000002689c*/ s_nop           0x0
/*0000000268a0*/ s_nop           0x0
/*0000000268a4*/ s_nop           0x0
/*0000000268a8*/ s_nop           0x0
/*0000000268ac*/ s_nop           0x0
/*0000000268b0*/ s_nop           0x0
/*0000000268b4*/ s_nop           0x0
/*0000000268b8*/ s_nop           0x0
/*0000000268bc*/ s_nop           0x0
/*0000000268c0*/ s_nop           0x0
/*0000000268c4*/ s_nop           0x0
/*0000000268c8*/ s_nop           0x0
/*0000000268cc*/ s_nop           0x0
/*0000000268d0*/ s_nop           0x0
/*0000000268d4*/ s_nop           0x0
/*0000000268d8*/ s_nop           0x0
/*0000000268dc*/ s_nop           0x0
/*0000000268e0*/ s_nop           0x0
/*0000000268e4*/ s_nop           0x0
/*0000000268e8*/ s_nop           0x0
/*0000000268ec*/ s_nop           0x0
/*0000000268f0*/ s_nop           0x0
/*0000000268f4*/ s_nop           0x0
/*0000000268f8*/ s_nop           0x0
/*0000000268fc*/ s_nop           0x0
add_char_get_local_size_8_8:
.skip 256
/*000000026a00*/ s_clause        0x1
/*000000026a04*/ s_load_dword    s2, s[4:5], 0x10
/*000000026a0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026a14*/ s_lshl_b32      s3, s6, 3
/*000000026a18*/ v_mov_b32       v2, 16
/*000000026a1c*/ s_waitcnt       lgkmcnt(0)
/*000000026a20*/ v_add3_u32      v0, s2, s3, v0
/*000000026a28*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026a30*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026a38*/ global_store_byte v[0:1], v2, off
/*000000026a40*/ s_endpgm
/*000000026a44*/ s_nop           0x0
/*000000026a48*/ s_nop           0x0
/*000000026a4c*/ s_nop           0x0
/*000000026a50*/ s_nop           0x0
/*000000026a54*/ s_nop           0x0
/*000000026a58*/ s_nop           0x0
/*000000026a5c*/ s_nop           0x0
/*000000026a60*/ s_nop           0x0
/*000000026a64*/ s_nop           0x0
/*000000026a68*/ s_nop           0x0
/*000000026a6c*/ s_nop           0x0
/*000000026a70*/ s_nop           0x0
/*000000026a74*/ s_nop           0x0
/*000000026a78*/ s_nop           0x0
/*000000026a7c*/ s_nop           0x0
/*000000026a80*/ s_nop           0x0
/*000000026a84*/ s_nop           0x0
/*000000026a88*/ s_nop           0x0
/*000000026a8c*/ s_nop           0x0
/*000000026a90*/ s_nop           0x0
/*000000026a94*/ s_nop           0x0
/*000000026a98*/ s_nop           0x0
/*000000026a9c*/ s_nop           0x0
/*000000026aa0*/ s_nop           0x0
/*000000026aa4*/ s_nop           0x0
/*000000026aa8*/ s_nop           0x0
/*000000026aac*/ s_nop           0x0
/*000000026ab0*/ s_nop           0x0
/*000000026ab4*/ s_nop           0x0
/*000000026ab8*/ s_nop           0x0
/*000000026abc*/ s_nop           0x0
/*000000026ac0*/ s_nop           0x0
/*000000026ac4*/ s_nop           0x0
/*000000026ac8*/ s_nop           0x0
/*000000026acc*/ s_nop           0x0
/*000000026ad0*/ s_nop           0x0
/*000000026ad4*/ s_nop           0x0
/*000000026ad8*/ s_nop           0x0
/*000000026adc*/ s_nop           0x0
/*000000026ae0*/ s_nop           0x0
/*000000026ae4*/ s_nop           0x0
/*000000026ae8*/ s_nop           0x0
/*000000026aec*/ s_nop           0x0
/*000000026af0*/ s_nop           0x0
/*000000026af4*/ s_nop           0x0
/*000000026af8*/ s_nop           0x0
/*000000026afc*/ s_nop           0x0
add_char_get_global_id_8_8:
.skip 256
/*000000026c00*/ s_clause        0x1
/*000000026c04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000026c0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000026c14*/ v_lshl_or_b32   v0, s6, 3, v0
/*000000026c1c*/ s_waitcnt       lgkmcnt(0)
/*000000026c20*/ s_lshl_b32      s1, s7, 3
/*000000026c24*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026c2c*/ v_add3_u32      v1, s2, s1, v1
/*000000026c34*/ v_add_nc_u16    v2, v1, v0
/*000000026c3c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000026c44*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000026c4c*/ global_store_byte v[0:1], v2, off
/*000000026c54*/ s_endpgm
/*000000026c58*/ s_nop           0x0
/*000000026c5c*/ s_nop           0x0
/*000000026c60*/ s_nop           0x0
/*000000026c64*/ s_nop           0x0
/*000000026c68*/ s_nop           0x0
/*000000026c6c*/ s_nop           0x0
/*000000026c70*/ s_nop           0x0
/*000000026c74*/ s_nop           0x0
/*000000026c78*/ s_nop           0x0
/*000000026c7c*/ s_nop           0x0
/*000000026c80*/ s_nop           0x0
/*000000026c84*/ s_nop           0x0
/*000000026c88*/ s_nop           0x0
/*000000026c8c*/ s_nop           0x0
/*000000026c90*/ s_nop           0x0
/*000000026c94*/ s_nop           0x0
/*000000026c98*/ s_nop           0x0
/*000000026c9c*/ s_nop           0x0
/*000000026ca0*/ s_nop           0x0
/*000000026ca4*/ s_nop           0x0
/*000000026ca8*/ s_nop           0x0
/*000000026cac*/ s_nop           0x0
/*000000026cb0*/ s_nop           0x0
/*000000026cb4*/ s_nop           0x0
/*000000026cb8*/ s_nop           0x0
/*000000026cbc*/ s_nop           0x0
/*000000026cc0*/ s_nop           0x0
/*000000026cc4*/ s_nop           0x0
/*000000026cc8*/ s_nop           0x0
/*000000026ccc*/ s_nop           0x0
/*000000026cd0*/ s_nop           0x0
/*000000026cd4*/ s_nop           0x0
/*000000026cd8*/ s_nop           0x0
/*000000026cdc*/ s_nop           0x0
/*000000026ce0*/ s_nop           0x0
/*000000026ce4*/ s_nop           0x0
/*000000026ce8*/ s_nop           0x0
/*000000026cec*/ s_nop           0x0
/*000000026cf0*/ s_nop           0x0
/*000000026cf4*/ s_nop           0x0
/*000000026cf8*/ s_nop           0x0
/*000000026cfc*/ s_nop           0x0
add_char_get_global_size_8_8:
.skip 256
/*000000026e00*/ s_load_dword    s9, s[6:7], 0x10
/*000000026e08*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*000000026e10*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*000000026e18*/ s_lshl_b32      s4, s8, 3
/*000000026e1c*/ s_waitcnt       lgkmcnt(0)
/*000000026e20*/ v_add3_u32      v0, s9, s4, v0
/*000000026e28*/ s_add_i32       s0, s1, s0
/*000000026e2c*/ v_mov_b32       v2, s0
/*000000026e30*/ v_add_co_u32    v0, s[1:2], s2, v0
/*000000026e38*/ v_add_co_ci_u32 v1, s[1:2], s3, 0, s[1:2]
/*000000026e40*/ global_store_byte v[0:1], v2, off
/*000000026e48*/ s_endpgm
/*000000026e4c*/ s_nop           0x0
/*000000026e50*/ s_nop           0x0
/*000000026e54*/ s_nop           0x0
/*000000026e58*/ s_nop           0x0
/*000000026e5c*/ s_nop           0x0
/*000000026e60*/ s_nop           0x0
/*000000026e64*/ s_nop           0x0
/*000000026e68*/ s_nop           0x0
/*000000026e6c*/ s_nop           0x0
/*000000026e70*/ s_nop           0x0
/*000000026e74*/ s_nop           0x0
/*000000026e78*/ s_nop           0x0
/*000000026e7c*/ s_nop           0x0
/*000000026e80*/ s_nop           0x0
/*000000026e84*/ s_nop           0x0
/*000000026e88*/ s_nop           0x0
/*000000026e8c*/ s_nop           0x0
/*000000026e90*/ s_nop           0x0
/*000000026e94*/ s_nop           0x0
/*000000026e98*/ s_nop           0x0
/*000000026e9c*/ s_nop           0x0
/*000000026ea0*/ s_nop           0x0
/*000000026ea4*/ s_nop           0x0
/*000000026ea8*/ s_nop           0x0
/*000000026eac*/ s_nop           0x0
/*000000026eb0*/ s_nop           0x0
/*000000026eb4*/ s_nop           0x0
/*000000026eb8*/ s_nop           0x0
/*000000026ebc*/ s_nop           0x0
/*000000026ec0*/ s_nop           0x0
/*000000026ec4*/ s_nop           0x0
/*000000026ec8*/ s_nop           0x0
/*000000026ecc*/ s_nop           0x0
/*000000026ed0*/ s_nop           0x0
/*000000026ed4*/ s_nop           0x0
/*000000026ed8*/ s_nop           0x0
/*000000026edc*/ s_nop           0x0
/*000000026ee0*/ s_nop           0x0
/*000000026ee4*/ s_nop           0x0
/*000000026ee8*/ s_nop           0x0
/*000000026eec*/ s_nop           0x0
/*000000026ef0*/ s_nop           0x0
/*000000026ef4*/ s_nop           0x0
/*000000026ef8*/ s_nop           0x0
/*000000026efc*/ s_nop           0x0
add_char_get_num_groups_8_8:
.skip 256
/*000000027000*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*000000027008*/ s_clause        0x1
/*00000002700c*/ s_load_dword    s4, s[6:7], 0x10
/*000000027014*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000002701c*/ s_lshl_b32      s6, s8, 3
/*000000027020*/ s_waitcnt       lgkmcnt(0)
/*000000027024*/ s_and_b32       s5, s1, -8
/*000000027028*/ s_and_b32       s7, s0, -8
/*00000002702c*/ v_cmp_gt_u32    s[5:6], s1, s5
/*000000027034*/ s_lshr_b32      s8, s0, 3
/*000000027038*/ v_cmp_gt_u32    s[0:1], s0, s7
/*000000027040*/ s_lshr_b32      s1, s1, 3
/*000000027044*/ v_add3_u32      v0, s4, s6, v0
/*00000002704c*/ s_cmpk_lg_u32   s5, 0x0
/*000000027050*/ s_addc_u32      s1, s1, 0
/*000000027054*/ s_cmpk_lg_u32   s0, 0x0
/*000000027058*/ s_addc_u32      s0, s1, s8
/*00000002705c*/ v_add_co_u32    v0, s[1:2], s2, v0
/*000000027064*/ v_mov_b32       v2, s0
/*000000027068*/ v_add_co_ci_u32 v1, s[1:2], s3, 0, s[1:2]
/*000000027070*/ global_store_byte v[0:1], v2, off
/*000000027078*/ s_endpgm
/*00000002707c*/ s_nop           0x0
/*000000027080*/ s_nop           0x0
/*000000027084*/ s_nop           0x0
/*000000027088*/ s_nop           0x0
/*00000002708c*/ s_nop           0x0
/*000000027090*/ s_nop           0x0
/*000000027094*/ s_nop           0x0
/*000000027098*/ s_nop           0x0
/*00000002709c*/ s_nop           0x0
/*0000000270a0*/ s_nop           0x0
/*0000000270a4*/ s_nop           0x0
/*0000000270a8*/ s_nop           0x0
/*0000000270ac*/ s_nop           0x0
/*0000000270b0*/ s_nop           0x0
/*0000000270b4*/ s_nop           0x0
/*0000000270b8*/ s_nop           0x0
/*0000000270bc*/ s_nop           0x0
/*0000000270c0*/ s_nop           0x0
/*0000000270c4*/ s_nop           0x0
/*0000000270c8*/ s_nop           0x0
/*0000000270cc*/ s_nop           0x0
/*0000000270d0*/ s_nop           0x0
/*0000000270d4*/ s_nop           0x0
/*0000000270d8*/ s_nop           0x0
/*0000000270dc*/ s_nop           0x0
/*0000000270e0*/ s_nop           0x0
/*0000000270e4*/ s_nop           0x0
/*0000000270e8*/ s_nop           0x0
/*0000000270ec*/ s_nop           0x0
/*0000000270f0*/ s_nop           0x0
/*0000000270f4*/ s_nop           0x0
/*0000000270f8*/ s_nop           0x0
/*0000000270fc*/ s_nop           0x0
add_char_get_work_dim_8_8:
.skip 256
/*000000027200*/ v_mov_b32       v2, s4
/*000000027204*/ v_mov_b32       v3, s5
/*000000027208*/ s_clause        0x1
/*00000002720c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000027214*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000002721c*/ s_waitcnt       lgkmcnt(0)
/*000000027220*/ s_lshl_b32      s1, s8, 3
/*000000027224*/ global_load_ushort v2, v[2:3], off inst_offset:2
/*00000002722c*/ v_add3_u32      v0, s0, s1, v0
/*000000027234*/ s_lshl_b32      s0, s9, 3
/*000000027238*/ s_waitcnt       vmcnt(0)
/*00000002723c*/ v_add_nc_u32    v2, s2, v2
/*000000027240*/ v_add3_u32      v2, v2, s0, v1
/*000000027248*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000027250*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000027258*/ global_store_byte v[0:1], v2, off
/*000000027260*/ s_endpgm
/*000000027264*/ s_code_end
/*000000027268*/ s_code_end
/*00000002726c*/ s_code_end
/*000000027270*/ s_code_end
/*000000027274*/ s_code_end
/*000000027278*/ s_code_end
/*00000002727c*/ s_code_end
/*000000027280*/ s_code_end
/*000000027284*/ s_code_end
/*000000027288*/ s_code_end
/*00000002728c*/ s_code_end
/*000000027290*/ s_code_end
/*000000027294*/ s_code_end
/*000000027298*/ s_code_end
/*00000002729c*/ s_code_end
/*0000000272a0*/ s_code_end
/*0000000272a4*/ s_code_end
/*0000000272a8*/ s_code_end
/*0000000272ac*/ s_code_end
/*0000000272b0*/ s_code_end
/*0000000272b4*/ s_code_end
/*0000000272b8*/ s_code_end
/*0000000272bc*/ s_code_end
/*0000000272c0*/ s_code_end
/*0000000272c4*/ s_code_end
/*0000000272c8*/ s_code_end
/*0000000272cc*/ s_code_end
/*0000000272d0*/ s_code_end
/*0000000272d4*/ s_code_end
/*0000000272d8*/ s_code_end
/*0000000272dc*/ s_code_end
/*0000000272e0*/ s_code_end
/*0000000272e4*/ s_code_end
/*0000000272e8*/ s_code_end
/*0000000272ec*/ s_code_end
/*0000000272f0*/ s_code_end
/*0000000272f4*/ s_code_end
/*0000000272f8*/ s_code_end
/*0000000272fc*/ s_code_end
/*000000027300*/ s_code_end
/*000000027304*/ s_code_end
/*000000027308*/ s_code_end
/*00000002730c*/ s_code_end
/*000000027310*/ s_code_end
/*000000027314*/ s_code_end
/*000000027318*/ s_code_end
/*00000002731c*/ s_code_end
/*000000027320*/ s_code_end
/*000000027324*/ s_code_end
/*000000027328*/ s_code_end
/*00000002732c*/ s_code_end
/*000000027330*/ s_code_end
/*000000027334*/ s_code_end
/*000000027338*/ s_code_end
/*00000002733c*/ s_code_end
