.rocm
.gpu GFX1010
.arch_minor 1
.arch_stepping 0
.eflags 51
.newbinfmt
.target "amdgcn-amd-amdhsa--gfx1010"
.md_version 1, 0
.kernel mul_char_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uchar*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 9
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_char_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_char_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg data, "char*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 8
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 8
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 13
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 6
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 6
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 3
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 6
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 6
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 21
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 14
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 18
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 18
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_id_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 19
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 17
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 17
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_offset_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_offset_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 20
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 20
        .md_vgprsnum 17
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_global_size_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_global_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_8_8
    .config
        .dims xy, x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000018c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 19
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 20
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 20
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_group_id_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_group_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 16, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_8_8
    .config
        .dims x, xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000088c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 21
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_id_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_id_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 4, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 17
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 17
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 17
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_local_size_x
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 13
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_local_size_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 13
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_8_8
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_global_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_global_offset
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 21
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_group_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 21
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_local_id
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_local_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 21
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 21
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_get_work_dim
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 9
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 9
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_num_groups_x
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_num_groups_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 10
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000990
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 12
        .workitem_vgpr_count 6
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 12
        .md_vgprsnum 6
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 16
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0043
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 29
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 29
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 19
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 19
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 16
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 16
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 12
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_get_work_dim_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x00000090
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_get_work_dim_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 2, 2, 4
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 5
        .max_flat_work_group_size 16
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "ulong*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 18
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 18
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 17
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0082
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 17
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 12
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0042
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 17
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 17
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 24
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0081
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 18
        .workitem_vgpr_count 15
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 18
        .md_vgprsnum 15
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 11
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 11
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_long_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 4
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_long_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 4
        .max_flat_work_group_size 64
        .arg data, "long*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_64
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_64@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_8_8
    .config
        .dims xy
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000098c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 10
        .workitem_vgpr_count 5
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_8_8@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 8, 8, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 10
        .md_vgprsnum 5
        .max_flat_work_group_size 64
        .arg x, "int", 4, 4, value, struct
        .arg data, "uint*", 8, 8, globalbuf, struct, global, default
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_global_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_global_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_global_offset
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_global_offset@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_global_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 15
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_global_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 15
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_group_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 14
        .workitem_vgpr_count 14
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_group_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 14
        .md_vgprsnum 14
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_local_id
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_local_id@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_local_size
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x0000138c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 11
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_local_size@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 11
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_num_groups
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 16
        .workitem_vgpr_count 12
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_num_groups@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 16
        .md_vgprsnum 12
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_get_work_dim
    .config
        .dims xyz
        .sgprsnum 16
        .vgprsnum 8
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 8
        .pgmrsrc1 0x60af0041
        .pgmrsrc2 0x00001390
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_dispatch_ptr
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 13
        .workitem_vgpr_count 10
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_get_work_dim@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 16, 2, 2
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 13
        .md_vgprsnum 10
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.kernel mul_x_x
    .config
        .dims x
        .sgprsnum 16
        .vgprsnum 4
        .dx10clamp
        .ieeemode
        .floatmode 0xf0
        .priority 0
        .exceptions 0x60
        .userdatanum 6
        .pgmrsrc1 0x60af0040
        .pgmrsrc2 0x0000008c
        .codeversion 1, 2
        .machine 1, 10, 1, 0
        .kernel_code_entry_offset 0x100
        .use_private_segment_buffer
        .use_kernarg_segment_ptr
        .private_elem_size 4
        .use_ptr64
        .kernarg_segment_size 72
        .wavefront_sgpr_count 9
        .workitem_vgpr_count 3
        .kernarg_segment_align 16
        .group_segment_align 16
        .private_segment_align 16
        .wavefront_size 32
        .call_convention 0xffffffff
    .control_directive
        .fill 128, 1, 0x00
    .config
        .md_symname "mul_x_x@kd"
        .md_language "OpenCL C", 1, 2
        .reqd_work_group_size 64, 1, 1
        .md_kernarg_segment_size 72
        .md_kernarg_segment_align 8
        .md_group_segment_fixed_size 0
        .md_private_segment_fixed_size 0
        .md_wavefront_size 32
        .md_sgprsnum 9
        .md_vgprsnum 3
        .max_flat_work_group_size 64
        .arg data, "int*", 8, 8, globalbuf, struct, global, default
        .arg x, "int", 4, 4, value, struct
        .arg , "", 8, 8, gox, struct
        .arg , "", 8, 8, goy, struct
        .arg , "", 8, 8, goz, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, none, struct
        .arg , "", 8, 8, multigridsyncarg, struct
.text
mul_x_x:
.skip 256
/*000000000100*/ s_clause        0x2
/*000000000104*/ s_load_dword    s2, s[4:5], 0x10
/*00000000010c*/ s_load_dword    s3, s[4:5], 0x8
/*000000000114*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000000011c*/ s_lshl_b32      s4, s6, 6
/*000000000120*/ v_mov_b32       v1, 0
/*000000000124*/ s_waitcnt       lgkmcnt(0)
/*000000000128*/ v_add3_u32      v0, s2, s4, v0
/*000000000130*/ s_mul_i32       s2, s3, s3
/*000000000134*/ v_mov_b32       v2, s2
/*000000000138*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000000140*/ v_add_co_u32    v0, vcc, s0, v0
/*000000000148*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000014c*/ global_store_dword v[0:1], v2, off
/*000000000154*/ s_endpgm
/*000000000158*/ s_nop           0x0
/*00000000015c*/ s_nop           0x0
/*000000000160*/ s_nop           0x0
/*000000000164*/ s_nop           0x0
/*000000000168*/ s_nop           0x0
/*00000000016c*/ s_nop           0x0
/*000000000170*/ s_nop           0x0
/*000000000174*/ s_nop           0x0
/*000000000178*/ s_nop           0x0
/*00000000017c*/ s_nop           0x0
/*000000000180*/ s_nop           0x0
/*000000000184*/ s_nop           0x0
/*000000000188*/ s_nop           0x0
/*00000000018c*/ s_nop           0x0
/*000000000190*/ s_nop           0x0
/*000000000194*/ s_nop           0x0
/*000000000198*/ s_nop           0x0
/*00000000019c*/ s_nop           0x0
/*0000000001a0*/ s_nop           0x0
/*0000000001a4*/ s_nop           0x0
/*0000000001a8*/ s_nop           0x0
/*0000000001ac*/ s_nop           0x0
/*0000000001b0*/ s_nop           0x0
/*0000000001b4*/ s_nop           0x0
/*0000000001b8*/ s_nop           0x0
/*0000000001bc*/ s_nop           0x0
/*0000000001c0*/ s_nop           0x0
/*0000000001c4*/ s_nop           0x0
/*0000000001c8*/ s_nop           0x0
/*0000000001cc*/ s_nop           0x0
/*0000000001d0*/ s_nop           0x0
/*0000000001d4*/ s_nop           0x0
/*0000000001d8*/ s_nop           0x0
/*0000000001dc*/ s_nop           0x0
/*0000000001e0*/ s_nop           0x0
/*0000000001e4*/ s_nop           0x0
/*0000000001e8*/ s_nop           0x0
/*0000000001ec*/ s_nop           0x0
/*0000000001f0*/ s_nop           0x0
/*0000000001f4*/ s_nop           0x0
/*0000000001f8*/ s_nop           0x0
/*0000000001fc*/ s_nop           0x0
mul_get_global_offset_x:
.skip 256
/*000000000300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000308*/ s_waitcnt       lgkmcnt(0)
/*00000000030c*/ s_clause        0x2
/*000000000310*/ s_load_dword    s1, s[4:5], 0x20
/*000000000318*/ s_load_dword    s3, s[4:5], 0x0
/*000000000320*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000328*/ v_mov_b32       v4, 0
/*00000000032c*/ s_lshl_b32      s6, s6, 1
/*000000000330*/ s_lshl_b32      s7, s7, 4
/*000000000334*/ s_lshl_b32      s8, s8, 1
/*000000000338*/ v_mov_b32       v6, v4
/*00000000033c*/ v_mov_b32       v8, v4
/*000000000340*/ s_waitcnt       lgkmcnt(0)
/*000000000344*/ v_add3_u32      v7, s1, s8, v2
/*00000000034c*/ v_add3_u32      v3, s0, s6, v0
/*000000000354*/ v_add3_u32      v5, s2, s7, v1
/*00000000035c*/ s_mul_i32       s0, s0, s3
/*000000000360*/ s_mul_i32       s2, s2, s3
/*000000000364*/ v_mov_b32       v11, s0
/*000000000368*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000370*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000378*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000380*/ s_mul_i32       s0, s1, s3
/*000000000384*/ v_mov_b32       v13, s2
/*000000000388*/ v_mov_b32       v7, s0
/*00000000038c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000394*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000398*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000003a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000003a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000003ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000003b0*/ global_store_dword v[0:1], v11, off
/*0000000003b8*/ global_store_dword v[2:3], v13, off
/*0000000003c0*/ global_store_dword v[4:5], v7, off
/*0000000003c8*/ s_endpgm
/*0000000003cc*/ s_nop           0x0
/*0000000003d0*/ s_nop           0x0
/*0000000003d4*/ s_nop           0x0
/*0000000003d8*/ s_nop           0x0
/*0000000003dc*/ s_nop           0x0
/*0000000003e0*/ s_nop           0x0
/*0000000003e4*/ s_nop           0x0
/*0000000003e8*/ s_nop           0x0
/*0000000003ec*/ s_nop           0x0
/*0000000003f0*/ s_nop           0x0
/*0000000003f4*/ s_nop           0x0
/*0000000003f8*/ s_nop           0x0
/*0000000003fc*/ s_nop           0x0
mul_get_local_id_x:
.skip 256
/*000000000500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000508*/ s_waitcnt       lgkmcnt(0)
/*00000000050c*/ s_clause        0x2
/*000000000510*/ s_load_dword    s1, s[4:5], 0x20
/*000000000518*/ s_load_dword    s3, s[4:5], 0x0
/*000000000520*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000528*/ v_mov_b32       v4, 0
/*00000000052c*/ s_lshl_b32      s6, s6, 3
/*000000000530*/ s_lshl_b32      s7, s7, 2
/*000000000534*/ s_lshl_b32      s8, s8, 1
/*000000000538*/ v_mov_b32       v6, v4
/*00000000053c*/ v_mov_b32       v8, v4
/*000000000540*/ s_waitcnt       lgkmcnt(0)
/*000000000544*/ v_add3_u32      v7, s1, s8, v2
/*00000000054c*/ v_add3_u32      v3, s0, s6, v0
/*000000000554*/ v_add3_u32      v5, s2, s7, v1
/*00000000055c*/ v_mul_lo_u32    v9, v0, s3
/*000000000564*/ v_mul_lo_u32    v10, v1, s3
/*00000000056c*/ v_mul_lo_u32    v11, v2, s3
/*000000000574*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000057c*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000000584*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000058c*/ v_add_co_u32    v2, vcc, s4, v3
/*000000000594*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000000598*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000005a0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000005a4*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000005ac*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000005b0*/ global_store_dword v[2:3], v9, off
/*0000000005b8*/ global_store_dword v[0:1], v10, off
/*0000000005c0*/ global_store_dword v[4:5], v11, off
/*0000000005c8*/ s_endpgm
/*0000000005cc*/ s_nop           0x0
/*0000000005d0*/ s_nop           0x0
/*0000000005d4*/ s_nop           0x0
/*0000000005d8*/ s_nop           0x0
/*0000000005dc*/ s_nop           0x0
/*0000000005e0*/ s_nop           0x0
/*0000000005e4*/ s_nop           0x0
/*0000000005e8*/ s_nop           0x0
/*0000000005ec*/ s_nop           0x0
/*0000000005f0*/ s_nop           0x0
/*0000000005f4*/ s_nop           0x0
/*0000000005f8*/ s_nop           0x0
/*0000000005fc*/ s_nop           0x0
mul_get_group_id_x:
.skip 256
/*000000000700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000708*/ s_waitcnt       lgkmcnt(0)
/*00000000070c*/ s_clause        0x2
/*000000000710*/ s_load_dword    s1, s[4:5], 0x20
/*000000000718*/ s_load_dword    s3, s[4:5], 0x0
/*000000000720*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000728*/ v_mov_b32       v4, 0
/*00000000072c*/ s_lshl_b32      s9, s6, 1
/*000000000730*/ s_lshl_b32      s10, s7, 4
/*000000000734*/ s_lshl_b32      s11, s8, 1
/*000000000738*/ v_mov_b32       v6, v4
/*00000000073c*/ v_mov_b32       v8, v4
/*000000000740*/ s_waitcnt       lgkmcnt(0)
/*000000000744*/ v_add3_u32      v7, s1, s11, v2
/*00000000074c*/ v_add3_u32      v3, s0, s9, v0
/*000000000754*/ v_add3_u32      v5, s2, s10, v1
/*00000000075c*/ s_mul_i32       s0, s6, s3
/*000000000760*/ s_mul_i32       s1, s7, s3
/*000000000764*/ v_mov_b32       v11, s0
/*000000000768*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000770*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000778*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000780*/ s_mul_i32       s0, s8, s3
/*000000000784*/ v_mov_b32       v13, s1
/*000000000788*/ v_mov_b32       v7, s0
/*00000000078c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000794*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000798*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000007a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000007a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000007ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000007b0*/ global_store_dword v[0:1], v11, off
/*0000000007b8*/ global_store_dword v[2:3], v13, off
/*0000000007c0*/ global_store_dword v[4:5], v7, off
/*0000000007c8*/ s_endpgm
/*0000000007cc*/ s_nop           0x0
/*0000000007d0*/ s_nop           0x0
/*0000000007d4*/ s_nop           0x0
/*0000000007d8*/ s_nop           0x0
/*0000000007dc*/ s_nop           0x0
/*0000000007e0*/ s_nop           0x0
/*0000000007e4*/ s_nop           0x0
/*0000000007e8*/ s_nop           0x0
/*0000000007ec*/ s_nop           0x0
/*0000000007f0*/ s_nop           0x0
/*0000000007f4*/ s_nop           0x0
/*0000000007f8*/ s_nop           0x0
/*0000000007fc*/ s_nop           0x0
mul_get_local_size_x:
.skip 256
/*000000000900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000908*/ s_waitcnt       lgkmcnt(0)
/*00000000090c*/ s_clause        0x2
/*000000000910*/ s_load_dword    s1, s[4:5], 0x20
/*000000000918*/ s_load_dword    s3, s[4:5], 0x0
/*000000000920*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000000928*/ v_mov_b32       v4, 0
/*00000000092c*/ s_lshl_b32      s6, s6, 1
/*000000000930*/ s_lshl_b32      s7, s7, 1
/*000000000934*/ s_lshl_b32      s8, s8, 2
/*000000000938*/ v_mov_b32       v6, v4
/*00000000093c*/ v_mov_b32       v8, v4
/*000000000940*/ s_waitcnt       lgkmcnt(0)
/*000000000944*/ v_add3_u32      v7, s1, s8, v2
/*00000000094c*/ v_add3_u32      v3, s0, s6, v0
/*000000000954*/ v_add3_u32      v5, s2, s7, v1
/*00000000095c*/ s_lshl_b32      s0, s3, 1
/*000000000960*/ s_lshl_b32      s1, s3, 2
/*000000000964*/ v_mov_b32       v9, s0
/*000000000968*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000970*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000978*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000980*/ v_mov_b32       v6, s1
/*000000000984*/ v_add_co_u32    v7, vcc, s4, v0
/*00000000098c*/ v_add_co_ci_u32 v8, vcc, s5, v1, vcc
/*000000000990*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000998*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000099c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000009a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000009a8*/ global_store_dword v[7:8], v9, off
/*0000000009b0*/ global_store_dword v[2:3], v9, off
/*0000000009b8*/ global_store_dword v[4:5], v6, off
/*0000000009c0*/ s_endpgm
/*0000000009c4*/ s_nop           0x0
/*0000000009c8*/ s_nop           0x0
/*0000000009cc*/ s_nop           0x0
/*0000000009d0*/ s_nop           0x0
/*0000000009d4*/ s_nop           0x0
/*0000000009d8*/ s_nop           0x0
/*0000000009dc*/ s_nop           0x0
/*0000000009e0*/ s_nop           0x0
/*0000000009e4*/ s_nop           0x0
/*0000000009e8*/ s_nop           0x0
/*0000000009ec*/ s_nop           0x0
/*0000000009f0*/ s_nop           0x0
/*0000000009f4*/ s_nop           0x0
/*0000000009f8*/ s_nop           0x0
/*0000000009fc*/ s_nop           0x0
mul_get_global_id_x:
.skip 256
/*000000000b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000000b08*/ s_waitcnt       lgkmcnt(0)
/*000000000b0c*/ s_clause        0x2
/*000000000b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000000b18*/ s_load_dwordx2  s[14:15], s[4:5], 0x8
/*000000000b20*/ s_load_dword    s3, s[4:5], 0x0
/*000000000b28*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000000b30*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000000b38*/ v_mov_b32       v4, 0
/*000000000b3c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000000b44*/ v_mov_b32       v1, v4
/*000000000b48*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000000b50*/ v_add_nc_u32    v0, s2, v0
/*000000000b54*/ v_add_nc_u32    v7, s0, v3
/*000000000b58*/ s_waitcnt       lgkmcnt(0)
/*000000000b5c*/ v_add_nc_u32    v3, s1, v2
/*000000000b60*/ v_add_co_u32    v5, vcc, s14, v5
/*000000000b68*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000000b70*/ v_add_co_ci_u32 v6, vcc, s15, v6, vcc
/*000000000b74*/ v_mul_lo_u32    v9, v3, s3
/*000000000b7c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000000b84*/ v_mul_lo_u32    v11, v0, s3
/*000000000b8c*/ v_mul_lo_u32    v7, v7, s3
/*000000000b94*/ v_add_co_u32    v0, vcc, s14, v1
/*000000000b9c*/ v_add_co_ci_u32 v1, vcc, s15, v2, vcc
/*000000000ba0*/ v_add_co_u32    v2, vcc, s14, v3
/*000000000ba8*/ v_add_co_ci_u32 v3, vcc, s15, v4, vcc
/*000000000bac*/ global_store_dword v[5:6], v7, off
/*000000000bb4*/ global_store_dword v[0:1], v11, off
/*000000000bbc*/ global_store_dword v[2:3], v9, off
/*000000000bc4*/ s_endpgm
/*000000000bc8*/ s_nop           0x0
/*000000000bcc*/ s_nop           0x0
/*000000000bd0*/ s_nop           0x0
/*000000000bd4*/ s_nop           0x0
/*000000000bd8*/ s_nop           0x0
/*000000000bdc*/ s_nop           0x0
/*000000000be0*/ s_nop           0x0
/*000000000be4*/ s_nop           0x0
/*000000000be8*/ s_nop           0x0
/*000000000bec*/ s_nop           0x0
/*000000000bf0*/ s_nop           0x0
/*000000000bf4*/ s_nop           0x0
/*000000000bf8*/ s_nop           0x0
/*000000000bfc*/ s_nop           0x0
mul_get_global_size_x:
.skip 256
/*000000000d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000000d08*/ s_waitcnt       lgkmcnt(0)
/*000000000d0c*/ s_clause        0x1
/*000000000d10*/ s_load_dword    s1, s[6:7], 0x8
/*000000000d18*/ s_load_dword    s3, s[6:7], 0x20
/*000000000d20*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000000d28*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000000d30*/ v_mov_b32       v4, 0
/*000000000d34*/ s_lshl_b32      s6, s8, 4
/*000000000d38*/ s_lshl_b32      s7, s9, 1
/*000000000d3c*/ s_lshl_b32      s8, s10, 1
/*000000000d40*/ v_mov_b32       v6, v4
/*000000000d44*/ v_mov_b32       v8, v4
/*000000000d48*/ s_waitcnt       lgkmcnt(0)
/*000000000d4c*/ v_add3_u32      v7, s3, s8, v2
/*000000000d54*/ v_add3_u32      v3, s0, s6, v0
/*000000000d5c*/ v_add3_u32      v5, s2, s7, v1
/*000000000d64*/ s_mul_i32       s0, s12, s1
/*000000000d68*/ s_mul_i32       s2, s13, s1
/*000000000d6c*/ v_mov_b32       v11, s0
/*000000000d70*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000000d78*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000000d80*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000000d88*/ s_mul_i32       s0, s14, s1
/*000000000d8c*/ v_mov_b32       v13, s2
/*000000000d90*/ v_mov_b32       v7, s0
/*000000000d94*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000d9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000da0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000da8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000000dac*/ v_add_co_u32    v4, vcc, s4, v4
/*000000000db4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000000db8*/ global_store_dword v[0:1], v11, off
/*000000000dc0*/ global_store_dword v[2:3], v13, off
/*000000000dc8*/ global_store_dword v[4:5], v7, off
/*000000000dd0*/ s_endpgm
/*000000000dd4*/ s_nop           0x0
/*000000000dd8*/ s_nop           0x0
/*000000000ddc*/ s_nop           0x0
/*000000000de0*/ s_nop           0x0
/*000000000de4*/ s_nop           0x0
/*000000000de8*/ s_nop           0x0
/*000000000dec*/ s_nop           0x0
/*000000000df0*/ s_nop           0x0
/*000000000df4*/ s_nop           0x0
/*000000000df8*/ s_nop           0x0
/*000000000dfc*/ s_nop           0x0
mul_get_num_groups_x:
.skip 256
/*000000000f00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000000f08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000000f10*/ s_waitcnt       lgkmcnt(0)
/*000000000f14*/ s_clause        0x2
/*000000000f18*/ s_load_dword    s3, s[6:7], 0x20
/*000000000f20*/ s_load_dword    s11, s[6:7], 0x0
/*000000000f28*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000000f30*/ s_lshl_b32      s7, s9, 1
/*000000000f34*/ s_lshl_b32      s8, s8, 1
/*000000000f38*/ s_lshl_b32      s9, s10, 2
/*000000000f3c*/ v_mov_b32       v4, 0
/*000000000f40*/ v_mov_b32       v6, v4
/*000000000f44*/ s_and_b32       s6, s0, -2
/*000000000f48*/ v_add3_u32      v3, s12, s8, v0
/*000000000f50*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000000f58*/ s_lshr_b32      s0, s0, 1
/*000000000f5c*/ v_add3_u32      v5, s14, s7, v1
/*000000000f64*/ s_waitcnt       lgkmcnt(0)
/*000000000f68*/ v_add3_u32      v0, s3, s9, v2
/*000000000f70*/ v_lshlrev_b64   v[2:3], 2, v[3:4]
/*000000000f78*/ s_cmpk_lg_u32   s6, 0x0
/*000000000f7c*/ v_mov_b32       v1, v4
/*000000000f80*/ s_addc_u32      s0, s0, 0
/*000000000f84*/ s_and_b32       s6, s1, -2
/*000000000f88*/ v_lshlrev_b64   v[4:5], 2, v[5:6]
/*000000000f90*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000000f98*/ s_lshr_b32      s1, s1, 1
/*000000000f9c*/ s_mul_i32       s0, s0, s11
/*000000000fa0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000000fa8*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000000fb0*/ s_cmpk_lg_u32   s6, 0x0
/*000000000fb4*/ v_mov_b32       v9, s0
/*000000000fb8*/ s_addc_u32      s1, s1, 0
/*000000000fbc*/ s_and_b32       s3, s2, -4
/*000000000fc0*/ s_lshr_b32      s0, s2, 2
/*000000000fc4*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000000fcc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000000fd0*/ v_add_co_u32    v4, vcc, s4, v4
/*000000000fd8*/ s_mul_i32       s1, s1, s11
/*000000000fdc*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000000fe0*/ s_cmpk_lg_u32   s3, 0x0
/*000000000fe4*/ v_add_co_u32    v0, vcc, s4, v0
/*000000000fec*/ s_addc_u32      s0, s0, 0
/*000000000ff0*/ v_mov_b32       v7, s1
/*000000000ff4*/ s_mul_i32       s0, s0, s11
/*000000000ff8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000000ffc*/ v_mov_b32       v11, s0
/*000000001000*/ global_store_dword v[2:3], v9, off
/*000000001008*/ global_store_dword v[4:5], v7, off
/*000000001010*/ global_store_dword v[0:1], v11, off
/*000000001018*/ s_endpgm
/*00000000101c*/ s_nop           0x0
/*000000001020*/ s_nop           0x0
/*000000001024*/ s_nop           0x0
/*000000001028*/ s_nop           0x0
/*00000000102c*/ s_nop           0x0
/*000000001030*/ s_nop           0x0
/*000000001034*/ s_nop           0x0
/*000000001038*/ s_nop           0x0
/*00000000103c*/ s_nop           0x0
/*000000001040*/ s_nop           0x0
/*000000001044*/ s_nop           0x0
/*000000001048*/ s_nop           0x0
/*00000000104c*/ s_nop           0x0
/*000000001050*/ s_nop           0x0
/*000000001054*/ s_nop           0x0
/*000000001058*/ s_nop           0x0
/*00000000105c*/ s_nop           0x0
/*000000001060*/ s_nop           0x0
/*000000001064*/ s_nop           0x0
/*000000001068*/ s_nop           0x0
/*00000000106c*/ s_nop           0x0
/*000000001070*/ s_nop           0x0
/*000000001074*/ s_nop           0x0
/*000000001078*/ s_nop           0x0
/*00000000107c*/ s_nop           0x0
/*000000001080*/ s_nop           0x0
/*000000001084*/ s_nop           0x0
/*000000001088*/ s_nop           0x0
/*00000000108c*/ s_nop           0x0
/*000000001090*/ s_nop           0x0
/*000000001094*/ s_nop           0x0
/*000000001098*/ s_nop           0x0
/*00000000109c*/ s_nop           0x0
/*0000000010a0*/ s_nop           0x0
/*0000000010a4*/ s_nop           0x0
/*0000000010a8*/ s_nop           0x0
/*0000000010ac*/ s_nop           0x0
/*0000000010b0*/ s_nop           0x0
/*0000000010b4*/ s_nop           0x0
/*0000000010b8*/ s_nop           0x0
/*0000000010bc*/ s_nop           0x0
/*0000000010c0*/ s_nop           0x0
/*0000000010c4*/ s_nop           0x0
/*0000000010c8*/ s_nop           0x0
/*0000000010cc*/ s_nop           0x0
/*0000000010d0*/ s_nop           0x0
/*0000000010d4*/ s_nop           0x0
/*0000000010d8*/ s_nop           0x0
/*0000000010dc*/ s_nop           0x0
/*0000000010e0*/ s_nop           0x0
/*0000000010e4*/ s_nop           0x0
/*0000000010e8*/ s_nop           0x0
/*0000000010ec*/ s_nop           0x0
/*0000000010f0*/ s_nop           0x0
/*0000000010f4*/ s_nop           0x0
/*0000000010f8*/ s_nop           0x0
/*0000000010fc*/ s_nop           0x0
mul_get_work_dim_x:
.skip 256
/*000000001200*/ v_mov_b32       v1, s4
/*000000001204*/ v_mov_b32       v2, s5
/*000000001208*/ s_clause        0x2
/*00000000120c*/ s_load_dword    s2, s[6:7], 0x10
/*000000001214*/ s_load_dword    s3, s[6:7], 0x0
/*00000000121c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000001224*/ s_lshl_b32      s4, s8, 1
/*000000001228*/ global_load_ushort v2, v[1:2], off inst_offset:2
/*000000001230*/ v_mov_b32       v1, 0
/*000000001234*/ s_waitcnt       lgkmcnt(0)
/*000000001238*/ v_add3_u32      v0, s2, s4, v0
/*000000001240*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000001248*/ v_add_co_u32    v0, vcc, s0, v0
/*000000001250*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*000000001254*/ s_waitcnt       vmcnt(0)
/*000000001258*/ v_mul_lo_u32    v2, v2, s3
/*000000001260*/ global_store_dword v[0:1], v2, off
/*000000001268*/ s_endpgm
/*00000000126c*/ s_nop           0x0
/*000000001270*/ s_nop           0x0
/*000000001274*/ s_nop           0x0
/*000000001278*/ s_nop           0x0
/*00000000127c*/ s_nop           0x0
/*000000001280*/ s_nop           0x0
/*000000001284*/ s_nop           0x0
/*000000001288*/ s_nop           0x0
/*00000000128c*/ s_nop           0x0
/*000000001290*/ s_nop           0x0
/*000000001294*/ s_nop           0x0
/*000000001298*/ s_nop           0x0
/*00000000129c*/ s_nop           0x0
/*0000000012a0*/ s_nop           0x0
/*0000000012a4*/ s_nop           0x0
/*0000000012a8*/ s_nop           0x0
/*0000000012ac*/ s_nop           0x0
/*0000000012b0*/ s_nop           0x0
/*0000000012b4*/ s_nop           0x0
/*0000000012b8*/ s_nop           0x0
/*0000000012bc*/ s_nop           0x0
/*0000000012c0*/ s_nop           0x0
/*0000000012c4*/ s_nop           0x0
/*0000000012c8*/ s_nop           0x0
/*0000000012cc*/ s_nop           0x0
/*0000000012d0*/ s_nop           0x0
/*0000000012d4*/ s_nop           0x0
/*0000000012d8*/ s_nop           0x0
/*0000000012dc*/ s_nop           0x0
/*0000000012e0*/ s_nop           0x0
/*0000000012e4*/ s_nop           0x0
/*0000000012e8*/ s_nop           0x0
/*0000000012ec*/ s_nop           0x0
/*0000000012f0*/ s_nop           0x0
/*0000000012f4*/ s_nop           0x0
/*0000000012f8*/ s_nop           0x0
/*0000000012fc*/ s_nop           0x0
mul_x_get_global_offset:
.skip 256
/*000000001400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001408*/ s_waitcnt       lgkmcnt(0)
/*00000000140c*/ s_clause        0x2
/*000000001410*/ s_load_dword    s1, s[4:5], 0x20
/*000000001418*/ s_load_dword    s3, s[4:5], 0x8
/*000000001420*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000001428*/ v_mov_b32       v4, 0
/*00000000142c*/ s_lshl_b32      s6, s6, 4
/*000000001430*/ s_lshl_b32      s7, s7, 1
/*000000001434*/ s_lshl_b32      s8, s8, 1
/*000000001438*/ v_mov_b32       v6, v4
/*00000000143c*/ v_mov_b32       v8, v4
/*000000001440*/ s_waitcnt       lgkmcnt(0)
/*000000001444*/ v_add3_u32      v7, s1, s8, v2
/*00000000144c*/ v_add3_u32      v3, s0, s6, v0
/*000000001454*/ v_add3_u32      v5, s2, s7, v1
/*00000000145c*/ s_mul_i32       s0, s0, s3
/*000000001460*/ s_mul_i32       s2, s2, s3
/*000000001464*/ v_mov_b32       v11, s0
/*000000001468*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001470*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001478*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001480*/ s_mul_i32       s0, s1, s3
/*000000001484*/ v_mov_b32       v13, s2
/*000000001488*/ v_mov_b32       v7, s0
/*00000000148c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001494*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001498*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000014a0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000014a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000014ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000014b0*/ global_store_dword v[0:1], v11, off
/*0000000014b8*/ global_store_dword v[2:3], v13, off
/*0000000014c0*/ global_store_dword v[4:5], v7, off
/*0000000014c8*/ s_endpgm
/*0000000014cc*/ s_nop           0x0
/*0000000014d0*/ s_nop           0x0
/*0000000014d4*/ s_nop           0x0
/*0000000014d8*/ s_nop           0x0
/*0000000014dc*/ s_nop           0x0
/*0000000014e0*/ s_nop           0x0
/*0000000014e4*/ s_nop           0x0
/*0000000014e8*/ s_nop           0x0
/*0000000014ec*/ s_nop           0x0
/*0000000014f0*/ s_nop           0x0
/*0000000014f4*/ s_nop           0x0
/*0000000014f8*/ s_nop           0x0
/*0000000014fc*/ s_nop           0x0
mul_get_global_offset_get_global_offset:
.skip 256
/*000000001600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001608*/ s_waitcnt       lgkmcnt(0)
/*00000000160c*/ s_clause        0x1
/*000000001610*/ s_load_dword    s1, s[4:5], 0x20
/*000000001618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001620*/ v_mov_b32       v4, 0
/*000000001624*/ s_lshl_b32      s3, s6, 1
/*000000001628*/ s_lshl_b32      s6, s7, 4
/*00000000162c*/ s_lshl_b32      s7, s8, 1
/*000000001630*/ v_mov_b32       v6, v4
/*000000001634*/ v_mov_b32       v8, v4
/*000000001638*/ v_add3_u32      v3, s0, s3, v0
/*000000001640*/ v_add3_u32      v5, s2, s6, v1
/*000000001648*/ s_waitcnt       lgkmcnt(0)
/*00000000164c*/ v_add3_u32      v7, s1, s7, v2
/*000000001654*/ s_mul_i32       s0, s0, s0
/*000000001658*/ s_mul_i32       s2, s2, s2
/*00000000165c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001664*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000166c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001674*/ v_mov_b32       v11, s0
/*000000001678*/ s_mul_i32       s0, s1, s1
/*00000000167c*/ v_mov_b32       v13, s2
/*000000001680*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001688*/ v_mov_b32       v6, s0
/*00000000168c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001690*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001698*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000169c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000016a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000016a8*/ global_store_dword v[0:1], v11, off
/*0000000016b0*/ global_store_dword v[2:3], v13, off
/*0000000016b8*/ global_store_dword v[4:5], v6, off
/*0000000016c0*/ s_endpgm
/*0000000016c4*/ s_nop           0x0
/*0000000016c8*/ s_nop           0x0
/*0000000016cc*/ s_nop           0x0
/*0000000016d0*/ s_nop           0x0
/*0000000016d4*/ s_nop           0x0
/*0000000016d8*/ s_nop           0x0
/*0000000016dc*/ s_nop           0x0
/*0000000016e0*/ s_nop           0x0
/*0000000016e4*/ s_nop           0x0
/*0000000016e8*/ s_nop           0x0
/*0000000016ec*/ s_nop           0x0
/*0000000016f0*/ s_nop           0x0
/*0000000016f4*/ s_nop           0x0
/*0000000016f8*/ s_nop           0x0
/*0000000016fc*/ s_nop           0x0
mul_get_local_id_get_global_offset:
.skip 256
/*000000001800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001808*/ s_waitcnt       lgkmcnt(0)
/*00000000180c*/ s_clause        0x1
/*000000001810*/ s_load_dword    s1, s[4:5], 0x20
/*000000001818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001820*/ v_mov_b32       v4, 0
/*000000001824*/ s_lshl_b32      s3, s6, 3
/*000000001828*/ s_lshl_b32      s6, s7, 2
/*00000000182c*/ s_lshl_b32      s7, s8, 1
/*000000001830*/ v_mov_b32       v6, v4
/*000000001834*/ v_mov_b32       v8, v4
/*000000001838*/ v_add3_u32      v3, s0, s3, v0
/*000000001840*/ v_add3_u32      v5, s2, s6, v1
/*000000001848*/ s_waitcnt       lgkmcnt(0)
/*00000000184c*/ v_add3_u32      v7, s1, s7, v2
/*000000001854*/ v_mul_lo_u32    v9, v0, s0
/*00000000185c*/ v_mul_lo_u32    v10, v1, s2
/*000000001864*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000186c*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000001874*/ v_mul_lo_u32    v11, v2, s1
/*00000000187c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000001884*/ v_add_co_u32    v2, vcc, s4, v3
/*00000000188c*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000001890*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001898*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000189c*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000018a4*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000018a8*/ global_store_dword v[2:3], v9, off
/*0000000018b0*/ global_store_dword v[0:1], v10, off
/*0000000018b8*/ global_store_dword v[4:5], v11, off
/*0000000018c0*/ s_endpgm
/*0000000018c4*/ s_nop           0x0
/*0000000018c8*/ s_nop           0x0
/*0000000018cc*/ s_nop           0x0
/*0000000018d0*/ s_nop           0x0
/*0000000018d4*/ s_nop           0x0
/*0000000018d8*/ s_nop           0x0
/*0000000018dc*/ s_nop           0x0
/*0000000018e0*/ s_nop           0x0
/*0000000018e4*/ s_nop           0x0
/*0000000018e8*/ s_nop           0x0
/*0000000018ec*/ s_nop           0x0
/*0000000018f0*/ s_nop           0x0
/*0000000018f4*/ s_nop           0x0
/*0000000018f8*/ s_nop           0x0
/*0000000018fc*/ s_nop           0x0
mul_get_group_id_get_global_offset:
.skip 256
/*000000001a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001a08*/ s_waitcnt       lgkmcnt(0)
/*000000001a0c*/ s_clause        0x1
/*000000001a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001a20*/ v_mov_b32       v4, 0
/*000000001a24*/ s_lshl_b32      s3, s6, 1
/*000000001a28*/ s_lshl_b32      s9, s7, 4
/*000000001a2c*/ s_lshl_b32      s10, s8, 1
/*000000001a30*/ v_mov_b32       v6, v4
/*000000001a34*/ v_mov_b32       v8, v4
/*000000001a38*/ v_add3_u32      v3, s0, s3, v0
/*000000001a40*/ v_add3_u32      v5, s2, s9, v1
/*000000001a48*/ s_waitcnt       lgkmcnt(0)
/*000000001a4c*/ v_add3_u32      v7, s1, s10, v2
/*000000001a54*/ s_mul_i32       s0, s6, s0
/*000000001a58*/ s_mul_i32       s2, s7, s2
/*000000001a5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001a64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001a6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001a74*/ v_mov_b32       v11, s0
/*000000001a78*/ s_mul_i32       s0, s8, s1
/*000000001a7c*/ v_mov_b32       v13, s2
/*000000001a80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001a88*/ v_mov_b32       v6, s0
/*000000001a8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001a90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001a98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000001a9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000001aa4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000001aa8*/ global_store_dword v[0:1], v11, off
/*000000001ab0*/ global_store_dword v[2:3], v13, off
/*000000001ab8*/ global_store_dword v[4:5], v6, off
/*000000001ac0*/ s_endpgm
/*000000001ac4*/ s_nop           0x0
/*000000001ac8*/ s_nop           0x0
/*000000001acc*/ s_nop           0x0
/*000000001ad0*/ s_nop           0x0
/*000000001ad4*/ s_nop           0x0
/*000000001ad8*/ s_nop           0x0
/*000000001adc*/ s_nop           0x0
/*000000001ae0*/ s_nop           0x0
/*000000001ae4*/ s_nop           0x0
/*000000001ae8*/ s_nop           0x0
/*000000001aec*/ s_nop           0x0
/*000000001af0*/ s_nop           0x0
/*000000001af4*/ s_nop           0x0
/*000000001af8*/ s_nop           0x0
/*000000001afc*/ s_nop           0x0
mul_get_local_size_get_global_offset:
.skip 256
/*000000001c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001c08*/ s_waitcnt       lgkmcnt(0)
/*000000001c0c*/ s_clause        0x1
/*000000001c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001c18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001c20*/ v_mov_b32       v4, 0
/*000000001c24*/ s_lshl_b32      s3, s6, 1
/*000000001c28*/ s_lshl_b32      s6, s7, 1
/*000000001c2c*/ s_lshl_b32      s7, s8, 2
/*000000001c30*/ v_mov_b32       v6, v4
/*000000001c34*/ v_mov_b32       v8, v4
/*000000001c38*/ v_add3_u32      v3, s0, s3, v0
/*000000001c40*/ v_add3_u32      v5, s2, s6, v1
/*000000001c48*/ s_waitcnt       lgkmcnt(0)
/*000000001c4c*/ v_add3_u32      v7, s1, s7, v2
/*000000001c54*/ s_lshl_b32      s0, s0, 1
/*000000001c58*/ s_lshl_b32      s2, s2, 1
/*000000001c5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000001c64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000001c6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000001c74*/ v_mov_b32       v11, s0
/*000000001c78*/ s_lshl_b32      s0, s1, 2
/*000000001c7c*/ v_mov_b32       v13, s2
/*000000001c80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000001c88*/ v_mov_b32       v6, s0
/*000000001c8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000001c90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000001c98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000001c9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000001ca4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000001ca8*/ global_store_dword v[0:1], v11, off
/*000000001cb0*/ global_store_dword v[2:3], v13, off
/*000000001cb8*/ global_store_dword v[4:5], v6, off
/*000000001cc0*/ s_endpgm
/*000000001cc4*/ s_nop           0x0
/*000000001cc8*/ s_nop           0x0
/*000000001ccc*/ s_nop           0x0
/*000000001cd0*/ s_nop           0x0
/*000000001cd4*/ s_nop           0x0
/*000000001cd8*/ s_nop           0x0
/*000000001cdc*/ s_nop           0x0
/*000000001ce0*/ s_nop           0x0
/*000000001ce4*/ s_nop           0x0
/*000000001ce8*/ s_nop           0x0
/*000000001cec*/ s_nop           0x0
/*000000001cf0*/ s_nop           0x0
/*000000001cf4*/ s_nop           0x0
/*000000001cf8*/ s_nop           0x0
/*000000001cfc*/ s_nop           0x0
mul_get_global_id_get_global_offset:
.skip 256
/*000000001e00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000001e08*/ s_waitcnt       lgkmcnt(0)
/*000000001e0c*/ s_clause        0x1
/*000000001e10*/ s_load_dword    s1, s[4:5], 0x20
/*000000001e18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000001e20*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000001e28*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000001e30*/ v_mov_b32       v4, 0
/*000000001e34*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000001e3c*/ v_mov_b32       v1, v4
/*000000001e40*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000001e48*/ v_add_nc_u32    v0, s2, v0
/*000000001e4c*/ v_add_nc_u32    v7, s0, v3
/*000000001e50*/ s_waitcnt       lgkmcnt(0)
/*000000001e54*/ v_add_nc_u32    v3, s1, v2
/*000000001e58*/ v_add_co_u32    v5, vcc, s4, v5
/*000000001e60*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000001e68*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000001e6c*/ v_mul_lo_u32    v9, v3, s1
/*000000001e74*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000001e7c*/ v_mul_lo_u32    v11, v0, s2
/*000000001e84*/ v_mul_lo_u32    v7, v7, s0
/*000000001e8c*/ v_add_co_u32    v0, vcc, s4, v1
/*000000001e94*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000001e98*/ v_add_co_u32    v2, vcc, s4, v3
/*000000001ea0*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000001ea4*/ global_store_dword v[5:6], v7, off
/*000000001eac*/ global_store_dword v[0:1], v11, off
/*000000001eb4*/ global_store_dword v[2:3], v9, off
/*000000001ebc*/ s_endpgm
/*000000001ec0*/ s_nop           0x0
/*000000001ec4*/ s_nop           0x0
/*000000001ec8*/ s_nop           0x0
/*000000001ecc*/ s_nop           0x0
/*000000001ed0*/ s_nop           0x0
/*000000001ed4*/ s_nop           0x0
/*000000001ed8*/ s_nop           0x0
/*000000001edc*/ s_nop           0x0
/*000000001ee0*/ s_nop           0x0
/*000000001ee4*/ s_nop           0x0
/*000000001ee8*/ s_nop           0x0
/*000000001eec*/ s_nop           0x0
/*000000001ef0*/ s_nop           0x0
/*000000001ef4*/ s_nop           0x0
/*000000001ef8*/ s_nop           0x0
/*000000001efc*/ s_nop           0x0
mul_get_global_size_get_global_offset:
.skip 256
/*000000002000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002008*/ s_waitcnt       lgkmcnt(0)
/*00000000200c*/ s_load_dword    s1, s[6:7], 0x20
/*000000002014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000201c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000002024*/ v_mov_b32       v4, 0
/*000000002028*/ s_lshl_b32      s3, s8, 4
/*00000000202c*/ s_lshl_b32      s6, s9, 1
/*000000002030*/ s_lshl_b32      s7, s10, 1
/*000000002034*/ v_mov_b32       v6, v4
/*000000002038*/ v_mov_b32       v8, v4
/*00000000203c*/ s_waitcnt       lgkmcnt(0)
/*000000002040*/ v_add3_u32      v7, s1, s7, v2
/*000000002048*/ v_add3_u32      v3, s0, s3, v0
/*000000002050*/ v_add3_u32      v5, s2, s6, v1
/*000000002058*/ s_mul_i32       s0, s12, s0
/*00000000205c*/ s_mul_i32       s2, s13, s2
/*000000002060*/ v_mov_b32       v11, s0
/*000000002064*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000206c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002074*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000207c*/ s_mul_i32       s0, s14, s1
/*000000002080*/ v_mov_b32       v13, s2
/*000000002084*/ v_mov_b32       v7, s0
/*000000002088*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002090*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002094*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000209c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000020a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000020a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000020ac*/ global_store_dword v[0:1], v11, off
/*0000000020b4*/ global_store_dword v[2:3], v13, off
/*0000000020bc*/ global_store_dword v[4:5], v7, off
/*0000000020c4*/ s_endpgm
/*0000000020c8*/ s_nop           0x0
/*0000000020cc*/ s_nop           0x0
/*0000000020d0*/ s_nop           0x0
/*0000000020d4*/ s_nop           0x0
/*0000000020d8*/ s_nop           0x0
/*0000000020dc*/ s_nop           0x0
/*0000000020e0*/ s_nop           0x0
/*0000000020e4*/ s_nop           0x0
/*0000000020e8*/ s_nop           0x0
/*0000000020ec*/ s_nop           0x0
/*0000000020f0*/ s_nop           0x0
/*0000000020f4*/ s_nop           0x0
/*0000000020f8*/ s_nop           0x0
/*0000000020fc*/ s_nop           0x0
mul_get_num_groups_get_global_offset:
.skip 256
/*000000002200*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000002208*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000002210*/ s_waitcnt       lgkmcnt(0)
/*000000002214*/ s_clause        0x1
/*000000002218*/ s_load_dword    s3, s[6:7], 0x20
/*000000002220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000002228*/ s_lshl_b32      s7, s9, 1
/*00000000222c*/ s_lshl_b32      s6, s8, 1
/*000000002230*/ s_lshl_b32      s8, s10, 2
/*000000002234*/ v_mov_b32       v4, 0
/*000000002238*/ v_mov_b32       v6, v4
/*00000000223c*/ v_mov_b32       v8, v4
/*000000002240*/ s_and_b32       s9, s0, -2
/*000000002244*/ v_add3_u32      v3, s12, s6, v0
/*00000000224c*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000002254*/ s_lshr_b32      s0, s0, 1
/*000000002258*/ v_add3_u32      v5, s14, s7, v1
/*000000002260*/ s_waitcnt       lgkmcnt(0)
/*000000002264*/ v_add3_u32      v7, s3, s8, v2
/*00000000226c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000002274*/ s_cmpk_lg_u32   s9, 0x0
/*000000002278*/ s_addc_u32      s0, s0, 0
/*00000000227c*/ s_and_b32       s6, s1, -2
/*000000002280*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002288*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000002290*/ s_lshr_b32      s1, s1, 1
/*000000002294*/ s_mul_i32       s0, s0, s12
/*000000002298*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000022a0*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000022a8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000022ac*/ v_mov_b32       v6, s0
/*0000000022b0*/ s_addc_u32      s1, s1, 0
/*0000000022b4*/ s_and_b32       s6, s2, -4
/*0000000022b8*/ s_lshr_b32      s0, s2, 2
/*0000000022bc*/ v_cmp_gt_u32    s[6:7], s2, s6
/*0000000022c4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000022c8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000022d0*/ s_mul_i32       s1, s1, s14
/*0000000022d4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000022d8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000022dc*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000022e4*/ s_addc_u32      s0, s0, 0
/*0000000022e8*/ v_mov_b32       v9, s1
/*0000000022ec*/ s_mul_i32       s0, s0, s3
/*0000000022f0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000022f4*/ v_mov_b32       v11, s0
/*0000000022f8*/ global_store_dword v[0:1], v6, off
/*000000002300*/ global_store_dword v[2:3], v9, off
/*000000002308*/ global_store_dword v[4:5], v11, off
/*000000002310*/ s_endpgm
/*000000002314*/ s_nop           0x0
/*000000002318*/ s_nop           0x0
/*00000000231c*/ s_nop           0x0
/*000000002320*/ s_nop           0x0
/*000000002324*/ s_nop           0x0
/*000000002328*/ s_nop           0x0
/*00000000232c*/ s_nop           0x0
/*000000002330*/ s_nop           0x0
/*000000002334*/ s_nop           0x0
/*000000002338*/ s_nop           0x0
/*00000000233c*/ s_nop           0x0
/*000000002340*/ s_nop           0x0
/*000000002344*/ s_nop           0x0
/*000000002348*/ s_nop           0x0
/*00000000234c*/ s_nop           0x0
/*000000002350*/ s_nop           0x0
/*000000002354*/ s_nop           0x0
/*000000002358*/ s_nop           0x0
/*00000000235c*/ s_nop           0x0
/*000000002360*/ s_nop           0x0
/*000000002364*/ s_nop           0x0
/*000000002368*/ s_nop           0x0
/*00000000236c*/ s_nop           0x0
/*000000002370*/ s_nop           0x0
/*000000002374*/ s_nop           0x0
/*000000002378*/ s_nop           0x0
/*00000000237c*/ s_nop           0x0
/*000000002380*/ s_nop           0x0
/*000000002384*/ s_nop           0x0
/*000000002388*/ s_nop           0x0
/*00000000238c*/ s_nop           0x0
/*000000002390*/ s_nop           0x0
/*000000002394*/ s_nop           0x0
/*000000002398*/ s_nop           0x0
/*00000000239c*/ s_nop           0x0
/*0000000023a0*/ s_nop           0x0
/*0000000023a4*/ s_nop           0x0
/*0000000023a8*/ s_nop           0x0
/*0000000023ac*/ s_nop           0x0
/*0000000023b0*/ s_nop           0x0
/*0000000023b4*/ s_nop           0x0
/*0000000023b8*/ s_nop           0x0
/*0000000023bc*/ s_nop           0x0
/*0000000023c0*/ s_nop           0x0
/*0000000023c4*/ s_nop           0x0
/*0000000023c8*/ s_nop           0x0
/*0000000023cc*/ s_nop           0x0
/*0000000023d0*/ s_nop           0x0
/*0000000023d4*/ s_nop           0x0
/*0000000023d8*/ s_nop           0x0
/*0000000023dc*/ s_nop           0x0
/*0000000023e0*/ s_nop           0x0
/*0000000023e4*/ s_nop           0x0
/*0000000023e8*/ s_nop           0x0
/*0000000023ec*/ s_nop           0x0
/*0000000023f0*/ s_nop           0x0
/*0000000023f4*/ s_nop           0x0
/*0000000023f8*/ s_nop           0x0
/*0000000023fc*/ s_nop           0x0
mul_get_work_dim_get_global_offset:
.skip 256
/*000000002500*/ v_mov_b32       v3, s4
/*000000002504*/ v_mov_b32       v4, s5
/*000000002508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000002510*/ s_waitcnt       lgkmcnt(0)
/*000000002514*/ s_clause        0x1
/*000000002518*/ s_load_dword    s1, s[6:7], 0x20
/*000000002520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000002528*/ s_lshl_b32      s3, s8, 1
/*00000000252c*/ s_lshl_b32      s6, s9, 1
/*000000002530*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000002538*/ v_mov_b32       v4, 0
/*00000000253c*/ s_lshl_b32      s7, s10, 2
/*000000002540*/ v_mov_b32       v6, v4
/*000000002544*/ v_mov_b32       v8, v4
/*000000002548*/ v_add3_u32      v3, s0, s3, v0
/*000000002550*/ v_add3_u32      v5, s2, s6, v1
/*000000002558*/ s_waitcnt       lgkmcnt(0)
/*00000000255c*/ v_add3_u32      v7, s1, s7, v2
/*000000002564*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000256c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000002574*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000257c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002584*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002588*/ v_add_co_u32    v2, vcc, s4, v2
/*000000002590*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000002594*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000259c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000025a0*/ s_waitcnt       vmcnt(0)
/*0000000025a4*/ v_mul_lo_u32    v6, v9, s0
/*0000000025ac*/ v_mul_lo_u32    v13, v9, s2
/*0000000025b4*/ v_mul_lo_u32    v11, v9, s1
/*0000000025bc*/ global_store_dword v[0:1], v6, off
/*0000000025c4*/ global_store_dword v[2:3], v13, off
/*0000000025cc*/ global_store_dword v[4:5], v11, off
/*0000000025d4*/ s_endpgm
/*0000000025d8*/ s_nop           0x0
/*0000000025dc*/ s_nop           0x0
/*0000000025e0*/ s_nop           0x0
/*0000000025e4*/ s_nop           0x0
/*0000000025e8*/ s_nop           0x0
/*0000000025ec*/ s_nop           0x0
/*0000000025f0*/ s_nop           0x0
/*0000000025f4*/ s_nop           0x0
/*0000000025f8*/ s_nop           0x0
/*0000000025fc*/ s_nop           0x0
mul_x_get_local_id:
.skip 256
/*000000002700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002708*/ s_waitcnt       lgkmcnt(0)
/*00000000270c*/ s_clause        0x2
/*000000002710*/ s_load_dword    s1, s[4:5], 0x20
/*000000002718*/ s_load_dword    s3, s[4:5], 0x8
/*000000002720*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000002728*/ v_mov_b32       v4, 0
/*00000000272c*/ s_lshl_b32      s6, s6, 4
/*000000002730*/ s_lshl_b32      s7, s7, 1
/*000000002734*/ s_lshl_b32      s8, s8, 1
/*000000002738*/ v_mov_b32       v6, v4
/*00000000273c*/ v_mov_b32       v8, v4
/*000000002740*/ s_waitcnt       lgkmcnt(0)
/*000000002744*/ v_add3_u32      v7, s1, s8, v2
/*00000000274c*/ v_add3_u32      v3, s0, s6, v0
/*000000002754*/ v_add3_u32      v5, s2, s7, v1
/*00000000275c*/ v_mul_lo_u32    v9, v0, s3
/*000000002764*/ v_mul_lo_u32    v10, v1, s3
/*00000000276c*/ v_mul_lo_u32    v11, v2, s3
/*000000002774*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000277c*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002784*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*00000000278c*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002794*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002798*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000027a0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000027a4*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000027ac*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000027b0*/ global_store_dword v[2:3], v9, off
/*0000000027b8*/ global_store_dword v[0:1], v10, off
/*0000000027c0*/ global_store_dword v[4:5], v11, off
/*0000000027c8*/ s_endpgm
/*0000000027cc*/ s_nop           0x0
/*0000000027d0*/ s_nop           0x0
/*0000000027d4*/ s_nop           0x0
/*0000000027d8*/ s_nop           0x0
/*0000000027dc*/ s_nop           0x0
/*0000000027e0*/ s_nop           0x0
/*0000000027e4*/ s_nop           0x0
/*0000000027e8*/ s_nop           0x0
/*0000000027ec*/ s_nop           0x0
/*0000000027f0*/ s_nop           0x0
/*0000000027f4*/ s_nop           0x0
/*0000000027f8*/ s_nop           0x0
/*0000000027fc*/ s_nop           0x0
mul_get_global_offset_get_local_id:
.skip 256
/*000000002900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002908*/ s_waitcnt       lgkmcnt(0)
/*00000000290c*/ s_clause        0x1
/*000000002910*/ s_load_dword    s1, s[4:5], 0x20
/*000000002918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002920*/ v_mov_b32       v4, 0
/*000000002924*/ s_lshl_b32      s3, s6, 1
/*000000002928*/ s_lshl_b32      s6, s7, 4
/*00000000292c*/ s_lshl_b32      s7, s8, 1
/*000000002930*/ v_mov_b32       v6, v4
/*000000002934*/ v_mov_b32       v8, v4
/*000000002938*/ v_add3_u32      v3, s0, s3, v0
/*000000002940*/ v_add3_u32      v5, s2, s6, v1
/*000000002948*/ s_waitcnt       lgkmcnt(0)
/*00000000294c*/ v_add3_u32      v7, s1, s7, v2
/*000000002954*/ v_mul_lo_u32    v9, v0, s0
/*00000000295c*/ v_mul_lo_u32    v10, v1, s2
/*000000002964*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000296c*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002974*/ v_mul_lo_u32    v11, v2, s1
/*00000000297c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002984*/ v_add_co_u32    v2, vcc, s4, v3
/*00000000298c*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002990*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002998*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000299c*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000029a4*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000029a8*/ global_store_dword v[2:3], v9, off
/*0000000029b0*/ global_store_dword v[0:1], v10, off
/*0000000029b8*/ global_store_dword v[4:5], v11, off
/*0000000029c0*/ s_endpgm
/*0000000029c4*/ s_nop           0x0
/*0000000029c8*/ s_nop           0x0
/*0000000029cc*/ s_nop           0x0
/*0000000029d0*/ s_nop           0x0
/*0000000029d4*/ s_nop           0x0
/*0000000029d8*/ s_nop           0x0
/*0000000029dc*/ s_nop           0x0
/*0000000029e0*/ s_nop           0x0
/*0000000029e4*/ s_nop           0x0
/*0000000029e8*/ s_nop           0x0
/*0000000029ec*/ s_nop           0x0
/*0000000029f0*/ s_nop           0x0
/*0000000029f4*/ s_nop           0x0
/*0000000029f8*/ s_nop           0x0
/*0000000029fc*/ s_nop           0x0
mul_get_local_id_get_local_id:
.skip 256
/*000000002b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002b08*/ s_waitcnt       lgkmcnt(0)
/*000000002b0c*/ s_clause        0x1
/*000000002b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002b20*/ v_mov_b32       v4, 0
/*000000002b24*/ s_lshl_b32      s3, s6, 3
/*000000002b28*/ s_lshl_b32      s6, s7, 2
/*000000002b2c*/ s_lshl_b32      s7, s8, 1
/*000000002b30*/ v_mul_u32_u24   v9, v0, v0
/*000000002b34*/ v_mov_b32       v6, v4
/*000000002b38*/ v_mov_b32       v8, v4
/*000000002b3c*/ v_mul_u32_u24   v10, v1, v1
/*000000002b40*/ v_mul_u32_u24   v11, v2, v2
/*000000002b44*/ v_add3_u32      v3, s0, s3, v0
/*000000002b4c*/ v_add3_u32      v5, s2, s6, v1
/*000000002b54*/ s_waitcnt       lgkmcnt(0)
/*000000002b58*/ v_add3_u32      v7, s1, s7, v2
/*000000002b60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002b68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002b70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002b78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002b80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002b84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002b8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002b90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002b98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002b9c*/ global_store_dword v[2:3], v9, off
/*000000002ba4*/ global_store_dword v[0:1], v10, off
/*000000002bac*/ global_store_dword v[4:5], v11, off
/*000000002bb4*/ s_endpgm
/*000000002bb8*/ s_nop           0x0
/*000000002bbc*/ s_nop           0x0
/*000000002bc0*/ s_nop           0x0
/*000000002bc4*/ s_nop           0x0
/*000000002bc8*/ s_nop           0x0
/*000000002bcc*/ s_nop           0x0
/*000000002bd0*/ s_nop           0x0
/*000000002bd4*/ s_nop           0x0
/*000000002bd8*/ s_nop           0x0
/*000000002bdc*/ s_nop           0x0
/*000000002be0*/ s_nop           0x0
/*000000002be4*/ s_nop           0x0
/*000000002be8*/ s_nop           0x0
/*000000002bec*/ s_nop           0x0
/*000000002bf0*/ s_nop           0x0
/*000000002bf4*/ s_nop           0x0
/*000000002bf8*/ s_nop           0x0
/*000000002bfc*/ s_nop           0x0
mul_get_group_id_get_local_id:
.skip 256
/*000000002d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002d08*/ s_waitcnt       lgkmcnt(0)
/*000000002d0c*/ s_clause        0x1
/*000000002d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002d18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002d20*/ v_mov_b32       v4, 0
/*000000002d24*/ s_lshl_b32      s3, s6, 1
/*000000002d28*/ s_lshl_b32      s9, s7, 4
/*000000002d2c*/ s_lshl_b32      s10, s8, 1
/*000000002d30*/ v_mul_lo_u32    v9, v0, s6
/*000000002d38*/ v_mov_b32       v6, v4
/*000000002d3c*/ v_mov_b32       v8, v4
/*000000002d40*/ v_mul_lo_u32    v10, v1, s7
/*000000002d48*/ v_mul_lo_u32    v11, v2, s8
/*000000002d50*/ v_add3_u32      v3, s0, s3, v0
/*000000002d58*/ v_add3_u32      v5, s2, s9, v1
/*000000002d60*/ s_waitcnt       lgkmcnt(0)
/*000000002d64*/ v_add3_u32      v7, s1, s10, v2
/*000000002d6c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002d74*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002d7c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002d84*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002d8c*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002d90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002d98*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002d9c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002da4*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002da8*/ global_store_dword v[2:3], v9, off
/*000000002db0*/ global_store_dword v[0:1], v10, off
/*000000002db8*/ global_store_dword v[4:5], v11, off
/*000000002dc0*/ s_endpgm
/*000000002dc4*/ s_nop           0x0
/*000000002dc8*/ s_nop           0x0
/*000000002dcc*/ s_nop           0x0
/*000000002dd0*/ s_nop           0x0
/*000000002dd4*/ s_nop           0x0
/*000000002dd8*/ s_nop           0x0
/*000000002ddc*/ s_nop           0x0
/*000000002de0*/ s_nop           0x0
/*000000002de4*/ s_nop           0x0
/*000000002de8*/ s_nop           0x0
/*000000002dec*/ s_nop           0x0
/*000000002df0*/ s_nop           0x0
/*000000002df4*/ s_nop           0x0
/*000000002df8*/ s_nop           0x0
/*000000002dfc*/ s_nop           0x0
mul_get_local_size_get_local_id:
.skip 256
/*000000002f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000002f08*/ s_waitcnt       lgkmcnt(0)
/*000000002f0c*/ s_clause        0x1
/*000000002f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000002f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000002f20*/ v_mov_b32       v4, 0
/*000000002f24*/ s_lshl_b32      s3, s6, 1
/*000000002f28*/ s_lshl_b32      s6, s7, 1
/*000000002f2c*/ s_lshl_b32      s7, s8, 2
/*000000002f30*/ v_lshlrev_b32   v9, 1, v0
/*000000002f34*/ v_mov_b32       v6, v4
/*000000002f38*/ v_mov_b32       v8, v4
/*000000002f3c*/ v_lshlrev_b32   v10, 1, v1
/*000000002f40*/ v_lshlrev_b32   v11, 2, v2
/*000000002f44*/ v_add3_u32      v3, s0, s3, v0
/*000000002f4c*/ v_add3_u32      v5, s2, s6, v1
/*000000002f54*/ s_waitcnt       lgkmcnt(0)
/*000000002f58*/ v_add3_u32      v7, s1, s7, v2
/*000000002f60*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000002f68*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000002f70*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000002f78*/ v_add_co_u32    v2, vcc, s4, v3
/*000000002f80*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000002f84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000002f8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000002f90*/ v_add_co_u32    v4, vcc, s4, v5
/*000000002f98*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000002f9c*/ global_store_dword v[2:3], v9, off
/*000000002fa4*/ global_store_dword v[0:1], v10, off
/*000000002fac*/ global_store_dword v[4:5], v11, off
/*000000002fb4*/ s_endpgm
/*000000002fb8*/ s_nop           0x0
/*000000002fbc*/ s_nop           0x0
/*000000002fc0*/ s_nop           0x0
/*000000002fc4*/ s_nop           0x0
/*000000002fc8*/ s_nop           0x0
/*000000002fcc*/ s_nop           0x0
/*000000002fd0*/ s_nop           0x0
/*000000002fd4*/ s_nop           0x0
/*000000002fd8*/ s_nop           0x0
/*000000002fdc*/ s_nop           0x0
/*000000002fe0*/ s_nop           0x0
/*000000002fe4*/ s_nop           0x0
/*000000002fe8*/ s_nop           0x0
/*000000002fec*/ s_nop           0x0
/*000000002ff0*/ s_nop           0x0
/*000000002ff4*/ s_nop           0x0
/*000000002ff8*/ s_nop           0x0
/*000000002ffc*/ s_nop           0x0
mul_get_global_id_get_local_id:
.skip 256
/*000000003100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003108*/ s_waitcnt       lgkmcnt(0)
/*00000000310c*/ s_clause        0x1
/*000000003110*/ s_load_dword    s1, s[4:5], 0x20
/*000000003118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003120*/ v_mov_b32       v4, 0
/*000000003124*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000000312c*/ v_lshl_or_b32   v8, s7, 1, v1
/*000000003134*/ v_lshl_or_b32   v10, s8, 2, v2
/*00000000313c*/ v_mov_b32       v5, v4
/*000000003140*/ v_lshlrev_b64   v[6:7], 2, v[3:4]
/*000000003148*/ v_mov_b32       v9, v4
/*00000000314c*/ v_add_nc_u32    v4, s2, v8
/*000000003150*/ s_waitcnt       lgkmcnt(0)
/*000000003154*/ v_add_nc_u32    v8, s1, v10
/*000000003158*/ v_add_nc_u32    v3, s0, v3
/*00000000315c*/ v_add_co_u32    v6, vcc, s4, v6
/*000000003164*/ v_lshlrev_b64   v[10:11], 2, v[4:5]
/*00000000316c*/ v_mul_lo_u32    v4, v1, v4
/*000000003174*/ v_mul_lo_u32    v5, v3, v0
/*00000000317c*/ v_lshlrev_b64   v[0:1], 2, v[8:9]
/*000000003184*/ v_add_co_ci_u32 v7, vcc, s5, v7, vcc
/*000000003188*/ v_mul_lo_u32    v15, v2, v8
/*000000003190*/ v_add_co_u32    v2, vcc, s4, v10
/*000000003198*/ v_add_co_ci_u32 v3, vcc, s5, v11, vcc
/*00000000319c*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000031a4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000031a8*/ global_store_dword v[6:7], v5, off
/*0000000031b0*/ global_store_dword v[2:3], v4, off
/*0000000031b8*/ global_store_dword v[0:1], v15, off
/*0000000031c0*/ s_endpgm
/*0000000031c4*/ s_nop           0x0
/*0000000031c8*/ s_nop           0x0
/*0000000031cc*/ s_nop           0x0
/*0000000031d0*/ s_nop           0x0
/*0000000031d4*/ s_nop           0x0
/*0000000031d8*/ s_nop           0x0
/*0000000031dc*/ s_nop           0x0
/*0000000031e0*/ s_nop           0x0
/*0000000031e4*/ s_nop           0x0
/*0000000031e8*/ s_nop           0x0
/*0000000031ec*/ s_nop           0x0
/*0000000031f0*/ s_nop           0x0
/*0000000031f4*/ s_nop           0x0
/*0000000031f8*/ s_nop           0x0
/*0000000031fc*/ s_nop           0x0
mul_get_global_size_get_local_id:
.skip 256
/*000000003300*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003308*/ s_waitcnt       lgkmcnt(0)
/*00000000330c*/ s_load_dword    s1, s[6:7], 0x20
/*000000003314*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000331c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000003324*/ v_mov_b32       v4, 0
/*000000003328*/ s_lshl_b32      s3, s8, 4
/*00000000332c*/ s_lshl_b32      s6, s9, 1
/*000000003330*/ s_lshl_b32      s7, s10, 1
/*000000003334*/ v_mov_b32       v6, v4
/*000000003338*/ v_mov_b32       v8, v4
/*00000000333c*/ s_waitcnt       lgkmcnt(0)
/*000000003340*/ v_add3_u32      v7, s1, s7, v2
/*000000003348*/ v_add3_u32      v3, s0, s3, v0
/*000000003350*/ v_add3_u32      v5, s2, s6, v1
/*000000003358*/ v_mul_lo_u32    v9, s12, v0
/*000000003360*/ v_mul_lo_u32    v10, s13, v1
/*000000003368*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000003370*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000003378*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000003380*/ v_mul_lo_u32    v7, s14, v2
/*000000003388*/ v_add_co_u32    v3, vcc, s4, v3
/*000000003390*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000003394*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000339c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000033a0*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000033a8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000033ac*/ global_store_dword v[3:4], v9, off
/*0000000033b4*/ global_store_dword v[0:1], v10, off
/*0000000033bc*/ global_store_dword v[5:6], v7, off
/*0000000033c4*/ s_endpgm
/*0000000033c8*/ s_nop           0x0
/*0000000033cc*/ s_nop           0x0
/*0000000033d0*/ s_nop           0x0
/*0000000033d4*/ s_nop           0x0
/*0000000033d8*/ s_nop           0x0
/*0000000033dc*/ s_nop           0x0
/*0000000033e0*/ s_nop           0x0
/*0000000033e4*/ s_nop           0x0
/*0000000033e8*/ s_nop           0x0
/*0000000033ec*/ s_nop           0x0
/*0000000033f0*/ s_nop           0x0
/*0000000033f4*/ s_nop           0x0
/*0000000033f8*/ s_nop           0x0
/*0000000033fc*/ s_nop           0x0
mul_get_num_groups_get_local_id:
.skip 256
/*000000003500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000003508*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000003510*/ s_waitcnt       lgkmcnt(0)
/*000000003514*/ s_clause        0x1
/*000000003518*/ s_load_dword    s3, s[6:7], 0x20
/*000000003520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000003528*/ s_lshl_b32      s6, s8, 1
/*00000000352c*/ s_lshl_b32      s8, s9, 1
/*000000003530*/ s_lshl_b32      s9, s10, 2
/*000000003534*/ v_mov_b32       v4, 0
/*000000003538*/ v_mov_b32       v6, v4
/*00000000353c*/ v_mov_b32       v8, v4
/*000000003540*/ s_and_b32       s7, s0, -2
/*000000003544*/ v_add3_u32      v3, s12, s6, v0
/*00000000354c*/ v_cmp_gt_u32    s[7:8], s0, s7
/*000000003554*/ s_lshr_b32      s0, s0, 1
/*000000003558*/ v_add3_u32      v5, s14, s8, v1
/*000000003560*/ s_waitcnt       lgkmcnt(0)
/*000000003564*/ v_add3_u32      v7, s3, s9, v2
/*00000000356c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000003574*/ s_cmpk_lg_u32   s7, 0x0
/*000000003578*/ s_addc_u32      s0, s0, 0
/*00000000357c*/ s_and_b32       s6, s1, -2
/*000000003580*/ v_mul_lo_u32    v9, s0, v0
/*000000003588*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000003590*/ s_lshr_b32      s1, s1, 1
/*000000003594*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*00000000359c*/ v_add_co_u32    v3, vcc, s4, v3
/*0000000035a4*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*0000000035ac*/ s_cmpk_lg_u32   s6, 0x0
/*0000000035b0*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*0000000035b4*/ s_addc_u32      s1, s1, 0
/*0000000035b8*/ s_and_b32       s3, s2, -4
/*0000000035bc*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000035c4*/ v_cmp_gt_u32    s[0:1], s2, s3
/*0000000035cc*/ s_lshr_b32      s2, s2, 2
/*0000000035d0*/ v_mul_lo_u32    v11, s1, v1
/*0000000035d8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000035dc*/ v_add_co_u32    v0, vcc, s4, v7
/*0000000035e4*/ s_cmpk_lg_u32   s0, 0x0
/*0000000035e8*/ v_add_co_ci_u32 v1, vcc, s5, v8, vcc
/*0000000035ec*/ s_addc_u32      s0, s2, 0
/*0000000035f0*/ v_mul_lo_u32    v2, s0, v2
/*0000000035f8*/ global_store_dword v[3:4], v9, off
/*000000003600*/ global_store_dword v[5:6], v11, off
/*000000003608*/ global_store_dword v[0:1], v2, off
/*000000003610*/ s_endpgm
/*000000003614*/ s_nop           0x0
/*000000003618*/ s_nop           0x0
/*00000000361c*/ s_nop           0x0
/*000000003620*/ s_nop           0x0
/*000000003624*/ s_nop           0x0
/*000000003628*/ s_nop           0x0
/*00000000362c*/ s_nop           0x0
/*000000003630*/ s_nop           0x0
/*000000003634*/ s_nop           0x0
/*000000003638*/ s_nop           0x0
/*00000000363c*/ s_nop           0x0
/*000000003640*/ s_nop           0x0
/*000000003644*/ s_nop           0x0
/*000000003648*/ s_nop           0x0
/*00000000364c*/ s_nop           0x0
/*000000003650*/ s_nop           0x0
/*000000003654*/ s_nop           0x0
/*000000003658*/ s_nop           0x0
/*00000000365c*/ s_nop           0x0
/*000000003660*/ s_nop           0x0
/*000000003664*/ s_nop           0x0
/*000000003668*/ s_nop           0x0
/*00000000366c*/ s_nop           0x0
/*000000003670*/ s_nop           0x0
/*000000003674*/ s_nop           0x0
/*000000003678*/ s_nop           0x0
/*00000000367c*/ s_nop           0x0
/*000000003680*/ s_nop           0x0
/*000000003684*/ s_nop           0x0
/*000000003688*/ s_nop           0x0
/*00000000368c*/ s_nop           0x0
/*000000003690*/ s_nop           0x0
/*000000003694*/ s_nop           0x0
/*000000003698*/ s_nop           0x0
/*00000000369c*/ s_nop           0x0
/*0000000036a0*/ s_nop           0x0
/*0000000036a4*/ s_nop           0x0
/*0000000036a8*/ s_nop           0x0
/*0000000036ac*/ s_nop           0x0
/*0000000036b0*/ s_nop           0x0
/*0000000036b4*/ s_nop           0x0
/*0000000036b8*/ s_nop           0x0
/*0000000036bc*/ s_nop           0x0
/*0000000036c0*/ s_nop           0x0
/*0000000036c4*/ s_nop           0x0
/*0000000036c8*/ s_nop           0x0
/*0000000036cc*/ s_nop           0x0
/*0000000036d0*/ s_nop           0x0
/*0000000036d4*/ s_nop           0x0
/*0000000036d8*/ s_nop           0x0
/*0000000036dc*/ s_nop           0x0
/*0000000036e0*/ s_nop           0x0
/*0000000036e4*/ s_nop           0x0
/*0000000036e8*/ s_nop           0x0
/*0000000036ec*/ s_nop           0x0
/*0000000036f0*/ s_nop           0x0
/*0000000036f4*/ s_nop           0x0
/*0000000036f8*/ s_nop           0x0
/*0000000036fc*/ s_nop           0x0
mul_get_work_dim_get_local_id:
.skip 256
/*000000003800*/ v_mov_b32       v3, s4
/*000000003804*/ v_mov_b32       v4, s5
/*000000003808*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000003810*/ s_waitcnt       lgkmcnt(0)
/*000000003814*/ s_clause        0x1
/*000000003818*/ s_load_dword    s1, s[6:7], 0x20
/*000000003820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000003828*/ s_lshl_b32      s3, s8, 1
/*00000000382c*/ s_lshl_b32      s6, s9, 1
/*000000003830*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000003838*/ v_mov_b32       v4, 0
/*00000000383c*/ s_lshl_b32      s7, s10, 2
/*000000003840*/ v_mov_b32       v6, v4
/*000000003844*/ v_mov_b32       v8, v4
/*000000003848*/ v_add3_u32      v3, s0, s3, v0
/*000000003850*/ v_add3_u32      v5, s2, s6, v1
/*000000003858*/ s_waitcnt       lgkmcnt(0)
/*00000000385c*/ v_add3_u32      v7, s1, s7, v2
/*000000003864*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000386c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000003874*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*00000000387c*/ v_add_co_u32    v3, vcc, s4, v3
/*000000003884*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000003888*/ v_add_co_u32    v5, vcc, s4, v5
/*000000003890*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000003894*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000389c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*0000000038a0*/ s_waitcnt       vmcnt(0)
/*0000000038a4*/ v_mul_u32_u24   v10, v0, v15
/*0000000038a8*/ v_mul_u32_u24   v11, v1, v15
/*0000000038ac*/ v_mul_u32_u24   v2, v2, v15
/*0000000038b0*/ global_store_dword v[3:4], v10, off
/*0000000038b8*/ global_store_dword v[5:6], v11, off
/*0000000038c0*/ global_store_dword v[7:8], v2, off
/*0000000038c8*/ s_endpgm
/*0000000038cc*/ s_nop           0x0
/*0000000038d0*/ s_nop           0x0
/*0000000038d4*/ s_nop           0x0
/*0000000038d8*/ s_nop           0x0
/*0000000038dc*/ s_nop           0x0
/*0000000038e0*/ s_nop           0x0
/*0000000038e4*/ s_nop           0x0
/*0000000038e8*/ s_nop           0x0
/*0000000038ec*/ s_nop           0x0
/*0000000038f0*/ s_nop           0x0
/*0000000038f4*/ s_nop           0x0
/*0000000038f8*/ s_nop           0x0
/*0000000038fc*/ s_nop           0x0
mul_x_get_group_id:
.skip 256
/*000000003a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003a08*/ s_waitcnt       lgkmcnt(0)
/*000000003a0c*/ s_clause        0x2
/*000000003a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003a18*/ s_load_dword    s3, s[4:5], 0x8
/*000000003a20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000003a28*/ v_mov_b32       v4, 0
/*000000003a2c*/ s_lshl_b32      s9, s6, 4
/*000000003a30*/ s_lshl_b32      s10, s7, 1
/*000000003a34*/ s_lshl_b32      s11, s8, 1
/*000000003a38*/ v_mov_b32       v6, v4
/*000000003a3c*/ v_mov_b32       v8, v4
/*000000003a40*/ s_waitcnt       lgkmcnt(0)
/*000000003a44*/ v_add3_u32      v7, s1, s11, v2
/*000000003a4c*/ v_add3_u32      v3, s0, s9, v0
/*000000003a54*/ v_add3_u32      v5, s2, s10, v1
/*000000003a5c*/ s_mul_i32       s0, s6, s3
/*000000003a60*/ s_mul_i32       s1, s7, s3
/*000000003a64*/ v_mov_b32       v11, s0
/*000000003a68*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003a70*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003a78*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000003a80*/ s_mul_i32       s0, s8, s3
/*000000003a84*/ v_mov_b32       v13, s1
/*000000003a88*/ v_mov_b32       v7, s0
/*000000003a8c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003a94*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003a98*/ v_add_co_u32    v2, vcc, s4, v2
/*000000003aa0*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000003aa4*/ v_add_co_u32    v4, vcc, s4, v4
/*000000003aac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000003ab0*/ global_store_dword v[0:1], v11, off
/*000000003ab8*/ global_store_dword v[2:3], v13, off
/*000000003ac0*/ global_store_dword v[4:5], v7, off
/*000000003ac8*/ s_endpgm
/*000000003acc*/ s_nop           0x0
/*000000003ad0*/ s_nop           0x0
/*000000003ad4*/ s_nop           0x0
/*000000003ad8*/ s_nop           0x0
/*000000003adc*/ s_nop           0x0
/*000000003ae0*/ s_nop           0x0
/*000000003ae4*/ s_nop           0x0
/*000000003ae8*/ s_nop           0x0
/*000000003aec*/ s_nop           0x0
/*000000003af0*/ s_nop           0x0
/*000000003af4*/ s_nop           0x0
/*000000003af8*/ s_nop           0x0
/*000000003afc*/ s_nop           0x0
mul_get_global_offset_get_group_id:
.skip 256
/*000000003c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003c08*/ s_waitcnt       lgkmcnt(0)
/*000000003c0c*/ s_clause        0x1
/*000000003c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003c18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003c20*/ v_mov_b32       v4, 0
/*000000003c24*/ s_lshl_b32      s3, s6, 1
/*000000003c28*/ s_lshl_b32      s9, s7, 4
/*000000003c2c*/ s_lshl_b32      s10, s8, 1
/*000000003c30*/ v_mov_b32       v6, v4
/*000000003c34*/ v_mov_b32       v8, v4
/*000000003c38*/ v_add3_u32      v3, s0, s3, v0
/*000000003c40*/ v_add3_u32      v5, s2, s9, v1
/*000000003c48*/ s_waitcnt       lgkmcnt(0)
/*000000003c4c*/ v_add3_u32      v7, s1, s10, v2
/*000000003c54*/ s_mul_i32       s0, s6, s0
/*000000003c58*/ s_mul_i32       s2, s7, s2
/*000000003c5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000003c64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000003c6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000003c74*/ v_mov_b32       v11, s0
/*000000003c78*/ s_mul_i32       s0, s8, s1
/*000000003c7c*/ v_mov_b32       v13, s2
/*000000003c80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003c88*/ v_mov_b32       v6, s0
/*000000003c8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003c90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000003c98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000003c9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000003ca4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000003ca8*/ global_store_dword v[0:1], v11, off
/*000000003cb0*/ global_store_dword v[2:3], v13, off
/*000000003cb8*/ global_store_dword v[4:5], v6, off
/*000000003cc0*/ s_endpgm
/*000000003cc4*/ s_nop           0x0
/*000000003cc8*/ s_nop           0x0
/*000000003ccc*/ s_nop           0x0
/*000000003cd0*/ s_nop           0x0
/*000000003cd4*/ s_nop           0x0
/*000000003cd8*/ s_nop           0x0
/*000000003cdc*/ s_nop           0x0
/*000000003ce0*/ s_nop           0x0
/*000000003ce4*/ s_nop           0x0
/*000000003ce8*/ s_nop           0x0
/*000000003cec*/ s_nop           0x0
/*000000003cf0*/ s_nop           0x0
/*000000003cf4*/ s_nop           0x0
/*000000003cf8*/ s_nop           0x0
/*000000003cfc*/ s_nop           0x0
mul_get_local_id_get_group_id:
.skip 256
/*000000003e00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000003e08*/ s_waitcnt       lgkmcnt(0)
/*000000003e0c*/ s_clause        0x1
/*000000003e10*/ s_load_dword    s1, s[4:5], 0x20
/*000000003e18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000003e20*/ v_mov_b32       v4, 0
/*000000003e24*/ s_lshl_b32      s3, s6, 3
/*000000003e28*/ s_lshl_b32      s9, s7, 2
/*000000003e2c*/ s_lshl_b32      s10, s8, 1
/*000000003e30*/ v_mul_lo_u32    v9, s6, v0
/*000000003e38*/ v_mov_b32       v6, v4
/*000000003e3c*/ v_mov_b32       v8, v4
/*000000003e40*/ v_mul_lo_u32    v10, s7, v1
/*000000003e48*/ v_mul_lo_u32    v11, s8, v2
/*000000003e50*/ v_add3_u32      v3, s0, s3, v0
/*000000003e58*/ v_add3_u32      v5, s2, s9, v1
/*000000003e60*/ s_waitcnt       lgkmcnt(0)
/*000000003e64*/ v_add3_u32      v7, s1, s10, v2
/*000000003e6c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000003e74*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000003e7c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000003e84*/ v_add_co_u32    v2, vcc, s4, v3
/*000000003e8c*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000003e90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000003e98*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000003e9c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000003ea4*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000003ea8*/ global_store_dword v[2:3], v9, off
/*000000003eb0*/ global_store_dword v[0:1], v10, off
/*000000003eb8*/ global_store_dword v[4:5], v11, off
/*000000003ec0*/ s_endpgm
/*000000003ec4*/ s_nop           0x0
/*000000003ec8*/ s_nop           0x0
/*000000003ecc*/ s_nop           0x0
/*000000003ed0*/ s_nop           0x0
/*000000003ed4*/ s_nop           0x0
/*000000003ed8*/ s_nop           0x0
/*000000003edc*/ s_nop           0x0
/*000000003ee0*/ s_nop           0x0
/*000000003ee4*/ s_nop           0x0
/*000000003ee8*/ s_nop           0x0
/*000000003eec*/ s_nop           0x0
/*000000003ef0*/ s_nop           0x0
/*000000003ef4*/ s_nop           0x0
/*000000003ef8*/ s_nop           0x0
/*000000003efc*/ s_nop           0x0
mul_get_group_id_get_group_id:
.skip 256
/*000000004000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004008*/ s_waitcnt       lgkmcnt(0)
/*00000000400c*/ s_clause        0x1
/*000000004010*/ s_load_dword    s1, s[4:5], 0x20
/*000000004018*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004020*/ v_mov_b32       v4, 0
/*000000004024*/ s_lshl_b32      s3, s6, 1
/*000000004028*/ s_lshl_b32      s9, s7, 4
/*00000000402c*/ s_lshl_b32      s10, s8, 1
/*000000004030*/ s_mul_i32       s6, s6, s6
/*000000004034*/ v_mov_b32       v6, v4
/*000000004038*/ v_mov_b32       v8, v4
/*00000000403c*/ s_mul_i32       s7, s7, s7
/*000000004040*/ v_mov_b32       v11, s6
/*000000004044*/ v_mov_b32       v13, s7
/*000000004048*/ v_add3_u32      v3, s0, s3, v0
/*000000004050*/ v_add3_u32      v5, s2, s9, v1
/*000000004058*/ s_waitcnt       lgkmcnt(0)
/*00000000405c*/ v_add3_u32      v7, s1, s10, v2
/*000000004064*/ s_mul_i32       s0, s8, s8
/*000000004068*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004070*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004078*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004080*/ v_mov_b32       v6, s0
/*000000004084*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000408c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004090*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004098*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000409c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000040a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000040a8*/ global_store_dword v[0:1], v11, off
/*0000000040b0*/ global_store_dword v[2:3], v13, off
/*0000000040b8*/ global_store_dword v[4:5], v6, off
/*0000000040c0*/ s_endpgm
/*0000000040c4*/ s_nop           0x0
/*0000000040c8*/ s_nop           0x0
/*0000000040cc*/ s_nop           0x0
/*0000000040d0*/ s_nop           0x0
/*0000000040d4*/ s_nop           0x0
/*0000000040d8*/ s_nop           0x0
/*0000000040dc*/ s_nop           0x0
/*0000000040e0*/ s_nop           0x0
/*0000000040e4*/ s_nop           0x0
/*0000000040e8*/ s_nop           0x0
/*0000000040ec*/ s_nop           0x0
/*0000000040f0*/ s_nop           0x0
/*0000000040f4*/ s_nop           0x0
/*0000000040f8*/ s_nop           0x0
/*0000000040fc*/ s_nop           0x0
mul_get_local_size_get_group_id:
.skip 256
/*000000004200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004208*/ s_waitcnt       lgkmcnt(0)
/*00000000420c*/ s_clause        0x1
/*000000004210*/ s_load_dword    s1, s[4:5], 0x20
/*000000004218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004220*/ s_lshl_b32      s3, s6, 1
/*000000004224*/ v_mov_b32       v4, 0
/*000000004228*/ s_lshl_b32      s6, s7, 1
/*00000000422c*/ s_lshl_b32      s7, s8, 2
/*000000004230*/ v_mov_b32       v15, s3
/*000000004234*/ v_mov_b32       v13, s6
/*000000004238*/ v_mov_b32       v6, v4
/*00000000423c*/ v_mov_b32       v8, v4
/*000000004240*/ v_mov_b32       v11, s7
/*000000004244*/ v_add3_u32      v3, s0, s3, v0
/*00000000424c*/ v_add3_u32      v5, s2, s6, v1
/*000000004254*/ s_waitcnt       lgkmcnt(0)
/*000000004258*/ v_add3_u32      v7, s1, s7, v2
/*000000004260*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004268*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004270*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004278*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004280*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004284*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000428c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000004290*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004298*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000429c*/ global_store_dword v[0:1], v15, off
/*0000000042a4*/ global_store_dword v[2:3], v13, off
/*0000000042ac*/ global_store_dword v[4:5], v11, off
/*0000000042b4*/ s_endpgm
/*0000000042b8*/ s_nop           0x0
/*0000000042bc*/ s_nop           0x0
/*0000000042c0*/ s_nop           0x0
/*0000000042c4*/ s_nop           0x0
/*0000000042c8*/ s_nop           0x0
/*0000000042cc*/ s_nop           0x0
/*0000000042d0*/ s_nop           0x0
/*0000000042d4*/ s_nop           0x0
/*0000000042d8*/ s_nop           0x0
/*0000000042dc*/ s_nop           0x0
/*0000000042e0*/ s_nop           0x0
/*0000000042e4*/ s_nop           0x0
/*0000000042e8*/ s_nop           0x0
/*0000000042ec*/ s_nop           0x0
/*0000000042f0*/ s_nop           0x0
/*0000000042f4*/ s_nop           0x0
/*0000000042f8*/ s_nop           0x0
/*0000000042fc*/ s_nop           0x0
mul_get_global_id_get_group_id:
.skip 256
/*000000004400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004408*/ s_waitcnt       lgkmcnt(0)
/*00000000440c*/ s_clause        0x1
/*000000004410*/ s_load_dword    s1, s[4:5], 0x20
/*000000004418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004420*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000004428*/ v_mov_b32       v4, 0
/*00000000442c*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000004434*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000000443c*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000004444*/ v_mov_b32       v1, v4
/*000000004448*/ v_mov_b32       v8, v4
/*00000000444c*/ v_add_nc_u32    v0, s2, v0
/*000000004450*/ s_waitcnt       lgkmcnt(0)
/*000000004454*/ v_add_nc_u32    v7, s1, v2
/*000000004458*/ v_add_co_u32    v2, vcc, s4, v5
/*000000004460*/ v_add_nc_u32    v9, s0, v3
/*000000004464*/ v_add_co_ci_u32 v3, vcc, s5, v6, vcc
/*000000004468*/ v_lshlrev_b64   v[4:5], 2, v[0:1]
/*000000004470*/ v_mul_lo_u32    v11, s7, v0
/*000000004478*/ v_lshlrev_b64   v[0:1], 2, v[7:8]
/*000000004480*/ v_mul_lo_u32    v9, v9, s6
/*000000004488*/ v_mul_lo_u32    v10, s8, v7
/*000000004490*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004498*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000449c*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000044a4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000044a8*/ global_store_dword v[2:3], v9, off
/*0000000044b0*/ global_store_dword v[4:5], v11, off
/*0000000044b8*/ global_store_dword v[0:1], v10, off
/*0000000044c0*/ s_endpgm
/*0000000044c4*/ s_nop           0x0
/*0000000044c8*/ s_nop           0x0
/*0000000044cc*/ s_nop           0x0
/*0000000044d0*/ s_nop           0x0
/*0000000044d4*/ s_nop           0x0
/*0000000044d8*/ s_nop           0x0
/*0000000044dc*/ s_nop           0x0
/*0000000044e0*/ s_nop           0x0
/*0000000044e4*/ s_nop           0x0
/*0000000044e8*/ s_nop           0x0
/*0000000044ec*/ s_nop           0x0
/*0000000044f0*/ s_nop           0x0
/*0000000044f4*/ s_nop           0x0
/*0000000044f8*/ s_nop           0x0
/*0000000044fc*/ s_nop           0x0
mul_get_global_size_get_group_id:
.skip 256
/*000000004600*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004608*/ s_waitcnt       lgkmcnt(0)
/*00000000460c*/ s_load_dword    s1, s[6:7], 0x20
/*000000004614*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000461c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000004624*/ v_mov_b32       v4, 0
/*000000004628*/ s_lshl_b32      s3, s8, 4
/*00000000462c*/ s_lshl_b32      s6, s9, 1
/*000000004630*/ s_lshl_b32      s7, s10, 1
/*000000004634*/ v_mov_b32       v6, v4
/*000000004638*/ v_mov_b32       v8, v4
/*00000000463c*/ s_waitcnt       lgkmcnt(0)
/*000000004640*/ v_add3_u32      v7, s1, s7, v2
/*000000004648*/ v_add3_u32      v3, s0, s3, v0
/*000000004650*/ v_add3_u32      v5, s2, s6, v1
/*000000004658*/ s_mul_i32       s0, s12, s8
/*00000000465c*/ s_mul_i32       s1, s13, s9
/*000000004660*/ v_mov_b32       v11, s0
/*000000004664*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000466c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004674*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000467c*/ s_mul_i32       s0, s14, s10
/*000000004680*/ v_mov_b32       v13, s1
/*000000004684*/ v_mov_b32       v7, s0
/*000000004688*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004690*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004694*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000469c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000046a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000046a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000046ac*/ global_store_dword v[0:1], v11, off
/*0000000046b4*/ global_store_dword v[2:3], v13, off
/*0000000046bc*/ global_store_dword v[4:5], v7, off
/*0000000046c4*/ s_endpgm
/*0000000046c8*/ s_nop           0x0
/*0000000046cc*/ s_nop           0x0
/*0000000046d0*/ s_nop           0x0
/*0000000046d4*/ s_nop           0x0
/*0000000046d8*/ s_nop           0x0
/*0000000046dc*/ s_nop           0x0
/*0000000046e0*/ s_nop           0x0
/*0000000046e4*/ s_nop           0x0
/*0000000046e8*/ s_nop           0x0
/*0000000046ec*/ s_nop           0x0
/*0000000046f0*/ s_nop           0x0
/*0000000046f4*/ s_nop           0x0
/*0000000046f8*/ s_nop           0x0
/*0000000046fc*/ s_nop           0x0
mul_get_num_groups_get_group_id:
.skip 256
/*000000004800*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000004808*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000004810*/ s_waitcnt       lgkmcnt(0)
/*000000004814*/ s_clause        0x1
/*000000004818*/ s_load_dword    s3, s[6:7], 0x20
/*000000004820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000004828*/ s_lshl_b32      s6, s8, 1
/*00000000482c*/ s_lshl_b32      s7, s9, 1
/*000000004830*/ s_lshl_b32      s11, s10, 2
/*000000004834*/ v_mov_b32       v4, 0
/*000000004838*/ v_mov_b32       v6, v4
/*00000000483c*/ v_mov_b32       v8, v4
/*000000004840*/ s_and_b32       s13, s0, -2
/*000000004844*/ s_waitcnt       lgkmcnt(0)
/*000000004848*/ v_add3_u32      v7, s3, s11, v2
/*000000004850*/ v_cmp_gt_u32    s[13:14], s0, s13
/*000000004858*/ s_lshr_b32      s0, s0, 1
/*00000000485c*/ v_add3_u32      v3, s12, s6, v0
/*000000004864*/ v_add3_u32      v5, s14, s7, v1
/*00000000486c*/ s_cmpk_lg_u32   s13, 0x0
/*000000004870*/ s_addc_u32      s0, s0, 0
/*000000004874*/ s_and_b32       s3, s1, -2
/*000000004878*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004880*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000004888*/ s_lshr_b32      s1, s1, 1
/*00000000488c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004894*/ s_mul_i32       s0, s0, s8
/*000000004898*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000048a0*/ s_cmpk_lg_u32   s3, 0x0
/*0000000048a4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000048ac*/ s_addc_u32      s1, s1, 0
/*0000000048b0*/ s_and_b32       s3, s2, -4
/*0000000048b4*/ v_mov_b32       v6, s0
/*0000000048b8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000048c0*/ s_lshr_b32      s0, s2, 2
/*0000000048c4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000048c8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000048d0*/ s_mul_i32       s1, s1, s9
/*0000000048d4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000048d8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000048dc*/ s_addc_u32      s0, s0, 0
/*0000000048e0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000048e8*/ s_mul_i32       s0, s0, s10
/*0000000048ec*/ v_mov_b32       v9, s1
/*0000000048f0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000048f4*/ v_mov_b32       v11, s0
/*0000000048f8*/ global_store_dword v[0:1], v6, off
/*000000004900*/ global_store_dword v[2:3], v9, off
/*000000004908*/ global_store_dword v[4:5], v11, off
/*000000004910*/ s_endpgm
/*000000004914*/ s_nop           0x0
/*000000004918*/ s_nop           0x0
/*00000000491c*/ s_nop           0x0
/*000000004920*/ s_nop           0x0
/*000000004924*/ s_nop           0x0
/*000000004928*/ s_nop           0x0
/*00000000492c*/ s_nop           0x0
/*000000004930*/ s_nop           0x0
/*000000004934*/ s_nop           0x0
/*000000004938*/ s_nop           0x0
/*00000000493c*/ s_nop           0x0
/*000000004940*/ s_nop           0x0
/*000000004944*/ s_nop           0x0
/*000000004948*/ s_nop           0x0
/*00000000494c*/ s_nop           0x0
/*000000004950*/ s_nop           0x0
/*000000004954*/ s_nop           0x0
/*000000004958*/ s_nop           0x0
/*00000000495c*/ s_nop           0x0
/*000000004960*/ s_nop           0x0
/*000000004964*/ s_nop           0x0
/*000000004968*/ s_nop           0x0
/*00000000496c*/ s_nop           0x0
/*000000004970*/ s_nop           0x0
/*000000004974*/ s_nop           0x0
/*000000004978*/ s_nop           0x0
/*00000000497c*/ s_nop           0x0
/*000000004980*/ s_nop           0x0
/*000000004984*/ s_nop           0x0
/*000000004988*/ s_nop           0x0
/*00000000498c*/ s_nop           0x0
/*000000004990*/ s_nop           0x0
/*000000004994*/ s_nop           0x0
/*000000004998*/ s_nop           0x0
/*00000000499c*/ s_nop           0x0
/*0000000049a0*/ s_nop           0x0
/*0000000049a4*/ s_nop           0x0
/*0000000049a8*/ s_nop           0x0
/*0000000049ac*/ s_nop           0x0
/*0000000049b0*/ s_nop           0x0
/*0000000049b4*/ s_nop           0x0
/*0000000049b8*/ s_nop           0x0
/*0000000049bc*/ s_nop           0x0
/*0000000049c0*/ s_nop           0x0
/*0000000049c4*/ s_nop           0x0
/*0000000049c8*/ s_nop           0x0
/*0000000049cc*/ s_nop           0x0
/*0000000049d0*/ s_nop           0x0
/*0000000049d4*/ s_nop           0x0
/*0000000049d8*/ s_nop           0x0
/*0000000049dc*/ s_nop           0x0
/*0000000049e0*/ s_nop           0x0
/*0000000049e4*/ s_nop           0x0
/*0000000049e8*/ s_nop           0x0
/*0000000049ec*/ s_nop           0x0
/*0000000049f0*/ s_nop           0x0
/*0000000049f4*/ s_nop           0x0
/*0000000049f8*/ s_nop           0x0
/*0000000049fc*/ s_nop           0x0
mul_get_work_dim_get_group_id:
.skip 256
/*000000004b00*/ v_mov_b32       v3, s4
/*000000004b04*/ v_mov_b32       v4, s5
/*000000004b08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000004b10*/ s_waitcnt       lgkmcnt(0)
/*000000004b14*/ s_clause        0x1
/*000000004b18*/ s_load_dword    s1, s[6:7], 0x20
/*000000004b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000004b28*/ s_lshl_b32      s3, s8, 1
/*000000004b2c*/ s_lshl_b32      s6, s9, 1
/*000000004b30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000004b38*/ v_mov_b32       v4, 0
/*000000004b3c*/ s_lshl_b32      s7, s10, 2
/*000000004b40*/ v_mov_b32       v6, v4
/*000000004b44*/ v_mov_b32       v8, v4
/*000000004b48*/ v_add3_u32      v3, s0, s3, v0
/*000000004b50*/ v_add3_u32      v5, s2, s6, v1
/*000000004b58*/ s_waitcnt       lgkmcnt(0)
/*000000004b5c*/ v_add3_u32      v7, s1, s7, v2
/*000000004b64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004b6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004b74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004b7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004b84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004b88*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004b90*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000004b94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004b9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004ba0*/ s_waitcnt       vmcnt(0)
/*000000004ba4*/ v_mul_lo_u32    v6, s8, v9
/*000000004bac*/ v_mul_lo_u32    v13, s9, v9
/*000000004bb4*/ v_mul_lo_u32    v11, s10, v9
/*000000004bbc*/ global_store_dword v[0:1], v6, off
/*000000004bc4*/ global_store_dword v[2:3], v13, off
/*000000004bcc*/ global_store_dword v[4:5], v11, off
/*000000004bd4*/ s_endpgm
/*000000004bd8*/ s_nop           0x0
/*000000004bdc*/ s_nop           0x0
/*000000004be0*/ s_nop           0x0
/*000000004be4*/ s_nop           0x0
/*000000004be8*/ s_nop           0x0
/*000000004bec*/ s_nop           0x0
/*000000004bf0*/ s_nop           0x0
/*000000004bf4*/ s_nop           0x0
/*000000004bf8*/ s_nop           0x0
/*000000004bfc*/ s_nop           0x0
mul_x_get_local_size:
.skip 256
/*000000004d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004d08*/ s_waitcnt       lgkmcnt(0)
/*000000004d0c*/ s_clause        0x2
/*000000004d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000004d18*/ s_load_dword    s3, s[4:5], 0x8
/*000000004d20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000004d28*/ v_mov_b32       v4, 0
/*000000004d2c*/ s_lshl_b32      s6, s6, 4
/*000000004d30*/ s_lshl_b32      s7, s7, 1
/*000000004d34*/ s_lshl_b32      s8, s8, 1
/*000000004d38*/ v_mov_b32       v6, v4
/*000000004d3c*/ v_mov_b32       v8, v4
/*000000004d40*/ s_waitcnt       lgkmcnt(0)
/*000000004d44*/ v_add3_u32      v7, s1, s8, v2
/*000000004d4c*/ v_add3_u32      v3, s0, s6, v0
/*000000004d54*/ v_add3_u32      v5, s2, s7, v1
/*000000004d5c*/ s_lshl_b32      s0, s3, 4
/*000000004d60*/ s_lshl_b32      s1, s3, 1
/*000000004d64*/ v_mov_b32       v11, s0
/*000000004d68*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004d70*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004d78*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004d80*/ v_mov_b32       v6, s1
/*000000004d84*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004d8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004d90*/ v_add_co_u32    v7, vcc, s4, v2
/*000000004d98*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*000000004d9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004da4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004da8*/ global_store_dword v[0:1], v11, off
/*000000004db0*/ global_store_dword v[7:8], v6, off
/*000000004db8*/ global_store_dword v[4:5], v6, off
/*000000004dc0*/ s_endpgm
/*000000004dc4*/ s_nop           0x0
/*000000004dc8*/ s_nop           0x0
/*000000004dcc*/ s_nop           0x0
/*000000004dd0*/ s_nop           0x0
/*000000004dd4*/ s_nop           0x0
/*000000004dd8*/ s_nop           0x0
/*000000004ddc*/ s_nop           0x0
/*000000004de0*/ s_nop           0x0
/*000000004de4*/ s_nop           0x0
/*000000004de8*/ s_nop           0x0
/*000000004dec*/ s_nop           0x0
/*000000004df0*/ s_nop           0x0
/*000000004df4*/ s_nop           0x0
/*000000004df8*/ s_nop           0x0
/*000000004dfc*/ s_nop           0x0
mul_get_global_offset_get_local_size:
.skip 256
/*000000004f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000004f08*/ s_waitcnt       lgkmcnt(0)
/*000000004f0c*/ s_clause        0x1
/*000000004f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000004f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000004f20*/ v_mov_b32       v4, 0
/*000000004f24*/ s_lshl_b32      s3, s6, 1
/*000000004f28*/ s_lshl_b32      s6, s7, 4
/*000000004f2c*/ s_lshl_b32      s7, s8, 1
/*000000004f30*/ v_mov_b32       v6, v4
/*000000004f34*/ v_mov_b32       v8, v4
/*000000004f38*/ v_add3_u32      v3, s0, s3, v0
/*000000004f40*/ v_add3_u32      v5, s2, s6, v1
/*000000004f48*/ s_waitcnt       lgkmcnt(0)
/*000000004f4c*/ v_add3_u32      v7, s1, s7, v2
/*000000004f54*/ s_lshl_b32      s0, s0, 1
/*000000004f58*/ s_lshl_b32      s2, s2, 4
/*000000004f5c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000004f64*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000004f6c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000004f74*/ v_mov_b32       v11, s0
/*000000004f78*/ s_lshl_b32      s0, s1, 1
/*000000004f7c*/ v_mov_b32       v13, s2
/*000000004f80*/ v_add_co_u32    v0, vcc, s4, v0
/*000000004f88*/ v_mov_b32       v6, s0
/*000000004f8c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000004f90*/ v_add_co_u32    v2, vcc, s4, v2
/*000000004f98*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000004f9c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000004fa4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000004fa8*/ global_store_dword v[0:1], v11, off
/*000000004fb0*/ global_store_dword v[2:3], v13, off
/*000000004fb8*/ global_store_dword v[4:5], v6, off
/*000000004fc0*/ s_endpgm
/*000000004fc4*/ s_nop           0x0
/*000000004fc8*/ s_nop           0x0
/*000000004fcc*/ s_nop           0x0
/*000000004fd0*/ s_nop           0x0
/*000000004fd4*/ s_nop           0x0
/*000000004fd8*/ s_nop           0x0
/*000000004fdc*/ s_nop           0x0
/*000000004fe0*/ s_nop           0x0
/*000000004fe4*/ s_nop           0x0
/*000000004fe8*/ s_nop           0x0
/*000000004fec*/ s_nop           0x0
/*000000004ff0*/ s_nop           0x0
/*000000004ff4*/ s_nop           0x0
/*000000004ff8*/ s_nop           0x0
/*000000004ffc*/ s_nop           0x0
mul_get_local_id_get_local_size:
.skip 256
/*000000005100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005108*/ s_waitcnt       lgkmcnt(0)
/*00000000510c*/ s_clause        0x1
/*000000005110*/ s_load_dword    s1, s[4:5], 0x20
/*000000005118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005120*/ v_mov_b32       v4, 0
/*000000005124*/ s_lshl_b32      s3, s6, 3
/*000000005128*/ s_lshl_b32      s6, s7, 2
/*00000000512c*/ s_lshl_b32      s7, s8, 1
/*000000005130*/ v_lshlrev_b32   v9, 3, v0
/*000000005134*/ v_mov_b32       v6, v4
/*000000005138*/ v_mov_b32       v8, v4
/*00000000513c*/ v_lshlrev_b32   v10, 2, v1
/*000000005140*/ v_lshlrev_b32   v11, 1, v2
/*000000005144*/ v_add3_u32      v3, s0, s3, v0
/*00000000514c*/ v_add3_u32      v5, s2, s6, v1
/*000000005154*/ s_waitcnt       lgkmcnt(0)
/*000000005158*/ v_add3_u32      v7, s1, s7, v2
/*000000005160*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000005168*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*000000005170*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000005178*/ v_add_co_u32    v2, vcc, s4, v3
/*000000005180*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000005184*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000518c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005190*/ v_add_co_u32    v4, vcc, s4, v5
/*000000005198*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000519c*/ global_store_dword v[2:3], v9, off
/*0000000051a4*/ global_store_dword v[0:1], v10, off
/*0000000051ac*/ global_store_dword v[4:5], v11, off
/*0000000051b4*/ s_endpgm
/*0000000051b8*/ s_nop           0x0
/*0000000051bc*/ s_nop           0x0
/*0000000051c0*/ s_nop           0x0
/*0000000051c4*/ s_nop           0x0
/*0000000051c8*/ s_nop           0x0
/*0000000051cc*/ s_nop           0x0
/*0000000051d0*/ s_nop           0x0
/*0000000051d4*/ s_nop           0x0
/*0000000051d8*/ s_nop           0x0
/*0000000051dc*/ s_nop           0x0
/*0000000051e0*/ s_nop           0x0
/*0000000051e4*/ s_nop           0x0
/*0000000051e8*/ s_nop           0x0
/*0000000051ec*/ s_nop           0x0
/*0000000051f0*/ s_nop           0x0
/*0000000051f4*/ s_nop           0x0
/*0000000051f8*/ s_nop           0x0
/*0000000051fc*/ s_nop           0x0
mul_get_group_id_get_local_size:
.skip 256
/*000000005300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005308*/ s_waitcnt       lgkmcnt(0)
/*00000000530c*/ s_clause        0x1
/*000000005310*/ s_load_dword    s1, s[4:5], 0x20
/*000000005318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005320*/ s_lshl_b32      s3, s6, 1
/*000000005324*/ v_mov_b32       v4, 0
/*000000005328*/ s_lshl_b32      s6, s7, 4
/*00000000532c*/ s_lshl_b32      s7, s8, 1
/*000000005330*/ v_mov_b32       v15, s3
/*000000005334*/ v_mov_b32       v13, s6
/*000000005338*/ v_mov_b32       v6, v4
/*00000000533c*/ v_mov_b32       v8, v4
/*000000005340*/ v_mov_b32       v11, s7
/*000000005344*/ v_add3_u32      v3, s0, s3, v0
/*00000000534c*/ v_add3_u32      v5, s2, s6, v1
/*000000005354*/ s_waitcnt       lgkmcnt(0)
/*000000005358*/ v_add3_u32      v7, s1, s7, v2
/*000000005360*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005368*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005370*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005378*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005380*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005384*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000538c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000005390*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005398*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000539c*/ global_store_dword v[0:1], v15, off
/*0000000053a4*/ global_store_dword v[2:3], v13, off
/*0000000053ac*/ global_store_dword v[4:5], v11, off
/*0000000053b4*/ s_endpgm
/*0000000053b8*/ s_nop           0x0
/*0000000053bc*/ s_nop           0x0
/*0000000053c0*/ s_nop           0x0
/*0000000053c4*/ s_nop           0x0
/*0000000053c8*/ s_nop           0x0
/*0000000053cc*/ s_nop           0x0
/*0000000053d0*/ s_nop           0x0
/*0000000053d4*/ s_nop           0x0
/*0000000053d8*/ s_nop           0x0
/*0000000053dc*/ s_nop           0x0
/*0000000053e0*/ s_nop           0x0
/*0000000053e4*/ s_nop           0x0
/*0000000053e8*/ s_nop           0x0
/*0000000053ec*/ s_nop           0x0
/*0000000053f0*/ s_nop           0x0
/*0000000053f4*/ s_nop           0x0
/*0000000053f8*/ s_nop           0x0
/*0000000053fc*/ s_nop           0x0
mul_get_local_size_get_local_size:
.skip 256
/*000000005500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005508*/ s_waitcnt       lgkmcnt(0)
/*00000000550c*/ s_clause        0x1
/*000000005510*/ s_load_dword    s1, s[4:5], 0x20
/*000000005518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005520*/ v_mov_b32       v4, 0
/*000000005524*/ s_lshl_b32      s3, s6, 1
/*000000005528*/ s_lshl_b32      s6, s7, 1
/*00000000552c*/ s_lshl_b32      s7, s8, 2
/*000000005530*/ v_mov_b32       v9, 4
/*000000005534*/ v_mov_b32       v6, v4
/*000000005538*/ v_mov_b32       v8, v4
/*00000000553c*/ v_mov_b32       v10, 16
/*000000005540*/ v_add3_u32      v3, s0, s3, v0
/*000000005548*/ v_add3_u32      v5, s2, s6, v1
/*000000005550*/ s_waitcnt       lgkmcnt(0)
/*000000005554*/ v_add3_u32      v7, s1, s7, v2
/*00000000555c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005564*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000556c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005574*/ v_add_co_u32    v7, vcc, s4, v0
/*00000000557c*/ v_add_co_ci_u32 v8, vcc, s5, v1, vcc
/*000000005580*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005588*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000558c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005594*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005598*/ global_store_dword v[7:8], v9, off
/*0000000055a0*/ global_store_dword v[2:3], v9, off
/*0000000055a8*/ global_store_dword v[4:5], v10, off
/*0000000055b0*/ s_endpgm
/*0000000055b4*/ s_nop           0x0
/*0000000055b8*/ s_nop           0x0
/*0000000055bc*/ s_nop           0x0
/*0000000055c0*/ s_nop           0x0
/*0000000055c4*/ s_nop           0x0
/*0000000055c8*/ s_nop           0x0
/*0000000055cc*/ s_nop           0x0
/*0000000055d0*/ s_nop           0x0
/*0000000055d4*/ s_nop           0x0
/*0000000055d8*/ s_nop           0x0
/*0000000055dc*/ s_nop           0x0
/*0000000055e0*/ s_nop           0x0
/*0000000055e4*/ s_nop           0x0
/*0000000055e8*/ s_nop           0x0
/*0000000055ec*/ s_nop           0x0
/*0000000055f0*/ s_nop           0x0
/*0000000055f4*/ s_nop           0x0
/*0000000055f8*/ s_nop           0x0
/*0000000055fc*/ s_nop           0x0
mul_get_global_id_get_local_size:
.skip 256
/*000000005700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000005708*/ s_waitcnt       lgkmcnt(0)
/*00000000570c*/ s_clause        0x1
/*000000005710*/ s_load_dword    s1, s[4:5], 0x20
/*000000005718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000005720*/ v_mov_b32       v4, 0
/*000000005724*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000572c*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000005734*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000000573c*/ v_mov_b32       v1, v4
/*000000005740*/ v_mov_b32       v8, v4
/*000000005744*/ v_add_nc_u32    v0, s2, v5
/*000000005748*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000005750*/ s_waitcnt       lgkmcnt(0)
/*000000005754*/ v_add_nc_u32    v7, s1, v2
/*000000005758*/ v_add_lshl_u32  v9, v3, s0, 1
/*000000005760*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000005768*/ v_lshlrev_b32   v10, 1, v0
/*00000000576c*/ v_add_co_u32    v3, vcc, s4, v5
/*000000005774*/ v_lshlrev_b32   v11, 2, v7
/*000000005778*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*00000000577c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000005784*/ v_add_co_u32    v0, vcc, s4, v1
/*00000000578c*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000005790*/ v_add_co_u32    v5, vcc, s4, v5
/*000000005798*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000579c*/ global_store_dword v[3:4], v9, off
/*0000000057a4*/ global_store_dword v[0:1], v10, off
/*0000000057ac*/ global_store_dword v[5:6], v11, off
/*0000000057b4*/ s_endpgm
/*0000000057b8*/ s_nop           0x0
/*0000000057bc*/ s_nop           0x0
/*0000000057c0*/ s_nop           0x0
/*0000000057c4*/ s_nop           0x0
/*0000000057c8*/ s_nop           0x0
/*0000000057cc*/ s_nop           0x0
/*0000000057d0*/ s_nop           0x0
/*0000000057d4*/ s_nop           0x0
/*0000000057d8*/ s_nop           0x0
/*0000000057dc*/ s_nop           0x0
/*0000000057e0*/ s_nop           0x0
/*0000000057e4*/ s_nop           0x0
/*0000000057e8*/ s_nop           0x0
/*0000000057ec*/ s_nop           0x0
/*0000000057f0*/ s_nop           0x0
/*0000000057f4*/ s_nop           0x0
/*0000000057f8*/ s_nop           0x0
/*0000000057fc*/ s_nop           0x0
mul_get_global_size_get_local_size:
.skip 256
/*000000005900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005908*/ s_waitcnt       lgkmcnt(0)
/*00000000590c*/ s_load_dword    s1, s[6:7], 0x20
/*000000005914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000591c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000005924*/ v_mov_b32       v4, 0
/*000000005928*/ s_lshl_b32      s3, s8, 4
/*00000000592c*/ s_lshl_b32      s6, s9, 1
/*000000005930*/ s_lshl_b32      s7, s10, 1
/*000000005934*/ v_mov_b32       v6, v4
/*000000005938*/ v_mov_b32       v8, v4
/*00000000593c*/ s_waitcnt       lgkmcnt(0)
/*000000005940*/ v_add3_u32      v7, s1, s7, v2
/*000000005948*/ v_add3_u32      v3, s0, s3, v0
/*000000005950*/ v_add3_u32      v5, s2, s6, v1
/*000000005958*/ s_lshl_b32      s0, s12, 4
/*00000000595c*/ s_lshl_b32      s1, s13, 1
/*000000005960*/ v_mov_b32       v11, s0
/*000000005964*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000596c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005974*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000597c*/ s_lshl_b32      s0, s14, 1
/*000000005980*/ v_mov_b32       v13, s1
/*000000005984*/ v_mov_b32       v7, s0
/*000000005988*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005990*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005994*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000599c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000059a0*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000059a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000059ac*/ global_store_dword v[0:1], v11, off
/*0000000059b4*/ global_store_dword v[2:3], v13, off
/*0000000059bc*/ global_store_dword v[4:5], v7, off
/*0000000059c4*/ s_endpgm
/*0000000059c8*/ s_nop           0x0
/*0000000059cc*/ s_nop           0x0
/*0000000059d0*/ s_nop           0x0
/*0000000059d4*/ s_nop           0x0
/*0000000059d8*/ s_nop           0x0
/*0000000059dc*/ s_nop           0x0
/*0000000059e0*/ s_nop           0x0
/*0000000059e4*/ s_nop           0x0
/*0000000059e8*/ s_nop           0x0
/*0000000059ec*/ s_nop           0x0
/*0000000059f0*/ s_nop           0x0
/*0000000059f4*/ s_nop           0x0
/*0000000059f8*/ s_nop           0x0
/*0000000059fc*/ s_nop           0x0
mul_get_num_groups_get_local_size:
.skip 256
/*000000005b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005b08*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000005b10*/ s_waitcnt       lgkmcnt(0)
/*000000005b14*/ s_lshl_b32      s3, s8, 1
/*000000005b18*/ s_clause        0x1
/*000000005b1c*/ s_load_dword    s1, s[6:7], 0x20
/*000000005b24*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000005b2c*/ s_lshl_b32      s6, s9, 1
/*000000005b30*/ v_mov_b32       v4, 0
/*000000005b34*/ s_lshl_b32      s7, s10, 2
/*000000005b38*/ v_mov_b32       v6, v4
/*000000005b3c*/ v_mov_b32       v8, v4
/*000000005b40*/ v_add3_u32      v3, s0, s3, v0
/*000000005b48*/ s_and_b32       s0, s12, -2
/*000000005b4c*/ v_add3_u32      v5, s2, s6, v1
/*000000005b54*/ v_cmp_gt_u32    s[0:1], s12, s0
/*000000005b5c*/ s_and_b32       s2, s14, -4
/*000000005b60*/ s_waitcnt       lgkmcnt(0)
/*000000005b64*/ v_add3_u32      v7, s1, s7, v2
/*000000005b6c*/ v_cndmask_b32   v0, 0, 1, s[0:1]
/*000000005b74*/ s_and_b32       s0, s13, -2
/*000000005b78*/ v_cmp_gt_u32    s[0:1], s13, s0
/*000000005b80*/ v_lshlrev_b32   v0, 1, v0
/*000000005b84*/ v_cndmask_b32   v1, 0, 1, s[0:1]
/*000000005b8c*/ v_cmp_gt_u32    s[0:1], s14, s2
/*000000005b94*/ v_add_nc_u32    v11, s12, v0
/*000000005b98*/ v_lshlrev_b32   v10, 1, v1
/*000000005b9c*/ v_cndmask_b32   v9, 0, 1, s[0:1]
/*000000005ba4*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005bac*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005bb4*/ v_and_b32       v6, -2, v11
/*000000005bb8*/ v_add_nc_u32    v5, s13, v10
/*000000005bbc*/ v_lshlrev_b32   v4, 2, v9
/*000000005bc0*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005bc8*/ v_and_b32       v9, -2, v5
/*000000005bcc*/ v_add_nc_u32    v10, s14, v4
/*000000005bd0*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005bd8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005bdc*/ v_add_co_u32    v2, vcc, s4, v2
/*000000005be4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000005be8*/ v_and_b32       v7, -4, v10
/*000000005bec*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005bf4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005bf8*/ global_store_dword v[0:1], v6, off
/*000000005c00*/ global_store_dword v[2:3], v9, off
/*000000005c08*/ global_store_dword v[4:5], v7, off
/*000000005c10*/ s_endpgm
/*000000005c14*/ s_nop           0x0
/*000000005c18*/ s_nop           0x0
/*000000005c1c*/ s_nop           0x0
/*000000005c20*/ s_nop           0x0
/*000000005c24*/ s_nop           0x0
/*000000005c28*/ s_nop           0x0
/*000000005c2c*/ s_nop           0x0
/*000000005c30*/ s_nop           0x0
/*000000005c34*/ s_nop           0x0
/*000000005c38*/ s_nop           0x0
/*000000005c3c*/ s_nop           0x0
/*000000005c40*/ s_nop           0x0
/*000000005c44*/ s_nop           0x0
/*000000005c48*/ s_nop           0x0
/*000000005c4c*/ s_nop           0x0
/*000000005c50*/ s_nop           0x0
/*000000005c54*/ s_nop           0x0
/*000000005c58*/ s_nop           0x0
/*000000005c5c*/ s_nop           0x0
/*000000005c60*/ s_nop           0x0
/*000000005c64*/ s_nop           0x0
/*000000005c68*/ s_nop           0x0
/*000000005c6c*/ s_nop           0x0
/*000000005c70*/ s_nop           0x0
/*000000005c74*/ s_nop           0x0
/*000000005c78*/ s_nop           0x0
/*000000005c7c*/ s_nop           0x0
/*000000005c80*/ s_nop           0x0
/*000000005c84*/ s_nop           0x0
/*000000005c88*/ s_nop           0x0
/*000000005c8c*/ s_nop           0x0
/*000000005c90*/ s_nop           0x0
/*000000005c94*/ s_nop           0x0
/*000000005c98*/ s_nop           0x0
/*000000005c9c*/ s_nop           0x0
/*000000005ca0*/ s_nop           0x0
/*000000005ca4*/ s_nop           0x0
/*000000005ca8*/ s_nop           0x0
/*000000005cac*/ s_nop           0x0
/*000000005cb0*/ s_nop           0x0
/*000000005cb4*/ s_nop           0x0
/*000000005cb8*/ s_nop           0x0
/*000000005cbc*/ s_nop           0x0
/*000000005cc0*/ s_nop           0x0
/*000000005cc4*/ s_nop           0x0
/*000000005cc8*/ s_nop           0x0
/*000000005ccc*/ s_nop           0x0
/*000000005cd0*/ s_nop           0x0
/*000000005cd4*/ s_nop           0x0
/*000000005cd8*/ s_nop           0x0
/*000000005cdc*/ s_nop           0x0
/*000000005ce0*/ s_nop           0x0
/*000000005ce4*/ s_nop           0x0
/*000000005ce8*/ s_nop           0x0
/*000000005cec*/ s_nop           0x0
/*000000005cf0*/ s_nop           0x0
/*000000005cf4*/ s_nop           0x0
/*000000005cf8*/ s_nop           0x0
/*000000005cfc*/ s_nop           0x0
mul_get_work_dim_get_local_size:
.skip 256
/*000000005e00*/ v_mov_b32       v3, s4
/*000000005e04*/ v_mov_b32       v4, s5
/*000000005e08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000005e10*/ s_waitcnt       lgkmcnt(0)
/*000000005e14*/ s_clause        0x1
/*000000005e18*/ s_load_dword    s1, s[6:7], 0x20
/*000000005e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000005e28*/ s_lshl_b32      s3, s8, 1
/*000000005e2c*/ s_lshl_b32      s6, s9, 1
/*000000005e30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000005e38*/ v_mov_b32       v4, 0
/*000000005e3c*/ s_lshl_b32      s7, s10, 2
/*000000005e40*/ v_mov_b32       v6, v4
/*000000005e44*/ v_mov_b32       v8, v4
/*000000005e48*/ v_add3_u32      v3, s0, s3, v0
/*000000005e50*/ v_add3_u32      v5, s2, s6, v1
/*000000005e58*/ s_waitcnt       lgkmcnt(0)
/*000000005e5c*/ v_add3_u32      v7, s1, s7, v2
/*000000005e64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000005e6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000005e74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000005e7c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000005e84*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000005e88*/ v_add_co_u32    v11, vcc, s4, v2
/*000000005e90*/ v_add_co_ci_u32 v12, vcc, s5, v3, vcc
/*000000005e94*/ v_add_co_u32    v4, vcc, s4, v4
/*000000005e9c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000005ea0*/ s_waitcnt       vmcnt(0)
/*000000005ea4*/ v_lshlrev_b32   v6, 1, v9
/*000000005ea8*/ v_lshlrev_b32   v7, 2, v9
/*000000005eac*/ global_store_dword v[0:1], v6, off
/*000000005eb4*/ global_store_dword v[11:12], v6, off
/*000000005ebc*/ global_store_dword v[4:5], v7, off
/*000000005ec4*/ s_endpgm
/*000000005ec8*/ s_nop           0x0
/*000000005ecc*/ s_nop           0x0
/*000000005ed0*/ s_nop           0x0
/*000000005ed4*/ s_nop           0x0
/*000000005ed8*/ s_nop           0x0
/*000000005edc*/ s_nop           0x0
/*000000005ee0*/ s_nop           0x0
/*000000005ee4*/ s_nop           0x0
/*000000005ee8*/ s_nop           0x0
/*000000005eec*/ s_nop           0x0
/*000000005ef0*/ s_nop           0x0
/*000000005ef4*/ s_nop           0x0
/*000000005ef8*/ s_nop           0x0
/*000000005efc*/ s_nop           0x0
mul_x_get_global_id:
.skip 256
/*000000006000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006008*/ s_waitcnt       lgkmcnt(0)
/*00000000600c*/ s_clause        0x2
/*000000006010*/ s_load_dword    s1, s[4:5], 0x20
/*000000006018*/ s_load_dword    s3, s[4:5], 0x8
/*000000006020*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000006028*/ v_lshl_or_b32   v0, s6, 4, v0
/*000000006030*/ v_mov_b32       v3, 0
/*000000006034*/ v_lshl_or_b32   v4, s7, 1, v1
/*00000000603c*/ v_lshl_or_b32   v6, s8, 1, v2
/*000000006044*/ v_mov_b32       v1, v3
/*000000006048*/ v_mov_b32       v5, v3
/*00000000604c*/ v_add_nc_u32    v2, s0, v0
/*000000006050*/ v_add_nc_u32    v0, s2, v4
/*000000006054*/ s_waitcnt       lgkmcnt(0)
/*000000006058*/ v_add_nc_u32    v4, s1, v6
/*00000000605c*/ v_mul_lo_u32    v9, v2, s3
/*000000006064*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*00000000606c*/ v_mul_lo_u32    v7, v0, s3
/*000000006074*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000607c*/ v_mul_lo_u32    v11, v4, s3
/*000000006084*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*00000000608c*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006094*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006098*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000060a0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000060a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000060ac*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000060b0*/ global_store_dword v[2:3], v9, off
/*0000000060b8*/ global_store_dword v[0:1], v7, off
/*0000000060c0*/ global_store_dword v[4:5], v11, off
/*0000000060c8*/ s_endpgm
/*0000000060cc*/ s_nop           0x0
/*0000000060d0*/ s_nop           0x0
/*0000000060d4*/ s_nop           0x0
/*0000000060d8*/ s_nop           0x0
/*0000000060dc*/ s_nop           0x0
/*0000000060e0*/ s_nop           0x0
/*0000000060e4*/ s_nop           0x0
/*0000000060e8*/ s_nop           0x0
/*0000000060ec*/ s_nop           0x0
/*0000000060f0*/ s_nop           0x0
/*0000000060f4*/ s_nop           0x0
/*0000000060f8*/ s_nop           0x0
/*0000000060fc*/ s_nop           0x0
mul_get_global_offset_get_global_id:
.skip 256
/*000000006200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006208*/ s_waitcnt       lgkmcnt(0)
/*00000000620c*/ s_clause        0x1
/*000000006210*/ s_load_dword    s1, s[4:5], 0x20
/*000000006218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006220*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006228*/ v_mov_b32       v3, 0
/*00000000622c*/ v_lshl_or_b32   v4, s7, 4, v1
/*000000006234*/ v_lshl_or_b32   v6, s8, 1, v2
/*00000000623c*/ v_mov_b32       v1, v3
/*000000006240*/ v_mov_b32       v5, v3
/*000000006244*/ v_add_nc_u32    v2, s0, v0
/*000000006248*/ v_add_nc_u32    v0, s2, v4
/*00000000624c*/ s_waitcnt       lgkmcnt(0)
/*000000006250*/ v_add_nc_u32    v4, s1, v6
/*000000006254*/ v_mul_lo_u32    v9, s0, v2
/*00000000625c*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006264*/ v_mul_lo_u32    v7, s2, v0
/*00000000626c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000006274*/ v_mul_lo_u32    v11, s1, v4
/*00000000627c*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006284*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000628c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006290*/ v_add_co_u32    v0, vcc, s4, v0
/*000000006298*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000629c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000062a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000062a8*/ global_store_dword v[2:3], v9, off
/*0000000062b0*/ global_store_dword v[0:1], v7, off
/*0000000062b8*/ global_store_dword v[4:5], v11, off
/*0000000062c0*/ s_endpgm
/*0000000062c4*/ s_nop           0x0
/*0000000062c8*/ s_nop           0x0
/*0000000062cc*/ s_nop           0x0
/*0000000062d0*/ s_nop           0x0
/*0000000062d4*/ s_nop           0x0
/*0000000062d8*/ s_nop           0x0
/*0000000062dc*/ s_nop           0x0
/*0000000062e0*/ s_nop           0x0
/*0000000062e4*/ s_nop           0x0
/*0000000062e8*/ s_nop           0x0
/*0000000062ec*/ s_nop           0x0
/*0000000062f0*/ s_nop           0x0
/*0000000062f4*/ s_nop           0x0
/*0000000062f8*/ s_nop           0x0
/*0000000062fc*/ s_nop           0x0
mul_get_local_id_get_global_id:
.skip 256
/*000000006400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006408*/ s_waitcnt       lgkmcnt(0)
/*00000000640c*/ s_clause        0x1
/*000000006410*/ s_load_dword    s1, s[4:5], 0x20
/*000000006418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006420*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000006428*/ v_mov_b32       v4, 0
/*00000000642c*/ v_lshl_or_b32   v5, s7, 2, v1
/*000000006434*/ v_lshl_or_b32   v7, s8, 1, v2
/*00000000643c*/ v_mov_b32       v12, v4
/*000000006440*/ v_mov_b32       v8, v4
/*000000006444*/ v_add_nc_u32    v3, s0, v3
/*000000006448*/ v_add_nc_u32    v11, s2, v5
/*00000000644c*/ s_waitcnt       lgkmcnt(0)
/*000000006450*/ v_add_nc_u32    v7, s1, v7
/*000000006454*/ v_mul_lo_u32    v9, v0, v3
/*00000000645c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000006464*/ v_mul_lo_u32    v10, v1, v11
/*00000000646c*/ v_lshlrev_b64   v[0:1], 2, v[11:12]
/*000000006474*/ v_mul_lo_u32    v11, v2, v7
/*00000000647c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000006484*/ v_add_co_u32    v2, vcc, s4, v3
/*00000000648c*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000006490*/ v_add_co_u32    v0, vcc, s4, v0
/*000000006498*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000649c*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000064a4*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*0000000064a8*/ global_store_dword v[2:3], v9, off
/*0000000064b0*/ global_store_dword v[0:1], v10, off
/*0000000064b8*/ global_store_dword v[4:5], v11, off
/*0000000064c0*/ s_endpgm
/*0000000064c4*/ s_nop           0x0
/*0000000064c8*/ s_nop           0x0
/*0000000064cc*/ s_nop           0x0
/*0000000064d0*/ s_nop           0x0
/*0000000064d4*/ s_nop           0x0
/*0000000064d8*/ s_nop           0x0
/*0000000064dc*/ s_nop           0x0
/*0000000064e0*/ s_nop           0x0
/*0000000064e4*/ s_nop           0x0
/*0000000064e8*/ s_nop           0x0
/*0000000064ec*/ s_nop           0x0
/*0000000064f0*/ s_nop           0x0
/*0000000064f4*/ s_nop           0x0
/*0000000064f8*/ s_nop           0x0
/*0000000064fc*/ s_nop           0x0
mul_get_group_id_get_global_id:
.skip 256
/*000000006600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006608*/ s_waitcnt       lgkmcnt(0)
/*00000000660c*/ s_clause        0x1
/*000000006610*/ s_load_dword    s1, s[4:5], 0x20
/*000000006618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006620*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006628*/ v_mov_b32       v3, 0
/*00000000662c*/ v_lshl_or_b32   v4, s7, 4, v1
/*000000006634*/ v_lshl_or_b32   v6, s8, 1, v2
/*00000000663c*/ v_mov_b32       v1, v3
/*000000006640*/ v_mov_b32       v5, v3
/*000000006644*/ v_add_nc_u32    v2, s0, v0
/*000000006648*/ v_add_nc_u32    v0, s2, v4
/*00000000664c*/ s_waitcnt       lgkmcnt(0)
/*000000006650*/ v_add_nc_u32    v4, s1, v6
/*000000006654*/ v_mul_lo_u32    v9, s6, v2
/*00000000665c*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006664*/ v_mul_lo_u32    v7, s7, v0
/*00000000666c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000006674*/ v_mul_lo_u32    v11, s8, v4
/*00000000667c*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006684*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000668c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006690*/ v_add_co_u32    v0, vcc, s4, v0
/*000000006698*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000669c*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000066a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000066a8*/ global_store_dword v[2:3], v9, off
/*0000000066b0*/ global_store_dword v[0:1], v7, off
/*0000000066b8*/ global_store_dword v[4:5], v11, off
/*0000000066c0*/ s_endpgm
/*0000000066c4*/ s_nop           0x0
/*0000000066c8*/ s_nop           0x0
/*0000000066cc*/ s_nop           0x0
/*0000000066d0*/ s_nop           0x0
/*0000000066d4*/ s_nop           0x0
/*0000000066d8*/ s_nop           0x0
/*0000000066dc*/ s_nop           0x0
/*0000000066e0*/ s_nop           0x0
/*0000000066e4*/ s_nop           0x0
/*0000000066e8*/ s_nop           0x0
/*0000000066ec*/ s_nop           0x0
/*0000000066f0*/ s_nop           0x0
/*0000000066f4*/ s_nop           0x0
/*0000000066f8*/ s_nop           0x0
/*0000000066fc*/ s_nop           0x0
mul_get_local_size_get_global_id:
.skip 256
/*000000006800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006808*/ s_waitcnt       lgkmcnt(0)
/*00000000680c*/ s_clause        0x1
/*000000006810*/ s_load_dword    s1, s[4:5], 0x20
/*000000006818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006820*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000006828*/ v_mov_b32       v3, 0
/*00000000682c*/ v_lshl_or_b32   v4, s7, 1, v1
/*000000006834*/ v_lshl_or_b32   v6, s8, 2, v2
/*00000000683c*/ v_mov_b32       v1, v3
/*000000006840*/ v_mov_b32       v5, v3
/*000000006844*/ v_add_nc_u32    v2, s0, v0
/*000000006848*/ v_add_nc_u32    v0, s2, v4
/*00000000684c*/ s_waitcnt       lgkmcnt(0)
/*000000006850*/ v_add_nc_u32    v4, s1, v6
/*000000006854*/ v_lshlrev_b32   v9, 1, v2
/*000000006858*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000006860*/ v_lshlrev_b32   v7, 1, v0
/*000000006864*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000686c*/ v_lshlrev_b32   v11, 2, v4
/*000000006870*/ v_lshlrev_b64   v[4:5], 2, v[4:5]
/*000000006878*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006880*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006884*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000688c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006890*/ v_add_co_u32    v4, vcc, s4, v4
/*000000006898*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000689c*/ global_store_dword v[2:3], v9, off
/*0000000068a4*/ global_store_dword v[0:1], v7, off
/*0000000068ac*/ global_store_dword v[4:5], v11, off
/*0000000068b4*/ s_endpgm
/*0000000068b8*/ s_nop           0x0
/*0000000068bc*/ s_nop           0x0
/*0000000068c0*/ s_nop           0x0
/*0000000068c4*/ s_nop           0x0
/*0000000068c8*/ s_nop           0x0
/*0000000068cc*/ s_nop           0x0
/*0000000068d0*/ s_nop           0x0
/*0000000068d4*/ s_nop           0x0
/*0000000068d8*/ s_nop           0x0
/*0000000068dc*/ s_nop           0x0
/*0000000068e0*/ s_nop           0x0
/*0000000068e4*/ s_nop           0x0
/*0000000068e8*/ s_nop           0x0
/*0000000068ec*/ s_nop           0x0
/*0000000068f0*/ s_nop           0x0
/*0000000068f4*/ s_nop           0x0
/*0000000068f8*/ s_nop           0x0
/*0000000068fc*/ s_nop           0x0
mul_get_global_id_get_global_id:
.skip 256
/*000000006a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000006a08*/ s_waitcnt       lgkmcnt(0)
/*000000006a0c*/ s_clause        0x1
/*000000006a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000006a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000006a20*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000006a28*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000006a30*/ v_mov_b32       v4, 0
/*000000006a34*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000006a3c*/ v_mov_b32       v1, v4
/*000000006a40*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000006a48*/ v_add_nc_u32    v0, s2, v0
/*000000006a4c*/ v_add_nc_u32    v7, s0, v3
/*000000006a50*/ s_waitcnt       lgkmcnt(0)
/*000000006a54*/ v_add_nc_u32    v3, s1, v2
/*000000006a58*/ v_add_co_u32    v5, vcc, s4, v5
/*000000006a60*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000006a68*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000006a6c*/ v_mul_lo_u32    v9, v3, v3
/*000000006a74*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000006a7c*/ v_mul_lo_u32    v11, v0, v0
/*000000006a84*/ v_mul_lo_u32    v7, v7, v7
/*000000006a8c*/ v_add_co_u32    v0, vcc, s4, v1
/*000000006a94*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000006a98*/ v_add_co_u32    v2, vcc, s4, v3
/*000000006aa0*/ v_add_co_ci_u32 v3, vcc, s5, v4, vcc
/*000000006aa4*/ global_store_dword v[5:6], v7, off
/*000000006aac*/ global_store_dword v[0:1], v11, off
/*000000006ab4*/ global_store_dword v[2:3], v9, off
/*000000006abc*/ s_endpgm
/*000000006ac0*/ s_nop           0x0
/*000000006ac4*/ s_nop           0x0
/*000000006ac8*/ s_nop           0x0
/*000000006acc*/ s_nop           0x0
/*000000006ad0*/ s_nop           0x0
/*000000006ad4*/ s_nop           0x0
/*000000006ad8*/ s_nop           0x0
/*000000006adc*/ s_nop           0x0
/*000000006ae0*/ s_nop           0x0
/*000000006ae4*/ s_nop           0x0
/*000000006ae8*/ s_nop           0x0
/*000000006aec*/ s_nop           0x0
/*000000006af0*/ s_nop           0x0
/*000000006af4*/ s_nop           0x0
/*000000006af8*/ s_nop           0x0
/*000000006afc*/ s_nop           0x0
mul_get_global_size_get_global_id:
.skip 256
/*000000006c00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000006c08*/ s_waitcnt       lgkmcnt(0)
/*000000006c0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000006c14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000006c1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000006c24*/ v_lshl_or_b32   v0, s8, 4, v0
/*000000006c2c*/ v_mov_b32       v3, 0
/*000000006c30*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006c38*/ v_lshl_or_b32   v6, s10, 1, v2
/*000000006c40*/ v_mov_b32       v1, v3
/*000000006c44*/ v_mov_b32       v5, v3
/*000000006c48*/ v_add_nc_u32    v2, s0, v0
/*000000006c4c*/ v_add_nc_u32    v0, s2, v4
/*000000006c50*/ s_waitcnt       lgkmcnt(0)
/*000000006c54*/ v_add_nc_u32    v4, s1, v6
/*000000006c58*/ v_lshlrev_b64   v[6:7], 2, v[2:3]
/*000000006c60*/ v_mul_lo_u32    v11, s13, v0
/*000000006c68*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000006c70*/ v_mul_lo_u32    v8, s12, v2
/*000000006c78*/ v_lshlrev_b64   v[2:3], 2, v[4:5]
/*000000006c80*/ v_mul_lo_u32    v4, s14, v4
/*000000006c88*/ v_add_co_u32    v5, vcc, s4, v6
/*000000006c90*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*000000006c94*/ v_add_co_u32    v0, vcc, s4, v0
/*000000006c9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000006ca0*/ v_add_co_u32    v2, vcc, s4, v2
/*000000006ca8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000006cac*/ global_store_dword v[5:6], v8, off
/*000000006cb4*/ global_store_dword v[0:1], v11, off
/*000000006cbc*/ global_store_dword v[2:3], v4, off
/*000000006cc4*/ s_endpgm
/*000000006cc8*/ s_nop           0x0
/*000000006ccc*/ s_nop           0x0
/*000000006cd0*/ s_nop           0x0
/*000000006cd4*/ s_nop           0x0
/*000000006cd8*/ s_nop           0x0
/*000000006cdc*/ s_nop           0x0
/*000000006ce0*/ s_nop           0x0
/*000000006ce4*/ s_nop           0x0
/*000000006ce8*/ s_nop           0x0
/*000000006cec*/ s_nop           0x0
/*000000006cf0*/ s_nop           0x0
/*000000006cf4*/ s_nop           0x0
/*000000006cf8*/ s_nop           0x0
/*000000006cfc*/ s_nop           0x0
mul_get_num_groups_get_global_id:
.skip 256
/*000000006e00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000006e08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000006e10*/ s_waitcnt       lgkmcnt(0)
/*000000006e14*/ s_clause        0x1
/*000000006e18*/ s_load_dword    s3, s[6:7], 0x20
/*000000006e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000006e28*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000006e30*/ v_mov_b32       v3, 0
/*000000006e34*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000006e3c*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000006e44*/ v_mov_b32       v1, v3
/*000000006e48*/ v_mov_b32       v5, v3
/*000000006e4c*/ s_and_b32       s6, s0, -2
/*000000006e50*/ v_add_nc_u32    v2, s12, v0
/*000000006e54*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000006e5c*/ s_lshr_b32      s0, s0, 1
/*000000006e60*/ v_add_nc_u32    v0, s14, v4
/*000000006e64*/ s_waitcnt       lgkmcnt(0)
/*000000006e68*/ v_add_nc_u32    v4, s3, v6
/*000000006e6c*/ v_lshlrev_b64   v[6:7], 2, v[2:3]
/*000000006e74*/ s_cmpk_lg_u32   s6, 0x0
/*000000006e78*/ s_addc_u32      s0, s0, 0
/*000000006e7c*/ s_and_b32       s6, s1, -2
/*000000006e80*/ v_mul_lo_u32    v12, s0, v2
/*000000006e88*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000006e90*/ s_lshr_b32      s1, s1, 1
/*000000006e94*/ v_lshlrev_b64   v[8:9], 2, v[0:1]
/*000000006e9c*/ v_add_co_u32    v1, vcc, s4, v6
/*000000006ea4*/ v_lshlrev_b64   v[10:11], 2, v[4:5]
/*000000006eac*/ s_cmpk_lg_u32   s6, 0x0
/*000000006eb0*/ v_add_co_ci_u32 v2, vcc, s5, v7, vcc
/*000000006eb4*/ s_addc_u32      s1, s1, 0
/*000000006eb8*/ s_and_b32       s3, s2, -4
/*000000006ebc*/ v_add_co_u32    v5, vcc, s4, v8
/*000000006ec4*/ v_cmp_gt_u32    s[0:1], s2, s3
/*000000006ecc*/ s_lshr_b32      s2, s2, 2
/*000000006ed0*/ v_mul_lo_u32    v0, s1, v0
/*000000006ed8*/ v_add_co_ci_u32 v6, vcc, s5, v9, vcc
/*000000006edc*/ v_add_co_u32    v3, vcc, s4, v10
/*000000006ee4*/ s_cmpk_lg_u32   s0, 0x0
/*000000006ee8*/ s_addc_u32      s0, s2, 0
/*000000006eec*/ v_mul_lo_u32    v14, s0, v4
/*000000006ef4*/ v_add_co_ci_u32 v4, vcc, s5, v11, vcc
/*000000006ef8*/ global_store_dword v[1:2], v12, off
/*000000006f00*/ global_store_dword v[5:6], v0, off
/*000000006f08*/ global_store_dword v[3:4], v14, off
/*000000006f10*/ s_endpgm
/*000000006f14*/ s_nop           0x0
/*000000006f18*/ s_nop           0x0
/*000000006f1c*/ s_nop           0x0
/*000000006f20*/ s_nop           0x0
/*000000006f24*/ s_nop           0x0
/*000000006f28*/ s_nop           0x0
/*000000006f2c*/ s_nop           0x0
/*000000006f30*/ s_nop           0x0
/*000000006f34*/ s_nop           0x0
/*000000006f38*/ s_nop           0x0
/*000000006f3c*/ s_nop           0x0
/*000000006f40*/ s_nop           0x0
/*000000006f44*/ s_nop           0x0
/*000000006f48*/ s_nop           0x0
/*000000006f4c*/ s_nop           0x0
/*000000006f50*/ s_nop           0x0
/*000000006f54*/ s_nop           0x0
/*000000006f58*/ s_nop           0x0
/*000000006f5c*/ s_nop           0x0
/*000000006f60*/ s_nop           0x0
/*000000006f64*/ s_nop           0x0
/*000000006f68*/ s_nop           0x0
/*000000006f6c*/ s_nop           0x0
/*000000006f70*/ s_nop           0x0
/*000000006f74*/ s_nop           0x0
/*000000006f78*/ s_nop           0x0
/*000000006f7c*/ s_nop           0x0
/*000000006f80*/ s_nop           0x0
/*000000006f84*/ s_nop           0x0
/*000000006f88*/ s_nop           0x0
/*000000006f8c*/ s_nop           0x0
/*000000006f90*/ s_nop           0x0
/*000000006f94*/ s_nop           0x0
/*000000006f98*/ s_nop           0x0
/*000000006f9c*/ s_nop           0x0
/*000000006fa0*/ s_nop           0x0
/*000000006fa4*/ s_nop           0x0
/*000000006fa8*/ s_nop           0x0
/*000000006fac*/ s_nop           0x0
/*000000006fb0*/ s_nop           0x0
/*000000006fb4*/ s_nop           0x0
/*000000006fb8*/ s_nop           0x0
/*000000006fbc*/ s_nop           0x0
/*000000006fc0*/ s_nop           0x0
/*000000006fc4*/ s_nop           0x0
/*000000006fc8*/ s_nop           0x0
/*000000006fcc*/ s_nop           0x0
/*000000006fd0*/ s_nop           0x0
/*000000006fd4*/ s_nop           0x0
/*000000006fd8*/ s_nop           0x0
/*000000006fdc*/ s_nop           0x0
/*000000006fe0*/ s_nop           0x0
/*000000006fe4*/ s_nop           0x0
/*000000006fe8*/ s_nop           0x0
/*000000006fec*/ s_nop           0x0
/*000000006ff0*/ s_nop           0x0
/*000000006ff4*/ s_nop           0x0
/*000000006ff8*/ s_nop           0x0
/*000000006ffc*/ s_nop           0x0
mul_get_work_dim_get_global_id:
.skip 256
/*000000007100*/ v_mov_b32       v3, s4
/*000000007104*/ v_mov_b32       v4, s5
/*000000007108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007110*/ s_waitcnt       lgkmcnt(0)
/*000000007114*/ s_clause        0x1
/*000000007118*/ s_load_dword    s1, s[6:7], 0x20
/*000000007120*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000007128*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000007130*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000007138*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000007140*/ v_mov_b32       v3, 0
/*000000007144*/ v_lshl_or_b32   v4, s9, 1, v1
/*00000000714c*/ v_mov_b32       v1, v3
/*000000007150*/ v_mov_b32       v5, v3
/*000000007154*/ v_add_nc_u32    v2, s0, v0
/*000000007158*/ v_add_nc_u32    v0, s2, v4
/*00000000715c*/ s_waitcnt       lgkmcnt(0)
/*000000007160*/ v_add_nc_u32    v4, s1, v6
/*000000007164*/ v_lshlrev_b64   v[6:7], 2, v[2:3]
/*00000000716c*/ v_lshlrev_b64   v[8:9], 2, v[0:1]
/*000000007174*/ v_lshlrev_b64   v[10:11], 2, v[4:5]
/*00000000717c*/ v_add_co_u32    v5, vcc, s4, v6
/*000000007184*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*000000007188*/ v_add_co_u32    v7, vcc, s4, v8
/*000000007190*/ v_add_co_ci_u32 v8, vcc, s5, v9, vcc
/*000000007194*/ s_waitcnt       vmcnt(0)
/*000000007198*/ v_mul_lo_u32    v3, v15, v2
/*0000000071a0*/ v_mul_lo_u32    v14, v15, v0
/*0000000071a8*/ v_mul_lo_u32    v15, v15, v4
/*0000000071b0*/ v_add_co_u32    v0, vcc, s4, v10
/*0000000071b8*/ v_add_co_ci_u32 v1, vcc, s5, v11, vcc
/*0000000071bc*/ global_store_dword v[5:6], v3, off
/*0000000071c4*/ global_store_dword v[7:8], v14, off
/*0000000071cc*/ global_store_dword v[0:1], v15, off
/*0000000071d4*/ s_endpgm
/*0000000071d8*/ s_nop           0x0
/*0000000071dc*/ s_nop           0x0
/*0000000071e0*/ s_nop           0x0
/*0000000071e4*/ s_nop           0x0
/*0000000071e8*/ s_nop           0x0
/*0000000071ec*/ s_nop           0x0
/*0000000071f0*/ s_nop           0x0
/*0000000071f4*/ s_nop           0x0
/*0000000071f8*/ s_nop           0x0
/*0000000071fc*/ s_nop           0x0
mul_x_get_global_size:
.skip 256
/*000000007300*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007308*/ s_waitcnt       lgkmcnt(0)
/*00000000730c*/ s_clause        0x1
/*000000007310*/ s_load_dword    s1, s[6:7], 0x8
/*000000007318*/ s_load_dword    s3, s[6:7], 0x20
/*000000007320*/ s_clause        0x1
/*000000007324*/ s_load_dword    s11, s[4:5], 0xc
/*00000000732c*/ s_load_dword    s12, s[4:5], 0x10
/*000000007334*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*00000000733c*/ s_load_dword    s4, s[4:5], 0x14
/*000000007344*/ v_mov_b32       v4, 0
/*000000007348*/ s_lshl_b32      s8, s8, 4
/*00000000734c*/ s_lshl_b32      s9, s9, 1
/*000000007350*/ s_lshl_b32      s10, s10, 1
/*000000007354*/ v_mov_b32       v6, v4
/*000000007358*/ v_mov_b32       v8, v4
/*00000000735c*/ s_waitcnt       lgkmcnt(0)
/*000000007360*/ v_add3_u32      v7, s3, s10, v2
/*000000007368*/ v_add3_u32      v3, s0, s8, v0
/*000000007370*/ v_add3_u32      v5, s2, s9, v1
/*000000007378*/ s_mul_i32       s0, s11, s1
/*00000000737c*/ s_mul_i32       s2, s12, s1
/*000000007380*/ v_mov_b32       v11, s0
/*000000007384*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000738c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007394*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000739c*/ s_mul_i32       s0, s4, s1
/*0000000073a0*/ v_mov_b32       v13, s2
/*0000000073a4*/ v_mov_b32       v7, s0
/*0000000073a8*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000073b0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000073b4*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000073bc*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000073c0*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000073c8*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000073cc*/ global_store_dword v[0:1], v11, off
/*0000000073d4*/ global_store_dword v[2:3], v13, off
/*0000000073dc*/ global_store_dword v[4:5], v7, off
/*0000000073e4*/ s_endpgm
/*0000000073e8*/ s_nop           0x0
/*0000000073ec*/ s_nop           0x0
/*0000000073f0*/ s_nop           0x0
/*0000000073f4*/ s_nop           0x0
/*0000000073f8*/ s_nop           0x0
/*0000000073fc*/ s_nop           0x0
mul_get_global_offset_get_global_size:
.skip 256
/*000000007500*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007508*/ s_waitcnt       lgkmcnt(0)
/*00000000750c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007514*/ s_clause        0x1
/*000000007518*/ s_load_dword    s3, s[4:5], 0xc
/*000000007520*/ s_load_dword    s11, s[4:5], 0x10
/*000000007528*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007530*/ s_load_dword    s4, s[4:5], 0x14
/*000000007538*/ v_mov_b32       v4, 0
/*00000000753c*/ s_lshl_b32      s8, s8, 1
/*000000007540*/ s_lshl_b32      s9, s9, 4
/*000000007544*/ s_lshl_b32      s10, s10, 1
/*000000007548*/ v_mov_b32       v6, v4
/*00000000754c*/ v_mov_b32       v8, v4
/*000000007550*/ s_waitcnt       lgkmcnt(0)
/*000000007554*/ v_add3_u32      v7, s1, s10, v2
/*00000000755c*/ v_add3_u32      v3, s0, s8, v0
/*000000007564*/ v_add3_u32      v5, s2, s9, v1
/*00000000756c*/ s_mul_i32       s0, s3, s0
/*000000007570*/ s_mul_i32       s2, s11, s2
/*000000007574*/ v_mov_b32       v11, s0
/*000000007578*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007580*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007588*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007590*/ s_mul_i32       s0, s4, s1
/*000000007594*/ v_mov_b32       v13, s2
/*000000007598*/ v_mov_b32       v7, s0
/*00000000759c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000075a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000075a8*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000075b0*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000075b4*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000075bc*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000075c0*/ global_store_dword v[0:1], v11, off
/*0000000075c8*/ global_store_dword v[2:3], v13, off
/*0000000075d0*/ global_store_dword v[4:5], v7, off
/*0000000075d8*/ s_endpgm
/*0000000075dc*/ s_nop           0x0
/*0000000075e0*/ s_nop           0x0
/*0000000075e4*/ s_nop           0x0
/*0000000075e8*/ s_nop           0x0
/*0000000075ec*/ s_nop           0x0
/*0000000075f0*/ s_nop           0x0
/*0000000075f4*/ s_nop           0x0
/*0000000075f8*/ s_nop           0x0
/*0000000075fc*/ s_nop           0x0
mul_get_local_id_get_global_size:
.skip 256
/*000000007700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007708*/ s_waitcnt       lgkmcnt(0)
/*00000000770c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007714*/ s_clause        0x1
/*000000007718*/ s_load_dword    s3, s[4:5], 0xc
/*000000007720*/ s_load_dword    s11, s[4:5], 0x10
/*000000007728*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007730*/ s_load_dword    s4, s[4:5], 0x14
/*000000007738*/ v_mov_b32       v4, 0
/*00000000773c*/ s_lshl_b32      s8, s8, 3
/*000000007740*/ s_lshl_b32      s9, s9, 2
/*000000007744*/ s_lshl_b32      s5, s10, 1
/*000000007748*/ v_mov_b32       v6, v4
/*00000000774c*/ v_mov_b32       v8, v4
/*000000007750*/ s_waitcnt       lgkmcnt(0)
/*000000007754*/ v_add3_u32      v7, s1, s5, v2
/*00000000775c*/ v_mul_lo_u32    v9, s3, v0
/*000000007764*/ v_add3_u32      v3, s0, s8, v0
/*00000000776c*/ v_add3_u32      v5, s2, s9, v1
/*000000007774*/ v_mul_lo_u32    v10, s11, v1
/*00000000777c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000007784*/ v_lshlrev_b64   v[0:1], 2, v[5:6]
/*00000000778c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000007794*/ v_mul_lo_u32    v7, s4, v2
/*00000000779c*/ v_add_co_u32    v3, vcc, s6, v3
/*0000000077a4*/ v_add_co_ci_u32 v4, vcc, s7, v4, vcc
/*0000000077a8*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000077b0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000077b4*/ v_add_co_u32    v5, vcc, s6, v5
/*0000000077bc*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*0000000077c0*/ global_store_dword v[3:4], v9, off
/*0000000077c8*/ global_store_dword v[0:1], v10, off
/*0000000077d0*/ global_store_dword v[5:6], v7, off
/*0000000077d8*/ s_endpgm
/*0000000077dc*/ s_nop           0x0
/*0000000077e0*/ s_nop           0x0
/*0000000077e4*/ s_nop           0x0
/*0000000077e8*/ s_nop           0x0
/*0000000077ec*/ s_nop           0x0
/*0000000077f0*/ s_nop           0x0
/*0000000077f4*/ s_nop           0x0
/*0000000077f8*/ s_nop           0x0
/*0000000077fc*/ s_nop           0x0
mul_get_group_id_get_global_size:
.skip 256
/*000000007900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007908*/ s_waitcnt       lgkmcnt(0)
/*00000000790c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007914*/ s_clause        0x1
/*000000007918*/ s_load_dword    s3, s[4:5], 0xc
/*000000007920*/ s_load_dword    s11, s[4:5], 0x10
/*000000007928*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007930*/ s_load_dword    s4, s[4:5], 0x14
/*000000007938*/ v_mov_b32       v4, 0
/*00000000793c*/ s_lshl_b32      s12, s8, 1
/*000000007940*/ s_lshl_b32      s13, s9, 4
/*000000007944*/ s_lshl_b32      s14, s10, 1
/*000000007948*/ v_mov_b32       v6, v4
/*00000000794c*/ v_mov_b32       v8, v4
/*000000007950*/ s_waitcnt       lgkmcnt(0)
/*000000007954*/ v_add3_u32      v7, s1, s14, v2
/*00000000795c*/ v_add3_u32      v3, s0, s12, v0
/*000000007964*/ v_add3_u32      v5, s2, s13, v1
/*00000000796c*/ s_mul_i32       s0, s3, s8
/*000000007970*/ s_mul_i32       s1, s11, s9
/*000000007974*/ v_mov_b32       v11, s0
/*000000007978*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007980*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007988*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007990*/ s_mul_i32       s0, s4, s10
/*000000007994*/ v_mov_b32       v13, s1
/*000000007998*/ v_mov_b32       v7, s0
/*00000000799c*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000079a4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000079a8*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000079b0*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000079b4*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000079bc*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000079c0*/ global_store_dword v[0:1], v11, off
/*0000000079c8*/ global_store_dword v[2:3], v13, off
/*0000000079d0*/ global_store_dword v[4:5], v7, off
/*0000000079d8*/ s_endpgm
/*0000000079dc*/ s_nop           0x0
/*0000000079e0*/ s_nop           0x0
/*0000000079e4*/ s_nop           0x0
/*0000000079e8*/ s_nop           0x0
/*0000000079ec*/ s_nop           0x0
/*0000000079f0*/ s_nop           0x0
/*0000000079f4*/ s_nop           0x0
/*0000000079f8*/ s_nop           0x0
/*0000000079fc*/ s_nop           0x0
mul_get_local_size_get_global_size:
.skip 256
/*000000007b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007b08*/ s_waitcnt       lgkmcnt(0)
/*000000007b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007b14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000007b1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000007b24*/ v_mov_b32       v4, 0
/*000000007b28*/ s_lshl_b32      s3, s8, 1
/*000000007b2c*/ s_lshl_b32      s6, s9, 1
/*000000007b30*/ s_lshl_b32      s7, s10, 2
/*000000007b34*/ v_mov_b32       v6, v4
/*000000007b38*/ v_mov_b32       v8, v4
/*000000007b3c*/ s_waitcnt       lgkmcnt(0)
/*000000007b40*/ v_add3_u32      v7, s1, s7, v2
/*000000007b48*/ v_add3_u32      v3, s0, s3, v0
/*000000007b50*/ v_add3_u32      v5, s2, s6, v1
/*000000007b58*/ s_lshl_b32      s0, s12, 1
/*000000007b5c*/ s_lshl_b32      s1, s13, 1
/*000000007b60*/ v_mov_b32       v11, s0
/*000000007b64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007b6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007b74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007b7c*/ s_lshl_b32      s0, s14, 2
/*000000007b80*/ v_mov_b32       v13, s1
/*000000007b84*/ v_mov_b32       v7, s0
/*000000007b88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000007b90*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000007b94*/ v_add_co_u32    v2, vcc, s4, v2
/*000000007b9c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000007ba0*/ v_add_co_u32    v4, vcc, s4, v4
/*000000007ba8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000007bac*/ global_store_dword v[0:1], v11, off
/*000000007bb4*/ global_store_dword v[2:3], v13, off
/*000000007bbc*/ global_store_dword v[4:5], v7, off
/*000000007bc4*/ s_endpgm
/*000000007bc8*/ s_nop           0x0
/*000000007bcc*/ s_nop           0x0
/*000000007bd0*/ s_nop           0x0
/*000000007bd4*/ s_nop           0x0
/*000000007bd8*/ s_nop           0x0
/*000000007bdc*/ s_nop           0x0
/*000000007be0*/ s_nop           0x0
/*000000007be4*/ s_nop           0x0
/*000000007be8*/ s_nop           0x0
/*000000007bec*/ s_nop           0x0
/*000000007bf0*/ s_nop           0x0
/*000000007bf4*/ s_nop           0x0
/*000000007bf8*/ s_nop           0x0
/*000000007bfc*/ s_nop           0x0
mul_get_global_id_get_global_size:
.skip 256
/*000000007d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007d08*/ s_waitcnt       lgkmcnt(0)
/*000000007d0c*/ s_clause        0x1
/*000000007d10*/ s_load_dword    s1, s[6:7], 0x20
/*000000007d18*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000007d20*/ s_clause        0x2
/*000000007d24*/ s_load_dword    s3, s[4:5], 0xc
/*000000007d2c*/ s_load_dword    s11, s[4:5], 0x10
/*000000007d34*/ s_load_dword    s4, s[4:5], 0x14
/*000000007d3c*/ v_mov_b32       v4, 0
/*000000007d40*/ v_lshl_or_b32   v5, s9, 1, v1
/*000000007d48*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000007d50*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000007d58*/ v_mov_b32       v1, v4
/*000000007d5c*/ v_mov_b32       v8, v4
/*000000007d60*/ s_waitcnt       lgkmcnt(0)
/*000000007d64*/ v_add_nc_u32    v7, s1, v2
/*000000007d68*/ v_add_nc_u32    v0, s2, v5
/*000000007d6c*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*000000007d74*/ v_add_nc_u32    v9, s0, v3
/*000000007d78*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*000000007d80*/ v_mul_lo_u32    v10, s11, v0
/*000000007d88*/ v_add_co_u32    v3, vcc, s6, v5
/*000000007d90*/ v_mul_lo_u32    v9, s3, v9
/*000000007d98*/ v_add_co_ci_u32 v4, vcc, s7, v6, vcc
/*000000007d9c*/ v_lshlrev_b64   v[5:6], 2, v[7:8]
/*000000007da4*/ v_add_co_u32    v0, vcc, s6, v1
/*000000007dac*/ v_mul_lo_u32    v7, s4, v7
/*000000007db4*/ v_add_co_ci_u32 v1, vcc, s7, v2, vcc
/*000000007db8*/ v_add_co_u32    v5, vcc, s6, v5
/*000000007dc0*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*000000007dc4*/ global_store_dword v[3:4], v9, off
/*000000007dcc*/ global_store_dword v[0:1], v10, off
/*000000007dd4*/ global_store_dword v[5:6], v7, off
/*000000007ddc*/ s_endpgm
/*000000007de0*/ s_nop           0x0
/*000000007de4*/ s_nop           0x0
/*000000007de8*/ s_nop           0x0
/*000000007dec*/ s_nop           0x0
/*000000007df0*/ s_nop           0x0
/*000000007df4*/ s_nop           0x0
/*000000007df8*/ s_nop           0x0
/*000000007dfc*/ s_nop           0x0
mul_get_global_size_get_global_size:
.skip 256
/*000000007f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000007f08*/ s_waitcnt       lgkmcnt(0)
/*000000007f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000007f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000007f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000007f24*/ v_mov_b32       v4, 0
/*000000007f28*/ s_lshl_b32      s3, s8, 4
/*000000007f2c*/ s_lshl_b32      s6, s9, 1
/*000000007f30*/ s_lshl_b32      s7, s10, 1
/*000000007f34*/ v_mov_b32       v6, v4
/*000000007f38*/ v_mov_b32       v8, v4
/*000000007f3c*/ s_waitcnt       lgkmcnt(0)
/*000000007f40*/ v_add3_u32      v7, s1, s7, v2
/*000000007f48*/ v_add3_u32      v3, s0, s3, v0
/*000000007f50*/ v_add3_u32      v5, s2, s6, v1
/*000000007f58*/ s_mul_i32       s0, s12, s12
/*000000007f5c*/ s_mul_i32       s1, s13, s13
/*000000007f60*/ v_mov_b32       v11, s0
/*000000007f64*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000007f6c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000007f74*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000007f7c*/ s_mul_i32       s0, s14, s14
/*000000007f80*/ v_mov_b32       v13, s1
/*000000007f84*/ v_mov_b32       v7, s0
/*000000007f88*/ v_add_co_u32    v0, vcc, s4, v0
/*000000007f90*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000007f94*/ v_add_co_u32    v2, vcc, s4, v2
/*000000007f9c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000007fa0*/ v_add_co_u32    v4, vcc, s4, v4
/*000000007fa8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000007fac*/ global_store_dword v[0:1], v11, off
/*000000007fb4*/ global_store_dword v[2:3], v13, off
/*000000007fbc*/ global_store_dword v[4:5], v7, off
/*000000007fc4*/ s_endpgm
/*000000007fc8*/ s_nop           0x0
/*000000007fcc*/ s_nop           0x0
/*000000007fd0*/ s_nop           0x0
/*000000007fd4*/ s_nop           0x0
/*000000007fd8*/ s_nop           0x0
/*000000007fdc*/ s_nop           0x0
/*000000007fe0*/ s_nop           0x0
/*000000007fe4*/ s_nop           0x0
/*000000007fe8*/ s_nop           0x0
/*000000007fec*/ s_nop           0x0
/*000000007ff0*/ s_nop           0x0
/*000000007ff4*/ s_nop           0x0
/*000000007ff8*/ s_nop           0x0
/*000000007ffc*/ s_nop           0x0
mul_get_num_groups_get_global_size:
.skip 256
/*000000008100*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000008108*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000008110*/ s_waitcnt       lgkmcnt(0)
/*000000008114*/ s_clause        0x1
/*000000008118*/ s_load_dword    s3, s[6:7], 0x20
/*000000008120*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000008128*/ s_lshl_b32      s7, s9, 1
/*00000000812c*/ s_lshl_b32      s6, s8, 1
/*000000008130*/ s_lshl_b32      s8, s10, 2
/*000000008134*/ v_mov_b32       v4, 0
/*000000008138*/ v_mov_b32       v6, v4
/*00000000813c*/ v_mov_b32       v8, v4
/*000000008140*/ s_and_b32       s9, s0, -2
/*000000008144*/ v_add3_u32      v3, s12, s6, v0
/*00000000814c*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000008154*/ s_lshr_b32      s6, s0, 1
/*000000008158*/ s_waitcnt       lgkmcnt(0)
/*00000000815c*/ v_add3_u32      v7, s3, s8, v2
/*000000008164*/ v_add3_u32      v5, s14, s7, v1
/*00000000816c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000008174*/ s_cmpk_lg_u32   s9, 0x0
/*000000008178*/ s_addc_u32      s3, s6, 0
/*00000000817c*/ s_and_b32       s6, s1, -2
/*000000008180*/ s_lshr_b32      s7, s1, 1
/*000000008184*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000000818c*/ s_mul_i32       s0, s3, s0
/*000000008190*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000008198*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000081a0*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000081a8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000081ac*/ v_mov_b32       v6, s0
/*0000000081b0*/ s_addc_u32      s3, s7, 0
/*0000000081b4*/ s_and_b32       s6, s2, -4
/*0000000081b8*/ s_lshr_b32      s0, s2, 2
/*0000000081bc*/ v_cmp_gt_u32    s[6:7], s2, s6
/*0000000081c4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000081c8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000081d0*/ s_mul_i32       s1, s3, s1
/*0000000081d4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000081d8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000081dc*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000081e4*/ s_addc_u32      s0, s0, 0
/*0000000081e8*/ v_mov_b32       v9, s1
/*0000000081ec*/ s_mul_i32       s0, s0, s2
/*0000000081f0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000081f4*/ v_mov_b32       v11, s0
/*0000000081f8*/ global_store_dword v[0:1], v6, off
/*000000008200*/ global_store_dword v[2:3], v9, off
/*000000008208*/ global_store_dword v[4:5], v11, off
/*000000008210*/ s_endpgm
/*000000008214*/ s_nop           0x0
/*000000008218*/ s_nop           0x0
/*00000000821c*/ s_nop           0x0
/*000000008220*/ s_nop           0x0
/*000000008224*/ s_nop           0x0
/*000000008228*/ s_nop           0x0
/*00000000822c*/ s_nop           0x0
/*000000008230*/ s_nop           0x0
/*000000008234*/ s_nop           0x0
/*000000008238*/ s_nop           0x0
/*00000000823c*/ s_nop           0x0
/*000000008240*/ s_nop           0x0
/*000000008244*/ s_nop           0x0
/*000000008248*/ s_nop           0x0
/*00000000824c*/ s_nop           0x0
/*000000008250*/ s_nop           0x0
/*000000008254*/ s_nop           0x0
/*000000008258*/ s_nop           0x0
/*00000000825c*/ s_nop           0x0
/*000000008260*/ s_nop           0x0
/*000000008264*/ s_nop           0x0
/*000000008268*/ s_nop           0x0
/*00000000826c*/ s_nop           0x0
/*000000008270*/ s_nop           0x0
/*000000008274*/ s_nop           0x0
/*000000008278*/ s_nop           0x0
/*00000000827c*/ s_nop           0x0
/*000000008280*/ s_nop           0x0
/*000000008284*/ s_nop           0x0
/*000000008288*/ s_nop           0x0
/*00000000828c*/ s_nop           0x0
/*000000008290*/ s_nop           0x0
/*000000008294*/ s_nop           0x0
/*000000008298*/ s_nop           0x0
/*00000000829c*/ s_nop           0x0
/*0000000082a0*/ s_nop           0x0
/*0000000082a4*/ s_nop           0x0
/*0000000082a8*/ s_nop           0x0
/*0000000082ac*/ s_nop           0x0
/*0000000082b0*/ s_nop           0x0
/*0000000082b4*/ s_nop           0x0
/*0000000082b8*/ s_nop           0x0
/*0000000082bc*/ s_nop           0x0
/*0000000082c0*/ s_nop           0x0
/*0000000082c4*/ s_nop           0x0
/*0000000082c8*/ s_nop           0x0
/*0000000082cc*/ s_nop           0x0
/*0000000082d0*/ s_nop           0x0
/*0000000082d4*/ s_nop           0x0
/*0000000082d8*/ s_nop           0x0
/*0000000082dc*/ s_nop           0x0
/*0000000082e0*/ s_nop           0x0
/*0000000082e4*/ s_nop           0x0
/*0000000082e8*/ s_nop           0x0
/*0000000082ec*/ s_nop           0x0
/*0000000082f0*/ s_nop           0x0
/*0000000082f4*/ s_nop           0x0
/*0000000082f8*/ s_nop           0x0
/*0000000082fc*/ s_nop           0x0
mul_get_work_dim_get_global_size:
.skip 256
/*000000008400*/ v_mov_b32       v3, s4
/*000000008404*/ v_mov_b32       v4, s5
/*000000008408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008410*/ s_waitcnt       lgkmcnt(0)
/*000000008414*/ s_clause        0x1
/*000000008418*/ s_load_dword    s1, s[6:7], 0x20
/*000000008420*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008428*/ s_lshl_b32      s3, s8, 1
/*00000000842c*/ s_lshl_b32      s8, s9, 1
/*000000008430*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000008438*/ s_lshl_b32      s9, s10, 2
/*00000000843c*/ s_clause        0x2
/*000000008440*/ s_load_dword    s10, s[4:5], 0xc
/*000000008448*/ s_load_dword    s11, s[4:5], 0x10
/*000000008450*/ s_load_dword    s4, s[4:5], 0x14
/*000000008458*/ v_mov_b32       v4, 0
/*00000000845c*/ v_mov_b32       v6, v4
/*000000008460*/ v_mov_b32       v8, v4
/*000000008464*/ v_add3_u32      v3, s0, s3, v0
/*00000000846c*/ v_add3_u32      v5, s2, s8, v1
/*000000008474*/ s_waitcnt       lgkmcnt(0)
/*000000008478*/ v_add3_u32      v7, s1, s9, v2
/*000000008480*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000008488*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000008490*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000008498*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000084a0*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*0000000084a4*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000084ac*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000084b0*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000084b8*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000084bc*/ s_waitcnt       vmcnt(0)
/*0000000084c0*/ v_mul_lo_u32    v6, s10, v9
/*0000000084c8*/ v_mul_lo_u32    v13, s11, v9
/*0000000084d0*/ v_mul_lo_u32    v11, s4, v9
/*0000000084d8*/ global_store_dword v[0:1], v6, off
/*0000000084e0*/ global_store_dword v[2:3], v13, off
/*0000000084e8*/ global_store_dword v[4:5], v11, off
/*0000000084f0*/ s_endpgm
/*0000000084f4*/ s_nop           0x0
/*0000000084f8*/ s_nop           0x0
/*0000000084fc*/ s_nop           0x0
mul_x_get_num_groups:
.skip 256
/*000000008600*/ s_load_dword    s11, s[4:5], 0xc
/*000000008608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008610*/ s_waitcnt       lgkmcnt(0)
/*000000008614*/ s_load_dword    s1, s[4:5], 0x10
/*00000000861c*/ s_clause        0x2
/*000000008620*/ s_load_dword    s3, s[6:7], 0x20
/*000000008628*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*000000008630*/ s_load_dword    s6, s[6:7], 0x8
/*000000008638*/ s_load_dword    s4, s[4:5], 0x14
/*000000008640*/ s_lshl_b32      s8, s8, 4
/*000000008644*/ s_lshl_b32      s7, s9, 1
/*000000008648*/ s_lshl_b32      s9, s10, 1
/*00000000864c*/ v_mov_b32       v4, 0
/*000000008650*/ v_mov_b32       v6, v4
/*000000008654*/ s_and_b32       s5, s11, -16
/*000000008658*/ v_add3_u32      v3, s0, s8, v0
/*000000008660*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008668*/ s_lshr_b32      s0, s11, 4
/*00000000866c*/ v_add3_u32      v5, s2, s7, v1
/*000000008674*/ s_waitcnt       lgkmcnt(0)
/*000000008678*/ v_add3_u32      v0, s3, s9, v2
/*000000008680*/ v_lshlrev_b64   v[2:3], 2, v[3:4]
/*000000008688*/ s_cmpk_lg_u32   s5, 0x0
/*00000000868c*/ v_mov_b32       v1, v4
/*000000008690*/ s_addc_u32      s0, s0, 0
/*000000008694*/ s_and_b32       s2, s1, -2
/*000000008698*/ v_lshlrev_b64   v[4:5], 2, v[5:6]
/*0000000086a0*/ v_cmp_gt_u32    s[2:3], s1, s2
/*0000000086a8*/ s_lshr_b32      s1, s1, 1
/*0000000086ac*/ s_mul_i32       s0, s0, s6
/*0000000086b0*/ v_add_co_u32    v2, vcc, s12, v2
/*0000000086b8*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000086c0*/ s_cmpk_lg_u32   s2, 0x0
/*0000000086c4*/ v_mov_b32       v9, s0
/*0000000086c8*/ s_addc_u32      s1, s1, 0
/*0000000086cc*/ s_and_b32       s2, s4, -2
/*0000000086d0*/ s_lshr_b32      s0, s4, 1
/*0000000086d4*/ v_cmp_gt_u32    s[2:3], s4, s2
/*0000000086dc*/ v_add_co_ci_u32 v3, vcc, s13, v3, vcc
/*0000000086e0*/ v_add_co_u32    v4, vcc, s12, v4
/*0000000086e8*/ s_mul_i32       s1, s1, s6
/*0000000086ec*/ v_add_co_ci_u32 v5, vcc, s13, v5, vcc
/*0000000086f0*/ s_cmpk_lg_u32   s2, 0x0
/*0000000086f4*/ v_add_co_u32    v0, vcc, s12, v0
/*0000000086fc*/ s_addc_u32      s0, s0, 0
/*000000008700*/ v_mov_b32       v7, s1
/*000000008704*/ s_mul_i32       s0, s0, s6
/*000000008708*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*00000000870c*/ v_mov_b32       v11, s0
/*000000008710*/ global_store_dword v[2:3], v9, off
/*000000008718*/ global_store_dword v[4:5], v7, off
/*000000008720*/ global_store_dword v[0:1], v11, off
/*000000008728*/ s_endpgm
/*00000000872c*/ s_nop           0x0
/*000000008730*/ s_nop           0x0
/*000000008734*/ s_nop           0x0
/*000000008738*/ s_nop           0x0
/*00000000873c*/ s_nop           0x0
/*000000008740*/ s_nop           0x0
/*000000008744*/ s_nop           0x0
/*000000008748*/ s_nop           0x0
/*00000000874c*/ s_nop           0x0
/*000000008750*/ s_nop           0x0
/*000000008754*/ s_nop           0x0
/*000000008758*/ s_nop           0x0
/*00000000875c*/ s_nop           0x0
/*000000008760*/ s_nop           0x0
/*000000008764*/ s_nop           0x0
/*000000008768*/ s_nop           0x0
/*00000000876c*/ s_nop           0x0
/*000000008770*/ s_nop           0x0
/*000000008774*/ s_nop           0x0
/*000000008778*/ s_nop           0x0
/*00000000877c*/ s_nop           0x0
/*000000008780*/ s_nop           0x0
/*000000008784*/ s_nop           0x0
/*000000008788*/ s_nop           0x0
/*00000000878c*/ s_nop           0x0
/*000000008790*/ s_nop           0x0
/*000000008794*/ s_nop           0x0
/*000000008798*/ s_nop           0x0
/*00000000879c*/ s_nop           0x0
/*0000000087a0*/ s_nop           0x0
/*0000000087a4*/ s_nop           0x0
/*0000000087a8*/ s_nop           0x0
/*0000000087ac*/ s_nop           0x0
/*0000000087b0*/ s_nop           0x0
/*0000000087b4*/ s_nop           0x0
/*0000000087b8*/ s_nop           0x0
/*0000000087bc*/ s_nop           0x0
/*0000000087c0*/ s_nop           0x0
/*0000000087c4*/ s_nop           0x0
/*0000000087c8*/ s_nop           0x0
/*0000000087cc*/ s_nop           0x0
/*0000000087d0*/ s_nop           0x0
/*0000000087d4*/ s_nop           0x0
/*0000000087d8*/ s_nop           0x0
/*0000000087dc*/ s_nop           0x0
/*0000000087e0*/ s_nop           0x0
/*0000000087e4*/ s_nop           0x0
/*0000000087e8*/ s_nop           0x0
/*0000000087ec*/ s_nop           0x0
/*0000000087f0*/ s_nop           0x0
/*0000000087f4*/ s_nop           0x0
/*0000000087f8*/ s_nop           0x0
/*0000000087fc*/ s_nop           0x0
mul_get_global_offset_get_num_groups:
.skip 256
/*000000008900*/ s_load_dword    s11, s[4:5], 0xc
/*000000008908*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008910*/ s_waitcnt       lgkmcnt(0)
/*000000008914*/ s_load_dword    s1, s[4:5], 0x10
/*00000000891c*/ s_clause        0x1
/*000000008920*/ s_load_dword    s3, s[6:7], 0x20
/*000000008928*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008930*/ s_load_dword    s4, s[4:5], 0x14
/*000000008938*/ s_lshl_b32      s8, s8, 1
/*00000000893c*/ s_lshl_b32      s9, s9, 4
/*000000008940*/ s_lshl_b32      s10, s10, 1
/*000000008944*/ v_mov_b32       v4, 0
/*000000008948*/ v_mov_b32       v6, v4
/*00000000894c*/ s_and_b32       s5, s11, -2
/*000000008950*/ v_add3_u32      v3, s0, s8, v0
/*000000008958*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008960*/ s_lshr_b32      s8, s11, 1
/*000000008964*/ v_add3_u32      v5, s2, s9, v1
/*00000000896c*/ s_waitcnt       lgkmcnt(0)
/*000000008970*/ v_add3_u32      v0, s3, s10, v2
/*000000008978*/ v_lshlrev_b64   v[2:3], 2, v[3:4]
/*000000008980*/ s_cmpk_lg_u32   s5, 0x0
/*000000008984*/ v_mov_b32       v1, v4
/*000000008988*/ s_addc_u32      s5, s8, 0
/*00000000898c*/ s_and_b32       s8, s1, -16
/*000000008990*/ s_mul_i32       s0, s5, s0
/*000000008994*/ v_cmp_gt_u32    s[8:9], s1, s8
/*00000000899c*/ s_lshr_b32      s1, s1, 4
/*0000000089a0*/ v_lshlrev_b64   v[4:5], 2, v[5:6]
/*0000000089a8*/ v_add_co_u32    v2, vcc, s6, v2
/*0000000089b0*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*0000000089b8*/ s_cmpk_lg_u32   s8, 0x0
/*0000000089bc*/ v_mov_b32       v9, s0
/*0000000089c0*/ s_addc_u32      s1, s1, 0
/*0000000089c4*/ s_and_b32       s8, s4, -2
/*0000000089c8*/ s_lshr_b32      s0, s4, 1
/*0000000089cc*/ v_cmp_gt_u32    s[5:6], s4, s8
/*0000000089d4*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*0000000089d8*/ v_add_co_u32    v4, vcc, s6, v4
/*0000000089e0*/ s_mul_i32       s1, s1, s2
/*0000000089e4*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*0000000089e8*/ s_cmpk_lg_u32   s5, 0x0
/*0000000089ec*/ v_add_co_u32    v0, vcc, s6, v0
/*0000000089f4*/ s_addc_u32      s0, s0, 0
/*0000000089f8*/ v_mov_b32       v7, s1
/*0000000089fc*/ s_mul_i32       s0, s0, s3
/*000000008a00*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*000000008a04*/ v_mov_b32       v11, s0
/*000000008a08*/ global_store_dword v[2:3], v9, off
/*000000008a10*/ global_store_dword v[4:5], v7, off
/*000000008a18*/ global_store_dword v[0:1], v11, off
/*000000008a20*/ s_endpgm
/*000000008a24*/ s_nop           0x0
/*000000008a28*/ s_nop           0x0
/*000000008a2c*/ s_nop           0x0
/*000000008a30*/ s_nop           0x0
/*000000008a34*/ s_nop           0x0
/*000000008a38*/ s_nop           0x0
/*000000008a3c*/ s_nop           0x0
/*000000008a40*/ s_nop           0x0
/*000000008a44*/ s_nop           0x0
/*000000008a48*/ s_nop           0x0
/*000000008a4c*/ s_nop           0x0
/*000000008a50*/ s_nop           0x0
/*000000008a54*/ s_nop           0x0
/*000000008a58*/ s_nop           0x0
/*000000008a5c*/ s_nop           0x0
/*000000008a60*/ s_nop           0x0
/*000000008a64*/ s_nop           0x0
/*000000008a68*/ s_nop           0x0
/*000000008a6c*/ s_nop           0x0
/*000000008a70*/ s_nop           0x0
/*000000008a74*/ s_nop           0x0
/*000000008a78*/ s_nop           0x0
/*000000008a7c*/ s_nop           0x0
/*000000008a80*/ s_nop           0x0
/*000000008a84*/ s_nop           0x0
/*000000008a88*/ s_nop           0x0
/*000000008a8c*/ s_nop           0x0
/*000000008a90*/ s_nop           0x0
/*000000008a94*/ s_nop           0x0
/*000000008a98*/ s_nop           0x0
/*000000008a9c*/ s_nop           0x0
/*000000008aa0*/ s_nop           0x0
/*000000008aa4*/ s_nop           0x0
/*000000008aa8*/ s_nop           0x0
/*000000008aac*/ s_nop           0x0
/*000000008ab0*/ s_nop           0x0
/*000000008ab4*/ s_nop           0x0
/*000000008ab8*/ s_nop           0x0
/*000000008abc*/ s_nop           0x0
/*000000008ac0*/ s_nop           0x0
/*000000008ac4*/ s_nop           0x0
/*000000008ac8*/ s_nop           0x0
/*000000008acc*/ s_nop           0x0
/*000000008ad0*/ s_nop           0x0
/*000000008ad4*/ s_nop           0x0
/*000000008ad8*/ s_nop           0x0
/*000000008adc*/ s_nop           0x0
/*000000008ae0*/ s_nop           0x0
/*000000008ae4*/ s_nop           0x0
/*000000008ae8*/ s_nop           0x0
/*000000008aec*/ s_nop           0x0
/*000000008af0*/ s_nop           0x0
/*000000008af4*/ s_nop           0x0
/*000000008af8*/ s_nop           0x0
/*000000008afc*/ s_nop           0x0
mul_get_local_id_get_num_groups:
.skip 256
/*000000008c00*/ s_load_dword    s11, s[4:5], 0xc
/*000000008c08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008c10*/ s_waitcnt       lgkmcnt(0)
/*000000008c14*/ s_load_dword    s1, s[4:5], 0x10
/*000000008c1c*/ s_clause        0x1
/*000000008c20*/ s_load_dword    s3, s[6:7], 0x20
/*000000008c28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008c30*/ s_load_dword    s4, s[4:5], 0x14
/*000000008c38*/ s_lshl_b32      s8, s8, 3
/*000000008c3c*/ s_lshl_b32      s9, s9, 2
/*000000008c40*/ s_lshl_b32      s10, s10, 1
/*000000008c44*/ v_mov_b32       v4, 0
/*000000008c48*/ v_mov_b32       v6, v4
/*000000008c4c*/ v_mov_b32       v8, v4
/*000000008c50*/ s_and_b32       s5, s11, -8
/*000000008c54*/ v_add3_u32      v3, s0, s8, v0
/*000000008c5c*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008c64*/ s_lshr_b32      s0, s11, 3
/*000000008c68*/ v_add3_u32      v5, s2, s9, v1
/*000000008c70*/ s_waitcnt       lgkmcnt(0)
/*000000008c74*/ v_add3_u32      v7, s3, s10, v2
/*000000008c7c*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*000000008c84*/ s_cmpk_lg_u32   s5, 0x0
/*000000008c88*/ s_addc_u32      s0, s0, 0
/*000000008c8c*/ s_and_b32       s2, s1, -4
/*000000008c90*/ v_mul_lo_u32    v9, s0, v0
/*000000008c98*/ v_cmp_gt_u32    s[2:3], s1, s2
/*000000008ca0*/ s_lshr_b32      s1, s1, 2
/*000000008ca4*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*000000008cac*/ v_add_co_u32    v3, vcc, s6, v3
/*000000008cb4*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*000000008cbc*/ s_cmpk_lg_u32   s2, 0x0
/*000000008cc0*/ v_add_co_ci_u32 v4, vcc, s7, v4, vcc
/*000000008cc4*/ s_addc_u32      s1, s1, 0
/*000000008cc8*/ s_and_b32       s2, s4, -2
/*000000008ccc*/ v_add_co_u32    v5, vcc, s6, v5
/*000000008cd4*/ v_cmp_gt_u32    s[0:1], s4, s2
/*000000008cdc*/ s_lshr_b32      s2, s4, 1
/*000000008ce0*/ v_mul_lo_u32    v11, s1, v1
/*000000008ce8*/ v_add_co_ci_u32 v6, vcc, s7, v6, vcc
/*000000008cec*/ v_add_co_u32    v0, vcc, s6, v7
/*000000008cf4*/ s_cmpk_lg_u32   s0, 0x0
/*000000008cf8*/ v_add_co_ci_u32 v1, vcc, s7, v8, vcc
/*000000008cfc*/ s_addc_u32      s0, s2, 0
/*000000008d00*/ v_mul_lo_u32    v2, s0, v2
/*000000008d08*/ global_store_dword v[3:4], v9, off
/*000000008d10*/ global_store_dword v[5:6], v11, off
/*000000008d18*/ global_store_dword v[0:1], v2, off
/*000000008d20*/ s_endpgm
/*000000008d24*/ s_nop           0x0
/*000000008d28*/ s_nop           0x0
/*000000008d2c*/ s_nop           0x0
/*000000008d30*/ s_nop           0x0
/*000000008d34*/ s_nop           0x0
/*000000008d38*/ s_nop           0x0
/*000000008d3c*/ s_nop           0x0
/*000000008d40*/ s_nop           0x0
/*000000008d44*/ s_nop           0x0
/*000000008d48*/ s_nop           0x0
/*000000008d4c*/ s_nop           0x0
/*000000008d50*/ s_nop           0x0
/*000000008d54*/ s_nop           0x0
/*000000008d58*/ s_nop           0x0
/*000000008d5c*/ s_nop           0x0
/*000000008d60*/ s_nop           0x0
/*000000008d64*/ s_nop           0x0
/*000000008d68*/ s_nop           0x0
/*000000008d6c*/ s_nop           0x0
/*000000008d70*/ s_nop           0x0
/*000000008d74*/ s_nop           0x0
/*000000008d78*/ s_nop           0x0
/*000000008d7c*/ s_nop           0x0
/*000000008d80*/ s_nop           0x0
/*000000008d84*/ s_nop           0x0
/*000000008d88*/ s_nop           0x0
/*000000008d8c*/ s_nop           0x0
/*000000008d90*/ s_nop           0x0
/*000000008d94*/ s_nop           0x0
/*000000008d98*/ s_nop           0x0
/*000000008d9c*/ s_nop           0x0
/*000000008da0*/ s_nop           0x0
/*000000008da4*/ s_nop           0x0
/*000000008da8*/ s_nop           0x0
/*000000008dac*/ s_nop           0x0
/*000000008db0*/ s_nop           0x0
/*000000008db4*/ s_nop           0x0
/*000000008db8*/ s_nop           0x0
/*000000008dbc*/ s_nop           0x0
/*000000008dc0*/ s_nop           0x0
/*000000008dc4*/ s_nop           0x0
/*000000008dc8*/ s_nop           0x0
/*000000008dcc*/ s_nop           0x0
/*000000008dd0*/ s_nop           0x0
/*000000008dd4*/ s_nop           0x0
/*000000008dd8*/ s_nop           0x0
/*000000008ddc*/ s_nop           0x0
/*000000008de0*/ s_nop           0x0
/*000000008de4*/ s_nop           0x0
/*000000008de8*/ s_nop           0x0
/*000000008dec*/ s_nop           0x0
/*000000008df0*/ s_nop           0x0
/*000000008df4*/ s_nop           0x0
/*000000008df8*/ s_nop           0x0
/*000000008dfc*/ s_nop           0x0
mul_get_group_id_get_num_groups:
.skip 256
/*000000008f00*/ s_load_dword    s11, s[4:5], 0xc
/*000000008f08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000008f10*/ s_waitcnt       lgkmcnt(0)
/*000000008f14*/ s_load_dword    s1, s[4:5], 0x10
/*000000008f1c*/ s_clause        0x1
/*000000008f20*/ s_load_dword    s3, s[6:7], 0x20
/*000000008f28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000008f30*/ s_load_dword    s4, s[4:5], 0x14
/*000000008f38*/ s_lshl_b32      s12, s8, 1
/*000000008f3c*/ s_lshl_b32      s13, s9, 4
/*000000008f40*/ s_lshl_b32      s14, s10, 1
/*000000008f44*/ v_mov_b32       v4, 0
/*000000008f48*/ v_mov_b32       v6, v4
/*000000008f4c*/ s_and_b32       s5, s11, -2
/*000000008f50*/ v_add3_u32      v3, s0, s12, v0
/*000000008f58*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000008f60*/ s_lshr_b32      s0, s11, 1
/*000000008f64*/ v_add3_u32      v5, s2, s13, v1
/*000000008f6c*/ s_waitcnt       lgkmcnt(0)
/*000000008f70*/ v_add3_u32      v0, s3, s14, v2
/*000000008f78*/ v_lshlrev_b64   v[2:3], 2, v[3:4]
/*000000008f80*/ s_cmpk_lg_u32   s5, 0x0
/*000000008f84*/ v_mov_b32       v1, v4
/*000000008f88*/ s_addc_u32      s0, s0, 0
/*000000008f8c*/ s_and_b32       s2, s1, -16
/*000000008f90*/ v_lshlrev_b64   v[4:5], 2, v[5:6]
/*000000008f98*/ v_cmp_gt_u32    s[2:3], s1, s2
/*000000008fa0*/ s_lshr_b32      s1, s1, 4
/*000000008fa4*/ s_mul_i32       s0, s0, s8
/*000000008fa8*/ v_add_co_u32    v2, vcc, s6, v2
/*000000008fb0*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*000000008fb8*/ s_cmpk_lg_u32   s2, 0x0
/*000000008fbc*/ v_mov_b32       v9, s0
/*000000008fc0*/ s_addc_u32      s1, s1, 0
/*000000008fc4*/ s_and_b32       s2, s4, -2
/*000000008fc8*/ s_lshr_b32      s0, s4, 1
/*000000008fcc*/ v_cmp_gt_u32    s[2:3], s4, s2
/*000000008fd4*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*000000008fd8*/ v_add_co_u32    v4, vcc, s6, v4
/*000000008fe0*/ s_mul_i32       s1, s1, s9
/*000000008fe4*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*000000008fe8*/ s_cmpk_lg_u32   s2, 0x0
/*000000008fec*/ v_add_co_u32    v0, vcc, s6, v0
/*000000008ff4*/ s_addc_u32      s0, s0, 0
/*000000008ff8*/ v_mov_b32       v7, s1
/*000000008ffc*/ s_mul_i32       s0, s0, s10
/*000000009000*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*000000009004*/ v_mov_b32       v11, s0
/*000000009008*/ global_store_dword v[2:3], v9, off
/*000000009010*/ global_store_dword v[4:5], v7, off
/*000000009018*/ global_store_dword v[0:1], v11, off
/*000000009020*/ s_endpgm
/*000000009024*/ s_nop           0x0
/*000000009028*/ s_nop           0x0
/*00000000902c*/ s_nop           0x0
/*000000009030*/ s_nop           0x0
/*000000009034*/ s_nop           0x0
/*000000009038*/ s_nop           0x0
/*00000000903c*/ s_nop           0x0
/*000000009040*/ s_nop           0x0
/*000000009044*/ s_nop           0x0
/*000000009048*/ s_nop           0x0
/*00000000904c*/ s_nop           0x0
/*000000009050*/ s_nop           0x0
/*000000009054*/ s_nop           0x0
/*000000009058*/ s_nop           0x0
/*00000000905c*/ s_nop           0x0
/*000000009060*/ s_nop           0x0
/*000000009064*/ s_nop           0x0
/*000000009068*/ s_nop           0x0
/*00000000906c*/ s_nop           0x0
/*000000009070*/ s_nop           0x0
/*000000009074*/ s_nop           0x0
/*000000009078*/ s_nop           0x0
/*00000000907c*/ s_nop           0x0
/*000000009080*/ s_nop           0x0
/*000000009084*/ s_nop           0x0
/*000000009088*/ s_nop           0x0
/*00000000908c*/ s_nop           0x0
/*000000009090*/ s_nop           0x0
/*000000009094*/ s_nop           0x0
/*000000009098*/ s_nop           0x0
/*00000000909c*/ s_nop           0x0
/*0000000090a0*/ s_nop           0x0
/*0000000090a4*/ s_nop           0x0
/*0000000090a8*/ s_nop           0x0
/*0000000090ac*/ s_nop           0x0
/*0000000090b0*/ s_nop           0x0
/*0000000090b4*/ s_nop           0x0
/*0000000090b8*/ s_nop           0x0
/*0000000090bc*/ s_nop           0x0
/*0000000090c0*/ s_nop           0x0
/*0000000090c4*/ s_nop           0x0
/*0000000090c8*/ s_nop           0x0
/*0000000090cc*/ s_nop           0x0
/*0000000090d0*/ s_nop           0x0
/*0000000090d4*/ s_nop           0x0
/*0000000090d8*/ s_nop           0x0
/*0000000090dc*/ s_nop           0x0
/*0000000090e0*/ s_nop           0x0
/*0000000090e4*/ s_nop           0x0
/*0000000090e8*/ s_nop           0x0
/*0000000090ec*/ s_nop           0x0
/*0000000090f0*/ s_nop           0x0
/*0000000090f4*/ s_nop           0x0
/*0000000090f8*/ s_nop           0x0
/*0000000090fc*/ s_nop           0x0
mul_get_local_size_get_num_groups:
.skip 256
/*000000009200*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009208*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000009210*/ s_waitcnt       lgkmcnt(0)
/*000000009214*/ s_lshl_b32      s3, s8, 1
/*000000009218*/ s_clause        0x1
/*00000000921c*/ s_load_dword    s1, s[6:7], 0x20
/*000000009224*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000922c*/ s_lshl_b32      s6, s9, 1
/*000000009230*/ v_mov_b32       v4, 0
/*000000009234*/ s_lshl_b32      s7, s10, 2
/*000000009238*/ v_mov_b32       v6, v4
/*00000000923c*/ v_mov_b32       v8, v4
/*000000009240*/ v_add3_u32      v3, s0, s3, v0
/*000000009248*/ s_and_b32       s0, s12, -2
/*00000000924c*/ v_add3_u32      v5, s2, s6, v1
/*000000009254*/ v_cmp_gt_u32    s[0:1], s12, s0
/*00000000925c*/ s_and_b32       s2, s14, -4
/*000000009260*/ s_waitcnt       lgkmcnt(0)
/*000000009264*/ v_add3_u32      v7, s1, s7, v2
/*00000000926c*/ v_cndmask_b32   v0, 0, 1, s[0:1]
/*000000009274*/ s_and_b32       s0, s13, -2
/*000000009278*/ v_cmp_gt_u32    s[0:1], s13, s0
/*000000009280*/ v_lshlrev_b32   v0, 1, v0
/*000000009284*/ v_cndmask_b32   v1, 0, 1, s[0:1]
/*00000000928c*/ v_cmp_gt_u32    s[0:1], s14, s2
/*000000009294*/ v_add_nc_u32    v11, s12, v0
/*000000009298*/ v_lshlrev_b32   v10, 1, v1
/*00000000929c*/ v_cndmask_b32   v9, 0, 1, s[0:1]
/*0000000092a4*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*0000000092ac*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*0000000092b4*/ v_and_b32       v6, -2, v11
/*0000000092b8*/ v_add_nc_u32    v5, s13, v10
/*0000000092bc*/ v_lshlrev_b32   v4, 2, v9
/*0000000092c0*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000092c8*/ v_and_b32       v9, -2, v5
/*0000000092cc*/ v_add_nc_u32    v10, s14, v4
/*0000000092d0*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000092d8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000092dc*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000092e4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000092e8*/ v_and_b32       v7, -4, v10
/*0000000092ec*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000092f4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000092f8*/ global_store_dword v[0:1], v6, off
/*000000009300*/ global_store_dword v[2:3], v9, off
/*000000009308*/ global_store_dword v[4:5], v7, off
/*000000009310*/ s_endpgm
/*000000009314*/ s_nop           0x0
/*000000009318*/ s_nop           0x0
/*00000000931c*/ s_nop           0x0
/*000000009320*/ s_nop           0x0
/*000000009324*/ s_nop           0x0
/*000000009328*/ s_nop           0x0
/*00000000932c*/ s_nop           0x0
/*000000009330*/ s_nop           0x0
/*000000009334*/ s_nop           0x0
/*000000009338*/ s_nop           0x0
/*00000000933c*/ s_nop           0x0
/*000000009340*/ s_nop           0x0
/*000000009344*/ s_nop           0x0
/*000000009348*/ s_nop           0x0
/*00000000934c*/ s_nop           0x0
/*000000009350*/ s_nop           0x0
/*000000009354*/ s_nop           0x0
/*000000009358*/ s_nop           0x0
/*00000000935c*/ s_nop           0x0
/*000000009360*/ s_nop           0x0
/*000000009364*/ s_nop           0x0
/*000000009368*/ s_nop           0x0
/*00000000936c*/ s_nop           0x0
/*000000009370*/ s_nop           0x0
/*000000009374*/ s_nop           0x0
/*000000009378*/ s_nop           0x0
/*00000000937c*/ s_nop           0x0
/*000000009380*/ s_nop           0x0
/*000000009384*/ s_nop           0x0
/*000000009388*/ s_nop           0x0
/*00000000938c*/ s_nop           0x0
/*000000009390*/ s_nop           0x0
/*000000009394*/ s_nop           0x0
/*000000009398*/ s_nop           0x0
/*00000000939c*/ s_nop           0x0
/*0000000093a0*/ s_nop           0x0
/*0000000093a4*/ s_nop           0x0
/*0000000093a8*/ s_nop           0x0
/*0000000093ac*/ s_nop           0x0
/*0000000093b0*/ s_nop           0x0
/*0000000093b4*/ s_nop           0x0
/*0000000093b8*/ s_nop           0x0
/*0000000093bc*/ s_nop           0x0
/*0000000093c0*/ s_nop           0x0
/*0000000093c4*/ s_nop           0x0
/*0000000093c8*/ s_nop           0x0
/*0000000093cc*/ s_nop           0x0
/*0000000093d0*/ s_nop           0x0
/*0000000093d4*/ s_nop           0x0
/*0000000093d8*/ s_nop           0x0
/*0000000093dc*/ s_nop           0x0
/*0000000093e0*/ s_nop           0x0
/*0000000093e4*/ s_nop           0x0
/*0000000093e8*/ s_nop           0x0
/*0000000093ec*/ s_nop           0x0
/*0000000093f0*/ s_nop           0x0
/*0000000093f4*/ s_nop           0x0
/*0000000093f8*/ s_nop           0x0
/*0000000093fc*/ s_nop           0x0
mul_get_global_id_get_num_groups:
.skip 256
/*000000009500*/ s_clause        0x1
/*000000009504*/ s_load_dword    s11, s[4:5], 0xc
/*00000000950c*/ s_load_dword    s12, s[4:5], 0x10
/*000000009514*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000951c*/ s_waitcnt       lgkmcnt(0)
/*000000009520*/ s_clause        0x1
/*000000009524*/ s_load_dword    s1, s[6:7], 0x20
/*00000000952c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000009534*/ s_load_dword    s3, s[4:5], 0x14
/*00000000953c*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000009544*/ v_mov_b32       v4, 0
/*000000009548*/ v_lshl_or_b32   v0, s9, 1, v1
/*000000009550*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000009558*/ v_lshlrev_b64   v[6:7], 2, v[3:4]
/*000000009560*/ v_mov_b32       v1, v4
/*000000009564*/ v_mov_b32       v5, v4
/*000000009568*/ s_and_b32       s4, s11, -2
/*00000000956c*/ s_lshr_b32      s5, s11, 1
/*000000009570*/ v_cmp_gt_u32    s[4:5], s11, s4
/*000000009578*/ s_waitcnt       lgkmcnt(0)
/*00000000957c*/ v_add_nc_u32    v4, s1, v2
/*000000009580*/ v_add_nc_u32    v0, s2, v0
/*000000009584*/ v_add_nc_u32    v10, s0, v3
/*000000009588*/ v_add_co_u32    v2, vcc, s6, v6
/*000000009590*/ s_cmpk_lg_u32   s4, 0x0
/*000000009594*/ v_add_co_ci_u32 v3, vcc, s7, v7, vcc
/*000000009598*/ s_addc_u32      s4, s5, 0
/*00000000959c*/ s_and_b32       s5, s12, -2
/*0000000095a0*/ s_lshr_b32      s1, s12, 1
/*0000000095a4*/ v_cmp_gt_u32    s[5:6], s12, s5
/*0000000095ac*/ v_lshlrev_b64   v[6:7], 2, v[0:1]
/*0000000095b4*/ v_lshlrev_b64   v[8:9], 2, v[4:5]
/*0000000095bc*/ v_mul_lo_u32    v13, s4, v10
/*0000000095c4*/ s_cmpk_lg_u32   s5, 0x0
/*0000000095c8*/ s_addc_u32      s0, s1, 0
/*0000000095cc*/ s_and_b32       s1, s3, -4
/*0000000095d0*/ s_lshr_b32      s2, s3, 2
/*0000000095d4*/ v_cmp_gt_u32    s[1:2], s3, s1
/*0000000095dc*/ v_add_co_u32    v5, vcc, s6, v6
/*0000000095e4*/ v_add_co_ci_u32 v6, vcc, s7, v7, vcc
/*0000000095e8*/ v_mul_lo_u32    v7, s0, v0
/*0000000095f0*/ s_cmpk_lg_u32   s1, 0x0
/*0000000095f4*/ v_add_co_u32    v0, vcc, s6, v8
/*0000000095fc*/ s_addc_u32      s1, s2, 0
/*000000009600*/ v_add_co_ci_u32 v1, vcc, s7, v9, vcc
/*000000009604*/ v_mul_lo_u32    v11, s1, v4
/*00000000960c*/ global_store_dword v[2:3], v13, off
/*000000009614*/ global_store_dword v[5:6], v7, off
/*00000000961c*/ global_store_dword v[0:1], v11, off
/*000000009624*/ s_endpgm
/*000000009628*/ s_nop           0x0
/*00000000962c*/ s_nop           0x0
/*000000009630*/ s_nop           0x0
/*000000009634*/ s_nop           0x0
/*000000009638*/ s_nop           0x0
/*00000000963c*/ s_nop           0x0
/*000000009640*/ s_nop           0x0
/*000000009644*/ s_nop           0x0
/*000000009648*/ s_nop           0x0
/*00000000964c*/ s_nop           0x0
/*000000009650*/ s_nop           0x0
/*000000009654*/ s_nop           0x0
/*000000009658*/ s_nop           0x0
/*00000000965c*/ s_nop           0x0
/*000000009660*/ s_nop           0x0
/*000000009664*/ s_nop           0x0
/*000000009668*/ s_nop           0x0
/*00000000966c*/ s_nop           0x0
/*000000009670*/ s_nop           0x0
/*000000009674*/ s_nop           0x0
/*000000009678*/ s_nop           0x0
/*00000000967c*/ s_nop           0x0
/*000000009680*/ s_nop           0x0
/*000000009684*/ s_nop           0x0
/*000000009688*/ s_nop           0x0
/*00000000968c*/ s_nop           0x0
/*000000009690*/ s_nop           0x0
/*000000009694*/ s_nop           0x0
/*000000009698*/ s_nop           0x0
/*00000000969c*/ s_nop           0x0
/*0000000096a0*/ s_nop           0x0
/*0000000096a4*/ s_nop           0x0
/*0000000096a8*/ s_nop           0x0
/*0000000096ac*/ s_nop           0x0
/*0000000096b0*/ s_nop           0x0
/*0000000096b4*/ s_nop           0x0
/*0000000096b8*/ s_nop           0x0
/*0000000096bc*/ s_nop           0x0
/*0000000096c0*/ s_nop           0x0
/*0000000096c4*/ s_nop           0x0
/*0000000096c8*/ s_nop           0x0
/*0000000096cc*/ s_nop           0x0
/*0000000096d0*/ s_nop           0x0
/*0000000096d4*/ s_nop           0x0
/*0000000096d8*/ s_nop           0x0
/*0000000096dc*/ s_nop           0x0
/*0000000096e0*/ s_nop           0x0
/*0000000096e4*/ s_nop           0x0
/*0000000096e8*/ s_nop           0x0
/*0000000096ec*/ s_nop           0x0
/*0000000096f0*/ s_nop           0x0
/*0000000096f4*/ s_nop           0x0
/*0000000096f8*/ s_nop           0x0
/*0000000096fc*/ s_nop           0x0
mul_get_global_size_get_num_groups:
.skip 256
/*000000009800*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000009808*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000009810*/ s_waitcnt       lgkmcnt(0)
/*000000009814*/ s_clause        0x1
/*000000009818*/ s_load_dword    s3, s[6:7], 0x20
/*000000009820*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000009828*/ s_lshl_b32      s7, s9, 1
/*00000000982c*/ s_lshl_b32      s6, s8, 4
/*000000009830*/ s_lshl_b32      s8, s10, 1
/*000000009834*/ v_mov_b32       v4, 0
/*000000009838*/ v_mov_b32       v6, v4
/*00000000983c*/ v_mov_b32       v8, v4
/*000000009840*/ s_and_b32       s9, s0, -16
/*000000009844*/ v_add3_u32      v3, s12, s6, v0
/*00000000984c*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000009854*/ s_lshr_b32      s6, s0, 4
/*000000009858*/ s_waitcnt       lgkmcnt(0)
/*00000000985c*/ v_add3_u32      v7, s3, s8, v2
/*000000009864*/ v_add3_u32      v5, s14, s7, v1
/*00000000986c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009874*/ s_cmpk_lg_u32   s9, 0x0
/*000000009878*/ s_addc_u32      s3, s6, 0
/*00000000987c*/ s_and_b32       s6, s1, -2
/*000000009880*/ s_lshr_b32      s7, s1, 1
/*000000009884*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000000988c*/ s_mul_i32       s0, s3, s0
/*000000009890*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009898*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000098a0*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*0000000098a8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000098ac*/ v_mov_b32       v6, s0
/*0000000098b0*/ s_addc_u32      s3, s7, 0
/*0000000098b4*/ s_and_b32       s6, s2, -2
/*0000000098b8*/ s_lshr_b32      s0, s2, 1
/*0000000098bc*/ v_cmp_gt_u32    s[6:7], s2, s6
/*0000000098c4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000098c8*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000098d0*/ s_mul_i32       s1, s3, s1
/*0000000098d4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000098d8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000098dc*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000098e4*/ s_addc_u32      s0, s0, 0
/*0000000098e8*/ v_mov_b32       v9, s1
/*0000000098ec*/ s_mul_i32       s0, s0, s2
/*0000000098f0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000098f4*/ v_mov_b32       v11, s0
/*0000000098f8*/ global_store_dword v[0:1], v6, off
/*000000009900*/ global_store_dword v[2:3], v9, off
/*000000009908*/ global_store_dword v[4:5], v11, off
/*000000009910*/ s_endpgm
/*000000009914*/ s_nop           0x0
/*000000009918*/ s_nop           0x0
/*00000000991c*/ s_nop           0x0
/*000000009920*/ s_nop           0x0
/*000000009924*/ s_nop           0x0
/*000000009928*/ s_nop           0x0
/*00000000992c*/ s_nop           0x0
/*000000009930*/ s_nop           0x0
/*000000009934*/ s_nop           0x0
/*000000009938*/ s_nop           0x0
/*00000000993c*/ s_nop           0x0
/*000000009940*/ s_nop           0x0
/*000000009944*/ s_nop           0x0
/*000000009948*/ s_nop           0x0
/*00000000994c*/ s_nop           0x0
/*000000009950*/ s_nop           0x0
/*000000009954*/ s_nop           0x0
/*000000009958*/ s_nop           0x0
/*00000000995c*/ s_nop           0x0
/*000000009960*/ s_nop           0x0
/*000000009964*/ s_nop           0x0
/*000000009968*/ s_nop           0x0
/*00000000996c*/ s_nop           0x0
/*000000009970*/ s_nop           0x0
/*000000009974*/ s_nop           0x0
/*000000009978*/ s_nop           0x0
/*00000000997c*/ s_nop           0x0
/*000000009980*/ s_nop           0x0
/*000000009984*/ s_nop           0x0
/*000000009988*/ s_nop           0x0
/*00000000998c*/ s_nop           0x0
/*000000009990*/ s_nop           0x0
/*000000009994*/ s_nop           0x0
/*000000009998*/ s_nop           0x0
/*00000000999c*/ s_nop           0x0
/*0000000099a0*/ s_nop           0x0
/*0000000099a4*/ s_nop           0x0
/*0000000099a8*/ s_nop           0x0
/*0000000099ac*/ s_nop           0x0
/*0000000099b0*/ s_nop           0x0
/*0000000099b4*/ s_nop           0x0
/*0000000099b8*/ s_nop           0x0
/*0000000099bc*/ s_nop           0x0
/*0000000099c0*/ s_nop           0x0
/*0000000099c4*/ s_nop           0x0
/*0000000099c8*/ s_nop           0x0
/*0000000099cc*/ s_nop           0x0
/*0000000099d0*/ s_nop           0x0
/*0000000099d4*/ s_nop           0x0
/*0000000099d8*/ s_nop           0x0
/*0000000099dc*/ s_nop           0x0
/*0000000099e0*/ s_nop           0x0
/*0000000099e4*/ s_nop           0x0
/*0000000099e8*/ s_nop           0x0
/*0000000099ec*/ s_nop           0x0
/*0000000099f0*/ s_nop           0x0
/*0000000099f4*/ s_nop           0x0
/*0000000099f8*/ s_nop           0x0
/*0000000099fc*/ s_nop           0x0
mul_get_num_groups_get_num_groups:
.skip 256
/*000000009b00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000009b08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000009b10*/ s_waitcnt       lgkmcnt(0)
/*000000009b14*/ s_clause        0x1
/*000000009b18*/ s_load_dword    s3, s[6:7], 0x20
/*000000009b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000009b28*/ s_lshl_b32      s7, s9, 1
/*000000009b2c*/ s_lshl_b32      s6, s8, 1
/*000000009b30*/ s_lshl_b32      s8, s10, 2
/*000000009b34*/ v_mov_b32       v4, 0
/*000000009b38*/ v_mov_b32       v6, v4
/*000000009b3c*/ v_mov_b32       v8, v4
/*000000009b40*/ s_and_b32       s9, s0, -2
/*000000009b44*/ s_waitcnt       lgkmcnt(0)
/*000000009b48*/ v_add3_u32      v7, s3, s8, v2
/*000000009b50*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000009b58*/ s_lshr_b32      s0, s0, 1
/*000000009b5c*/ v_add3_u32      v3, s12, s6, v0
/*000000009b64*/ v_add3_u32      v5, s14, s7, v1
/*000000009b6c*/ s_cmpk_lg_u32   s9, 0x0
/*000000009b70*/ s_addc_u32      s0, s0, 0
/*000000009b74*/ s_and_b32       s3, s1, -2
/*000000009b78*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009b80*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000009b88*/ s_lshr_b32      s1, s1, 1
/*000000009b8c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009b94*/ s_mul_i32       s0, s0, s0
/*000000009b98*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000009ba0*/ s_cmpk_lg_u32   s3, 0x0
/*000000009ba4*/ v_add_co_u32    v0, vcc, s4, v0
/*000000009bac*/ s_addc_u32      s1, s1, 0
/*000000009bb0*/ s_and_b32       s3, s2, -4
/*000000009bb4*/ v_mov_b32       v6, s0
/*000000009bb8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000009bc0*/ s_lshr_b32      s0, s2, 2
/*000000009bc4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000009bc8*/ v_add_co_u32    v2, vcc, s4, v2
/*000000009bd0*/ s_mul_i32       s1, s1, s1
/*000000009bd4*/ s_cmpk_lg_u32   s3, 0x0
/*000000009bd8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000009bdc*/ s_addc_u32      s0, s0, 0
/*000000009be0*/ v_add_co_u32    v4, vcc, s4, v4
/*000000009be8*/ s_mul_i32       s0, s0, s0
/*000000009bec*/ v_mov_b32       v9, s1
/*000000009bf0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000009bf4*/ v_mov_b32       v11, s0
/*000000009bf8*/ global_store_dword v[0:1], v6, off
/*000000009c00*/ global_store_dword v[2:3], v9, off
/*000000009c08*/ global_store_dword v[4:5], v11, off
/*000000009c10*/ s_endpgm
/*000000009c14*/ s_nop           0x0
/*000000009c18*/ s_nop           0x0
/*000000009c1c*/ s_nop           0x0
/*000000009c20*/ s_nop           0x0
/*000000009c24*/ s_nop           0x0
/*000000009c28*/ s_nop           0x0
/*000000009c2c*/ s_nop           0x0
/*000000009c30*/ s_nop           0x0
/*000000009c34*/ s_nop           0x0
/*000000009c38*/ s_nop           0x0
/*000000009c3c*/ s_nop           0x0
/*000000009c40*/ s_nop           0x0
/*000000009c44*/ s_nop           0x0
/*000000009c48*/ s_nop           0x0
/*000000009c4c*/ s_nop           0x0
/*000000009c50*/ s_nop           0x0
/*000000009c54*/ s_nop           0x0
/*000000009c58*/ s_nop           0x0
/*000000009c5c*/ s_nop           0x0
/*000000009c60*/ s_nop           0x0
/*000000009c64*/ s_nop           0x0
/*000000009c68*/ s_nop           0x0
/*000000009c6c*/ s_nop           0x0
/*000000009c70*/ s_nop           0x0
/*000000009c74*/ s_nop           0x0
/*000000009c78*/ s_nop           0x0
/*000000009c7c*/ s_nop           0x0
/*000000009c80*/ s_nop           0x0
/*000000009c84*/ s_nop           0x0
/*000000009c88*/ s_nop           0x0
/*000000009c8c*/ s_nop           0x0
/*000000009c90*/ s_nop           0x0
/*000000009c94*/ s_nop           0x0
/*000000009c98*/ s_nop           0x0
/*000000009c9c*/ s_nop           0x0
/*000000009ca0*/ s_nop           0x0
/*000000009ca4*/ s_nop           0x0
/*000000009ca8*/ s_nop           0x0
/*000000009cac*/ s_nop           0x0
/*000000009cb0*/ s_nop           0x0
/*000000009cb4*/ s_nop           0x0
/*000000009cb8*/ s_nop           0x0
/*000000009cbc*/ s_nop           0x0
/*000000009cc0*/ s_nop           0x0
/*000000009cc4*/ s_nop           0x0
/*000000009cc8*/ s_nop           0x0
/*000000009ccc*/ s_nop           0x0
/*000000009cd0*/ s_nop           0x0
/*000000009cd4*/ s_nop           0x0
/*000000009cd8*/ s_nop           0x0
/*000000009cdc*/ s_nop           0x0
/*000000009ce0*/ s_nop           0x0
/*000000009ce4*/ s_nop           0x0
/*000000009ce8*/ s_nop           0x0
/*000000009cec*/ s_nop           0x0
/*000000009cf0*/ s_nop           0x0
/*000000009cf4*/ s_nop           0x0
/*000000009cf8*/ s_nop           0x0
/*000000009cfc*/ s_nop           0x0
mul_get_work_dim_get_num_groups:
.skip 256
/*000000009e00*/ v_mov_b32       v3, s4
/*000000009e04*/ v_mov_b32       v4, s5
/*000000009e08*/ s_load_dword    s11, s[4:5], 0xc
/*000000009e10*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000009e18*/ s_waitcnt       lgkmcnt(0)
/*000000009e1c*/ s_load_dword    s1, s[4:5], 0x10
/*000000009e24*/ s_clause        0x1
/*000000009e28*/ s_load_dword    s3, s[6:7], 0x20
/*000000009e30*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000009e38*/ s_load_dword    s4, s[4:5], 0x14
/*000000009e40*/ s_lshl_b32      s9, s9, 1
/*000000009e44*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000009e4c*/ s_lshl_b32      s8, s8, 1
/*000000009e50*/ s_lshl_b32      s10, s10, 2
/*000000009e54*/ v_mov_b32       v4, 0
/*000000009e58*/ v_mov_b32       v6, v4
/*000000009e5c*/ v_mov_b32       v8, v4
/*000000009e60*/ s_and_b32       s5, s11, -2
/*000000009e64*/ v_add3_u32      v3, s0, s8, v0
/*000000009e6c*/ v_cmp_gt_u32    s[5:6], s11, s5
/*000000009e74*/ s_lshr_b32      s11, s11, 1
/*000000009e78*/ v_add3_u32      v5, s2, s9, v1
/*000000009e80*/ s_waitcnt       lgkmcnt(0)
/*000000009e84*/ v_add3_u32      v7, s3, s10, v2
/*000000009e8c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*000000009e94*/ s_cmpk_lg_u32   s5, 0x0
/*000000009e98*/ s_addc_u32      s0, s11, 0
/*000000009e9c*/ s_and_b32       s5, s1, -2
/*000000009ea0*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*000000009ea8*/ v_cmp_gt_u32    s[5:6], s1, s5
/*000000009eb0*/ s_lshr_b32      s1, s1, 1
/*000000009eb4*/ v_add_co_u32    v0, vcc, s6, v0
/*000000009ebc*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*000000009ec4*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*000000009ec8*/ s_cmpk_lg_u32   s5, 0x0
/*000000009ecc*/ v_add_co_u32    v2, vcc, s6, v2
/*000000009ed4*/ s_addc_u32      s1, s1, 0
/*000000009ed8*/ s_and_b32       s2, s4, -4
/*000000009edc*/ s_lshr_b32      s3, s4, 2
/*000000009ee0*/ v_cmp_gt_u32    s[2:3], s4, s2
/*000000009ee8*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*000000009eec*/ v_add_co_u32    v4, vcc, s6, v4
/*000000009ef4*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*000000009ef8*/ s_cmpk_lg_u32   s2, 0x0
/*000000009efc*/ s_addc_u32      s2, s3, 0
/*000000009f00*/ s_waitcnt       vmcnt(0)
/*000000009f04*/ v_mul_lo_u32    v6, s0, v9
/*000000009f0c*/ v_mul_lo_u32    v13, s1, v9
/*000000009f14*/ v_mul_lo_u32    v11, s2, v9
/*000000009f1c*/ global_store_dword v[0:1], v6, off
/*000000009f24*/ global_store_dword v[2:3], v13, off
/*000000009f2c*/ global_store_dword v[4:5], v11, off
/*000000009f34*/ s_endpgm
/*000000009f38*/ s_nop           0x0
/*000000009f3c*/ s_nop           0x0
/*000000009f40*/ s_nop           0x0
/*000000009f44*/ s_nop           0x0
/*000000009f48*/ s_nop           0x0
/*000000009f4c*/ s_nop           0x0
/*000000009f50*/ s_nop           0x0
/*000000009f54*/ s_nop           0x0
/*000000009f58*/ s_nop           0x0
/*000000009f5c*/ s_nop           0x0
/*000000009f60*/ s_nop           0x0
/*000000009f64*/ s_nop           0x0
/*000000009f68*/ s_nop           0x0
/*000000009f6c*/ s_nop           0x0
/*000000009f70*/ s_nop           0x0
/*000000009f74*/ s_nop           0x0
/*000000009f78*/ s_nop           0x0
/*000000009f7c*/ s_nop           0x0
/*000000009f80*/ s_nop           0x0
/*000000009f84*/ s_nop           0x0
/*000000009f88*/ s_nop           0x0
/*000000009f8c*/ s_nop           0x0
/*000000009f90*/ s_nop           0x0
/*000000009f94*/ s_nop           0x0
/*000000009f98*/ s_nop           0x0
/*000000009f9c*/ s_nop           0x0
/*000000009fa0*/ s_nop           0x0
/*000000009fa4*/ s_nop           0x0
/*000000009fa8*/ s_nop           0x0
/*000000009fac*/ s_nop           0x0
/*000000009fb0*/ s_nop           0x0
/*000000009fb4*/ s_nop           0x0
/*000000009fb8*/ s_nop           0x0
/*000000009fbc*/ s_nop           0x0
/*000000009fc0*/ s_nop           0x0
/*000000009fc4*/ s_nop           0x0
/*000000009fc8*/ s_nop           0x0
/*000000009fcc*/ s_nop           0x0
/*000000009fd0*/ s_nop           0x0
/*000000009fd4*/ s_nop           0x0
/*000000009fd8*/ s_nop           0x0
/*000000009fdc*/ s_nop           0x0
/*000000009fe0*/ s_nop           0x0
/*000000009fe4*/ s_nop           0x0
/*000000009fe8*/ s_nop           0x0
/*000000009fec*/ s_nop           0x0
/*000000009ff0*/ s_nop           0x0
/*000000009ff4*/ s_nop           0x0
/*000000009ff8*/ s_nop           0x0
/*000000009ffc*/ s_nop           0x0
mul_x_get_work_dim:
.skip 256
/*00000000a100*/ v_mov_b32       v3, s4
/*00000000a104*/ v_mov_b32       v4, s5
/*00000000a108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a110*/ s_waitcnt       lgkmcnt(0)
/*00000000a114*/ s_clause        0x2
/*00000000a118*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a120*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000000a128*/ s_load_dword    s3, s[6:7], 0x8
/*00000000a130*/ s_lshl_b32      s6, s8, 4
/*00000000a134*/ s_lshl_b32      s7, s9, 1
/*00000000a138*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a140*/ v_mov_b32       v4, 0
/*00000000a144*/ s_lshl_b32      s8, s10, 1
/*00000000a148*/ v_mov_b32       v6, v4
/*00000000a14c*/ v_mov_b32       v8, v4
/*00000000a150*/ s_waitcnt       lgkmcnt(0)
/*00000000a154*/ v_add3_u32      v7, s1, s8, v2
/*00000000a15c*/ v_add3_u32      v3, s0, s6, v0
/*00000000a164*/ v_add3_u32      v5, s2, s7, v1
/*00000000a16c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a174*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a17c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a184*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a18c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a190*/ v_add_co_u32    v7, vcc, s4, v2
/*00000000a198*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*00000000a19c*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a1a4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a1a8*/ s_waitcnt       vmcnt(0)
/*00000000a1ac*/ v_mul_lo_u32    v6, v9, s3
/*00000000a1b4*/ global_store_dword v[0:1], v6, off
/*00000000a1bc*/ global_store_dword v[7:8], v6, off
/*00000000a1c4*/ global_store_dword v[4:5], v6, off
/*00000000a1cc*/ s_endpgm
/*00000000a1d0*/ s_nop           0x0
/*00000000a1d4*/ s_nop           0x0
/*00000000a1d8*/ s_nop           0x0
/*00000000a1dc*/ s_nop           0x0
/*00000000a1e0*/ s_nop           0x0
/*00000000a1e4*/ s_nop           0x0
/*00000000a1e8*/ s_nop           0x0
/*00000000a1ec*/ s_nop           0x0
/*00000000a1f0*/ s_nop           0x0
/*00000000a1f4*/ s_nop           0x0
/*00000000a1f8*/ s_nop           0x0
/*00000000a1fc*/ s_nop           0x0
mul_get_global_offset_get_work_dim:
.skip 256
/*00000000a300*/ v_mov_b32       v3, s4
/*00000000a304*/ v_mov_b32       v4, s5
/*00000000a308*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a310*/ s_waitcnt       lgkmcnt(0)
/*00000000a314*/ s_clause        0x1
/*00000000a318*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a328*/ s_lshl_b32      s3, s8, 1
/*00000000a32c*/ s_lshl_b32      s6, s9, 4
/*00000000a330*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a338*/ v_mov_b32       v4, 0
/*00000000a33c*/ s_lshl_b32      s7, s10, 1
/*00000000a340*/ v_mov_b32       v6, v4
/*00000000a344*/ v_mov_b32       v8, v4
/*00000000a348*/ v_add3_u32      v3, s0, s3, v0
/*00000000a350*/ v_add3_u32      v5, s2, s6, v1
/*00000000a358*/ s_waitcnt       lgkmcnt(0)
/*00000000a35c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a364*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a36c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a374*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a37c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a384*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a388*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000a390*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000a394*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a39c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a3a0*/ s_waitcnt       vmcnt(0)
/*00000000a3a4*/ v_mul_lo_u32    v6, v9, s0
/*00000000a3ac*/ v_mul_lo_u32    v13, v9, s2
/*00000000a3b4*/ v_mul_lo_u32    v11, v9, s1
/*00000000a3bc*/ global_store_dword v[0:1], v6, off
/*00000000a3c4*/ global_store_dword v[2:3], v13, off
/*00000000a3cc*/ global_store_dword v[4:5], v11, off
/*00000000a3d4*/ s_endpgm
/*00000000a3d8*/ s_nop           0x0
/*00000000a3dc*/ s_nop           0x0
/*00000000a3e0*/ s_nop           0x0
/*00000000a3e4*/ s_nop           0x0
/*00000000a3e8*/ s_nop           0x0
/*00000000a3ec*/ s_nop           0x0
/*00000000a3f0*/ s_nop           0x0
/*00000000a3f4*/ s_nop           0x0
/*00000000a3f8*/ s_nop           0x0
/*00000000a3fc*/ s_nop           0x0
mul_get_local_id_get_work_dim:
.skip 256
/*00000000a500*/ v_mov_b32       v3, s4
/*00000000a504*/ v_mov_b32       v4, s5
/*00000000a508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a510*/ s_waitcnt       lgkmcnt(0)
/*00000000a514*/ s_clause        0x1
/*00000000a518*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a528*/ s_lshl_b32      s3, s8, 3
/*00000000a52c*/ s_lshl_b32      s6, s9, 2
/*00000000a530*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*00000000a538*/ v_mov_b32       v4, 0
/*00000000a53c*/ s_lshl_b32      s7, s10, 1
/*00000000a540*/ v_mov_b32       v6, v4
/*00000000a544*/ v_mov_b32       v8, v4
/*00000000a548*/ v_add3_u32      v3, s0, s3, v0
/*00000000a550*/ v_add3_u32      v5, s2, s6, v1
/*00000000a558*/ s_waitcnt       lgkmcnt(0)
/*00000000a55c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a564*/ v_lshlrev_b64   v[3:4], 2, v[3:4]
/*00000000a56c*/ v_lshlrev_b64   v[5:6], 2, v[5:6]
/*00000000a574*/ v_lshlrev_b64   v[7:8], 2, v[7:8]
/*00000000a57c*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000a584*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000a588*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000a590*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000a594*/ v_add_co_u32    v7, vcc, s4, v7
/*00000000a59c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*00000000a5a0*/ s_waitcnt       vmcnt(0)
/*00000000a5a4*/ v_mul_u32_u24   v10, v0, v15
/*00000000a5a8*/ v_mul_u32_u24   v11, v1, v15
/*00000000a5ac*/ v_mul_u32_u24   v2, v2, v15
/*00000000a5b0*/ global_store_dword v[3:4], v10, off
/*00000000a5b8*/ global_store_dword v[5:6], v11, off
/*00000000a5c0*/ global_store_dword v[7:8], v2, off
/*00000000a5c8*/ s_endpgm
/*00000000a5cc*/ s_nop           0x0
/*00000000a5d0*/ s_nop           0x0
/*00000000a5d4*/ s_nop           0x0
/*00000000a5d8*/ s_nop           0x0
/*00000000a5dc*/ s_nop           0x0
/*00000000a5e0*/ s_nop           0x0
/*00000000a5e4*/ s_nop           0x0
/*00000000a5e8*/ s_nop           0x0
/*00000000a5ec*/ s_nop           0x0
/*00000000a5f0*/ s_nop           0x0
/*00000000a5f4*/ s_nop           0x0
/*00000000a5f8*/ s_nop           0x0
/*00000000a5fc*/ s_nop           0x0
mul_get_group_id_get_work_dim:
.skip 256
/*00000000a700*/ v_mov_b32       v3, s4
/*00000000a704*/ v_mov_b32       v4, s5
/*00000000a708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a710*/ s_waitcnt       lgkmcnt(0)
/*00000000a714*/ s_clause        0x1
/*00000000a718*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a728*/ s_lshl_b32      s3, s8, 1
/*00000000a72c*/ s_lshl_b32      s6, s9, 4
/*00000000a730*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a738*/ v_mov_b32       v4, 0
/*00000000a73c*/ s_lshl_b32      s7, s10, 1
/*00000000a740*/ v_mov_b32       v6, v4
/*00000000a744*/ v_mov_b32       v8, v4
/*00000000a748*/ v_add3_u32      v3, s0, s3, v0
/*00000000a750*/ v_add3_u32      v5, s2, s6, v1
/*00000000a758*/ s_waitcnt       lgkmcnt(0)
/*00000000a75c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a764*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a76c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a774*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a77c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a784*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a788*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000a790*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000a794*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a79c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a7a0*/ s_waitcnt       vmcnt(0)
/*00000000a7a4*/ v_mul_lo_u32    v6, s8, v9
/*00000000a7ac*/ v_mul_lo_u32    v13, s9, v9
/*00000000a7b4*/ v_mul_lo_u32    v11, s10, v9
/*00000000a7bc*/ global_store_dword v[0:1], v6, off
/*00000000a7c4*/ global_store_dword v[2:3], v13, off
/*00000000a7cc*/ global_store_dword v[4:5], v11, off
/*00000000a7d4*/ s_endpgm
/*00000000a7d8*/ s_nop           0x0
/*00000000a7dc*/ s_nop           0x0
/*00000000a7e0*/ s_nop           0x0
/*00000000a7e4*/ s_nop           0x0
/*00000000a7e8*/ s_nop           0x0
/*00000000a7ec*/ s_nop           0x0
/*00000000a7f0*/ s_nop           0x0
/*00000000a7f4*/ s_nop           0x0
/*00000000a7f8*/ s_nop           0x0
/*00000000a7fc*/ s_nop           0x0
mul_get_local_size_get_work_dim:
.skip 256
/*00000000a900*/ v_mov_b32       v3, s4
/*00000000a904*/ v_mov_b32       v4, s5
/*00000000a908*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000a910*/ s_waitcnt       lgkmcnt(0)
/*00000000a914*/ s_clause        0x1
/*00000000a918*/ s_load_dword    s1, s[6:7], 0x20
/*00000000a920*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000a928*/ s_lshl_b32      s3, s8, 1
/*00000000a92c*/ s_lshl_b32      s6, s9, 1
/*00000000a930*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000a938*/ v_mov_b32       v4, 0
/*00000000a93c*/ s_lshl_b32      s7, s10, 2
/*00000000a940*/ v_mov_b32       v6, v4
/*00000000a944*/ v_mov_b32       v8, v4
/*00000000a948*/ v_add3_u32      v3, s0, s3, v0
/*00000000a950*/ v_add3_u32      v5, s2, s6, v1
/*00000000a958*/ s_waitcnt       lgkmcnt(0)
/*00000000a95c*/ v_add3_u32      v7, s1, s7, v2
/*00000000a964*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000a96c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000a974*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000a97c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000a984*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000a988*/ v_add_co_u32    v11, vcc, s4, v2
/*00000000a990*/ v_add_co_ci_u32 v12, vcc, s5, v3, vcc
/*00000000a994*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000a99c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000a9a0*/ s_waitcnt       vmcnt(0)
/*00000000a9a4*/ v_lshlrev_b32   v6, 1, v9
/*00000000a9a8*/ v_lshlrev_b32   v7, 2, v9
/*00000000a9ac*/ global_store_dword v[0:1], v6, off
/*00000000a9b4*/ global_store_dword v[11:12], v6, off
/*00000000a9bc*/ global_store_dword v[4:5], v7, off
/*00000000a9c4*/ s_endpgm
/*00000000a9c8*/ s_nop           0x0
/*00000000a9cc*/ s_nop           0x0
/*00000000a9d0*/ s_nop           0x0
/*00000000a9d4*/ s_nop           0x0
/*00000000a9d8*/ s_nop           0x0
/*00000000a9dc*/ s_nop           0x0
/*00000000a9e0*/ s_nop           0x0
/*00000000a9e4*/ s_nop           0x0
/*00000000a9e8*/ s_nop           0x0
/*00000000a9ec*/ s_nop           0x0
/*00000000a9f0*/ s_nop           0x0
/*00000000a9f4*/ s_nop           0x0
/*00000000a9f8*/ s_nop           0x0
/*00000000a9fc*/ s_nop           0x0
mul_get_global_id_get_work_dim:
.skip 256
/*00000000ab00*/ v_mov_b32       v3, s4
/*00000000ab04*/ v_mov_b32       v4, s5
/*00000000ab08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000ab10*/ s_waitcnt       lgkmcnt(0)
/*00000000ab14*/ s_clause        0x1
/*00000000ab18*/ s_load_dword    s1, s[6:7], 0x20
/*00000000ab20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000ab28*/ v_lshl_or_b32   v5, s9, 1, v1
/*00000000ab30*/ v_lshl_or_b32   v2, s10, 2, v2
/*00000000ab38*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000ab40*/ v_mov_b32       v4, 0
/*00000000ab44*/ v_lshl_or_b32   v3, s8, 1, v0
/*00000000ab4c*/ v_mov_b32       v1, v4
/*00000000ab50*/ v_add_nc_u32    v0, s2, v5
/*00000000ab54*/ v_lshlrev_b64   v[5:6], 2, v[3:4]
/*00000000ab5c*/ v_add_nc_u32    v10, s0, v3
/*00000000ab60*/ s_waitcnt       lgkmcnt(0)
/*00000000ab64*/ v_add_nc_u32    v3, s1, v2
/*00000000ab68*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000ab70*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000ab78*/ v_lshlrev_b64   v[7:8], 2, v[3:4]
/*00000000ab80*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000ab84*/ v_add_co_u32    v1, vcc, s4, v1
/*00000000ab8c*/ v_add_co_ci_u32 v2, vcc, s5, v2, vcc
/*00000000ab90*/ s_waitcnt       vmcnt(0)
/*00000000ab94*/ v_mul_lo_u32    v11, v10, v9
/*00000000ab9c*/ v_mul_lo_u32    v0, v9, v0
/*00000000aba4*/ v_mul_lo_u32    v9, v9, v3
/*00000000abac*/ v_add_co_u32    v3, vcc, s4, v7
/*00000000abb4*/ v_add_co_ci_u32 v4, vcc, s5, v8, vcc
/*00000000abb8*/ global_store_dword v[5:6], v11, off
/*00000000abc0*/ global_store_dword v[1:2], v0, off
/*00000000abc8*/ global_store_dword v[3:4], v9, off
/*00000000abd0*/ s_endpgm
/*00000000abd4*/ s_nop           0x0
/*00000000abd8*/ s_nop           0x0
/*00000000abdc*/ s_nop           0x0
/*00000000abe0*/ s_nop           0x0
/*00000000abe4*/ s_nop           0x0
/*00000000abe8*/ s_nop           0x0
/*00000000abec*/ s_nop           0x0
/*00000000abf0*/ s_nop           0x0
/*00000000abf4*/ s_nop           0x0
/*00000000abf8*/ s_nop           0x0
/*00000000abfc*/ s_nop           0x0
mul_get_global_size_get_work_dim:
.skip 256
/*00000000ad00*/ v_mov_b32       v3, s4
/*00000000ad04*/ v_mov_b32       v4, s5
/*00000000ad08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000ad10*/ s_waitcnt       lgkmcnt(0)
/*00000000ad14*/ s_clause        0x1
/*00000000ad18*/ s_load_dword    s1, s[6:7], 0x20
/*00000000ad20*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*00000000ad28*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*00000000ad30*/ s_lshl_b32      s3, s8, 4
/*00000000ad34*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000ad3c*/ v_mov_b32       v4, 0
/*00000000ad40*/ s_lshl_b32      s8, s9, 1
/*00000000ad44*/ s_waitcnt       lgkmcnt(0)
/*00000000ad48*/ s_lshl_b32      s7, s10, 1
/*00000000ad4c*/ v_mov_b32       v6, v4
/*00000000ad50*/ v_mov_b32       v8, v4
/*00000000ad54*/ v_add3_u32      v3, s0, s3, v0
/*00000000ad5c*/ v_add3_u32      v5, s2, s8, v1
/*00000000ad64*/ v_add3_u32      v7, s1, s7, v2
/*00000000ad6c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000ad74*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000ad7c*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000ad84*/ v_add_co_u32    v0, vcc, s12, v0
/*00000000ad8c*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*00000000ad90*/ v_add_co_u32    v2, vcc, s12, v2
/*00000000ad98*/ v_add_co_ci_u32 v3, vcc, s13, v3, vcc
/*00000000ad9c*/ v_add_co_u32    v4, vcc, s12, v4
/*00000000ada4*/ v_add_co_ci_u32 v5, vcc, s13, v5, vcc
/*00000000ada8*/ s_waitcnt       vmcnt(0)
/*00000000adac*/ v_mul_lo_u32    v6, s4, v9
/*00000000adb4*/ v_mul_lo_u32    v13, s5, v9
/*00000000adbc*/ v_mul_lo_u32    v11, s6, v9
/*00000000adc4*/ global_store_dword v[0:1], v6, off
/*00000000adcc*/ global_store_dword v[2:3], v13, off
/*00000000add4*/ global_store_dword v[4:5], v11, off
/*00000000addc*/ s_endpgm
/*00000000ade0*/ s_nop           0x0
/*00000000ade4*/ s_nop           0x0
/*00000000ade8*/ s_nop           0x0
/*00000000adec*/ s_nop           0x0
/*00000000adf0*/ s_nop           0x0
/*00000000adf4*/ s_nop           0x0
/*00000000adf8*/ s_nop           0x0
/*00000000adfc*/ s_nop           0x0
mul_get_num_groups_get_work_dim:
.skip 256
/*00000000af00*/ v_mov_b32       v3, s4
/*00000000af04*/ v_mov_b32       v4, s5
/*00000000af08*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000000af10*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000000af18*/ s_waitcnt       lgkmcnt(0)
/*00000000af1c*/ s_clause        0x1
/*00000000af20*/ s_load_dword    s3, s[6:7], 0x20
/*00000000af28*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000af30*/ s_lshl_b32      s7, s8, 1
/*00000000af34*/ s_lshl_b32      s8, s9, 1
/*00000000af38*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000af40*/ s_lshl_b32      s9, s10, 2
/*00000000af44*/ v_mov_b32       v4, 0
/*00000000af48*/ v_mov_b32       v6, v4
/*00000000af4c*/ v_mov_b32       v8, v4
/*00000000af50*/ s_and_b32       s6, s0, -2
/*00000000af54*/ v_add3_u32      v3, s12, s7, v0
/*00000000af5c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*00000000af64*/ s_lshr_b32      s0, s0, 1
/*00000000af68*/ v_add3_u32      v5, s14, s8, v1
/*00000000af70*/ s_waitcnt       lgkmcnt(0)
/*00000000af74*/ v_add3_u32      v7, s3, s9, v2
/*00000000af7c*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000af84*/ s_cmpk_lg_u32   s6, 0x0
/*00000000af88*/ s_addc_u32      s0, s0, 0
/*00000000af8c*/ s_and_b32       s6, s1, -2
/*00000000af90*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000af98*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000000afa0*/ s_lshr_b32      s1, s1, 1
/*00000000afa4*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000afac*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000afb4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000afb8*/ s_cmpk_lg_u32   s6, 0x0
/*00000000afbc*/ v_add_co_u32    v2, vcc, s4, v2
/*00000000afc4*/ s_addc_u32      s1, s1, 0
/*00000000afc8*/ s_and_b32       s3, s2, -4
/*00000000afcc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000000afd0*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000000afd8*/ s_lshr_b32      s2, s2, 2
/*00000000afdc*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000afe4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000afe8*/ s_cmpk_lg_u32   s3, 0x0
/*00000000afec*/ s_addc_u32      s2, s2, 0
/*00000000aff0*/ s_waitcnt       vmcnt(0)
/*00000000aff4*/ v_mul_lo_u32    v6, s0, v9
/*00000000affc*/ v_mul_lo_u32    v13, s1, v9
/*00000000b004*/ v_mul_lo_u32    v11, s2, v9
/*00000000b00c*/ global_store_dword v[0:1], v6, off
/*00000000b014*/ global_store_dword v[2:3], v13, off
/*00000000b01c*/ global_store_dword v[4:5], v11, off
/*00000000b024*/ s_endpgm
/*00000000b028*/ s_nop           0x0
/*00000000b02c*/ s_nop           0x0
/*00000000b030*/ s_nop           0x0
/*00000000b034*/ s_nop           0x0
/*00000000b038*/ s_nop           0x0
/*00000000b03c*/ s_nop           0x0
/*00000000b040*/ s_nop           0x0
/*00000000b044*/ s_nop           0x0
/*00000000b048*/ s_nop           0x0
/*00000000b04c*/ s_nop           0x0
/*00000000b050*/ s_nop           0x0
/*00000000b054*/ s_nop           0x0
/*00000000b058*/ s_nop           0x0
/*00000000b05c*/ s_nop           0x0
/*00000000b060*/ s_nop           0x0
/*00000000b064*/ s_nop           0x0
/*00000000b068*/ s_nop           0x0
/*00000000b06c*/ s_nop           0x0
/*00000000b070*/ s_nop           0x0
/*00000000b074*/ s_nop           0x0
/*00000000b078*/ s_nop           0x0
/*00000000b07c*/ s_nop           0x0
/*00000000b080*/ s_nop           0x0
/*00000000b084*/ s_nop           0x0
/*00000000b088*/ s_nop           0x0
/*00000000b08c*/ s_nop           0x0
/*00000000b090*/ s_nop           0x0
/*00000000b094*/ s_nop           0x0
/*00000000b098*/ s_nop           0x0
/*00000000b09c*/ s_nop           0x0
/*00000000b0a0*/ s_nop           0x0
/*00000000b0a4*/ s_nop           0x0
/*00000000b0a8*/ s_nop           0x0
/*00000000b0ac*/ s_nop           0x0
/*00000000b0b0*/ s_nop           0x0
/*00000000b0b4*/ s_nop           0x0
/*00000000b0b8*/ s_nop           0x0
/*00000000b0bc*/ s_nop           0x0
/*00000000b0c0*/ s_nop           0x0
/*00000000b0c4*/ s_nop           0x0
/*00000000b0c8*/ s_nop           0x0
/*00000000b0cc*/ s_nop           0x0
/*00000000b0d0*/ s_nop           0x0
/*00000000b0d4*/ s_nop           0x0
/*00000000b0d8*/ s_nop           0x0
/*00000000b0dc*/ s_nop           0x0
/*00000000b0e0*/ s_nop           0x0
/*00000000b0e4*/ s_nop           0x0
/*00000000b0e8*/ s_nop           0x0
/*00000000b0ec*/ s_nop           0x0
/*00000000b0f0*/ s_nop           0x0
/*00000000b0f4*/ s_nop           0x0
/*00000000b0f8*/ s_nop           0x0
/*00000000b0fc*/ s_nop           0x0
mul_get_work_dim_get_work_dim:
.skip 256
/*00000000b200*/ v_mov_b32       v3, s4
/*00000000b204*/ v_mov_b32       v4, s5
/*00000000b208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000b210*/ s_waitcnt       lgkmcnt(0)
/*00000000b214*/ s_clause        0x1
/*00000000b218*/ s_load_dword    s1, s[6:7], 0x20
/*00000000b220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000b228*/ s_lshl_b32      s3, s8, 1
/*00000000b22c*/ s_lshl_b32      s6, s9, 1
/*00000000b230*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000b238*/ v_mov_b32       v4, 0
/*00000000b23c*/ s_lshl_b32      s7, s10, 2
/*00000000b240*/ v_mov_b32       v6, v4
/*00000000b244*/ v_mov_b32       v8, v4
/*00000000b248*/ v_add3_u32      v3, s0, s3, v0
/*00000000b250*/ v_add3_u32      v5, s2, s6, v1
/*00000000b258*/ s_waitcnt       lgkmcnt(0)
/*00000000b25c*/ v_add3_u32      v7, s1, s7, v2
/*00000000b264*/ v_lshlrev_b64   v[0:1], 2, v[3:4]
/*00000000b26c*/ v_lshlrev_b64   v[2:3], 2, v[5:6]
/*00000000b274*/ v_lshlrev_b64   v[4:5], 2, v[7:8]
/*00000000b27c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000b284*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000b288*/ v_add_co_u32    v7, vcc, s4, v2
/*00000000b290*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*00000000b294*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000b29c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000b2a0*/ s_waitcnt       vmcnt(0)
/*00000000b2a4*/ v_mul_u32_u24   v6, v9, v9
/*00000000b2a8*/ global_store_dword v[0:1], v6, off
/*00000000b2b0*/ global_store_dword v[7:8], v6, off
/*00000000b2b8*/ global_store_dword v[4:5], v6, off
/*00000000b2c0*/ s_endpgm
/*00000000b2c4*/ s_nop           0x0
/*00000000b2c8*/ s_nop           0x0
/*00000000b2cc*/ s_nop           0x0
/*00000000b2d0*/ s_nop           0x0
/*00000000b2d4*/ s_nop           0x0
/*00000000b2d8*/ s_nop           0x0
/*00000000b2dc*/ s_nop           0x0
/*00000000b2e0*/ s_nop           0x0
/*00000000b2e4*/ s_nop           0x0
/*00000000b2e8*/ s_nop           0x0
/*00000000b2ec*/ s_nop           0x0
/*00000000b2f0*/ s_nop           0x0
/*00000000b2f4*/ s_nop           0x0
/*00000000b2f8*/ s_nop           0x0
/*00000000b2fc*/ s_nop           0x0
mul_x_64:
.skip 256
/*00000000b400*/ s_clause        0x2
/*00000000b404*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b40c*/ s_load_dword    s3, s[4:5], 0x0
/*00000000b414*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b41c*/ s_lshl_b32      s4, s6, 6
/*00000000b420*/ v_mov_b32       v1, 0
/*00000000b424*/ s_waitcnt       lgkmcnt(0)
/*00000000b428*/ v_add3_u32      v0, s2, s4, v0
/*00000000b430*/ s_mul_i32       s2, s3, s3
/*00000000b434*/ v_mov_b32       v2, s2
/*00000000b438*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000b440*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000b448*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000b44c*/ global_store_dword v[0:1], v2, off
/*00000000b454*/ s_endpgm
/*00000000b458*/ s_nop           0x0
/*00000000b45c*/ s_nop           0x0
/*00000000b460*/ s_nop           0x0
/*00000000b464*/ s_nop           0x0
/*00000000b468*/ s_nop           0x0
/*00000000b46c*/ s_nop           0x0
/*00000000b470*/ s_nop           0x0
/*00000000b474*/ s_nop           0x0
/*00000000b478*/ s_nop           0x0
/*00000000b47c*/ s_nop           0x0
/*00000000b480*/ s_nop           0x0
/*00000000b484*/ s_nop           0x0
/*00000000b488*/ s_nop           0x0
/*00000000b48c*/ s_nop           0x0
/*00000000b490*/ s_nop           0x0
/*00000000b494*/ s_nop           0x0
/*00000000b498*/ s_nop           0x0
/*00000000b49c*/ s_nop           0x0
/*00000000b4a0*/ s_nop           0x0
/*00000000b4a4*/ s_nop           0x0
/*00000000b4a8*/ s_nop           0x0
/*00000000b4ac*/ s_nop           0x0
/*00000000b4b0*/ s_nop           0x0
/*00000000b4b4*/ s_nop           0x0
/*00000000b4b8*/ s_nop           0x0
/*00000000b4bc*/ s_nop           0x0
/*00000000b4c0*/ s_nop           0x0
/*00000000b4c4*/ s_nop           0x0
/*00000000b4c8*/ s_nop           0x0
/*00000000b4cc*/ s_nop           0x0
/*00000000b4d0*/ s_nop           0x0
/*00000000b4d4*/ s_nop           0x0
/*00000000b4d8*/ s_nop           0x0
/*00000000b4dc*/ s_nop           0x0
/*00000000b4e0*/ s_nop           0x0
/*00000000b4e4*/ s_nop           0x0
/*00000000b4e8*/ s_nop           0x0
/*00000000b4ec*/ s_nop           0x0
/*00000000b4f0*/ s_nop           0x0
/*00000000b4f4*/ s_nop           0x0
/*00000000b4f8*/ s_nop           0x0
/*00000000b4fc*/ s_nop           0x0
mul_get_global_offset_64:
.skip 256
/*00000000b600*/ s_clause        0x1
/*00000000b604*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b60c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b614*/ s_lshl_b32      s3, s6, 6
/*00000000b618*/ v_mov_b32       v1, 0
/*00000000b61c*/ s_waitcnt       lgkmcnt(0)
/*00000000b620*/ v_add3_u32      v0, s2, s3, v0
/*00000000b628*/ s_mul_i32       s2, s2, s2
/*00000000b62c*/ v_mov_b32       v2, s2
/*00000000b630*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000b638*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000b640*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000b644*/ global_store_dword v[0:1], v2, off
/*00000000b64c*/ s_endpgm
/*00000000b650*/ s_nop           0x0
/*00000000b654*/ s_nop           0x0
/*00000000b658*/ s_nop           0x0
/*00000000b65c*/ s_nop           0x0
/*00000000b660*/ s_nop           0x0
/*00000000b664*/ s_nop           0x0
/*00000000b668*/ s_nop           0x0
/*00000000b66c*/ s_nop           0x0
/*00000000b670*/ s_nop           0x0
/*00000000b674*/ s_nop           0x0
/*00000000b678*/ s_nop           0x0
/*00000000b67c*/ s_nop           0x0
/*00000000b680*/ s_nop           0x0
/*00000000b684*/ s_nop           0x0
/*00000000b688*/ s_nop           0x0
/*00000000b68c*/ s_nop           0x0
/*00000000b690*/ s_nop           0x0
/*00000000b694*/ s_nop           0x0
/*00000000b698*/ s_nop           0x0
/*00000000b69c*/ s_nop           0x0
/*00000000b6a0*/ s_nop           0x0
/*00000000b6a4*/ s_nop           0x0
/*00000000b6a8*/ s_nop           0x0
/*00000000b6ac*/ s_nop           0x0
/*00000000b6b0*/ s_nop           0x0
/*00000000b6b4*/ s_nop           0x0
/*00000000b6b8*/ s_nop           0x0
/*00000000b6bc*/ s_nop           0x0
/*00000000b6c0*/ s_nop           0x0
/*00000000b6c4*/ s_nop           0x0
/*00000000b6c8*/ s_nop           0x0
/*00000000b6cc*/ s_nop           0x0
/*00000000b6d0*/ s_nop           0x0
/*00000000b6d4*/ s_nop           0x0
/*00000000b6d8*/ s_nop           0x0
/*00000000b6dc*/ s_nop           0x0
/*00000000b6e0*/ s_nop           0x0
/*00000000b6e4*/ s_nop           0x0
/*00000000b6e8*/ s_nop           0x0
/*00000000b6ec*/ s_nop           0x0
/*00000000b6f0*/ s_nop           0x0
/*00000000b6f4*/ s_nop           0x0
/*00000000b6f8*/ s_nop           0x0
/*00000000b6fc*/ s_nop           0x0
mul_get_local_id_64:
.skip 256
/*00000000b800*/ s_clause        0x1
/*00000000b804*/ s_load_dword    s2, s[4:5], 0x10
/*00000000b80c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000b814*/ s_lshl_b32      s3, s6, 6
/*00000000b818*/ v_mov_b32       v2, 0
/*00000000b81c*/ v_mul_u32_u24   v3, v0, v0
/*00000000b820*/ s_waitcnt       lgkmcnt(0)
/*00000000b824*/ v_add3_u32      v1, s2, s3, v0
/*00000000b82c*/ v_lshlrev_b64   v[1:2], 2, v[1:2]
/*00000000b834*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000b83c*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000b840*/ global_store_dword v[0:1], v3, off
/*00000000b848*/ s_endpgm
/*00000000b84c*/ s_nop           0x0
/*00000000b850*/ s_nop           0x0
/*00000000b854*/ s_nop           0x0
/*00000000b858*/ s_nop           0x0
/*00000000b85c*/ s_nop           0x0
/*00000000b860*/ s_nop           0x0
/*00000000b864*/ s_nop           0x0
/*00000000b868*/ s_nop           0x0
/*00000000b86c*/ s_nop           0x0
/*00000000b870*/ s_nop           0x0
/*00000000b874*/ s_nop           0x0
/*00000000b878*/ s_nop           0x0
/*00000000b87c*/ s_nop           0x0
/*00000000b880*/ s_nop           0x0
/*00000000b884*/ s_nop           0x0
/*00000000b888*/ s_nop           0x0
/*00000000b88c*/ s_nop           0x0
/*00000000b890*/ s_nop           0x0
/*00000000b894*/ s_nop           0x0
/*00000000b898*/ s_nop           0x0
/*00000000b89c*/ s_nop           0x0
/*00000000b8a0*/ s_nop           0x0
/*00000000b8a4*/ s_nop           0x0
/*00000000b8a8*/ s_nop           0x0
/*00000000b8ac*/ s_nop           0x0
/*00000000b8b0*/ s_nop           0x0
/*00000000b8b4*/ s_nop           0x0
/*00000000b8b8*/ s_nop           0x0
/*00000000b8bc*/ s_nop           0x0
/*00000000b8c0*/ s_nop           0x0
/*00000000b8c4*/ s_nop           0x0
/*00000000b8c8*/ s_nop           0x0
/*00000000b8cc*/ s_nop           0x0
/*00000000b8d0*/ s_nop           0x0
/*00000000b8d4*/ s_nop           0x0
/*00000000b8d8*/ s_nop           0x0
/*00000000b8dc*/ s_nop           0x0
/*00000000b8e0*/ s_nop           0x0
/*00000000b8e4*/ s_nop           0x0
/*00000000b8e8*/ s_nop           0x0
/*00000000b8ec*/ s_nop           0x0
/*00000000b8f0*/ s_nop           0x0
/*00000000b8f4*/ s_nop           0x0
/*00000000b8f8*/ s_nop           0x0
/*00000000b8fc*/ s_nop           0x0
mul_get_group_id_64:
.skip 256
/*00000000ba00*/ s_clause        0x1
/*00000000ba04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000ba0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000ba14*/ s_lshl_b32      s3, s6, 6
/*00000000ba18*/ v_mov_b32       v1, 0
/*00000000ba1c*/ s_waitcnt       lgkmcnt(0)
/*00000000ba20*/ v_add3_u32      v0, s2, s3, v0
/*00000000ba28*/ s_mul_i32       s2, s6, s6
/*00000000ba2c*/ v_mov_b32       v2, s2
/*00000000ba30*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000ba38*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000ba40*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000ba44*/ global_store_dword v[0:1], v2, off
/*00000000ba4c*/ s_endpgm
/*00000000ba50*/ s_nop           0x0
/*00000000ba54*/ s_nop           0x0
/*00000000ba58*/ s_nop           0x0
/*00000000ba5c*/ s_nop           0x0
/*00000000ba60*/ s_nop           0x0
/*00000000ba64*/ s_nop           0x0
/*00000000ba68*/ s_nop           0x0
/*00000000ba6c*/ s_nop           0x0
/*00000000ba70*/ s_nop           0x0
/*00000000ba74*/ s_nop           0x0
/*00000000ba78*/ s_nop           0x0
/*00000000ba7c*/ s_nop           0x0
/*00000000ba80*/ s_nop           0x0
/*00000000ba84*/ s_nop           0x0
/*00000000ba88*/ s_nop           0x0
/*00000000ba8c*/ s_nop           0x0
/*00000000ba90*/ s_nop           0x0
/*00000000ba94*/ s_nop           0x0
/*00000000ba98*/ s_nop           0x0
/*00000000ba9c*/ s_nop           0x0
/*00000000baa0*/ s_nop           0x0
/*00000000baa4*/ s_nop           0x0
/*00000000baa8*/ s_nop           0x0
/*00000000baac*/ s_nop           0x0
/*00000000bab0*/ s_nop           0x0
/*00000000bab4*/ s_nop           0x0
/*00000000bab8*/ s_nop           0x0
/*00000000babc*/ s_nop           0x0
/*00000000bac0*/ s_nop           0x0
/*00000000bac4*/ s_nop           0x0
/*00000000bac8*/ s_nop           0x0
/*00000000bacc*/ s_nop           0x0
/*00000000bad0*/ s_nop           0x0
/*00000000bad4*/ s_nop           0x0
/*00000000bad8*/ s_nop           0x0
/*00000000badc*/ s_nop           0x0
/*00000000bae0*/ s_nop           0x0
/*00000000bae4*/ s_nop           0x0
/*00000000bae8*/ s_nop           0x0
/*00000000baec*/ s_nop           0x0
/*00000000baf0*/ s_nop           0x0
/*00000000baf4*/ s_nop           0x0
/*00000000baf8*/ s_nop           0x0
/*00000000bafc*/ s_nop           0x0
mul_get_local_size_64:
.skip 256
/*00000000bc00*/ s_clause        0x1
/*00000000bc04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000bc0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000bc14*/ s_lshl_b32      s3, s6, 6
/*00000000bc18*/ v_mov_b32       v1, 0
/*00000000bc1c*/ v_mov_b32       v2, 0x1000
/*00000000bc24*/ s_waitcnt       lgkmcnt(0)
/*00000000bc28*/ v_add3_u32      v0, s2, s3, v0
/*00000000bc30*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000bc38*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000bc40*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000bc44*/ global_store_dword v[0:1], v2, off
/*00000000bc4c*/ s_endpgm
/*00000000bc50*/ s_nop           0x0
/*00000000bc54*/ s_nop           0x0
/*00000000bc58*/ s_nop           0x0
/*00000000bc5c*/ s_nop           0x0
/*00000000bc60*/ s_nop           0x0
/*00000000bc64*/ s_nop           0x0
/*00000000bc68*/ s_nop           0x0
/*00000000bc6c*/ s_nop           0x0
/*00000000bc70*/ s_nop           0x0
/*00000000bc74*/ s_nop           0x0
/*00000000bc78*/ s_nop           0x0
/*00000000bc7c*/ s_nop           0x0
/*00000000bc80*/ s_nop           0x0
/*00000000bc84*/ s_nop           0x0
/*00000000bc88*/ s_nop           0x0
/*00000000bc8c*/ s_nop           0x0
/*00000000bc90*/ s_nop           0x0
/*00000000bc94*/ s_nop           0x0
/*00000000bc98*/ s_nop           0x0
/*00000000bc9c*/ s_nop           0x0
/*00000000bca0*/ s_nop           0x0
/*00000000bca4*/ s_nop           0x0
/*00000000bca8*/ s_nop           0x0
/*00000000bcac*/ s_nop           0x0
/*00000000bcb0*/ s_nop           0x0
/*00000000bcb4*/ s_nop           0x0
/*00000000bcb8*/ s_nop           0x0
/*00000000bcbc*/ s_nop           0x0
/*00000000bcc0*/ s_nop           0x0
/*00000000bcc4*/ s_nop           0x0
/*00000000bcc8*/ s_nop           0x0
/*00000000bccc*/ s_nop           0x0
/*00000000bcd0*/ s_nop           0x0
/*00000000bcd4*/ s_nop           0x0
/*00000000bcd8*/ s_nop           0x0
/*00000000bcdc*/ s_nop           0x0
/*00000000bce0*/ s_nop           0x0
/*00000000bce4*/ s_nop           0x0
/*00000000bce8*/ s_nop           0x0
/*00000000bcec*/ s_nop           0x0
/*00000000bcf0*/ s_nop           0x0
/*00000000bcf4*/ s_nop           0x0
/*00000000bcf8*/ s_nop           0x0
/*00000000bcfc*/ s_nop           0x0
mul_get_global_id_64:
.skip 256
/*00000000be00*/ s_clause        0x1
/*00000000be04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000be0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000be14*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000000be1c*/ v_mov_b32       v1, 0
/*00000000be20*/ s_waitcnt       lgkmcnt(0)
/*00000000be24*/ v_add_nc_u32    v0, s2, v0
/*00000000be28*/ v_lshlrev_b64   v[1:2], 2, v[0:1]
/*00000000be30*/ v_mul_lo_u32    v3, v0, v0
/*00000000be38*/ v_add_co_u32    v0, vcc, s0, v1
/*00000000be40*/ v_add_co_ci_u32 v1, vcc, s1, v2, vcc
/*00000000be44*/ global_store_dword v[0:1], v3, off
/*00000000be4c*/ s_endpgm
/*00000000be50*/ s_nop           0x0
/*00000000be54*/ s_nop           0x0
/*00000000be58*/ s_nop           0x0
/*00000000be5c*/ s_nop           0x0
/*00000000be60*/ s_nop           0x0
/*00000000be64*/ s_nop           0x0
/*00000000be68*/ s_nop           0x0
/*00000000be6c*/ s_nop           0x0
/*00000000be70*/ s_nop           0x0
/*00000000be74*/ s_nop           0x0
/*00000000be78*/ s_nop           0x0
/*00000000be7c*/ s_nop           0x0
/*00000000be80*/ s_nop           0x0
/*00000000be84*/ s_nop           0x0
/*00000000be88*/ s_nop           0x0
/*00000000be8c*/ s_nop           0x0
/*00000000be90*/ s_nop           0x0
/*00000000be94*/ s_nop           0x0
/*00000000be98*/ s_nop           0x0
/*00000000be9c*/ s_nop           0x0
/*00000000bea0*/ s_nop           0x0
/*00000000bea4*/ s_nop           0x0
/*00000000bea8*/ s_nop           0x0
/*00000000beac*/ s_nop           0x0
/*00000000beb0*/ s_nop           0x0
/*00000000beb4*/ s_nop           0x0
/*00000000beb8*/ s_nop           0x0
/*00000000bebc*/ s_nop           0x0
/*00000000bec0*/ s_nop           0x0
/*00000000bec4*/ s_nop           0x0
/*00000000bec8*/ s_nop           0x0
/*00000000becc*/ s_nop           0x0
/*00000000bed0*/ s_nop           0x0
/*00000000bed4*/ s_nop           0x0
/*00000000bed8*/ s_nop           0x0
/*00000000bedc*/ s_nop           0x0
/*00000000bee0*/ s_nop           0x0
/*00000000bee4*/ s_nop           0x0
/*00000000bee8*/ s_nop           0x0
/*00000000beec*/ s_nop           0x0
/*00000000bef0*/ s_nop           0x0
/*00000000bef4*/ s_nop           0x0
/*00000000bef8*/ s_nop           0x0
/*00000000befc*/ s_nop           0x0
mul_get_global_size_64:
.skip 256
/*00000000c000*/ s_load_dword    s2, s[6:7], 0x10
/*00000000c008*/ s_load_dword    s3, s[4:5], 0xc
/*00000000c010*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000c018*/ s_lshl_b32      s4, s8, 6
/*00000000c01c*/ v_mov_b32       v1, 0
/*00000000c020*/ s_waitcnt       lgkmcnt(0)
/*00000000c024*/ v_add3_u32      v0, s2, s4, v0
/*00000000c02c*/ s_mul_i32       s2, s3, s3
/*00000000c030*/ v_mov_b32       v2, s2
/*00000000c034*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c03c*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000c044*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000c048*/ global_store_dword v[0:1], v2, off
/*00000000c050*/ s_endpgm
/*00000000c054*/ s_nop           0x0
/*00000000c058*/ s_nop           0x0
/*00000000c05c*/ s_nop           0x0
/*00000000c060*/ s_nop           0x0
/*00000000c064*/ s_nop           0x0
/*00000000c068*/ s_nop           0x0
/*00000000c06c*/ s_nop           0x0
/*00000000c070*/ s_nop           0x0
/*00000000c074*/ s_nop           0x0
/*00000000c078*/ s_nop           0x0
/*00000000c07c*/ s_nop           0x0
/*00000000c080*/ s_nop           0x0
/*00000000c084*/ s_nop           0x0
/*00000000c088*/ s_nop           0x0
/*00000000c08c*/ s_nop           0x0
/*00000000c090*/ s_nop           0x0
/*00000000c094*/ s_nop           0x0
/*00000000c098*/ s_nop           0x0
/*00000000c09c*/ s_nop           0x0
/*00000000c0a0*/ s_nop           0x0
/*00000000c0a4*/ s_nop           0x0
/*00000000c0a8*/ s_nop           0x0
/*00000000c0ac*/ s_nop           0x0
/*00000000c0b0*/ s_nop           0x0
/*00000000c0b4*/ s_nop           0x0
/*00000000c0b8*/ s_nop           0x0
/*00000000c0bc*/ s_nop           0x0
/*00000000c0c0*/ s_nop           0x0
/*00000000c0c4*/ s_nop           0x0
/*00000000c0c8*/ s_nop           0x0
/*00000000c0cc*/ s_nop           0x0
/*00000000c0d0*/ s_nop           0x0
/*00000000c0d4*/ s_nop           0x0
/*00000000c0d8*/ s_nop           0x0
/*00000000c0dc*/ s_nop           0x0
/*00000000c0e0*/ s_nop           0x0
/*00000000c0e4*/ s_nop           0x0
/*00000000c0e8*/ s_nop           0x0
/*00000000c0ec*/ s_nop           0x0
/*00000000c0f0*/ s_nop           0x0
/*00000000c0f4*/ s_nop           0x0
/*00000000c0f8*/ s_nop           0x0
/*00000000c0fc*/ s_nop           0x0
mul_get_num_groups_64:
.skip 256
/*00000000c200*/ s_load_dword    s2, s[4:5], 0xc
/*00000000c208*/ s_clause        0x1
/*00000000c20c*/ s_load_dword    s3, s[6:7], 0x10
/*00000000c214*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000c21c*/ s_lshl_b32      s4, s8, 6
/*00000000c220*/ v_mov_b32       v1, 0
/*00000000c224*/ s_waitcnt       lgkmcnt(0)
/*00000000c228*/ s_and_b32       s5, s2, 0xffffffc0
/*00000000c230*/ v_add3_u32      v0, s3, s4, v0
/*00000000c238*/ v_cmp_gt_u32    s[3:4], s2, s5
/*00000000c240*/ s_lshr_b32      s2, s2, 6
/*00000000c244*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c24c*/ s_cmpk_lg_u32   s3, 0x0
/*00000000c250*/ s_addc_u32      s2, s2, 0
/*00000000c254*/ s_mul_i32       s2, s2, s2
/*00000000c258*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000c260*/ v_mov_b32       v2, s2
/*00000000c264*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000c268*/ global_store_dword v[0:1], v2, off
/*00000000c270*/ s_endpgm
/*00000000c274*/ s_nop           0x0
/*00000000c278*/ s_nop           0x0
/*00000000c27c*/ s_nop           0x0
/*00000000c280*/ s_nop           0x0
/*00000000c284*/ s_nop           0x0
/*00000000c288*/ s_nop           0x0
/*00000000c28c*/ s_nop           0x0
/*00000000c290*/ s_nop           0x0
/*00000000c294*/ s_nop           0x0
/*00000000c298*/ s_nop           0x0
/*00000000c29c*/ s_nop           0x0
/*00000000c2a0*/ s_nop           0x0
/*00000000c2a4*/ s_nop           0x0
/*00000000c2a8*/ s_nop           0x0
/*00000000c2ac*/ s_nop           0x0
/*00000000c2b0*/ s_nop           0x0
/*00000000c2b4*/ s_nop           0x0
/*00000000c2b8*/ s_nop           0x0
/*00000000c2bc*/ s_nop           0x0
/*00000000c2c0*/ s_nop           0x0
/*00000000c2c4*/ s_nop           0x0
/*00000000c2c8*/ s_nop           0x0
/*00000000c2cc*/ s_nop           0x0
/*00000000c2d0*/ s_nop           0x0
/*00000000c2d4*/ s_nop           0x0
/*00000000c2d8*/ s_nop           0x0
/*00000000c2dc*/ s_nop           0x0
/*00000000c2e0*/ s_nop           0x0
/*00000000c2e4*/ s_nop           0x0
/*00000000c2e8*/ s_nop           0x0
/*00000000c2ec*/ s_nop           0x0
/*00000000c2f0*/ s_nop           0x0
/*00000000c2f4*/ s_nop           0x0
/*00000000c2f8*/ s_nop           0x0
/*00000000c2fc*/ s_nop           0x0
mul_get_work_dim:
.skip 256
/*00000000c400*/ v_mov_b32       v1, s4
/*00000000c404*/ v_mov_b32       v2, s5
/*00000000c408*/ s_clause        0x1
/*00000000c40c*/ s_load_dword    s2, s[6:7], 0x10
/*00000000c414*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000c41c*/ s_lshl_b32      s3, s8, 6
/*00000000c420*/ global_load_ushort v2, v[1:2], off inst_offset:2
/*00000000c428*/ v_mov_b32       v1, 0
/*00000000c42c*/ s_waitcnt       lgkmcnt(0)
/*00000000c430*/ v_add3_u32      v0, s2, s3, v0
/*00000000c438*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c440*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000c448*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000c44c*/ s_waitcnt       vmcnt(0)
/*00000000c450*/ v_mul_u32_u24   v2, v2, v2
/*00000000c454*/ global_store_dword v[0:1], v2, off
/*00000000c45c*/ s_endpgm
/*00000000c460*/ s_nop           0x0
/*00000000c464*/ s_nop           0x0
/*00000000c468*/ s_nop           0x0
/*00000000c46c*/ s_nop           0x0
/*00000000c470*/ s_nop           0x0
/*00000000c474*/ s_nop           0x0
/*00000000c478*/ s_nop           0x0
/*00000000c47c*/ s_nop           0x0
/*00000000c480*/ s_nop           0x0
/*00000000c484*/ s_nop           0x0
/*00000000c488*/ s_nop           0x0
/*00000000c48c*/ s_nop           0x0
/*00000000c490*/ s_nop           0x0
/*00000000c494*/ s_nop           0x0
/*00000000c498*/ s_nop           0x0
/*00000000c49c*/ s_nop           0x0
/*00000000c4a0*/ s_nop           0x0
/*00000000c4a4*/ s_nop           0x0
/*00000000c4a8*/ s_nop           0x0
/*00000000c4ac*/ s_nop           0x0
/*00000000c4b0*/ s_nop           0x0
/*00000000c4b4*/ s_nop           0x0
/*00000000c4b8*/ s_nop           0x0
/*00000000c4bc*/ s_nop           0x0
/*00000000c4c0*/ s_nop           0x0
/*00000000c4c4*/ s_nop           0x0
/*00000000c4c8*/ s_nop           0x0
/*00000000c4cc*/ s_nop           0x0
/*00000000c4d0*/ s_nop           0x0
/*00000000c4d4*/ s_nop           0x0
/*00000000c4d8*/ s_nop           0x0
/*00000000c4dc*/ s_nop           0x0
/*00000000c4e0*/ s_nop           0x0
/*00000000c4e4*/ s_nop           0x0
/*00000000c4e8*/ s_nop           0x0
/*00000000c4ec*/ s_nop           0x0
/*00000000c4f0*/ s_nop           0x0
/*00000000c4f4*/ s_nop           0x0
/*00000000c4f8*/ s_nop           0x0
/*00000000c4fc*/ s_nop           0x0
mul_x_8_8:
.skip 256
/*00000000c600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000c608*/ s_waitcnt       lgkmcnt(0)
/*00000000c60c*/ s_clause        0x1
/*00000000c610*/ s_load_dword    s1, s[4:5], 0x0
/*00000000c618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000c620*/ s_lshl_b32      s3, s6, 3
/*00000000c624*/ v_mov_b32       v3, 0
/*00000000c628*/ v_add3_u32      v2, s0, s3, v0
/*00000000c630*/ s_lshl_b32      s0, s7, 3
/*00000000c634*/ v_add3_u32      v4, s2, s0, v1
/*00000000c63c*/ v_lshlrev_b64   v[0:1], 2, v[2:3]
/*00000000c644*/ s_waitcnt       lgkmcnt(0)
/*00000000c648*/ v_mul_lo_u32    v2, v4, s1
/*00000000c650*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000c658*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000c65c*/ global_store_dword v[0:1], v2, off
/*00000000c664*/ s_endpgm
/*00000000c668*/ s_nop           0x0
/*00000000c66c*/ s_nop           0x0
/*00000000c670*/ s_nop           0x0
/*00000000c674*/ s_nop           0x0
/*00000000c678*/ s_nop           0x0
/*00000000c67c*/ s_nop           0x0
/*00000000c680*/ s_nop           0x0
/*00000000c684*/ s_nop           0x0
/*00000000c688*/ s_nop           0x0
/*00000000c68c*/ s_nop           0x0
/*00000000c690*/ s_nop           0x0
/*00000000c694*/ s_nop           0x0
/*00000000c698*/ s_nop           0x0
/*00000000c69c*/ s_nop           0x0
/*00000000c6a0*/ s_nop           0x0
/*00000000c6a4*/ s_nop           0x0
/*00000000c6a8*/ s_nop           0x0
/*00000000c6ac*/ s_nop           0x0
/*00000000c6b0*/ s_nop           0x0
/*00000000c6b4*/ s_nop           0x0
/*00000000c6b8*/ s_nop           0x0
/*00000000c6bc*/ s_nop           0x0
/*00000000c6c0*/ s_nop           0x0
/*00000000c6c4*/ s_nop           0x0
/*00000000c6c8*/ s_nop           0x0
/*00000000c6cc*/ s_nop           0x0
/*00000000c6d0*/ s_nop           0x0
/*00000000c6d4*/ s_nop           0x0
/*00000000c6d8*/ s_nop           0x0
/*00000000c6dc*/ s_nop           0x0
/*00000000c6e0*/ s_nop           0x0
/*00000000c6e4*/ s_nop           0x0
/*00000000c6e8*/ s_nop           0x0
/*00000000c6ec*/ s_nop           0x0
/*00000000c6f0*/ s_nop           0x0
/*00000000c6f4*/ s_nop           0x0
/*00000000c6f8*/ s_nop           0x0
/*00000000c6fc*/ s_nop           0x0
mul_get_global_offset_8_8:
.skip 256
/*00000000c800*/ s_clause        0x1
/*00000000c804*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000c80c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000c814*/ s_waitcnt       lgkmcnt(0)
/*00000000c818*/ s_lshl_b32      s1, s6, 3
/*00000000c81c*/ v_mov_b32       v1, 0
/*00000000c820*/ v_add3_u32      v0, s0, s1, v0
/*00000000c828*/ s_mul_i32       s0, s2, s0
/*00000000c82c*/ v_mov_b32       v2, s0
/*00000000c830*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000c838*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000c840*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000c844*/ global_store_dword v[0:1], v2, off
/*00000000c84c*/ s_endpgm
/*00000000c850*/ s_nop           0x0
/*00000000c854*/ s_nop           0x0
/*00000000c858*/ s_nop           0x0
/*00000000c85c*/ s_nop           0x0
/*00000000c860*/ s_nop           0x0
/*00000000c864*/ s_nop           0x0
/*00000000c868*/ s_nop           0x0
/*00000000c86c*/ s_nop           0x0
/*00000000c870*/ s_nop           0x0
/*00000000c874*/ s_nop           0x0
/*00000000c878*/ s_nop           0x0
/*00000000c87c*/ s_nop           0x0
/*00000000c880*/ s_nop           0x0
/*00000000c884*/ s_nop           0x0
/*00000000c888*/ s_nop           0x0
/*00000000c88c*/ s_nop           0x0
/*00000000c890*/ s_nop           0x0
/*00000000c894*/ s_nop           0x0
/*00000000c898*/ s_nop           0x0
/*00000000c89c*/ s_nop           0x0
/*00000000c8a0*/ s_nop           0x0
/*00000000c8a4*/ s_nop           0x0
/*00000000c8a8*/ s_nop           0x0
/*00000000c8ac*/ s_nop           0x0
/*00000000c8b0*/ s_nop           0x0
/*00000000c8b4*/ s_nop           0x0
/*00000000c8b8*/ s_nop           0x0
/*00000000c8bc*/ s_nop           0x0
/*00000000c8c0*/ s_nop           0x0
/*00000000c8c4*/ s_nop           0x0
/*00000000c8c8*/ s_nop           0x0
/*00000000c8cc*/ s_nop           0x0
/*00000000c8d0*/ s_nop           0x0
/*00000000c8d4*/ s_nop           0x0
/*00000000c8d8*/ s_nop           0x0
/*00000000c8dc*/ s_nop           0x0
/*00000000c8e0*/ s_nop           0x0
/*00000000c8e4*/ s_nop           0x0
/*00000000c8e8*/ s_nop           0x0
/*00000000c8ec*/ s_nop           0x0
/*00000000c8f0*/ s_nop           0x0
/*00000000c8f4*/ s_nop           0x0
/*00000000c8f8*/ s_nop           0x0
/*00000000c8fc*/ s_nop           0x0
mul_get_local_id_8_8:
.skip 256
/*00000000ca00*/ s_clause        0x1
/*00000000ca04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000ca0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000ca14*/ s_lshl_b32      s3, s6, 3
/*00000000ca18*/ v_mov_b32       v3, 0
/*00000000ca1c*/ v_mul_u32_u24   v7, v1, v0
/*00000000ca20*/ s_waitcnt       lgkmcnt(0)
/*00000000ca24*/ v_add3_u32      v2, s2, s3, v0
/*00000000ca2c*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*00000000ca34*/ v_add_co_u32    v0, vcc, s0, v2
/*00000000ca3c*/ v_add_co_ci_u32 v1, vcc, s1, v3, vcc
/*00000000ca40*/ global_store_dword v[0:1], v7, off
/*00000000ca48*/ s_endpgm
/*00000000ca4c*/ s_nop           0x0
/*00000000ca50*/ s_nop           0x0
/*00000000ca54*/ s_nop           0x0
/*00000000ca58*/ s_nop           0x0
/*00000000ca5c*/ s_nop           0x0
/*00000000ca60*/ s_nop           0x0
/*00000000ca64*/ s_nop           0x0
/*00000000ca68*/ s_nop           0x0
/*00000000ca6c*/ s_nop           0x0
/*00000000ca70*/ s_nop           0x0
/*00000000ca74*/ s_nop           0x0
/*00000000ca78*/ s_nop           0x0
/*00000000ca7c*/ s_nop           0x0
/*00000000ca80*/ s_nop           0x0
/*00000000ca84*/ s_nop           0x0
/*00000000ca88*/ s_nop           0x0
/*00000000ca8c*/ s_nop           0x0
/*00000000ca90*/ s_nop           0x0
/*00000000ca94*/ s_nop           0x0
/*00000000ca98*/ s_nop           0x0
/*00000000ca9c*/ s_nop           0x0
/*00000000caa0*/ s_nop           0x0
/*00000000caa4*/ s_nop           0x0
/*00000000caa8*/ s_nop           0x0
/*00000000caac*/ s_nop           0x0
/*00000000cab0*/ s_nop           0x0
/*00000000cab4*/ s_nop           0x0
/*00000000cab8*/ s_nop           0x0
/*00000000cabc*/ s_nop           0x0
/*00000000cac0*/ s_nop           0x0
/*00000000cac4*/ s_nop           0x0
/*00000000cac8*/ s_nop           0x0
/*00000000cacc*/ s_nop           0x0
/*00000000cad0*/ s_nop           0x0
/*00000000cad4*/ s_nop           0x0
/*00000000cad8*/ s_nop           0x0
/*00000000cadc*/ s_nop           0x0
/*00000000cae0*/ s_nop           0x0
/*00000000cae4*/ s_nop           0x0
/*00000000cae8*/ s_nop           0x0
/*00000000caec*/ s_nop           0x0
/*00000000caf0*/ s_nop           0x0
/*00000000caf4*/ s_nop           0x0
/*00000000caf8*/ s_nop           0x0
/*00000000cafc*/ s_nop           0x0
mul_get_group_id_8_8:
.skip 256
/*00000000cc00*/ s_clause        0x1
/*00000000cc04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000cc0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000cc14*/ s_lshl_b32      s3, s6, 3
/*00000000cc18*/ v_mov_b32       v1, 0
/*00000000cc1c*/ s_waitcnt       lgkmcnt(0)
/*00000000cc20*/ v_add3_u32      v0, s2, s3, v0
/*00000000cc28*/ s_mul_i32       s2, s7, s6
/*00000000cc2c*/ v_mov_b32       v2, s2
/*00000000cc30*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000cc38*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000cc40*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000cc44*/ global_store_dword v[0:1], v2, off
/*00000000cc4c*/ s_endpgm
/*00000000cc50*/ s_nop           0x0
/*00000000cc54*/ s_nop           0x0
/*00000000cc58*/ s_nop           0x0
/*00000000cc5c*/ s_nop           0x0
/*00000000cc60*/ s_nop           0x0
/*00000000cc64*/ s_nop           0x0
/*00000000cc68*/ s_nop           0x0
/*00000000cc6c*/ s_nop           0x0
/*00000000cc70*/ s_nop           0x0
/*00000000cc74*/ s_nop           0x0
/*00000000cc78*/ s_nop           0x0
/*00000000cc7c*/ s_nop           0x0
/*00000000cc80*/ s_nop           0x0
/*00000000cc84*/ s_nop           0x0
/*00000000cc88*/ s_nop           0x0
/*00000000cc8c*/ s_nop           0x0
/*00000000cc90*/ s_nop           0x0
/*00000000cc94*/ s_nop           0x0
/*00000000cc98*/ s_nop           0x0
/*00000000cc9c*/ s_nop           0x0
/*00000000cca0*/ s_nop           0x0
/*00000000cca4*/ s_nop           0x0
/*00000000cca8*/ s_nop           0x0
/*00000000ccac*/ s_nop           0x0
/*00000000ccb0*/ s_nop           0x0
/*00000000ccb4*/ s_nop           0x0
/*00000000ccb8*/ s_nop           0x0
/*00000000ccbc*/ s_nop           0x0
/*00000000ccc0*/ s_nop           0x0
/*00000000ccc4*/ s_nop           0x0
/*00000000ccc8*/ s_nop           0x0
/*00000000cccc*/ s_nop           0x0
/*00000000ccd0*/ s_nop           0x0
/*00000000ccd4*/ s_nop           0x0
/*00000000ccd8*/ s_nop           0x0
/*00000000ccdc*/ s_nop           0x0
/*00000000cce0*/ s_nop           0x0
/*00000000cce4*/ s_nop           0x0
/*00000000cce8*/ s_nop           0x0
/*00000000ccec*/ s_nop           0x0
/*00000000ccf0*/ s_nop           0x0
/*00000000ccf4*/ s_nop           0x0
/*00000000ccf8*/ s_nop           0x0
/*00000000ccfc*/ s_nop           0x0
mul_get_local_size_8_8:
.skip 256
/*00000000ce00*/ s_clause        0x1
/*00000000ce04*/ s_load_dword    s2, s[4:5], 0x10
/*00000000ce0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000000ce14*/ s_lshl_b32      s3, s6, 3
/*00000000ce18*/ v_mov_b32       v1, 0
/*00000000ce1c*/ v_mov_b32       v2, 64
/*00000000ce20*/ s_waitcnt       lgkmcnt(0)
/*00000000ce24*/ v_add3_u32      v0, s2, s3, v0
/*00000000ce2c*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000ce34*/ v_add_co_u32    v0, vcc, s0, v0
/*00000000ce3c*/ v_add_co_ci_u32 v1, vcc, s1, v1, vcc
/*00000000ce40*/ global_store_dword v[0:1], v2, off
/*00000000ce48*/ s_endpgm
/*00000000ce4c*/ s_nop           0x0
/*00000000ce50*/ s_nop           0x0
/*00000000ce54*/ s_nop           0x0
/*00000000ce58*/ s_nop           0x0
/*00000000ce5c*/ s_nop           0x0
/*00000000ce60*/ s_nop           0x0
/*00000000ce64*/ s_nop           0x0
/*00000000ce68*/ s_nop           0x0
/*00000000ce6c*/ s_nop           0x0
/*00000000ce70*/ s_nop           0x0
/*00000000ce74*/ s_nop           0x0
/*00000000ce78*/ s_nop           0x0
/*00000000ce7c*/ s_nop           0x0
/*00000000ce80*/ s_nop           0x0
/*00000000ce84*/ s_nop           0x0
/*00000000ce88*/ s_nop           0x0
/*00000000ce8c*/ s_nop           0x0
/*00000000ce90*/ s_nop           0x0
/*00000000ce94*/ s_nop           0x0
/*00000000ce98*/ s_nop           0x0
/*00000000ce9c*/ s_nop           0x0
/*00000000cea0*/ s_nop           0x0
/*00000000cea4*/ s_nop           0x0
/*00000000cea8*/ s_nop           0x0
/*00000000ceac*/ s_nop           0x0
/*00000000ceb0*/ s_nop           0x0
/*00000000ceb4*/ s_nop           0x0
/*00000000ceb8*/ s_nop           0x0
/*00000000cebc*/ s_nop           0x0
/*00000000cec0*/ s_nop           0x0
/*00000000cec4*/ s_nop           0x0
/*00000000cec8*/ s_nop           0x0
/*00000000cecc*/ s_nop           0x0
/*00000000ced0*/ s_nop           0x0
/*00000000ced4*/ s_nop           0x0
/*00000000ced8*/ s_nop           0x0
/*00000000cedc*/ s_nop           0x0
/*00000000cee0*/ s_nop           0x0
/*00000000cee4*/ s_nop           0x0
/*00000000cee8*/ s_nop           0x0
/*00000000ceec*/ s_nop           0x0
/*00000000cef0*/ s_nop           0x0
/*00000000cef4*/ s_nop           0x0
/*00000000cef8*/ s_nop           0x0
/*00000000cefc*/ s_nop           0x0
mul_get_global_id_8_8:
.skip 256
/*00000000d000*/ s_clause        0x1
/*00000000d004*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000d00c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000d014*/ v_lshl_or_b32   v0, s6, 3, v0
/*00000000d01c*/ v_mov_b32       v3, 0
/*00000000d020*/ s_waitcnt       lgkmcnt(0)
/*00000000d024*/ v_add_nc_u32    v2, s0, v0
/*00000000d028*/ s_lshl_b32      s0, s7, 3
/*00000000d02c*/ v_add3_u32      v4, s2, s0, v1
/*00000000d034*/ v_lshlrev_b64   v[0:1], 2, v[2:3]
/*00000000d03c*/ v_mul_lo_u32    v2, v4, v2
/*00000000d044*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d04c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d050*/ global_store_dword v[0:1], v2, off
/*00000000d058*/ s_endpgm
/*00000000d05c*/ s_nop           0x0
/*00000000d060*/ s_nop           0x0
/*00000000d064*/ s_nop           0x0
/*00000000d068*/ s_nop           0x0
/*00000000d06c*/ s_nop           0x0
/*00000000d070*/ s_nop           0x0
/*00000000d074*/ s_nop           0x0
/*00000000d078*/ s_nop           0x0
/*00000000d07c*/ s_nop           0x0
/*00000000d080*/ s_nop           0x0
/*00000000d084*/ s_nop           0x0
/*00000000d088*/ s_nop           0x0
/*00000000d08c*/ s_nop           0x0
/*00000000d090*/ s_nop           0x0
/*00000000d094*/ s_nop           0x0
/*00000000d098*/ s_nop           0x0
/*00000000d09c*/ s_nop           0x0
/*00000000d0a0*/ s_nop           0x0
/*00000000d0a4*/ s_nop           0x0
/*00000000d0a8*/ s_nop           0x0
/*00000000d0ac*/ s_nop           0x0
/*00000000d0b0*/ s_nop           0x0
/*00000000d0b4*/ s_nop           0x0
/*00000000d0b8*/ s_nop           0x0
/*00000000d0bc*/ s_nop           0x0
/*00000000d0c0*/ s_nop           0x0
/*00000000d0c4*/ s_nop           0x0
/*00000000d0c8*/ s_nop           0x0
/*00000000d0cc*/ s_nop           0x0
/*00000000d0d0*/ s_nop           0x0
/*00000000d0d4*/ s_nop           0x0
/*00000000d0d8*/ s_nop           0x0
/*00000000d0dc*/ s_nop           0x0
/*00000000d0e0*/ s_nop           0x0
/*00000000d0e4*/ s_nop           0x0
/*00000000d0e8*/ s_nop           0x0
/*00000000d0ec*/ s_nop           0x0
/*00000000d0f0*/ s_nop           0x0
/*00000000d0f4*/ s_nop           0x0
/*00000000d0f8*/ s_nop           0x0
/*00000000d0fc*/ s_nop           0x0
mul_get_global_size_8_8:
.skip 256
/*00000000d200*/ s_load_dword    s9, s[6:7], 0x10
/*00000000d208*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000000d210*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000000d218*/ s_lshl_b32      s4, s8, 3
/*00000000d21c*/ v_mov_b32       v1, 0
/*00000000d220*/ s_waitcnt       lgkmcnt(0)
/*00000000d224*/ v_add3_u32      v0, s9, s4, v0
/*00000000d22c*/ s_mul_i32       s0, s1, s0
/*00000000d230*/ v_mov_b32       v2, s0
/*00000000d234*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000d23c*/ v_add_co_u32    v0, vcc, s2, v0
/*00000000d244*/ v_add_co_ci_u32 v1, vcc, s3, v1, vcc
/*00000000d248*/ global_store_dword v[0:1], v2, off
/*00000000d250*/ s_endpgm
/*00000000d254*/ s_nop           0x0
/*00000000d258*/ s_nop           0x0
/*00000000d25c*/ s_nop           0x0
/*00000000d260*/ s_nop           0x0
/*00000000d264*/ s_nop           0x0
/*00000000d268*/ s_nop           0x0
/*00000000d26c*/ s_nop           0x0
/*00000000d270*/ s_nop           0x0
/*00000000d274*/ s_nop           0x0
/*00000000d278*/ s_nop           0x0
/*00000000d27c*/ s_nop           0x0
/*00000000d280*/ s_nop           0x0
/*00000000d284*/ s_nop           0x0
/*00000000d288*/ s_nop           0x0
/*00000000d28c*/ s_nop           0x0
/*00000000d290*/ s_nop           0x0
/*00000000d294*/ s_nop           0x0
/*00000000d298*/ s_nop           0x0
/*00000000d29c*/ s_nop           0x0
/*00000000d2a0*/ s_nop           0x0
/*00000000d2a4*/ s_nop           0x0
/*00000000d2a8*/ s_nop           0x0
/*00000000d2ac*/ s_nop           0x0
/*00000000d2b0*/ s_nop           0x0
/*00000000d2b4*/ s_nop           0x0
/*00000000d2b8*/ s_nop           0x0
/*00000000d2bc*/ s_nop           0x0
/*00000000d2c0*/ s_nop           0x0
/*00000000d2c4*/ s_nop           0x0
/*00000000d2c8*/ s_nop           0x0
/*00000000d2cc*/ s_nop           0x0
/*00000000d2d0*/ s_nop           0x0
/*00000000d2d4*/ s_nop           0x0
/*00000000d2d8*/ s_nop           0x0
/*00000000d2dc*/ s_nop           0x0
/*00000000d2e0*/ s_nop           0x0
/*00000000d2e4*/ s_nop           0x0
/*00000000d2e8*/ s_nop           0x0
/*00000000d2ec*/ s_nop           0x0
/*00000000d2f0*/ s_nop           0x0
/*00000000d2f4*/ s_nop           0x0
/*00000000d2f8*/ s_nop           0x0
/*00000000d2fc*/ s_nop           0x0
mul_get_num_groups_8_8:
.skip 256
/*00000000d400*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000000d408*/ s_load_dword    s4, s[6:7], 0x10
/*00000000d410*/ v_mov_b32       v1, 0
/*00000000d414*/ s_waitcnt       lgkmcnt(0)
/*00000000d418*/ s_and_b32       s2, s0, -8
/*00000000d41c*/ v_cmp_gt_u32    s[5:6], s0, s2
/*00000000d424*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000000d42c*/ s_lshl_b32      s6, s8, 3
/*00000000d430*/ s_lshr_b32      s0, s0, 3
/*00000000d434*/ v_add3_u32      v0, s4, s6, v0
/*00000000d43c*/ s_cmpk_lg_u32   s5, 0x0
/*00000000d440*/ s_addc_u32      s0, s0, 0
/*00000000d444*/ s_and_b32       s4, s1, -8
/*00000000d448*/ v_lshlrev_b64   v[0:1], 2, v[0:1]
/*00000000d450*/ v_cmp_gt_u32    s[4:5], s1, s4
/*00000000d458*/ s_lshr_b32      s1, s1, 3
/*00000000d45c*/ s_cmpk_lg_u32   s4, 0x0
/*00000000d460*/ s_addc_u32      s1, s1, 0
/*00000000d464*/ s_mul_i32       s0, s1, s0
/*00000000d468*/ s_waitcnt       lgkmcnt(0)
/*00000000d46c*/ v_add_co_u32    v0, vcc, s2, v0
/*00000000d474*/ v_mov_b32       v2, s0
/*00000000d478*/ v_add_co_ci_u32 v1, vcc, s3, v1, vcc
/*00000000d47c*/ global_store_dword v[0:1], v2, off
/*00000000d484*/ s_endpgm
/*00000000d488*/ s_nop           0x0
/*00000000d48c*/ s_nop           0x0
/*00000000d490*/ s_nop           0x0
/*00000000d494*/ s_nop           0x0
/*00000000d498*/ s_nop           0x0
/*00000000d49c*/ s_nop           0x0
/*00000000d4a0*/ s_nop           0x0
/*00000000d4a4*/ s_nop           0x0
/*00000000d4a8*/ s_nop           0x0
/*00000000d4ac*/ s_nop           0x0
/*00000000d4b0*/ s_nop           0x0
/*00000000d4b4*/ s_nop           0x0
/*00000000d4b8*/ s_nop           0x0
/*00000000d4bc*/ s_nop           0x0
/*00000000d4c0*/ s_nop           0x0
/*00000000d4c4*/ s_nop           0x0
/*00000000d4c8*/ s_nop           0x0
/*00000000d4cc*/ s_nop           0x0
/*00000000d4d0*/ s_nop           0x0
/*00000000d4d4*/ s_nop           0x0
/*00000000d4d8*/ s_nop           0x0
/*00000000d4dc*/ s_nop           0x0
/*00000000d4e0*/ s_nop           0x0
/*00000000d4e4*/ s_nop           0x0
/*00000000d4e8*/ s_nop           0x0
/*00000000d4ec*/ s_nop           0x0
/*00000000d4f0*/ s_nop           0x0
/*00000000d4f4*/ s_nop           0x0
/*00000000d4f8*/ s_nop           0x0
/*00000000d4fc*/ s_nop           0x0
mul_get_work_dim_8_8:
.skip 256
/*00000000d600*/ v_mov_b32       v2, s4
/*00000000d604*/ v_mov_b32       v3, s5
/*00000000d608*/ s_clause        0x1
/*00000000d60c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000d614*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000d61c*/ s_waitcnt       lgkmcnt(0)
/*00000000d620*/ s_lshl_b32      s1, s8, 3
/*00000000d624*/ global_load_ushort v4, v[2:3], off inst_offset:2
/*00000000d62c*/ v_mov_b32       v3, 0
/*00000000d630*/ v_add3_u32      v2, s0, s1, v0
/*00000000d638*/ s_lshl_b32      s0, s9, 3
/*00000000d63c*/ v_add3_u32      v5, s2, s0, v1
/*00000000d644*/ v_lshlrev_b64   v[0:1], 2, v[2:3]
/*00000000d64c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000d654*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000d658*/ s_waitcnt       vmcnt(0)
/*00000000d65c*/ v_mul_lo_u32    v2, v5, v4
/*00000000d664*/ global_store_dword v[0:1], v2, off
/*00000000d66c*/ s_endpgm
/*00000000d670*/ s_nop           0x0
/*00000000d674*/ s_nop           0x0
/*00000000d678*/ s_nop           0x0
/*00000000d67c*/ s_nop           0x0
/*00000000d680*/ s_nop           0x0
/*00000000d684*/ s_nop           0x0
/*00000000d688*/ s_nop           0x0
/*00000000d68c*/ s_nop           0x0
/*00000000d690*/ s_nop           0x0
/*00000000d694*/ s_nop           0x0
/*00000000d698*/ s_nop           0x0
/*00000000d69c*/ s_nop           0x0
/*00000000d6a0*/ s_nop           0x0
/*00000000d6a4*/ s_nop           0x0
/*00000000d6a8*/ s_nop           0x0
/*00000000d6ac*/ s_nop           0x0
/*00000000d6b0*/ s_nop           0x0
/*00000000d6b4*/ s_nop           0x0
/*00000000d6b8*/ s_nop           0x0
/*00000000d6bc*/ s_nop           0x0
/*00000000d6c0*/ s_nop           0x0
/*00000000d6c4*/ s_nop           0x0
/*00000000d6c8*/ s_nop           0x0
/*00000000d6cc*/ s_nop           0x0
/*00000000d6d0*/ s_nop           0x0
/*00000000d6d4*/ s_nop           0x0
/*00000000d6d8*/ s_nop           0x0
/*00000000d6dc*/ s_nop           0x0
/*00000000d6e0*/ s_nop           0x0
/*00000000d6e4*/ s_nop           0x0
/*00000000d6e8*/ s_nop           0x0
/*00000000d6ec*/ s_nop           0x0
/*00000000d6f0*/ s_nop           0x0
/*00000000d6f4*/ s_nop           0x0
/*00000000d6f8*/ s_nop           0x0
/*00000000d6fc*/ s_nop           0x0
mul_long_x_x:
.skip 256
/*00000000d800*/ s_clause        0x2
/*00000000d804*/ s_load_dword    s2, s[4:5], 0x10
/*00000000d80c*/ s_load_dword    s3, s[4:5], 0x8
/*00000000d814*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000000d81c*/ v_mov_b32       v1, 0
/*00000000d820*/ s_lshl_b32      s4, s6, 6
/*00000000d824*/ v_mov_b32       v3, v1
/*00000000d828*/ s_waitcnt       lgkmcnt(0)
/*00000000d82c*/ v_add3_u32      v2, s2, s4, v0
/*00000000d834*/ s_mul_i32       s3, s3, s3
/*00000000d838*/ v_mov_b32       v0, s3
/*00000000d83c*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000000d844*/ v_add_co_u32    v2, vcc, s0, v2
/*00000000d84c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000d850*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000000d858*/ s_endpgm
/*00000000d85c*/ s_nop           0x0
/*00000000d860*/ s_nop           0x0
/*00000000d864*/ s_nop           0x0
/*00000000d868*/ s_nop           0x0
/*00000000d86c*/ s_nop           0x0
/*00000000d870*/ s_nop           0x0
/*00000000d874*/ s_nop           0x0
/*00000000d878*/ s_nop           0x0
/*00000000d87c*/ s_nop           0x0
/*00000000d880*/ s_nop           0x0
/*00000000d884*/ s_nop           0x0
/*00000000d888*/ s_nop           0x0
/*00000000d88c*/ s_nop           0x0
/*00000000d890*/ s_nop           0x0
/*00000000d894*/ s_nop           0x0
/*00000000d898*/ s_nop           0x0
/*00000000d89c*/ s_nop           0x0
/*00000000d8a0*/ s_nop           0x0
/*00000000d8a4*/ s_nop           0x0
/*00000000d8a8*/ s_nop           0x0
/*00000000d8ac*/ s_nop           0x0
/*00000000d8b0*/ s_nop           0x0
/*00000000d8b4*/ s_nop           0x0
/*00000000d8b8*/ s_nop           0x0
/*00000000d8bc*/ s_nop           0x0
/*00000000d8c0*/ s_nop           0x0
/*00000000d8c4*/ s_nop           0x0
/*00000000d8c8*/ s_nop           0x0
/*00000000d8cc*/ s_nop           0x0
/*00000000d8d0*/ s_nop           0x0
/*00000000d8d4*/ s_nop           0x0
/*00000000d8d8*/ s_nop           0x0
/*00000000d8dc*/ s_nop           0x0
/*00000000d8e0*/ s_nop           0x0
/*00000000d8e4*/ s_nop           0x0
/*00000000d8e8*/ s_nop           0x0
/*00000000d8ec*/ s_nop           0x0
/*00000000d8f0*/ s_nop           0x0
/*00000000d8f4*/ s_nop           0x0
/*00000000d8f8*/ s_nop           0x0
/*00000000d8fc*/ s_nop           0x0
mul_long_get_global_offset_x:
.skip 256
/*00000000da00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000da08*/ s_waitcnt       lgkmcnt(0)
/*00000000da0c*/ s_clause        0x2
/*00000000da10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000da18*/ s_load_dword    s3, s[4:5], 0x0
/*00000000da20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000da28*/ v_mov_b32       v3, 0
/*00000000da2c*/ s_lshl_b32      s6, s6, 1
/*00000000da30*/ s_lshl_b32      s7, s7, 4
/*00000000da34*/ s_lshl_b32      s8, s8, 1
/*00000000da38*/ v_mov_b32       v5, v3
/*00000000da3c*/ v_mov_b32       v7, v3
/*00000000da40*/ v_mov_b32       v9, v3
/*00000000da44*/ s_waitcnt       lgkmcnt(0)
/*00000000da48*/ v_add3_u32      v8, s1, s8, v2
/*00000000da50*/ v_add3_u32      v4, s0, s6, v0
/*00000000da58*/ v_add3_u32      v6, s2, s7, v1
/*00000000da60*/ s_mul_i32       s0, s0, s3
/*00000000da64*/ s_mul_i32       s2, s2, s3
/*00000000da68*/ v_mov_b32       v2, s0
/*00000000da6c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000da74*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000da7c*/ s_mul_i32       s1, s1, s3
/*00000000da80*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000da88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000da8c*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000da94*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000da98*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000daa0*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000daa8*/ v_mov_b32       v2, s2
/*00000000daac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000dab4*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000dabc*/ v_mov_b32       v2, s1
/*00000000dac0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000dac4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000dacc*/ s_endpgm
/*00000000dad0*/ s_nop           0x0
/*00000000dad4*/ s_nop           0x0
/*00000000dad8*/ s_nop           0x0
/*00000000dadc*/ s_nop           0x0
/*00000000dae0*/ s_nop           0x0
/*00000000dae4*/ s_nop           0x0
/*00000000dae8*/ s_nop           0x0
/*00000000daec*/ s_nop           0x0
/*00000000daf0*/ s_nop           0x0
/*00000000daf4*/ s_nop           0x0
/*00000000daf8*/ s_nop           0x0
/*00000000dafc*/ s_nop           0x0
mul_long_get_local_id_x:
.skip 256
/*00000000dc00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000dc08*/ s_waitcnt       lgkmcnt(0)
/*00000000dc0c*/ s_clause        0x1
/*00000000dc10*/ s_load_dword    s1, s[4:5], 0x0
/*00000000dc18*/ s_load_dwordx2  s[14:15], s[4:5], 0x8
/*00000000dc20*/ v_mov_b32       v4, 0
/*00000000dc24*/ s_load_dword    s3, s[4:5], 0x20
/*00000000dc2c*/ s_lshl_b32      s4, s6, 3
/*00000000dc30*/ v_mov_b32       v6, v4
/*00000000dc34*/ v_mov_b32       v8, v4
/*00000000dc38*/ v_mov_b32       v10, v4
/*00000000dc3c*/ v_add3_u32      v5, s0, s4, v0
/*00000000dc44*/ s_lshl_b32      s0, s7, 2
/*00000000dc48*/ s_waitcnt       lgkmcnt(0)
/*00000000dc4c*/ v_mul_lo_u32    v3, v0, s1
/*00000000dc54*/ v_add3_u32      v7, s2, s0, v1
/*00000000dc5c*/ s_lshl_b32      s0, s8, 1
/*00000000dc60*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000dc68*/ v_add3_u32      v9, s3, s0, v2
/*00000000dc70*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000000dc78*/ v_add_co_u32    v5, vcc, s14, v5
/*00000000dc80*/ v_add_co_ci_u32 v6, vcc, s15, v6, vcc
/*00000000dc84*/ v_add_co_u32    v13, vcc, s14, v7
/*00000000dc8c*/ v_add_co_ci_u32 v14, vcc, s15, v8, vcc
/*00000000dc90*/ global_store_dwordx2 v[5:6], v[3:4], off
/*00000000dc98*/ v_mul_lo_u32    v3, v1, s1
/*00000000dca0*/ v_lshlrev_b64   v[5:6], 3, v[9:10]
/*00000000dca8*/ v_add_co_u32    v1, vcc, s14, v5
/*00000000dcb0*/ global_store_dwordx2 v[13:14], v[3:4], off
/*00000000dcb8*/ v_mul_lo_u32    v3, v2, s1
/*00000000dcc0*/ v_add_co_ci_u32 v2, vcc, s15, v6, vcc
/*00000000dcc4*/ global_store_dwordx2 v[1:2], v[3:4], off
/*00000000dccc*/ s_endpgm
/*00000000dcd0*/ s_nop           0x0
/*00000000dcd4*/ s_nop           0x0
/*00000000dcd8*/ s_nop           0x0
/*00000000dcdc*/ s_nop           0x0
/*00000000dce0*/ s_nop           0x0
/*00000000dce4*/ s_nop           0x0
/*00000000dce8*/ s_nop           0x0
/*00000000dcec*/ s_nop           0x0
/*00000000dcf0*/ s_nop           0x0
/*00000000dcf4*/ s_nop           0x0
/*00000000dcf8*/ s_nop           0x0
/*00000000dcfc*/ s_nop           0x0
mul_long_get_group_id_x:
.skip 256
/*00000000de00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000de08*/ s_waitcnt       lgkmcnt(0)
/*00000000de0c*/ s_clause        0x2
/*00000000de10*/ s_load_dword    s1, s[4:5], 0x20
/*00000000de18*/ s_load_dword    s3, s[4:5], 0x0
/*00000000de20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000de28*/ v_mov_b32       v3, 0
/*00000000de2c*/ s_lshl_b32      s9, s6, 1
/*00000000de30*/ s_lshl_b32      s10, s7, 4
/*00000000de34*/ s_lshl_b32      s11, s8, 1
/*00000000de38*/ v_mov_b32       v5, v3
/*00000000de3c*/ v_mov_b32       v7, v3
/*00000000de40*/ v_mov_b32       v9, v3
/*00000000de44*/ s_waitcnt       lgkmcnt(0)
/*00000000de48*/ v_add3_u32      v8, s1, s11, v2
/*00000000de50*/ v_add3_u32      v4, s0, s9, v0
/*00000000de58*/ v_add3_u32      v6, s2, s10, v1
/*00000000de60*/ s_mul_i32       s6, s6, s3
/*00000000de64*/ s_mul_i32       s7, s7, s3
/*00000000de68*/ v_mov_b32       v2, s6
/*00000000de6c*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000de74*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000de7c*/ s_mul_i32       s8, s8, s3
/*00000000de80*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000de88*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000de8c*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000de94*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000de98*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000dea0*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000dea8*/ v_mov_b32       v2, s7
/*00000000deac*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000deb4*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000debc*/ v_mov_b32       v2, s8
/*00000000dec0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000dec4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000decc*/ s_endpgm
/*00000000ded0*/ s_nop           0x0
/*00000000ded4*/ s_nop           0x0
/*00000000ded8*/ s_nop           0x0
/*00000000dedc*/ s_nop           0x0
/*00000000dee0*/ s_nop           0x0
/*00000000dee4*/ s_nop           0x0
/*00000000dee8*/ s_nop           0x0
/*00000000deec*/ s_nop           0x0
/*00000000def0*/ s_nop           0x0
/*00000000def4*/ s_nop           0x0
/*00000000def8*/ s_nop           0x0
/*00000000defc*/ s_nop           0x0
mul_long_get_local_size_x:
.skip 256
/*00000000e000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000e008*/ s_waitcnt       lgkmcnt(0)
/*00000000e00c*/ s_clause        0x2
/*00000000e010*/ s_load_dword    s3, s[4:5], 0x20
/*00000000e018*/ s_load_dword    s9, s[4:5], 0x0
/*00000000e020*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000e028*/ v_mov_b32       v4, 0
/*00000000e02c*/ s_lshl_b32      s6, s6, 1
/*00000000e030*/ s_lshl_b32      s7, s7, 1
/*00000000e034*/ s_lshl_b32      s8, s8, 2
/*00000000e038*/ s_mov_b32       s1, 0
/*00000000e03c*/ v_mov_b32       v6, v4
/*00000000e040*/ v_mov_b32       v8, v4
/*00000000e044*/ s_waitcnt       lgkmcnt(0)
/*00000000e048*/ v_add3_u32      v7, s3, s8, v2
/*00000000e050*/ v_add3_u32      v3, s0, s6, v0
/*00000000e058*/ v_add3_u32      v5, s2, s7, v1
/*00000000e060*/ s_lshl_b32      s0, s9, 1
/*00000000e064*/ v_mov_b32       v10, s1
/*00000000e068*/ s_lshl_b32      s2, s9, 2
/*00000000e06c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000e074*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000e07c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*00000000e084*/ v_mov_b32       v9, s0
/*00000000e088*/ v_add_co_u32    v11, vcc, s4, v0
/*00000000e090*/ v_add_co_ci_u32 v12, vcc, s5, v1, vcc
/*00000000e094*/ v_add_co_u32    v7, vcc, s4, v2
/*00000000e09c*/ v_add_co_ci_u32 v8, vcc, s5, v3, vcc
/*00000000e0a0*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000e0a8*/ v_mov_b32       v3, s2
/*00000000e0ac*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000e0b0*/ global_store_dwordx2 v[11:12], v[9:10], off
/*00000000e0b8*/ global_store_dwordx2 v[7:8], v[9:10], off
/*00000000e0c0*/ global_store_dwordx2 v[5:6], v[3:4], off
/*00000000e0c8*/ s_endpgm
/*00000000e0cc*/ s_nop           0x0
/*00000000e0d0*/ s_nop           0x0
/*00000000e0d4*/ s_nop           0x0
/*00000000e0d8*/ s_nop           0x0
/*00000000e0dc*/ s_nop           0x0
/*00000000e0e0*/ s_nop           0x0
/*00000000e0e4*/ s_nop           0x0
/*00000000e0e8*/ s_nop           0x0
/*00000000e0ec*/ s_nop           0x0
/*00000000e0f0*/ s_nop           0x0
/*00000000e0f4*/ s_nop           0x0
/*00000000e0f8*/ s_nop           0x0
/*00000000e0fc*/ s_nop           0x0
mul_long_get_global_id_x:
.skip 256
/*00000000e200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000e208*/ s_waitcnt       lgkmcnt(0)
/*00000000e20c*/ s_clause        0x2
/*00000000e210*/ s_load_dword    s1, s[4:5], 0x20
/*00000000e218*/ s_load_dwordx2  s[14:15], s[4:5], 0x8
/*00000000e220*/ s_load_dword    s3, s[4:5], 0x0
/*00000000e228*/ v_mov_b32       v4, 0
/*00000000e22c*/ v_lshl_or_b32   v5, s7, 1, v1
/*00000000e234*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000000e23c*/ v_lshl_or_b32   v0, s8, 2, v2
/*00000000e244*/ v_mov_b32       v6, v4
/*00000000e248*/ v_mov_b32       v10, v4
/*00000000e24c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*00000000e254*/ v_mov_b32       v1, v4
/*00000000e258*/ s_waitcnt       lgkmcnt(0)
/*00000000e25c*/ v_add_nc_u32    v9, s1, v0
/*00000000e260*/ v_add_nc_u32    v5, s2, v5
/*00000000e264*/ v_add_nc_u32    v2, s0, v3
/*00000000e268*/ v_lshlrev_b64   v[13:14], 3, v[9:10]
/*00000000e270*/ v_lshlrev_b64   v[11:12], 3, v[5:6]
/*00000000e278*/ v_add_co_u32    v6, vcc, s14, v7
/*00000000e280*/ v_mul_lo_u32    v0, v2, s3
/*00000000e288*/ v_add_co_ci_u32 v7, vcc, s15, v8, vcc
/*00000000e28c*/ v_mul_lo_u32    v3, v5, s3
/*00000000e294*/ v_add_co_u32    v17, vcc, s14, v11
/*00000000e29c*/ v_add_co_ci_u32 v18, vcc, s15, v12, vcc
/*00000000e2a0*/ global_store_dwordx2 v[6:7], v[0:1], off
/*00000000e2a8*/ global_store_dwordx2 v[17:18], v[3:4], off
/*00000000e2b0*/ v_mul_lo_u32    v3, v9, s3
/*00000000e2b8*/ v_add_co_u32    v1, vcc, s14, v13
/*00000000e2c0*/ v_add_co_ci_u32 v2, vcc, s15, v14, vcc
/*00000000e2c4*/ global_store_dwordx2 v[1:2], v[3:4], off
/*00000000e2cc*/ s_endpgm
/*00000000e2d0*/ s_nop           0x0
/*00000000e2d4*/ s_nop           0x0
/*00000000e2d8*/ s_nop           0x0
/*00000000e2dc*/ s_nop           0x0
/*00000000e2e0*/ s_nop           0x0
/*00000000e2e4*/ s_nop           0x0
/*00000000e2e8*/ s_nop           0x0
/*00000000e2ec*/ s_nop           0x0
/*00000000e2f0*/ s_nop           0x0
/*00000000e2f4*/ s_nop           0x0
/*00000000e2f8*/ s_nop           0x0
/*00000000e2fc*/ s_nop           0x0
mul_long_get_global_size_x:
.skip 256
/*00000000e400*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000e408*/ s_waitcnt       lgkmcnt(0)
/*00000000e40c*/ s_clause        0x1
/*00000000e410*/ s_load_dword    s1, s[6:7], 0x20
/*00000000e418*/ s_load_dword    s3, s[6:7], 0x8
/*00000000e420*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000e428*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000000e430*/ v_mov_b32       v3, 0
/*00000000e434*/ s_lshl_b32      s6, s8, 4
/*00000000e438*/ s_lshl_b32      s7, s9, 1
/*00000000e43c*/ s_lshl_b32      s8, s10, 1
/*00000000e440*/ v_mov_b32       v5, v3
/*00000000e444*/ v_mov_b32       v7, v3
/*00000000e448*/ v_mov_b32       v9, v3
/*00000000e44c*/ s_waitcnt       lgkmcnt(0)
/*00000000e450*/ v_add3_u32      v8, s1, s8, v2
/*00000000e458*/ v_add3_u32      v4, s0, s6, v0
/*00000000e460*/ v_add3_u32      v6, s2, s7, v1
/*00000000e468*/ s_mul_i32       s0, s12, s3
/*00000000e46c*/ s_mul_i32       s1, s13, s3
/*00000000e470*/ v_mov_b32       v2, s0
/*00000000e474*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000e47c*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000e484*/ s_mul_i32       s0, s14, s3
/*00000000e488*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e490*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e494*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000e49c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000e4a0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e4a8*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*00000000e4b0*/ v_mov_b32       v2, s1
/*00000000e4b4*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e4bc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000e4c4*/ v_mov_b32       v2, s0
/*00000000e4c8*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e4cc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e4d4*/ s_endpgm
/*00000000e4d8*/ s_nop           0x0
/*00000000e4dc*/ s_nop           0x0
/*00000000e4e0*/ s_nop           0x0
/*00000000e4e4*/ s_nop           0x0
/*00000000e4e8*/ s_nop           0x0
/*00000000e4ec*/ s_nop           0x0
/*00000000e4f0*/ s_nop           0x0
/*00000000e4f4*/ s_nop           0x0
/*00000000e4f8*/ s_nop           0x0
/*00000000e4fc*/ s_nop           0x0
mul_long_get_num_groups_x:
.skip 256
/*00000000e600*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000000e608*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000000e610*/ s_waitcnt       lgkmcnt(0)
/*00000000e614*/ s_clause        0x2
/*00000000e618*/ s_load_dword    s3, s[6:7], 0x20
/*00000000e620*/ s_load_dword    s11, s[6:7], 0x0
/*00000000e628*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000000e630*/ v_mov_b32       v3, 0
/*00000000e634*/ s_lshl_b32      s6, s9, 1
/*00000000e638*/ s_lshl_b32      s8, s8, 1
/*00000000e63c*/ s_lshl_b32      s7, s10, 2
/*00000000e640*/ v_mov_b32       v5, v3
/*00000000e644*/ v_mov_b32       v7, v3
/*00000000e648*/ v_mov_b32       v9, v3
/*00000000e64c*/ s_and_b32       s9, s0, -2
/*00000000e650*/ v_add3_u32      v4, s12, s8, v0
/*00000000e658*/ v_cmp_gt_u32    s[9:10], s0, s9
/*00000000e660*/ s_lshr_b32      s0, s0, 1
/*00000000e664*/ v_add3_u32      v6, s14, s6, v1
/*00000000e66c*/ s_waitcnt       lgkmcnt(0)
/*00000000e670*/ v_add3_u32      v8, s3, s7, v2
/*00000000e678*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*00000000e680*/ s_cmpk_lg_u32   s9, 0x0
/*00000000e684*/ s_addc_u32      s0, s0, 0
/*00000000e688*/ s_and_b32       s3, s1, -2
/*00000000e68c*/ s_lshr_b32      s6, s1, 1
/*00000000e690*/ v_cmp_gt_u32    s[1:2], s1, s3
/*00000000e698*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000e6a0*/ s_mul_i32       s0, s0, s11
/*00000000e6a4*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*00000000e6ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000e6b0*/ v_mov_b32       v2, s0
/*00000000e6b4*/ s_cmpk_lg_u32   s1, 0x0
/*00000000e6b8*/ s_addc_u32      s0, s6, 0
/*00000000e6bc*/ s_and_b32       s1, s2, -4
/*00000000e6c0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e6c8*/ v_cmp_gt_u32    s[1:2], s2, s1
/*00000000e6d0*/ v_add_co_u32    v0, vcc, s4, v4
/*00000000e6d8*/ s_mul_i32       s0, s0, s11
/*00000000e6dc*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*00000000e6e0*/ v_lshlrev_b64   v[4:5], 3, v[8:9]
/*00000000e6e8*/ s_lshr_b32      s2, s2, 2
/*00000000e6ec*/ v_mov_b32       v2, s0
/*00000000e6f0*/ s_cmpk_lg_u32   s1, 0x0
/*00000000e6f4*/ s_addc_u32      s0, s2, 0
/*00000000e6f8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e700*/ v_add_co_u32    v0, vcc, s4, v4
/*00000000e708*/ s_mul_i32       s0, s0, s11
/*00000000e70c*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*00000000e710*/ v_mov_b32       v2, s0
/*00000000e714*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000e71c*/ s_endpgm
/*00000000e720*/ s_nop           0x0
/*00000000e724*/ s_nop           0x0
/*00000000e728*/ s_nop           0x0
/*00000000e72c*/ s_nop           0x0
/*00000000e730*/ s_nop           0x0
/*00000000e734*/ s_nop           0x0
/*00000000e738*/ s_nop           0x0
/*00000000e73c*/ s_nop           0x0
/*00000000e740*/ s_nop           0x0
/*00000000e744*/ s_nop           0x0
/*00000000e748*/ s_nop           0x0
/*00000000e74c*/ s_nop           0x0
/*00000000e750*/ s_nop           0x0
/*00000000e754*/ s_nop           0x0
/*00000000e758*/ s_nop           0x0
/*00000000e75c*/ s_nop           0x0
/*00000000e760*/ s_nop           0x0
/*00000000e764*/ s_nop           0x0
/*00000000e768*/ s_nop           0x0
/*00000000e76c*/ s_nop           0x0
/*00000000e770*/ s_nop           0x0
/*00000000e774*/ s_nop           0x0
/*00000000e778*/ s_nop           0x0
/*00000000e77c*/ s_nop           0x0
/*00000000e780*/ s_nop           0x0
/*00000000e784*/ s_nop           0x0
/*00000000e788*/ s_nop           0x0
/*00000000e78c*/ s_nop           0x0
/*00000000e790*/ s_nop           0x0
/*00000000e794*/ s_nop           0x0
/*00000000e798*/ s_nop           0x0
/*00000000e79c*/ s_nop           0x0
/*00000000e7a0*/ s_nop           0x0
/*00000000e7a4*/ s_nop           0x0
/*00000000e7a8*/ s_nop           0x0
/*00000000e7ac*/ s_nop           0x0
/*00000000e7b0*/ s_nop           0x0
/*00000000e7b4*/ s_nop           0x0
/*00000000e7b8*/ s_nop           0x0
/*00000000e7bc*/ s_nop           0x0
/*00000000e7c0*/ s_nop           0x0
/*00000000e7c4*/ s_nop           0x0
/*00000000e7c8*/ s_nop           0x0
/*00000000e7cc*/ s_nop           0x0
/*00000000e7d0*/ s_nop           0x0
/*00000000e7d4*/ s_nop           0x0
/*00000000e7d8*/ s_nop           0x0
/*00000000e7dc*/ s_nop           0x0
/*00000000e7e0*/ s_nop           0x0
/*00000000e7e4*/ s_nop           0x0
/*00000000e7e8*/ s_nop           0x0
/*00000000e7ec*/ s_nop           0x0
/*00000000e7f0*/ s_nop           0x0
/*00000000e7f4*/ s_nop           0x0
/*00000000e7f8*/ s_nop           0x0
/*00000000e7fc*/ s_nop           0x0
mul_long_get_work_dim_x:
.skip 256
/*00000000e900*/ v_mov_b32       v1, s4
/*00000000e904*/ v_mov_b32       v2, s5
/*00000000e908*/ s_clause        0x2
/*00000000e90c*/ s_load_dword    s2, s[6:7], 0x10
/*00000000e914*/ s_load_dword    s3, s[6:7], 0x0
/*00000000e91c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000000e924*/ s_lshl_b32      s4, s8, 1
/*00000000e928*/ global_load_ushort v4, v[1:2], off inst_offset:2
/*00000000e930*/ v_mov_b32       v1, 0
/*00000000e934*/ v_mov_b32       v3, v1
/*00000000e938*/ s_waitcnt       lgkmcnt(0)
/*00000000e93c*/ v_add3_u32      v2, s2, s4, v0
/*00000000e944*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000000e94c*/ v_add_co_u32    v2, vcc, s0, v2
/*00000000e954*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000000e958*/ s_waitcnt       vmcnt(0)
/*00000000e95c*/ v_mul_lo_u32    v0, v4, s3
/*00000000e964*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000000e96c*/ s_endpgm
/*00000000e970*/ s_nop           0x0
/*00000000e974*/ s_nop           0x0
/*00000000e978*/ s_nop           0x0
/*00000000e97c*/ s_nop           0x0
/*00000000e980*/ s_nop           0x0
/*00000000e984*/ s_nop           0x0
/*00000000e988*/ s_nop           0x0
/*00000000e98c*/ s_nop           0x0
/*00000000e990*/ s_nop           0x0
/*00000000e994*/ s_nop           0x0
/*00000000e998*/ s_nop           0x0
/*00000000e99c*/ s_nop           0x0
/*00000000e9a0*/ s_nop           0x0
/*00000000e9a4*/ s_nop           0x0
/*00000000e9a8*/ s_nop           0x0
/*00000000e9ac*/ s_nop           0x0
/*00000000e9b0*/ s_nop           0x0
/*00000000e9b4*/ s_nop           0x0
/*00000000e9b8*/ s_nop           0x0
/*00000000e9bc*/ s_nop           0x0
/*00000000e9c0*/ s_nop           0x0
/*00000000e9c4*/ s_nop           0x0
/*00000000e9c8*/ s_nop           0x0
/*00000000e9cc*/ s_nop           0x0
/*00000000e9d0*/ s_nop           0x0
/*00000000e9d4*/ s_nop           0x0
/*00000000e9d8*/ s_nop           0x0
/*00000000e9dc*/ s_nop           0x0
/*00000000e9e0*/ s_nop           0x0
/*00000000e9e4*/ s_nop           0x0
/*00000000e9e8*/ s_nop           0x0
/*00000000e9ec*/ s_nop           0x0
/*00000000e9f0*/ s_nop           0x0
/*00000000e9f4*/ s_nop           0x0
/*00000000e9f8*/ s_nop           0x0
/*00000000e9fc*/ s_nop           0x0
mul_long_x_get_global_offset:
.skip 256
/*00000000eb00*/ s_clause        0x3
/*00000000eb04*/ s_load_dword    s9, s[4:5], 0x8
/*00000000eb0c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000eb14*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000eb1c*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000000eb24*/ s_lshl_b32      s6, s6, 4
/*00000000eb28*/ v_mov_b32       v4, 0
/*00000000eb2c*/ s_lshl_b32      s7, s7, 1
/*00000000eb30*/ s_lshl_b32      s8, s8, 1
/*00000000eb34*/ s_waitcnt       lgkmcnt(0)
/*00000000eb38*/ s_ashr_i32      s12, s9, 31
/*00000000eb3c*/ v_add3_u32      v3, s0, s6, v0
/*00000000eb44*/ v_add3_u32      v0, s2, s7, v1
/*00000000eb4c*/ v_mov_b32       v1, v4
/*00000000eb50*/ s_mul_i32       s7, s0, s9
/*00000000eb54*/ s_mul_hi_u32    s6, s0, s9
/*00000000eb58*/ s_mul_i32       s0, s0, s12
/*00000000eb5c*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*00000000eb64*/ s_mul_i32       s1, s1, s9
/*00000000eb68*/ s_add_i32       s0, s6, s0
/*00000000eb6c*/ v_add3_u32      v2, s10, s8, v2
/*00000000eb74*/ v_mov_b32       v3, v4
/*00000000eb78*/ s_add_i32       s0, s0, s1
/*00000000eb7c*/ s_mul_hi_u32    s8, s2, s9
/*00000000eb80*/ s_mul_i32       s1, s2, s12
/*00000000eb84*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*00000000eb8c*/ v_mov_b32       v8, s0
/*00000000eb90*/ s_add_i32       s0, s8, s1
/*00000000eb94*/ s_mul_i32       s1, s3, s9
/*00000000eb98*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000eba0*/ s_add_i32       s0, s0, s1
/*00000000eba4*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000000ebac*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000ebb0*/ v_mov_b32       v10, s0
/*00000000ebb4*/ s_mul_hi_u32    s0, s10, s9
/*00000000ebb8*/ s_mul_i32       s1, s10, s12
/*00000000ebbc*/ v_add_co_u32    v15, vcc, s4, v0
/*00000000ebc4*/ s_mul_i32       s2, s2, s9
/*00000000ebc8*/ s_add_i32       s0, s0, s1
/*00000000ebcc*/ s_mul_i32       s1, s11, s9
/*00000000ebd0*/ v_add_co_ci_u32 v16, vcc, s5, v1, vcc
/*00000000ebd4*/ v_add_co_u32    v1, vcc, s4, v2
/*00000000ebdc*/ v_mov_b32       v9, s2
/*00000000ebe0*/ s_mul_i32       s2, s10, s9
/*00000000ebe4*/ s_add_i32       s0, s0, s1
/*00000000ebe8*/ v_mov_b32       v7, s7
/*00000000ebec*/ v_mov_b32       v11, s2
/*00000000ebf0*/ v_mov_b32       v12, s0
/*00000000ebf4*/ v_add_co_ci_u32 v2, vcc, s5, v3, vcc
/*00000000ebf8*/ global_store_dwordx2 v[5:6], v[7:8], off
/*00000000ec00*/ global_store_dwordx2 v[15:16], v[9:10], off
/*00000000ec08*/ global_store_dwordx2 v[1:2], v[11:12], off
/*00000000ec10*/ s_endpgm
/*00000000ec14*/ s_nop           0x0
/*00000000ec18*/ s_nop           0x0
/*00000000ec1c*/ s_nop           0x0
/*00000000ec20*/ s_nop           0x0
/*00000000ec24*/ s_nop           0x0
/*00000000ec28*/ s_nop           0x0
/*00000000ec2c*/ s_nop           0x0
/*00000000ec30*/ s_nop           0x0
/*00000000ec34*/ s_nop           0x0
/*00000000ec38*/ s_nop           0x0
/*00000000ec3c*/ s_nop           0x0
/*00000000ec40*/ s_nop           0x0
/*00000000ec44*/ s_nop           0x0
/*00000000ec48*/ s_nop           0x0
/*00000000ec4c*/ s_nop           0x0
/*00000000ec50*/ s_nop           0x0
/*00000000ec54*/ s_nop           0x0
/*00000000ec58*/ s_nop           0x0
/*00000000ec5c*/ s_nop           0x0
/*00000000ec60*/ s_nop           0x0
/*00000000ec64*/ s_nop           0x0
/*00000000ec68*/ s_nop           0x0
/*00000000ec6c*/ s_nop           0x0
/*00000000ec70*/ s_nop           0x0
/*00000000ec74*/ s_nop           0x0
/*00000000ec78*/ s_nop           0x0
/*00000000ec7c*/ s_nop           0x0
/*00000000ec80*/ s_nop           0x0
/*00000000ec84*/ s_nop           0x0
/*00000000ec88*/ s_nop           0x0
/*00000000ec8c*/ s_nop           0x0
/*00000000ec90*/ s_nop           0x0
/*00000000ec94*/ s_nop           0x0
/*00000000ec98*/ s_nop           0x0
/*00000000ec9c*/ s_nop           0x0
/*00000000eca0*/ s_nop           0x0
/*00000000eca4*/ s_nop           0x0
/*00000000eca8*/ s_nop           0x0
/*00000000ecac*/ s_nop           0x0
/*00000000ecb0*/ s_nop           0x0
/*00000000ecb4*/ s_nop           0x0
/*00000000ecb8*/ s_nop           0x0
/*00000000ecbc*/ s_nop           0x0
/*00000000ecc0*/ s_nop           0x0
/*00000000ecc4*/ s_nop           0x0
/*00000000ecc8*/ s_nop           0x0
/*00000000eccc*/ s_nop           0x0
/*00000000ecd0*/ s_nop           0x0
/*00000000ecd4*/ s_nop           0x0
/*00000000ecd8*/ s_nop           0x0
/*00000000ecdc*/ s_nop           0x0
/*00000000ece0*/ s_nop           0x0
/*00000000ece4*/ s_nop           0x0
/*00000000ece8*/ s_nop           0x0
/*00000000ecec*/ s_nop           0x0
/*00000000ecf0*/ s_nop           0x0
/*00000000ecf4*/ s_nop           0x0
/*00000000ecf8*/ s_nop           0x0
/*00000000ecfc*/ s_nop           0x0
mul_long_get_global_offset_get_global_offset:
.skip 256
/*00000000ee00*/ s_clause        0x2
/*00000000ee04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000ee0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000ee14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000ee1c*/ s_lshl_b32      s6, s6, 1
/*00000000ee20*/ v_mov_b32       v4, 0
/*00000000ee24*/ s_lshl_b32      s7, s7, 4
/*00000000ee28*/ s_lshl_b32      s8, s8, 1
/*00000000ee2c*/ v_mov_b32       v6, v4
/*00000000ee30*/ s_waitcnt       lgkmcnt(0)
/*00000000ee34*/ v_add3_u32      v3, s0, s6, v0
/*00000000ee3c*/ v_add3_u32      v5, s2, s7, v1
/*00000000ee44*/ v_add3_u32      v0, s10, s8, v2
/*00000000ee4c*/ s_mul_i32       s1, s0, s1
/*00000000ee50*/ s_mul_hi_u32    s6, s0, s0
/*00000000ee54*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*00000000ee5c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000ee64*/ s_mul_i32       s0, s0, s0
/*00000000ee68*/ s_mul_i32       s3, s2, s3
/*00000000ee6c*/ s_mul_hi_u32    s7, s2, s2
/*00000000ee70*/ s_add_i32       s6, s6, s1
/*00000000ee74*/ v_add_co_u32    v9, vcc, s4, v1
/*00000000ee7c*/ v_mov_b32       v1, v4
/*00000000ee80*/ v_add_co_ci_u32 v10, vcc, s5, v2, vcc
/*00000000ee84*/ v_add_co_u32    v4, vcc, s4, v5
/*00000000ee8c*/ s_mul_i32       s2, s2, s2
/*00000000ee90*/ v_mov_b32       v7, s0
/*00000000ee94*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*00000000ee9c*/ s_mul_i32       s0, s10, s11
/*00000000eea0*/ s_mul_hi_u32    s1, s10, s10
/*00000000eea4*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000eea8*/ s_add_i32       s7, s7, s3
/*00000000eeac*/ v_mov_b32       v2, s2
/*00000000eeb0*/ v_add_co_u32    v13, vcc, s4, v0
/*00000000eeb8*/ s_mul_i32       s2, s10, s10
/*00000000eebc*/ s_add_i32       s1, s1, s0
/*00000000eec0*/ v_mov_b32       v8, s6
/*00000000eec4*/ v_mov_b32       v3, s7
/*00000000eec8*/ v_mov_b32       v11, s2
/*00000000eecc*/ v_mov_b32       v12, s1
/*00000000eed0*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*00000000eed4*/ global_store_dwordx2 v[9:10], v[7:8], off
/*00000000eedc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000eee4*/ global_store_dwordx2 v[13:14], v[11:12], off
/*00000000eeec*/ s_endpgm
/*00000000eef0*/ s_nop           0x0
/*00000000eef4*/ s_nop           0x0
/*00000000eef8*/ s_nop           0x0
/*00000000eefc*/ s_nop           0x0
mul_long_get_local_id_get_global_offset:
.skip 256
/*00000000f000*/ s_clause        0x2
/*00000000f004*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000f00c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000f014*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000f01c*/ v_mov_b32       v4, 0
/*00000000f020*/ s_lshl_b32      s6, s6, 3
/*00000000f024*/ s_lshl_b32      s7, s7, 2
/*00000000f028*/ s_lshl_b32      s8, s8, 1
/*00000000f02c*/ v_mov_b32       v6, v4
/*00000000f030*/ v_mov_b32       v8, v4
/*00000000f034*/ s_waitcnt       lgkmcnt(0)
/*00000000f038*/ v_add3_u32      v3, s0, s6, v0
/*00000000f040*/ v_add3_u32      v5, s2, s7, v1
/*00000000f048*/ v_mul_lo_u32    v10, s1, v0
/*00000000f050*/ v_mul_hi_u32    v11, s0, v0
/*00000000f058*/ v_add3_u32      v7, s10, s8, v2
/*00000000f060*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000000f068*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000f070*/ v_mul_lo_u32    v12, s3, v1
/*00000000f078*/ v_mul_hi_u32    v13, s2, v1
/*00000000f080*/ v_mul_lo_u32    v9, s0, v0
/*00000000f088*/ v_mul_lo_u32    v14, s11, v2
/*00000000f090*/ v_add_co_u32    v3, vcc, s4, v3
/*00000000f098*/ v_add_nc_u32    v10, v11, v10
/*00000000f09c*/ v_mul_lo_u32    v11, s2, v1
/*00000000f0a4*/ v_lshlrev_b64   v[0:1], 3, v[7:8]
/*00000000f0ac*/ v_mul_hi_u32    v15, s10, v2
/*00000000f0b4*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000000f0b8*/ v_add_co_u32    v5, vcc, s4, v5
/*00000000f0c0*/ v_mul_lo_u32    v7, s10, v2
/*00000000f0c8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*00000000f0cc*/ v_add_nc_u32    v12, v13, v12
/*00000000f0d0*/ v_add_co_u32    v13, vcc, s4, v0
/*00000000f0d8*/ v_add_nc_u32    v8, v15, v14
/*00000000f0dc*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*00000000f0e0*/ global_store_dwordx2 v[3:4], v[9:10], off
/*00000000f0e8*/ global_store_dwordx2 v[5:6], v[11:12], off
/*00000000f0f0*/ global_store_dwordx2 v[13:14], v[7:8], off
/*00000000f0f8*/ s_endpgm
/*00000000f0fc*/ s_nop           0x0
mul_long_get_group_id_get_global_offset:
.skip 256
/*00000000f200*/ s_clause        0x2
/*00000000f204*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000f20c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000f214*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000f21c*/ s_lshl_b32      s9, s6, 1
/*00000000f220*/ v_mov_b32       v4, 0
/*00000000f224*/ s_lshl_b32      s12, s7, 4
/*00000000f228*/ s_lshl_b32      s13, s8, 1
/*00000000f22c*/ v_mov_b32       v6, v4
/*00000000f230*/ s_waitcnt       lgkmcnt(0)
/*00000000f234*/ v_add3_u32      v3, s0, s9, v0
/*00000000f23c*/ v_add3_u32      v5, s2, s12, v1
/*00000000f244*/ v_add3_u32      v0, s10, s13, v2
/*00000000f24c*/ s_mul_hi_u32    s9, s0, s6
/*00000000f250*/ s_mul_i32       s1, s1, s6
/*00000000f254*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*00000000f25c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000f264*/ s_mul_i32       s0, s0, s6
/*00000000f268*/ s_mul_hi_u32    s6, s2, s7
/*00000000f26c*/ s_mul_i32       s3, s3, s7
/*00000000f270*/ s_add_i32       s9, s9, s1
/*00000000f274*/ v_add_co_u32    v9, vcc, s4, v1
/*00000000f27c*/ v_mov_b32       v1, v4
/*00000000f280*/ v_add_co_ci_u32 v10, vcc, s5, v2, vcc
/*00000000f284*/ v_add_co_u32    v4, vcc, s4, v5
/*00000000f28c*/ s_mul_i32       s2, s2, s7
/*00000000f290*/ v_mov_b32       v7, s0
/*00000000f294*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*00000000f29c*/ s_mul_i32       s0, s11, s8
/*00000000f2a0*/ s_mul_hi_u32    s1, s10, s8
/*00000000f2a4*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*00000000f2a8*/ s_add_i32       s6, s6, s3
/*00000000f2ac*/ v_mov_b32       v2, s2
/*00000000f2b0*/ v_add_co_u32    v13, vcc, s4, v0
/*00000000f2b8*/ s_mul_i32       s2, s10, s8
/*00000000f2bc*/ s_add_i32       s1, s1, s0
/*00000000f2c0*/ v_mov_b32       v8, s9
/*00000000f2c4*/ v_mov_b32       v3, s6
/*00000000f2c8*/ v_mov_b32       v11, s2
/*00000000f2cc*/ v_mov_b32       v12, s1
/*00000000f2d0*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*00000000f2d4*/ global_store_dwordx2 v[9:10], v[7:8], off
/*00000000f2dc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000000f2e4*/ global_store_dwordx2 v[13:14], v[11:12], off
/*00000000f2ec*/ s_endpgm
/*00000000f2f0*/ s_nop           0x0
/*00000000f2f4*/ s_nop           0x0
/*00000000f2f8*/ s_nop           0x0
/*00000000f2fc*/ s_nop           0x0
mul_long_get_local_size_get_global_offset:
.skip 256
/*00000000f400*/ s_clause        0x2
/*00000000f404*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000f40c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000f414*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000f41c*/ v_mov_b32       v4, 0
/*00000000f420*/ s_lshl_b32      s6, s6, 1
/*00000000f424*/ s_lshl_b32      s7, s7, 1
/*00000000f428*/ s_lshl_b32      s8, s8, 2
/*00000000f42c*/ v_mov_b32       v6, v4
/*00000000f430*/ v_mov_b32       v8, v4
/*00000000f434*/ s_waitcnt       lgkmcnt(0)
/*00000000f438*/ v_add3_u32      v3, s0, s6, v0
/*00000000f440*/ v_add3_u32      v5, s2, s7, v1
/*00000000f448*/ v_add3_u32      v7, s10, s8, v2
/*00000000f450*/ s_lshl_b64      s[0:1], s[0:1], 1
/*00000000f454*/ s_lshl_b64      s[2:3], s[2:3], 1
/*00000000f458*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000f460*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000000f468*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000000f470*/ v_mov_b32       v3, s1
/*00000000f474*/ v_mov_b32       v2, s0
/*00000000f478*/ s_lshl_b64      s[0:1], s[10:11], 2
/*00000000f47c*/ v_add_co_u32    v0, vcc, s4, v0
/*00000000f484*/ v_mov_b32       v10, s3
/*00000000f488*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000000f48c*/ v_add_co_u32    v15, vcc, s4, v4
/*00000000f494*/ v_mov_b32       v12, s1
/*00000000f498*/ v_add_co_ci_u32 v16, vcc, s5, v5, vcc
/*00000000f49c*/ v_add_co_u32    v5, vcc, s4, v6
/*00000000f4a4*/ v_mov_b32       v9, s2
/*00000000f4a8*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*00000000f4ac*/ v_mov_b32       v11, s0
/*00000000f4b0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000f4b8*/ global_store_dwordx2 v[15:16], v[9:10], off
/*00000000f4c0*/ global_store_dwordx2 v[5:6], v[11:12], off
/*00000000f4c8*/ s_endpgm
/*00000000f4cc*/ s_nop           0x0
/*00000000f4d0*/ s_nop           0x0
/*00000000f4d4*/ s_nop           0x0
/*00000000f4d8*/ s_nop           0x0
/*00000000f4dc*/ s_nop           0x0
/*00000000f4e0*/ s_nop           0x0
/*00000000f4e4*/ s_nop           0x0
/*00000000f4e8*/ s_nop           0x0
/*00000000f4ec*/ s_nop           0x0
/*00000000f4f0*/ s_nop           0x0
/*00000000f4f4*/ s_nop           0x0
/*00000000f4f8*/ s_nop           0x0
/*00000000f4fc*/ s_nop           0x0
mul_long_get_global_id_get_global_offset:
.skip 256
/*00000000f600*/ s_clause        0x2
/*00000000f604*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000000f60c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*00000000f614*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000000f61c*/ v_mov_b32       v4, 0
/*00000000f620*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000000f628*/ s_lshl_b32      s6, s7, 1
/*00000000f62c*/ s_lshl_b32      s7, s8, 2
/*00000000f630*/ v_mov_b32       v5, v4
/*00000000f634*/ v_lshlrev_b64   v[6:7], 3, v[3:4]
/*00000000f63c*/ v_mov_b32       v9, v4
/*00000000f640*/ s_waitcnt       lgkmcnt(0)
/*00000000f644*/ v_add3_u32      v4, s2, s6, v1
/*00000000f64c*/ v_add_nc_u32    v3, s0, v3
/*00000000f650*/ v_add3_u32      v8, s10, s7, v2
/*00000000f658*/ v_add_co_u32    v0, vcc, s4, v6
/*00000000f660*/ v_mul_lo_u32    v12, v4, s3
/*00000000f668*/ v_mul_hi_u32    v13, v4, s2
/*00000000f670*/ v_mul_lo_u32    v6, v4, s2
/*00000000f678*/ v_lshlrev_b64   v[4:5], 3, v[4:5]
/*00000000f680*/ v_add_co_ci_u32 v1, vcc, s5, v7, vcc
/*00000000f684*/ v_mul_lo_u32    v7, v3, s1
/*00000000f68c*/ v_mul_hi_u32    v18, v3, s0
/*00000000f694*/ v_mul_lo_u32    v14, v8, s11
/*00000000f69c*/ v_mul_hi_u32    v15, v8, s10
/*00000000f6a4*/ v_lshlrev_b64   v[9:10], 3, v[8:9]
/*00000000f6ac*/ v_add_co_u32    v4, vcc, s4, v4
/*00000000f6b4*/ v_mul_lo_u32    v2, v3, s0
/*00000000f6bc*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*00000000f6c0*/ v_mul_lo_u32    v11, v8, s10
/*00000000f6c8*/ v_add_nc_u32    v3, v18, v7
/*00000000f6cc*/ v_add_co_u32    v9, vcc, s4, v9
/*00000000f6d4*/ v_add_nc_u32    v7, v13, v12
/*00000000f6d8*/ v_add_nc_u32    v12, v15, v14
/*00000000f6dc*/ v_add_co_ci_u32 v10, vcc, s5, v10, vcc
/*00000000f6e0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*00000000f6e8*/ global_store_dwordx2 v[4:5], v[6:7], off
/*00000000f6f0*/ global_store_dwordx2 v[9:10], v[11:12], off
/*00000000f6f8*/ s_endpgm
/*00000000f6fc*/ s_nop           0x0
mul_long_get_global_size_get_global_offset:
.skip 256
/*00000000f800*/ s_clause        0x1
/*00000000f804*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000f80c*/ s_load_dwordx2  s[16:17], s[6:7], 0x20
/*00000000f814*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000f81c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000000f824*/ s_lshl_b32      s6, s8, 4
/*00000000f828*/ v_mov_b32       v4, 0
/*00000000f82c*/ s_lshl_b32      s7, s9, 1
/*00000000f830*/ s_lshl_b32      s8, s10, 1
/*00000000f834*/ v_mov_b32       v6, v4
/*00000000f838*/ s_waitcnt       lgkmcnt(0)
/*00000000f83c*/ v_add3_u32      v3, s0, s6, v0
/*00000000f844*/ v_add3_u32      v5, s2, s7, v1
/*00000000f84c*/ v_add3_u32      v0, s16, s8, v2
/*00000000f854*/ s_mul_hi_u32    s6, s0, s12
/*00000000f858*/ s_mul_i32       s1, s1, s12
/*00000000f85c*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*00000000f864*/ s_mul_i32       s0, s0, s12
/*00000000f868*/ s_mul_hi_u32    s7, s2, s13
/*00000000f86c*/ s_mul_i32       s3, s3, s13
/*00000000f870*/ s_add_i32       s6, s6, s1
/*00000000f874*/ v_mov_b32       v7, s0
/*00000000f878*/ v_add_co_u32    v9, vcc, s4, v1
/*00000000f880*/ v_mov_b32       v1, v4
/*00000000f884*/ v_add_co_ci_u32 v10, vcc, s5, v2, vcc
/*00000000f888*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000f890*/ s_mul_i32       s2, s2, s13
/*00000000f894*/ s_mul_i32       s0, s17, s14
/*00000000f898*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*00000000f8a0*/ s_mul_hi_u32    s1, s16, s14
/*00000000f8a4*/ s_add_i32       s7, s7, s3
/*00000000f8a8*/ v_add_co_u32    v15, vcc, s4, v2
/*00000000f8b0*/ v_mov_b32       v5, s2
/*00000000f8b4*/ v_add_co_ci_u32 v16, vcc, s5, v3, vcc
/*00000000f8b8*/ v_add_co_u32    v13, vcc, s4, v0
/*00000000f8c0*/ s_mul_i32       s2, s16, s14
/*00000000f8c4*/ s_add_i32       s1, s1, s0
/*00000000f8c8*/ v_mov_b32       v8, s6
/*00000000f8cc*/ v_mov_b32       v6, s7
/*00000000f8d0*/ v_mov_b32       v11, s2
/*00000000f8d4*/ v_mov_b32       v12, s1
/*00000000f8d8*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*00000000f8dc*/ global_store_dwordx2 v[9:10], v[7:8], off
/*00000000f8e4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*00000000f8ec*/ global_store_dwordx2 v[13:14], v[11:12], off
/*00000000f8f4*/ s_endpgm
/*00000000f8f8*/ s_nop           0x0
/*00000000f8fc*/ s_nop           0x0
mul_long_get_num_groups_get_global_offset:
.skip 256
/*00000000fa00*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000000fa08*/ s_clause        0x2
/*00000000fa0c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000fa14*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000000fa1c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*00000000fa24*/ s_lshl_b32      s8, s8, 1
/*00000000fa28*/ s_lshl_b32      s9, s9, 1
/*00000000fa2c*/ s_lshl_b32      s10, s10, 2
/*00000000fa30*/ v_mov_b32       v4, 0
/*00000000fa34*/ v_mov_b32       v6, v4
/*00000000fa38*/ s_waitcnt       lgkmcnt(0)
/*00000000fa3c*/ s_and_b32       s11, s12, -2
/*00000000fa40*/ v_add3_u32      v3, s0, s8, v0
/*00000000fa48*/ v_cmp_gt_u32    s[11:12], s12, s11
/*00000000fa50*/ s_lshr_b32      s8, s12, 1
/*00000000fa54*/ v_add3_u32      v5, s2, s9, v1
/*00000000fa5c*/ v_add3_u32      v0, s4, s10, v2
/*00000000fa64*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*00000000fa6c*/ s_cmpk_lg_u32   s11, 0x0
/*00000000fa70*/ s_addc_u32      s8, s8, 0
/*00000000fa74*/ s_and_b32       s9, s13, -2
/*00000000fa78*/ s_lshr_b32      s10, s13, 1
/*00000000fa7c*/ v_cmp_gt_u32    s[9:10], s13, s9
/*00000000fa84*/ s_mul_hi_u32    s11, s0, s8
/*00000000fa88*/ s_mul_i32       s0, s0, s8
/*00000000fa8c*/ s_mul_i32       s1, s1, s8
/*00000000fa90*/ v_add_co_u32    v7, vcc, s6, v1
/*00000000fa98*/ s_cmpk_lg_u32   s9, 0x0
/*00000000fa9c*/ v_mov_b32       v1, v4
/*00000000faa0*/ s_addc_u32      s8, s10, 0
/*00000000faa4*/ s_and_b32       s9, s14, -4
/*00000000faa8*/ v_mov_b32       v13, s0
/*00000000faac*/ v_cmp_gt_u32    s[0:1], s14, s9
/*00000000fab4*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000000fabc*/ s_lshr_b32      s9, s14, 2
/*00000000fac0*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*00000000fac8*/ v_add_co_ci_u32 v8, vcc, s7, v2, vcc
/*00000000facc*/ s_cmpk_lg_u32   s0, 0x0
/*00000000fad0*/ s_mul_hi_u32    s10, s2, s8
/*00000000fad4*/ s_mul_i32       s2, s2, s8
/*00000000fad8*/ s_addc_u32      s0, s9, 0
/*00000000fadc*/ v_add_co_u32    v3, vcc, s6, v5
/*00000000fae4*/ s_mul_i32       s3, s3, s8
/*00000000fae8*/ s_add_i32       s11, s11, s1
/*00000000faec*/ v_mov_b32       v9, s2
/*00000000faf0*/ s_mul_i32       s1, s5, s0
/*00000000faf4*/ s_mul_hi_u32    s2, s4, s0
/*00000000faf8*/ v_add_co_ci_u32 v4, vcc, s7, v6, vcc
/*00000000fafc*/ s_add_i32       s10, s10, s3
/*00000000fb00*/ v_add_co_u32    v5, vcc, s6, v0
/*00000000fb08*/ s_mul_i32       s0, s4, s0
/*00000000fb0c*/ s_add_i32       s2, s2, s1
/*00000000fb10*/ v_mov_b32       v14, s11
/*00000000fb14*/ v_mov_b32       v10, s10
/*00000000fb18*/ v_mov_b32       v11, s0
/*00000000fb1c*/ v_mov_b32       v12, s2
/*00000000fb20*/ v_add_co_ci_u32 v6, vcc, s7, v1, vcc
/*00000000fb24*/ global_store_dwordx2 v[7:8], v[13:14], off
/*00000000fb2c*/ global_store_dwordx2 v[3:4], v[9:10], off
/*00000000fb34*/ global_store_dwordx2 v[5:6], v[11:12], off
/*00000000fb3c*/ s_endpgm
/*00000000fb40*/ s_nop           0x0
/*00000000fb44*/ s_nop           0x0
/*00000000fb48*/ s_nop           0x0
/*00000000fb4c*/ s_nop           0x0
/*00000000fb50*/ s_nop           0x0
/*00000000fb54*/ s_nop           0x0
/*00000000fb58*/ s_nop           0x0
/*00000000fb5c*/ s_nop           0x0
/*00000000fb60*/ s_nop           0x0
/*00000000fb64*/ s_nop           0x0
/*00000000fb68*/ s_nop           0x0
/*00000000fb6c*/ s_nop           0x0
/*00000000fb70*/ s_nop           0x0
/*00000000fb74*/ s_nop           0x0
/*00000000fb78*/ s_nop           0x0
/*00000000fb7c*/ s_nop           0x0
/*00000000fb80*/ s_nop           0x0
/*00000000fb84*/ s_nop           0x0
/*00000000fb88*/ s_nop           0x0
/*00000000fb8c*/ s_nop           0x0
/*00000000fb90*/ s_nop           0x0
/*00000000fb94*/ s_nop           0x0
/*00000000fb98*/ s_nop           0x0
/*00000000fb9c*/ s_nop           0x0
/*00000000fba0*/ s_nop           0x0
/*00000000fba4*/ s_nop           0x0
/*00000000fba8*/ s_nop           0x0
/*00000000fbac*/ s_nop           0x0
/*00000000fbb0*/ s_nop           0x0
/*00000000fbb4*/ s_nop           0x0
/*00000000fbb8*/ s_nop           0x0
/*00000000fbbc*/ s_nop           0x0
/*00000000fbc0*/ s_nop           0x0
/*00000000fbc4*/ s_nop           0x0
/*00000000fbc8*/ s_nop           0x0
/*00000000fbcc*/ s_nop           0x0
/*00000000fbd0*/ s_nop           0x0
/*00000000fbd4*/ s_nop           0x0
/*00000000fbd8*/ s_nop           0x0
/*00000000fbdc*/ s_nop           0x0
/*00000000fbe0*/ s_nop           0x0
/*00000000fbe4*/ s_nop           0x0
/*00000000fbe8*/ s_nop           0x0
/*00000000fbec*/ s_nop           0x0
/*00000000fbf0*/ s_nop           0x0
/*00000000fbf4*/ s_nop           0x0
/*00000000fbf8*/ s_nop           0x0
/*00000000fbfc*/ s_nop           0x0
mul_long_get_work_dim_get_global_offset:
.skip 256
/*00000000fd00*/ v_mov_b32       v3, s4
/*00000000fd04*/ v_mov_b32       v4, s5
/*00000000fd08*/ s_clause        0x2
/*00000000fd0c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000000fd14*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000000fd1c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*00000000fd24*/ s_lshl_b32      s8, s8, 1
/*00000000fd28*/ s_lshl_b32      s9, s9, 1
/*00000000fd2c*/ s_lshl_b32      s10, s10, 2
/*00000000fd30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*00000000fd38*/ v_mov_b32       v4, 0
/*00000000fd3c*/ v_mov_b32       v6, v4
/*00000000fd40*/ v_mov_b32       v8, v4
/*00000000fd44*/ s_waitcnt       lgkmcnt(0)
/*00000000fd48*/ v_add3_u32      v3, s0, s8, v0
/*00000000fd50*/ v_add3_u32      v5, s2, s9, v1
/*00000000fd58*/ v_add3_u32      v7, s4, s10, v2
/*00000000fd60*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000000fd68*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000000fd70*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*00000000fd78*/ v_add_co_u32    v0, vcc, s6, v0
/*00000000fd80*/ v_add_co_ci_u32 v1, vcc, s7, v1, vcc
/*00000000fd84*/ v_add_co_u32    v2, vcc, s6, v2
/*00000000fd8c*/ v_add_co_ci_u32 v3, vcc, s7, v3, vcc
/*00000000fd90*/ v_add_co_u32    v4, vcc, s6, v4
/*00000000fd98*/ v_add_co_ci_u32 v5, vcc, s7, v5, vcc
/*00000000fd9c*/ s_waitcnt       vmcnt(0)
/*00000000fda0*/ v_mul_lo_u32    v7, s1, v9
/*00000000fda8*/ v_mul_hi_u32    v18, s0, v9
/*00000000fdb0*/ v_mul_lo_u32    v12, s3, v9
/*00000000fdb8*/ v_mul_hi_u32    v13, s2, v9
/*00000000fdc0*/ v_mul_lo_u32    v14, s5, v9
/*00000000fdc8*/ v_mul_hi_u32    v15, s4, v9
/*00000000fdd0*/ v_mul_lo_u32    v6, s0, v9
/*00000000fdd8*/ v_mul_lo_u32    v8, s2, v9
/*00000000fde0*/ v_mul_lo_u32    v10, s4, v9
/*00000000fde8*/ v_add_nc_u32    v7, v18, v7
/*00000000fdec*/ v_add_nc_u32    v9, v13, v12
/*00000000fdf0*/ v_add_nc_u32    v11, v15, v14
/*00000000fdf4*/ global_store_dwordx2 v[0:1], v[6:7], off
/*00000000fdfc*/ global_store_dwordx2 v[2:3], v[8:9], off
/*00000000fe04*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000000fe0c*/ s_endpgm
/*00000000fe10*/ s_nop           0x0
/*00000000fe14*/ s_nop           0x0
/*00000000fe18*/ s_nop           0x0
/*00000000fe1c*/ s_nop           0x0
/*00000000fe20*/ s_nop           0x0
/*00000000fe24*/ s_nop           0x0
/*00000000fe28*/ s_nop           0x0
/*00000000fe2c*/ s_nop           0x0
/*00000000fe30*/ s_nop           0x0
/*00000000fe34*/ s_nop           0x0
/*00000000fe38*/ s_nop           0x0
/*00000000fe3c*/ s_nop           0x0
/*00000000fe40*/ s_nop           0x0
/*00000000fe44*/ s_nop           0x0
/*00000000fe48*/ s_nop           0x0
/*00000000fe4c*/ s_nop           0x0
/*00000000fe50*/ s_nop           0x0
/*00000000fe54*/ s_nop           0x0
/*00000000fe58*/ s_nop           0x0
/*00000000fe5c*/ s_nop           0x0
/*00000000fe60*/ s_nop           0x0
/*00000000fe64*/ s_nop           0x0
/*00000000fe68*/ s_nop           0x0
/*00000000fe6c*/ s_nop           0x0
/*00000000fe70*/ s_nop           0x0
/*00000000fe74*/ s_nop           0x0
/*00000000fe78*/ s_nop           0x0
/*00000000fe7c*/ s_nop           0x0
/*00000000fe80*/ s_nop           0x0
/*00000000fe84*/ s_nop           0x0
/*00000000fe88*/ s_nop           0x0
/*00000000fe8c*/ s_nop           0x0
/*00000000fe90*/ s_nop           0x0
/*00000000fe94*/ s_nop           0x0
/*00000000fe98*/ s_nop           0x0
/*00000000fe9c*/ s_nop           0x0
/*00000000fea0*/ s_nop           0x0
/*00000000fea4*/ s_nop           0x0
/*00000000fea8*/ s_nop           0x0
/*00000000feac*/ s_nop           0x0
/*00000000feb0*/ s_nop           0x0
/*00000000feb4*/ s_nop           0x0
/*00000000feb8*/ s_nop           0x0
/*00000000febc*/ s_nop           0x0
/*00000000fec0*/ s_nop           0x0
/*00000000fec4*/ s_nop           0x0
/*00000000fec8*/ s_nop           0x0
/*00000000fecc*/ s_nop           0x0
/*00000000fed0*/ s_nop           0x0
/*00000000fed4*/ s_nop           0x0
/*00000000fed8*/ s_nop           0x0
/*00000000fedc*/ s_nop           0x0
/*00000000fee0*/ s_nop           0x0
/*00000000fee4*/ s_nop           0x0
/*00000000fee8*/ s_nop           0x0
/*00000000feec*/ s_nop           0x0
/*00000000fef0*/ s_nop           0x0
/*00000000fef4*/ s_nop           0x0
/*00000000fef8*/ s_nop           0x0
/*00000000fefc*/ s_nop           0x0
mul_long_x_get_local_id:
.skip 256
/*000000010000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010008*/ s_waitcnt       lgkmcnt(0)
/*00000001000c*/ s_clause        0x2
/*000000010010*/ s_load_dword    s1, s[4:5], 0x20
/*000000010018*/ s_load_dword    s3, s[4:5], 0x8
/*000000010020*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000010028*/ v_mov_b32       v4, 0
/*00000001002c*/ s_lshl_b32      s6, s6, 4
/*000000010030*/ s_lshl_b32      s7, s7, 1
/*000000010034*/ s_lshl_b32      s8, s8, 1
/*000000010038*/ v_mov_b32       v6, v4
/*00000001003c*/ v_mov_b32       v8, v4
/*000000010040*/ s_waitcnt       lgkmcnt(0)
/*000000010044*/ v_add3_u32      v7, s1, s8, v2
/*00000001004c*/ v_add3_u32      v3, s0, s6, v0
/*000000010054*/ v_add3_u32      v5, s2, s7, v1
/*00000001005c*/ v_mul_hi_i32    v10, s3, v0
/*000000010064*/ v_mul_lo_u32    v9, s3, v0
/*00000001006c*/ v_mul_hi_i32    v12, s3, v1
/*000000010074*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001007c*/ v_mul_lo_u32    v11, s3, v1
/*000000010084*/ v_lshlrev_b64   v[0:1], 3, v[5:6]
/*00000001008c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000010094*/ v_mul_hi_i32    v8, s3, v2
/*00000001009c*/ v_mul_lo_u32    v7, s3, v2
/*0000000100a4*/ v_add_co_u32    v3, vcc, s4, v3
/*0000000100ac*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*0000000100b0*/ v_add_co_u32    v13, vcc, s4, v0
/*0000000100b8*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*0000000100bc*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000100c4*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000100c8*/ global_store_dwordx2 v[3:4], v[9:10], off
/*0000000100d0*/ global_store_dwordx2 v[13:14], v[11:12], off
/*0000000100d8*/ global_store_dwordx2 v[5:6], v[7:8], off
/*0000000100e0*/ s_endpgm
/*0000000100e4*/ s_nop           0x0
/*0000000100e8*/ s_nop           0x0
/*0000000100ec*/ s_nop           0x0
/*0000000100f0*/ s_nop           0x0
/*0000000100f4*/ s_nop           0x0
/*0000000100f8*/ s_nop           0x0
/*0000000100fc*/ s_nop           0x0
mul_long_get_global_offset_get_local_id:
.skip 256
/*000000010200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010208*/ s_waitcnt       lgkmcnt(0)
/*00000001020c*/ s_clause        0x1
/*000000010210*/ s_load_dword    s1, s[4:5], 0x20
/*000000010218*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010220*/ v_mov_b32       v4, 0
/*000000010224*/ s_lshl_b32      s3, s6, 1
/*000000010228*/ s_lshl_b32      s6, s7, 4
/*00000001022c*/ s_lshl_b32      s7, s8, 1
/*000000010230*/ v_mov_b32       v6, v4
/*000000010234*/ v_mov_b32       v8, v4
/*000000010238*/ v_add3_u32      v3, s0, s3, v0
/*000000010240*/ v_add3_u32      v5, s2, s6, v1
/*000000010248*/ s_waitcnt       lgkmcnt(0)
/*00000001024c*/ v_add3_u32      v7, s1, s7, v2
/*000000010254*/ v_mul_hi_u32    v10, s0, v0
/*00000001025c*/ v_mul_lo_u32    v9, s0, v0
/*000000010264*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001026c*/ v_mul_hi_u32    v12, s2, v1
/*000000010274*/ v_mul_lo_u32    v11, s2, v1
/*00000001027c*/ v_lshlrev_b64   v[0:1], 3, v[5:6]
/*000000010284*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*00000001028c*/ v_mul_hi_u32    v8, s1, v2
/*000000010294*/ v_add_co_u32    v3, vcc, s4, v3
/*00000001029c*/ v_mul_lo_u32    v7, s1, v2
/*0000000102a4*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*0000000102a8*/ v_add_co_u32    v13, vcc, s4, v0
/*0000000102b0*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*0000000102b4*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000102bc*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000102c0*/ global_store_dwordx2 v[3:4], v[9:10], off
/*0000000102c8*/ global_store_dwordx2 v[13:14], v[11:12], off
/*0000000102d0*/ global_store_dwordx2 v[5:6], v[7:8], off
/*0000000102d8*/ s_endpgm
/*0000000102dc*/ s_nop           0x0
/*0000000102e0*/ s_nop           0x0
/*0000000102e4*/ s_nop           0x0
/*0000000102e8*/ s_nop           0x0
/*0000000102ec*/ s_nop           0x0
/*0000000102f0*/ s_nop           0x0
/*0000000102f4*/ s_nop           0x0
/*0000000102f8*/ s_nop           0x0
/*0000000102fc*/ s_nop           0x0
mul_long_get_local_id_get_local_id:
.skip 256
/*000000010400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010408*/ s_waitcnt       lgkmcnt(0)
/*00000001040c*/ s_clause        0x1
/*000000010410*/ s_load_dword    s1, s[4:5], 0x20
/*000000010418*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010420*/ v_mov_b32       v15, 0
/*000000010424*/ s_lshl_b32      s3, s6, 3
/*000000010428*/ v_mul_u32_u24   v14, v0, v0
/*00000001042c*/ v_mov_b32       v6, v15
/*000000010430*/ v_mov_b32       v8, v15
/*000000010434*/ v_mov_b32       v10, v15
/*000000010438*/ v_add3_u32      v5, s0, s3, v0
/*000000010440*/ s_lshl_b32      s0, s7, 2
/*000000010444*/ s_lshl_b32      s3, s8, 1
/*000000010448*/ v_add3_u32      v7, s2, s0, v1
/*000000010450*/ s_waitcnt       lgkmcnt(0)
/*000000010454*/ v_add3_u32      v9, s1, s3, v2
/*00000001045c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000010464*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000001046c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000010474*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000010478*/ v_add_co_u32    v7, vcc, s4, v7
/*000000010480*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000010484*/ global_store_dwordx2 v[4:5], v[14:15], off
/*00000001048c*/ v_mul_u32_u24   v14, v1, v1
/*000000010490*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*000000010498*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000104a0*/ v_mul_u32_u24   v14, v2, v2
/*0000000104a4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000104ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000104b0*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000104b8*/ s_endpgm
/*0000000104bc*/ s_nop           0x0
/*0000000104c0*/ s_nop           0x0
/*0000000104c4*/ s_nop           0x0
/*0000000104c8*/ s_nop           0x0
/*0000000104cc*/ s_nop           0x0
/*0000000104d0*/ s_nop           0x0
/*0000000104d4*/ s_nop           0x0
/*0000000104d8*/ s_nop           0x0
/*0000000104dc*/ s_nop           0x0
/*0000000104e0*/ s_nop           0x0
/*0000000104e4*/ s_nop           0x0
/*0000000104e8*/ s_nop           0x0
/*0000000104ec*/ s_nop           0x0
/*0000000104f0*/ s_nop           0x0
/*0000000104f4*/ s_nop           0x0
/*0000000104f8*/ s_nop           0x0
/*0000000104fc*/ s_nop           0x0
mul_long_get_group_id_get_local_id:
.skip 256
/*000000010600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010608*/ s_waitcnt       lgkmcnt(0)
/*00000001060c*/ s_clause        0x1
/*000000010610*/ s_load_dword    s1, s[4:5], 0x20
/*000000010618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010620*/ v_mov_b32       v4, 0
/*000000010624*/ s_lshl_b32      s3, s6, 1
/*000000010628*/ s_lshl_b32      s9, s7, 4
/*00000001062c*/ s_lshl_b32      s10, s8, 1
/*000000010630*/ v_mul_hi_u32    v6, v0, s6
/*000000010638*/ v_mov_b32       v8, v4
/*00000001063c*/ v_mov_b32       v10, v4
/*000000010640*/ v_mul_lo_u32    v5, v0, s6
/*000000010648*/ v_mul_hi_u32    v12, v1, s7
/*000000010650*/ v_mul_lo_u32    v11, v1, s7
/*000000010658*/ v_add3_u32      v3, s0, s3, v0
/*000000010660*/ v_add3_u32      v7, s2, s9, v1
/*000000010668*/ s_waitcnt       lgkmcnt(0)
/*00000001066c*/ v_add3_u32      v9, s1, s10, v2
/*000000010674*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001067c*/ v_lshlrev_b64   v[0:1], 3, v[7:8]
/*000000010684*/ v_lshlrev_b64   v[7:8], 3, v[9:10]
/*00000001068c*/ v_mul_hi_u32    v10, v2, s8
/*000000010694*/ v_mul_lo_u32    v9, v2, s8
/*00000001069c*/ v_add_co_u32    v3, vcc, s4, v3
/*0000000106a4*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*0000000106a8*/ v_add_co_u32    v13, vcc, s4, v0
/*0000000106b0*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*0000000106b4*/ v_add_co_u32    v7, vcc, s4, v7
/*0000000106bc*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*0000000106c0*/ global_store_dwordx2 v[3:4], v[5:6], off
/*0000000106c8*/ global_store_dwordx2 v[13:14], v[11:12], off
/*0000000106d0*/ global_store_dwordx2 v[7:8], v[9:10], off
/*0000000106d8*/ s_endpgm
/*0000000106dc*/ s_nop           0x0
/*0000000106e0*/ s_nop           0x0
/*0000000106e4*/ s_nop           0x0
/*0000000106e8*/ s_nop           0x0
/*0000000106ec*/ s_nop           0x0
/*0000000106f0*/ s_nop           0x0
/*0000000106f4*/ s_nop           0x0
/*0000000106f8*/ s_nop           0x0
/*0000000106fc*/ s_nop           0x0
mul_long_get_local_size_get_local_id:
.skip 256
/*000000010800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010808*/ s_waitcnt       lgkmcnt(0)
/*00000001080c*/ s_clause        0x1
/*000000010810*/ s_load_dword    s1, s[4:5], 0x20
/*000000010818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010820*/ v_mov_b32       v15, 0
/*000000010824*/ s_lshl_b32      s3, s6, 1
/*000000010828*/ v_lshlrev_b32   v14, 1, v0
/*00000001082c*/ v_mov_b32       v6, v15
/*000000010830*/ v_mov_b32       v8, v15
/*000000010834*/ v_mov_b32       v10, v15
/*000000010838*/ v_add3_u32      v5, s0, s3, v0
/*000000010840*/ s_lshl_b32      s0, s7, 1
/*000000010844*/ s_lshl_b32      s3, s8, 2
/*000000010848*/ v_add3_u32      v7, s2, s0, v1
/*000000010850*/ s_waitcnt       lgkmcnt(0)
/*000000010854*/ v_add3_u32      v9, s1, s3, v2
/*00000001085c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000010864*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*00000001086c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000010874*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000010878*/ v_add_co_u32    v7, vcc, s4, v7
/*000000010880*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000010884*/ global_store_dwordx2 v[4:5], v[14:15], off
/*00000001088c*/ v_lshlrev_b32   v14, 1, v1
/*000000010890*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*000000010898*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000108a0*/ v_lshlrev_b32   v14, 2, v2
/*0000000108a4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000108ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000108b0*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000108b8*/ s_endpgm
/*0000000108bc*/ s_nop           0x0
/*0000000108c0*/ s_nop           0x0
/*0000000108c4*/ s_nop           0x0
/*0000000108c8*/ s_nop           0x0
/*0000000108cc*/ s_nop           0x0
/*0000000108d0*/ s_nop           0x0
/*0000000108d4*/ s_nop           0x0
/*0000000108d8*/ s_nop           0x0
/*0000000108dc*/ s_nop           0x0
/*0000000108e0*/ s_nop           0x0
/*0000000108e4*/ s_nop           0x0
/*0000000108e8*/ s_nop           0x0
/*0000000108ec*/ s_nop           0x0
/*0000000108f0*/ s_nop           0x0
/*0000000108f4*/ s_nop           0x0
/*0000000108f8*/ s_nop           0x0
/*0000000108fc*/ s_nop           0x0
mul_long_get_global_id_get_local_id:
.skip 256
/*000000010a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000010a08*/ s_waitcnt       lgkmcnt(0)
/*000000010a0c*/ s_clause        0x1
/*000000010a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000010a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000010a20*/ v_mov_b32       v4, 0
/*000000010a24*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000010a2c*/ s_lshl_b32      s3, s7, 1
/*000000010a30*/ s_lshl_b32      s6, s8, 2
/*000000010a34*/ v_mov_b32       v5, v4
/*000000010a38*/ v_lshlrev_b64   v[6:7], 3, v[3:4]
/*000000010a40*/ v_mov_b32       v9, v4
/*000000010a44*/ v_add3_u32      v4, s2, s3, v1
/*000000010a4c*/ v_add_nc_u32    v3, s0, v3
/*000000010a50*/ s_waitcnt       lgkmcnt(0)
/*000000010a54*/ v_add3_u32      v8, s1, s6, v2
/*000000010a5c*/ v_add_co_u32    v16, vcc, s4, v6
/*000000010a64*/ v_lshlrev_b64   v[12:13], 3, v[4:5]
/*000000010a6c*/ v_mul_hi_u32    v5, v4, v1
/*000000010a74*/ v_mul_hi_u32    v11, v3, v0
/*000000010a7c*/ v_mul_lo_u32    v10, v3, v0
/*000000010a84*/ v_mul_lo_u32    v4, v4, v1
/*000000010a8c*/ v_lshlrev_b64   v[0:1], 3, v[8:9]
/*000000010a94*/ v_add_co_ci_u32 v17, vcc, s5, v7, vcc
/*000000010a98*/ v_add_co_u32    v6, vcc, s4, v12
/*000000010aa0*/ v_mul_hi_u32    v3, v8, v2
/*000000010aa8*/ v_add_co_ci_u32 v7, vcc, s5, v13, vcc
/*000000010aac*/ v_mul_lo_u32    v2, v8, v2
/*000000010ab4*/ v_add_co_u32    v0, vcc, s4, v0
/*000000010abc*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000010ac0*/ global_store_dwordx2 v[16:17], v[10:11], off
/*000000010ac8*/ global_store_dwordx2 v[6:7], v[4:5], off
/*000000010ad0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000010ad8*/ s_endpgm
/*000000010adc*/ s_nop           0x0
/*000000010ae0*/ s_nop           0x0
/*000000010ae4*/ s_nop           0x0
/*000000010ae8*/ s_nop           0x0
/*000000010aec*/ s_nop           0x0
/*000000010af0*/ s_nop           0x0
/*000000010af4*/ s_nop           0x0
/*000000010af8*/ s_nop           0x0
/*000000010afc*/ s_nop           0x0
mul_long_get_global_size_get_local_id:
.skip 256
/*000000010c00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000010c08*/ s_waitcnt       lgkmcnt(0)
/*000000010c0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000010c14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000010c1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000010c24*/ v_mov_b32       v4, 0
/*000000010c28*/ s_lshl_b32      s3, s8, 4
/*000000010c2c*/ s_lshl_b32      s6, s9, 1
/*000000010c30*/ s_lshl_b32      s7, s10, 1
/*000000010c34*/ v_mov_b32       v6, v4
/*000000010c38*/ v_mov_b32       v8, v4
/*000000010c3c*/ s_waitcnt       lgkmcnt(0)
/*000000010c40*/ v_add3_u32      v7, s1, s7, v2
/*000000010c48*/ v_add3_u32      v3, s0, s3, v0
/*000000010c50*/ v_add3_u32      v5, s2, s6, v1
/*000000010c58*/ v_mul_hi_u32    v10, s12, v0
/*000000010c60*/ v_mul_lo_u32    v9, s12, v0
/*000000010c68*/ v_mul_hi_u32    v12, s13, v1
/*000000010c70*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000010c78*/ v_mul_lo_u32    v11, s13, v1
/*000000010c80*/ v_lshlrev_b64   v[0:1], 3, v[5:6]
/*000000010c88*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000010c90*/ v_mul_hi_u32    v8, s14, v2
/*000000010c98*/ v_mul_lo_u32    v7, s14, v2
/*000000010ca0*/ v_add_co_u32    v3, vcc, s4, v3
/*000000010ca8*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000010cac*/ v_add_co_u32    v13, vcc, s4, v0
/*000000010cb4*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*000000010cb8*/ v_add_co_u32    v5, vcc, s4, v5
/*000000010cc0*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000010cc4*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000010ccc*/ global_store_dwordx2 v[13:14], v[11:12], off
/*000000010cd4*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000010cdc*/ s_endpgm
/*000000010ce0*/ s_nop           0x0
/*000000010ce4*/ s_nop           0x0
/*000000010ce8*/ s_nop           0x0
/*000000010cec*/ s_nop           0x0
/*000000010cf0*/ s_nop           0x0
/*000000010cf4*/ s_nop           0x0
/*000000010cf8*/ s_nop           0x0
/*000000010cfc*/ s_nop           0x0
mul_long_get_num_groups_get_local_id:
.skip 256
/*000000010e00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000010e08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000010e10*/ s_waitcnt       lgkmcnt(0)
/*000000010e14*/ s_clause        0x1
/*000000010e18*/ s_load_dword    s3, s[6:7], 0x20
/*000000010e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000010e28*/ s_lshl_b32      s7, s9, 1
/*000000010e2c*/ s_lshl_b32      s6, s8, 1
/*000000010e30*/ s_lshl_b32      s8, s10, 2
/*000000010e34*/ v_mov_b32       v4, 0
/*000000010e38*/ v_mov_b32       v6, v4
/*000000010e3c*/ v_mov_b32       v8, v4
/*000000010e40*/ s_and_b32       s9, s0, -2
/*000000010e44*/ s_waitcnt       lgkmcnt(0)
/*000000010e48*/ v_add3_u32      v7, s3, s8, v2
/*000000010e50*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000010e58*/ s_lshr_b32      s0, s0, 1
/*000000010e5c*/ v_add3_u32      v3, s12, s6, v0
/*000000010e64*/ v_add3_u32      v5, s14, s7, v1
/*000000010e6c*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000010e74*/ s_cmpk_lg_u32   s9, 0x0
/*000000010e78*/ s_addc_u32      s0, s0, 0
/*000000010e7c*/ s_and_b32       s3, s1, -2
/*000000010e80*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000010e88*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000010e90*/ s_lshr_b32      s1, s1, 1
/*000000010e94*/ v_mul_hi_u32    v10, s0, v0
/*000000010e9c*/ v_mul_lo_u32    v9, s0, v0
/*000000010ea4*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000010eac*/ s_cmpk_lg_u32   s3, 0x0
/*000000010eb0*/ v_add_co_u32    v3, vcc, s4, v3
/*000000010eb8*/ s_addc_u32      s0, s1, 0
/*000000010ebc*/ s_and_b32       s1, s2, -4
/*000000010ec0*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000010ec4*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000010ecc*/ s_lshr_b32      s2, s2, 2
/*000000010ed0*/ v_add_co_u32    v5, vcc, s4, v5
/*000000010ed8*/ v_mul_hi_u32    v12, s0, v1
/*000000010ee0*/ v_mul_lo_u32    v11, s0, v1
/*000000010ee8*/ s_cmpk_lg_u32   s1, 0x0
/*000000010eec*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000010ef0*/ s_addc_u32      s1, s2, 0
/*000000010ef4*/ v_add_co_u32    v14, vcc, s4, v7
/*000000010efc*/ v_mul_hi_u32    v1, s1, v2
/*000000010f04*/ v_mul_lo_u32    v0, s1, v2
/*000000010f0c*/ v_add_co_ci_u32 v15, vcc, s5, v8, vcc
/*000000010f10*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000010f18*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000010f20*/ global_store_dwordx2 v[14:15], v[0:1], off
/*000000010f28*/ s_endpgm
/*000000010f2c*/ s_nop           0x0
/*000000010f30*/ s_nop           0x0
/*000000010f34*/ s_nop           0x0
/*000000010f38*/ s_nop           0x0
/*000000010f3c*/ s_nop           0x0
/*000000010f40*/ s_nop           0x0
/*000000010f44*/ s_nop           0x0
/*000000010f48*/ s_nop           0x0
/*000000010f4c*/ s_nop           0x0
/*000000010f50*/ s_nop           0x0
/*000000010f54*/ s_nop           0x0
/*000000010f58*/ s_nop           0x0
/*000000010f5c*/ s_nop           0x0
/*000000010f60*/ s_nop           0x0
/*000000010f64*/ s_nop           0x0
/*000000010f68*/ s_nop           0x0
/*000000010f6c*/ s_nop           0x0
/*000000010f70*/ s_nop           0x0
/*000000010f74*/ s_nop           0x0
/*000000010f78*/ s_nop           0x0
/*000000010f7c*/ s_nop           0x0
/*000000010f80*/ s_nop           0x0
/*000000010f84*/ s_nop           0x0
/*000000010f88*/ s_nop           0x0
/*000000010f8c*/ s_nop           0x0
/*000000010f90*/ s_nop           0x0
/*000000010f94*/ s_nop           0x0
/*000000010f98*/ s_nop           0x0
/*000000010f9c*/ s_nop           0x0
/*000000010fa0*/ s_nop           0x0
/*000000010fa4*/ s_nop           0x0
/*000000010fa8*/ s_nop           0x0
/*000000010fac*/ s_nop           0x0
/*000000010fb0*/ s_nop           0x0
/*000000010fb4*/ s_nop           0x0
/*000000010fb8*/ s_nop           0x0
/*000000010fbc*/ s_nop           0x0
/*000000010fc0*/ s_nop           0x0
/*000000010fc4*/ s_nop           0x0
/*000000010fc8*/ s_nop           0x0
/*000000010fcc*/ s_nop           0x0
/*000000010fd0*/ s_nop           0x0
/*000000010fd4*/ s_nop           0x0
/*000000010fd8*/ s_nop           0x0
/*000000010fdc*/ s_nop           0x0
/*000000010fe0*/ s_nop           0x0
/*000000010fe4*/ s_nop           0x0
/*000000010fe8*/ s_nop           0x0
/*000000010fec*/ s_nop           0x0
/*000000010ff0*/ s_nop           0x0
/*000000010ff4*/ s_nop           0x0
/*000000010ff8*/ s_nop           0x0
/*000000010ffc*/ s_nop           0x0
mul_long_get_work_dim_get_local_id:
.skip 256
/*000000011100*/ v_mov_b32       v3, s4
/*000000011104*/ v_mov_b32       v4, s5
/*000000011108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000011110*/ s_waitcnt       lgkmcnt(0)
/*000000011114*/ s_clause        0x1
/*000000011118*/ s_load_dword    s1, s[6:7], 0x20
/*000000011120*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000011128*/ v_mov_b32       v15, 0
/*00000001112c*/ s_lshl_b32      s3, s8, 1
/*000000011130*/ global_load_ushort v11, v[3:4], off inst_offset:2
/*000000011138*/ v_mov_b32       v6, v15
/*00000001113c*/ v_mov_b32       v8, v15
/*000000011140*/ v_mov_b32       v10, v15
/*000000011144*/ v_add3_u32      v5, s0, s3, v0
/*00000001114c*/ s_lshl_b32      s0, s9, 1
/*000000011150*/ v_add3_u32      v7, s2, s0, v1
/*000000011158*/ s_lshl_b32      s0, s10, 2
/*00000001115c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000011164*/ s_waitcnt       lgkmcnt(0)
/*000000011168*/ v_add3_u32      v9, s1, s0, v2
/*000000011170*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000011178*/ v_add_co_u32    v4, vcc, s4, v5
/*000000011180*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000011184*/ v_add_co_u32    v7, vcc, s4, v7
/*00000001118c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000011190*/ s_waitcnt       vmcnt(0)
/*000000011194*/ v_mul_u32_u24   v14, v11, v0
/*000000011198*/ global_store_dwordx2 v[4:5], v[14:15], off
/*0000000111a0*/ v_mul_u32_u24   v14, v11, v1
/*0000000111a4*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*0000000111ac*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000111b4*/ v_mul_u32_u24   v14, v11, v2
/*0000000111b8*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000111c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000111c4*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000111cc*/ s_endpgm
/*0000000111d0*/ s_nop           0x0
/*0000000111d4*/ s_nop           0x0
/*0000000111d8*/ s_nop           0x0
/*0000000111dc*/ s_nop           0x0
/*0000000111e0*/ s_nop           0x0
/*0000000111e4*/ s_nop           0x0
/*0000000111e8*/ s_nop           0x0
/*0000000111ec*/ s_nop           0x0
/*0000000111f0*/ s_nop           0x0
/*0000000111f4*/ s_nop           0x0
/*0000000111f8*/ s_nop           0x0
/*0000000111fc*/ s_nop           0x0
mul_long_x_get_group_id:
.skip 256
/*000000011300*/ s_clause        0x1
/*000000011304*/ s_load_dword    s9, s[4:5], 0x8
/*00000001130c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011314*/ s_waitcnt       lgkmcnt(0)
/*000000011318*/ s_clause        0x1
/*00000001131c*/ s_load_dword    s1, s[4:5], 0x20
/*000000011324*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001132c*/ s_lshl_b32      s3, s6, 4
/*000000011330*/ v_mov_b32       v4, 0
/*000000011334*/ s_lshl_b32      s10, s7, 1
/*000000011338*/ s_lshl_b32      s11, s8, 1
/*00000001133c*/ v_mov_b32       v6, v4
/*000000011340*/ s_ashr_i32      s12, s9, 31
/*000000011344*/ v_add3_u32      v3, s0, s3, v0
/*00000001134c*/ v_add3_u32      v5, s2, s10, v1
/*000000011354*/ s_waitcnt       lgkmcnt(0)
/*000000011358*/ v_add3_u32      v0, s1, s11, v2
/*000000011360*/ s_mul_i32       s1, s9, s6
/*000000011364*/ s_mul_hi_u32    s0, s9, s6
/*000000011368*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*000000011370*/ s_mul_i32       s6, s12, s6
/*000000011374*/ v_mov_b32       v7, s1
/*000000011378*/ s_add_i32       s0, s0, s6
/*00000001137c*/ s_mul_i32       s1, s12, s7
/*000000011380*/ s_mul_hi_u32    s2, s9, s7
/*000000011384*/ v_add_co_u32    v9, vcc, s4, v1
/*00000001138c*/ v_mov_b32       v1, v4
/*000000011390*/ v_add_co_ci_u32 v10, vcc, s5, v2, vcc
/*000000011394*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000001139c*/ v_mov_b32       v8, s0
/*0000000113a0*/ s_mul_hi_u32    s0, s9, s8
/*0000000113a4*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*0000000113ac*/ s_mul_i32       s12, s12, s8
/*0000000113b0*/ s_mul_i32       s3, s9, s7
/*0000000113b4*/ v_add_co_u32    v15, vcc, s4, v2
/*0000000113bc*/ s_add_i32       s2, s2, s1
/*0000000113c0*/ v_add_co_ci_u32 v16, vcc, s5, v3, vcc
/*0000000113c4*/ v_add_co_u32    v13, vcc, s4, v0
/*0000000113cc*/ s_mul_i32       s9, s9, s8
/*0000000113d0*/ s_add_i32       s0, s0, s12
/*0000000113d4*/ v_mov_b32       v5, s3
/*0000000113d8*/ v_mov_b32       v6, s2
/*0000000113dc*/ v_mov_b32       v11, s9
/*0000000113e0*/ v_mov_b32       v12, s0
/*0000000113e4*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*0000000113e8*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000113f0*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000113f8*/ global_store_dwordx2 v[13:14], v[11:12], off
/*000000011400*/ s_endpgm
/*000000011404*/ s_nop           0x0
/*000000011408*/ s_nop           0x0
/*00000001140c*/ s_nop           0x0
/*000000011410*/ s_nop           0x0
/*000000011414*/ s_nop           0x0
/*000000011418*/ s_nop           0x0
/*00000001141c*/ s_nop           0x0
/*000000011420*/ s_nop           0x0
/*000000011424*/ s_nop           0x0
/*000000011428*/ s_nop           0x0
/*00000001142c*/ s_nop           0x0
/*000000011430*/ s_nop           0x0
/*000000011434*/ s_nop           0x0
/*000000011438*/ s_nop           0x0
/*00000001143c*/ s_nop           0x0
/*000000011440*/ s_nop           0x0
/*000000011444*/ s_nop           0x0
/*000000011448*/ s_nop           0x0
/*00000001144c*/ s_nop           0x0
/*000000011450*/ s_nop           0x0
/*000000011454*/ s_nop           0x0
/*000000011458*/ s_nop           0x0
/*00000001145c*/ s_nop           0x0
/*000000011460*/ s_nop           0x0
/*000000011464*/ s_nop           0x0
/*000000011468*/ s_nop           0x0
/*00000001146c*/ s_nop           0x0
/*000000011470*/ s_nop           0x0
/*000000011474*/ s_nop           0x0
/*000000011478*/ s_nop           0x0
/*00000001147c*/ s_nop           0x0
/*000000011480*/ s_nop           0x0
/*000000011484*/ s_nop           0x0
/*000000011488*/ s_nop           0x0
/*00000001148c*/ s_nop           0x0
/*000000011490*/ s_nop           0x0
/*000000011494*/ s_nop           0x0
/*000000011498*/ s_nop           0x0
/*00000001149c*/ s_nop           0x0
/*0000000114a0*/ s_nop           0x0
/*0000000114a4*/ s_nop           0x0
/*0000000114a8*/ s_nop           0x0
/*0000000114ac*/ s_nop           0x0
/*0000000114b0*/ s_nop           0x0
/*0000000114b4*/ s_nop           0x0
/*0000000114b8*/ s_nop           0x0
/*0000000114bc*/ s_nop           0x0
/*0000000114c0*/ s_nop           0x0
/*0000000114c4*/ s_nop           0x0
/*0000000114c8*/ s_nop           0x0
/*0000000114cc*/ s_nop           0x0
/*0000000114d0*/ s_nop           0x0
/*0000000114d4*/ s_nop           0x0
/*0000000114d8*/ s_nop           0x0
/*0000000114dc*/ s_nop           0x0
/*0000000114e0*/ s_nop           0x0
/*0000000114e4*/ s_nop           0x0
/*0000000114e8*/ s_nop           0x0
/*0000000114ec*/ s_nop           0x0
/*0000000114f0*/ s_nop           0x0
/*0000000114f4*/ s_nop           0x0
/*0000000114f8*/ s_nop           0x0
/*0000000114fc*/ s_nop           0x0
mul_long_get_global_offset_get_group_id:
.skip 256
/*000000011600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011608*/ s_waitcnt       lgkmcnt(0)
/*00000001160c*/ s_clause        0x1
/*000000011610*/ s_load_dword    s1, s[4:5], 0x20
/*000000011618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011620*/ v_mov_b32       v4, 0
/*000000011624*/ s_lshl_b32      s3, s6, 1
/*000000011628*/ s_lshl_b32      s9, s7, 4
/*00000001162c*/ s_lshl_b32      s10, s8, 1
/*000000011630*/ v_mov_b32       v6, v4
/*000000011634*/ v_mov_b32       v8, v4
/*000000011638*/ v_add3_u32      v3, s0, s3, v0
/*000000011640*/ v_add3_u32      v5, s2, s9, v1
/*000000011648*/ s_waitcnt       lgkmcnt(0)
/*00000001164c*/ v_add3_u32      v7, s1, s10, v2
/*000000011654*/ s_mul_hi_u32    s3, s0, s6
/*000000011658*/ s_mul_i32       s0, s0, s6
/*00000001165c*/ v_lshlrev_b64   v[2:3], 3, v[3:4]
/*000000011664*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001166c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000011674*/ s_mul_hi_u32    s6, s2, s7
/*000000011678*/ s_mul_i32       s2, s2, s7
/*00000001167c*/ v_mov_b32       v0, s0
/*000000011680*/ v_add_co_u32    v2, vcc, s4, v2
/*000000011688*/ s_mul_i32       s0, s1, s8
/*00000001168c*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000011690*/ v_add_co_u32    v15, vcc, s4, v4
/*000000011698*/ s_mul_hi_u32    s1, s1, s8
/*00000001169c*/ v_add_co_ci_u32 v16, vcc, s5, v5, vcc
/*0000000116a0*/ v_add_co_u32    v5, vcc, s4, v6
/*0000000116a8*/ v_mov_b32       v1, s3
/*0000000116ac*/ v_mov_b32       v9, s2
/*0000000116b0*/ v_mov_b32       v10, s6
/*0000000116b4*/ v_mov_b32       v11, s0
/*0000000116b8*/ v_mov_b32       v12, s1
/*0000000116bc*/ v_add_co_ci_u32 v6, vcc, s5, v7, vcc
/*0000000116c0*/ global_store_dwordx2 v[2:3], v[0:1], off
/*0000000116c8*/ global_store_dwordx2 v[15:16], v[9:10], off
/*0000000116d0*/ global_store_dwordx2 v[5:6], v[11:12], off
/*0000000116d8*/ s_endpgm
/*0000000116dc*/ s_nop           0x0
/*0000000116e0*/ s_nop           0x0
/*0000000116e4*/ s_nop           0x0
/*0000000116e8*/ s_nop           0x0
/*0000000116ec*/ s_nop           0x0
/*0000000116f0*/ s_nop           0x0
/*0000000116f4*/ s_nop           0x0
/*0000000116f8*/ s_nop           0x0
/*0000000116fc*/ s_nop           0x0
mul_long_get_local_id_get_group_id:
.skip 256
/*000000011800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011808*/ s_waitcnt       lgkmcnt(0)
/*00000001180c*/ s_clause        0x1
/*000000011810*/ s_load_dword    s1, s[4:5], 0x20
/*000000011818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011820*/ v_mov_b32       v4, 0
/*000000011824*/ s_lshl_b32      s3, s6, 3
/*000000011828*/ s_lshl_b32      s9, s7, 2
/*00000001182c*/ s_lshl_b32      s10, s8, 1
/*000000011830*/ v_mul_hi_u32    v6, s6, v0
/*000000011838*/ v_mov_b32       v8, v4
/*00000001183c*/ v_mov_b32       v10, v4
/*000000011840*/ v_mul_lo_u32    v5, s6, v0
/*000000011848*/ v_mul_hi_u32    v12, s7, v1
/*000000011850*/ v_mul_lo_u32    v11, s7, v1
/*000000011858*/ v_add3_u32      v3, s0, s3, v0
/*000000011860*/ v_add3_u32      v7, s2, s9, v1
/*000000011868*/ s_waitcnt       lgkmcnt(0)
/*00000001186c*/ v_add3_u32      v9, s1, s10, v2
/*000000011874*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001187c*/ v_lshlrev_b64   v[0:1], 3, v[7:8]
/*000000011884*/ v_lshlrev_b64   v[7:8], 3, v[9:10]
/*00000001188c*/ v_mul_hi_u32    v10, s8, v2
/*000000011894*/ v_mul_lo_u32    v9, s8, v2
/*00000001189c*/ v_add_co_u32    v3, vcc, s4, v3
/*0000000118a4*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*0000000118a8*/ v_add_co_u32    v13, vcc, s4, v0
/*0000000118b0*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*0000000118b4*/ v_add_co_u32    v7, vcc, s4, v7
/*0000000118bc*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*0000000118c0*/ global_store_dwordx2 v[3:4], v[5:6], off
/*0000000118c8*/ global_store_dwordx2 v[13:14], v[11:12], off
/*0000000118d0*/ global_store_dwordx2 v[7:8], v[9:10], off
/*0000000118d8*/ s_endpgm
/*0000000118dc*/ s_nop           0x0
/*0000000118e0*/ s_nop           0x0
/*0000000118e4*/ s_nop           0x0
/*0000000118e8*/ s_nop           0x0
/*0000000118ec*/ s_nop           0x0
/*0000000118f0*/ s_nop           0x0
/*0000000118f4*/ s_nop           0x0
/*0000000118f8*/ s_nop           0x0
/*0000000118fc*/ s_nop           0x0
mul_long_get_group_id_get_group_id:
.skip 256
/*000000011a00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011a08*/ s_waitcnt       lgkmcnt(0)
/*000000011a0c*/ s_clause        0x1
/*000000011a10*/ s_load_dword    s1, s[4:5], 0x20
/*000000011a18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011a20*/ v_mov_b32       v4, 0
/*000000011a24*/ s_lshl_b32      s3, s6, 1
/*000000011a28*/ s_lshl_b32      s9, s7, 4
/*000000011a2c*/ s_lshl_b32      s10, s8, 1
/*000000011a30*/ s_mul_hi_u32    s11, s6, s6
/*000000011a34*/ v_mov_b32       v8, v4
/*000000011a38*/ s_mul_i32       s6, s6, s6
/*000000011a3c*/ s_mul_hi_u32    s12, s7, s7
/*000000011a40*/ s_mul_i32       s7, s7, s7
/*000000011a44*/ v_mov_b32       v5, s6
/*000000011a48*/ v_mov_b32       v6, s11
/*000000011a4c*/ v_add3_u32      v3, s0, s3, v0
/*000000011a54*/ v_add3_u32      v7, s2, s9, v1
/*000000011a5c*/ s_mul_i32       s0, s8, s8
/*000000011a60*/ v_mov_b32       v0, s7
/*000000011a64*/ v_mov_b32       v1, s12
/*000000011a68*/ v_lshlrev_b64   v[9:10], 3, v[3:4]
/*000000011a70*/ s_waitcnt       lgkmcnt(0)
/*000000011a74*/ v_add3_u32      v3, s1, s10, v2
/*000000011a7c*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000011a84*/ s_mul_hi_u32    s1, s8, s8
/*000000011a88*/ v_mov_b32       v11, s0
/*000000011a8c*/ v_mov_b32       v12, s1
/*000000011a90*/ v_add_co_u32    v15, vcc, s4, v9
/*000000011a98*/ v_lshlrev_b64   v[2:3], 3, v[3:4]
/*000000011aa0*/ v_add_co_ci_u32 v16, vcc, s5, v10, vcc
/*000000011aa4*/ v_add_co_u32    v18, vcc, s4, v7
/*000000011aac*/ v_add_co_ci_u32 v19, vcc, s5, v8, vcc
/*000000011ab0*/ v_add_co_u32    v9, vcc, s4, v2
/*000000011ab8*/ v_add_co_ci_u32 v10, vcc, s5, v3, vcc
/*000000011abc*/ global_store_dwordx2 v[15:16], v[5:6], off
/*000000011ac4*/ global_store_dwordx2 v[18:19], v[0:1], off
/*000000011acc*/ global_store_dwordx2 v[9:10], v[11:12], off
/*000000011ad4*/ s_endpgm
/*000000011ad8*/ s_nop           0x0
/*000000011adc*/ s_nop           0x0
/*000000011ae0*/ s_nop           0x0
/*000000011ae4*/ s_nop           0x0
/*000000011ae8*/ s_nop           0x0
/*000000011aec*/ s_nop           0x0
/*000000011af0*/ s_nop           0x0
/*000000011af4*/ s_nop           0x0
/*000000011af8*/ s_nop           0x0
/*000000011afc*/ s_nop           0x0
mul_long_get_local_size_get_group_id:
.skip 256
/*000000011c00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011c08*/ s_waitcnt       lgkmcnt(0)
/*000000011c0c*/ s_clause        0x1
/*000000011c10*/ s_load_dword    s1, s[4:5], 0x20
/*000000011c18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011c20*/ v_mov_b32       v4, 0
/*000000011c24*/ s_lshl_b32      s3, s6, 1
/*000000011c28*/ s_mov_b32       s12, s7
/*000000011c2c*/ s_lshl_b32      s14, s8, 2
/*000000011c30*/ s_lshl_b32      s9, s12, 1
/*000000011c34*/ v_mov_b32       v6, v4
/*000000011c38*/ v_mov_b32       v8, v4
/*000000011c3c*/ s_mov_b32       s7, 0
/*000000011c40*/ s_mov_b32       s13, s7
/*000000011c44*/ s_lshl_b64      s[10:11], s[6:7], 1
/*000000011c48*/ v_add3_u32      v3, s0, s3, v0
/*000000011c50*/ v_add3_u32      v5, s2, s9, v1
/*000000011c58*/ s_waitcnt       lgkmcnt(0)
/*000000011c5c*/ v_add3_u32      v7, s1, s14, v2
/*000000011c64*/ s_lshl_b64      s[0:1], s[12:13], 1
/*000000011c68*/ s_mov_b32       s9, s7
/*000000011c6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000011c74*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000011c7c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000011c84*/ v_mov_b32       v9, s1
/*000000011c88*/ v_mov_b32       v2, s10
/*000000011c8c*/ v_mov_b32       v8, s0
/*000000011c90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000011c98*/ s_lshl_b64      s[0:1], s[8:9], 2
/*000000011c9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000011ca0*/ v_add_co_u32    v14, vcc, s4, v4
/*000000011ca8*/ v_mov_b32       v3, s11
/*000000011cac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000011cb0*/ v_add_co_u32    v4, vcc, s4, v6
/*000000011cb8*/ v_mov_b32       v11, s1
/*000000011cbc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000011cc0*/ v_mov_b32       v10, s0
/*000000011cc4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000011ccc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000011cd4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000011cdc*/ s_endpgm
/*000000011ce0*/ s_nop           0x0
/*000000011ce4*/ s_nop           0x0
/*000000011ce8*/ s_nop           0x0
/*000000011cec*/ s_nop           0x0
/*000000011cf0*/ s_nop           0x0
/*000000011cf4*/ s_nop           0x0
/*000000011cf8*/ s_nop           0x0
/*000000011cfc*/ s_nop           0x0
mul_long_get_global_id_get_group_id:
.skip 256
/*000000011e00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000011e08*/ s_waitcnt       lgkmcnt(0)
/*000000011e0c*/ s_clause        0x1
/*000000011e10*/ s_load_dword    s1, s[4:5], 0x20
/*000000011e18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000011e20*/ v_mov_b32       v4, 0
/*000000011e24*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000011e2c*/ s_lshl_b32      s3, s7, 1
/*000000011e30*/ s_lshl_b32      s9, s8, 2
/*000000011e34*/ v_mov_b32       v5, v4
/*000000011e38*/ v_lshlrev_b64   v[6:7], 3, v[3:4]
/*000000011e40*/ v_mov_b32       v9, v4
/*000000011e44*/ v_add3_u32      v4, s2, s3, v1
/*000000011e4c*/ s_waitcnt       lgkmcnt(0)
/*000000011e50*/ v_add3_u32      v8, s1, s9, v2
/*000000011e58*/ v_add_co_u32    v0, vcc, s4, v6
/*000000011e60*/ v_add_nc_u32    v10, s0, v3
/*000000011e64*/ v_add_co_ci_u32 v1, vcc, s5, v7, vcc
/*000000011e68*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*000000011e70*/ v_lshlrev_b64   v[12:13], 3, v[8:9]
/*000000011e78*/ v_mul_hi_u32    v11, v4, s7
/*000000011e80*/ v_mul_hi_u32    v3, v10, s6
/*000000011e88*/ v_mul_lo_u32    v2, v10, s6
/*000000011e90*/ v_mul_lo_u32    v10, v4, s7
/*000000011e98*/ v_add_co_u32    v4, vcc, s4, v5
/*000000011ea0*/ v_mul_hi_u32    v7, v8, s8
/*000000011ea8*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000011eac*/ v_mul_lo_u32    v6, v8, s8
/*000000011eb4*/ v_add_co_u32    v8, vcc, s4, v12
/*000000011ebc*/ v_add_co_ci_u32 v9, vcc, s5, v13, vcc
/*000000011ec0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000011ec8*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000011ed0*/ global_store_dwordx2 v[8:9], v[6:7], off
/*000000011ed8*/ s_endpgm
/*000000011edc*/ s_nop           0x0
/*000000011ee0*/ s_nop           0x0
/*000000011ee4*/ s_nop           0x0
/*000000011ee8*/ s_nop           0x0
/*000000011eec*/ s_nop           0x0
/*000000011ef0*/ s_nop           0x0
/*000000011ef4*/ s_nop           0x0
/*000000011ef8*/ s_nop           0x0
/*000000011efc*/ s_nop           0x0
mul_long_get_global_size_get_group_id:
.skip 256
/*000000012000*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000012008*/ s_waitcnt       lgkmcnt(0)
/*00000001200c*/ s_load_dword    s1, s[6:7], 0x20
/*000000012014*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001201c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000012024*/ v_mov_b32       v4, 0
/*000000012028*/ s_lshl_b32      s3, s8, 4
/*00000001202c*/ s_lshl_b32      s6, s9, 1
/*000000012030*/ s_lshl_b32      s7, s10, 1
/*000000012034*/ v_mov_b32       v6, v4
/*000000012038*/ v_add3_u32      v3, s0, s3, v0
/*000000012040*/ v_add3_u32      v5, s2, s6, v1
/*000000012048*/ s_waitcnt       lgkmcnt(0)
/*00000001204c*/ v_add3_u32      v0, s1, s7, v2
/*000000012054*/ v_mov_b32       v1, v4
/*000000012058*/ s_mul_hi_u32    s0, s12, s8
/*00000001205c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000012064*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000001206c*/ s_mul_i32       s1, s12, s8
/*000000012070*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000012078*/ s_mul_hi_u32    s2, s13, s9
/*00000001207c*/ s_mul_i32       s3, s13, s9
/*000000012080*/ v_add_co_u32    v7, vcc, s4, v7
/*000000012088*/ v_mov_b32       v13, s1
/*00000001208c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000012090*/ v_add_co_u32    v3, vcc, s4, v5
/*000000012098*/ v_mov_b32       v14, s0
/*00000001209c*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*0000000120a0*/ v_add_co_u32    v5, vcc, s4, v0
/*0000000120a8*/ s_mul_i32       s0, s14, s10
/*0000000120ac*/ s_mul_hi_u32    s1, s14, s10
/*0000000120b0*/ v_mov_b32       v9, s3
/*0000000120b4*/ v_mov_b32       v10, s2
/*0000000120b8*/ v_mov_b32       v11, s0
/*0000000120bc*/ v_mov_b32       v12, s1
/*0000000120c0*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*0000000120c4*/ global_store_dwordx2 v[7:8], v[13:14], off
/*0000000120cc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*0000000120d4*/ global_store_dwordx2 v[5:6], v[11:12], off
/*0000000120dc*/ s_endpgm
/*0000000120e0*/ s_nop           0x0
/*0000000120e4*/ s_nop           0x0
/*0000000120e8*/ s_nop           0x0
/*0000000120ec*/ s_nop           0x0
/*0000000120f0*/ s_nop           0x0
/*0000000120f4*/ s_nop           0x0
/*0000000120f8*/ s_nop           0x0
/*0000000120fc*/ s_nop           0x0
mul_long_get_num_groups_get_group_id:
.skip 256
/*000000012200*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000012208*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000012210*/ s_waitcnt       lgkmcnt(0)
/*000000012214*/ s_clause        0x1
/*000000012218*/ s_load_dword    s3, s[6:7], 0x20
/*000000012220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000012228*/ s_lshl_b32      s6, s8, 1
/*00000001222c*/ s_lshl_b32      s7, s9, 1
/*000000012230*/ s_lshl_b32      s11, s10, 2
/*000000012234*/ v_mov_b32       v4, 0
/*000000012238*/ v_mov_b32       v6, v4
/*00000001223c*/ v_mov_b32       v8, v4
/*000000012240*/ s_and_b32       s13, s0, -2
/*000000012244*/ v_add3_u32      v3, s12, s6, v0
/*00000001224c*/ v_cmp_gt_u32    s[6:7], s0, s13
/*000000012254*/ s_lshr_b32      s0, s0, 1
/*000000012258*/ s_waitcnt       lgkmcnt(0)
/*00000001225c*/ v_add3_u32      v7, s3, s11, v2
/*000000012264*/ v_add3_u32      v5, s14, s7, v1
/*00000001226c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012274*/ s_cmpk_lg_u32   s6, 0x0
/*000000012278*/ s_addc_u32      s0, s0, 0
/*00000001227c*/ s_and_b32       s3, s1, -2
/*000000012280*/ s_lshr_b32      s6, s1, 1
/*000000012284*/ v_cmp_gt_u32    s[1:2], s1, s3
/*00000001228c*/ s_mul_hi_u32    s3, s0, s8
/*000000012290*/ s_mul_i32       s0, s0, s8
/*000000012294*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000001229c*/ v_mov_b32       v4, s0
/*0000000122a0*/ s_cmpk_lg_u32   s1, 0x0
/*0000000122a4*/ v_add_co_u32    v14, vcc, s4, v0
/*0000000122ac*/ s_addc_u32      s0, s6, 0
/*0000000122b0*/ s_and_b32       s1, s2, -4
/*0000000122b4*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*0000000122bc*/ v_cmp_gt_u32    s[1:2], s2, s1
/*0000000122c4*/ s_lshr_b32      s2, s2, 2
/*0000000122c8*/ v_add_co_ci_u32 v15, vcc, s5, v1, vcc
/*0000000122cc*/ v_mov_b32       v5, s3
/*0000000122d0*/ s_mul_i32       s3, s0, s9
/*0000000122d4*/ s_mul_hi_u32    s0, s0, s9
/*0000000122d8*/ s_cmpk_lg_u32   s1, 0x0
/*0000000122dc*/ v_add_co_u32    v19, vcc, s4, v2
/*0000000122e4*/ v_mov_b32       v10, s0
/*0000000122e8*/ s_addc_u32      s0, s2, 0
/*0000000122ec*/ v_add_co_ci_u32 v20, vcc, s5, v3, vcc
/*0000000122f0*/ s_mul_i32       s1, s0, s10
/*0000000122f4*/ v_add_co_u32    v1, vcc, s4, v6
/*0000000122fc*/ s_mul_hi_u32    s0, s0, s10
/*000000012300*/ v_mov_b32       v9, s3
/*000000012304*/ v_mov_b32       v11, s1
/*000000012308*/ v_mov_b32       v12, s0
/*00000001230c*/ v_add_co_ci_u32 v2, vcc, s5, v7, vcc
/*000000012310*/ global_store_dwordx2 v[14:15], v[4:5], off
/*000000012318*/ global_store_dwordx2 v[19:20], v[9:10], off
/*000000012320*/ global_store_dwordx2 v[1:2], v[11:12], off
/*000000012328*/ s_endpgm
/*00000001232c*/ s_nop           0x0
/*000000012330*/ s_nop           0x0
/*000000012334*/ s_nop           0x0
/*000000012338*/ s_nop           0x0
/*00000001233c*/ s_nop           0x0
/*000000012340*/ s_nop           0x0
/*000000012344*/ s_nop           0x0
/*000000012348*/ s_nop           0x0
/*00000001234c*/ s_nop           0x0
/*000000012350*/ s_nop           0x0
/*000000012354*/ s_nop           0x0
/*000000012358*/ s_nop           0x0
/*00000001235c*/ s_nop           0x0
/*000000012360*/ s_nop           0x0
/*000000012364*/ s_nop           0x0
/*000000012368*/ s_nop           0x0
/*00000001236c*/ s_nop           0x0
/*000000012370*/ s_nop           0x0
/*000000012374*/ s_nop           0x0
/*000000012378*/ s_nop           0x0
/*00000001237c*/ s_nop           0x0
/*000000012380*/ s_nop           0x0
/*000000012384*/ s_nop           0x0
/*000000012388*/ s_nop           0x0
/*00000001238c*/ s_nop           0x0
/*000000012390*/ s_nop           0x0
/*000000012394*/ s_nop           0x0
/*000000012398*/ s_nop           0x0
/*00000001239c*/ s_nop           0x0
/*0000000123a0*/ s_nop           0x0
/*0000000123a4*/ s_nop           0x0
/*0000000123a8*/ s_nop           0x0
/*0000000123ac*/ s_nop           0x0
/*0000000123b0*/ s_nop           0x0
/*0000000123b4*/ s_nop           0x0
/*0000000123b8*/ s_nop           0x0
/*0000000123bc*/ s_nop           0x0
/*0000000123c0*/ s_nop           0x0
/*0000000123c4*/ s_nop           0x0
/*0000000123c8*/ s_nop           0x0
/*0000000123cc*/ s_nop           0x0
/*0000000123d0*/ s_nop           0x0
/*0000000123d4*/ s_nop           0x0
/*0000000123d8*/ s_nop           0x0
/*0000000123dc*/ s_nop           0x0
/*0000000123e0*/ s_nop           0x0
/*0000000123e4*/ s_nop           0x0
/*0000000123e8*/ s_nop           0x0
/*0000000123ec*/ s_nop           0x0
/*0000000123f0*/ s_nop           0x0
/*0000000123f4*/ s_nop           0x0
/*0000000123f8*/ s_nop           0x0
/*0000000123fc*/ s_nop           0x0
mul_long_get_work_dim_get_group_id:
.skip 256
/*000000012500*/ v_mov_b32       v3, s4
/*000000012504*/ v_mov_b32       v4, s5
/*000000012508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000012510*/ s_waitcnt       lgkmcnt(0)
/*000000012514*/ s_clause        0x1
/*000000012518*/ s_load_dword    s1, s[6:7], 0x20
/*000000012520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000012528*/ s_lshl_b32      s3, s8, 1
/*00000001252c*/ s_lshl_b32      s6, s9, 1
/*000000012530*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*000000012538*/ v_mov_b32       v4, 0
/*00000001253c*/ s_lshl_b32      s7, s10, 2
/*000000012540*/ v_mov_b32       v6, v4
/*000000012544*/ v_mov_b32       v8, v4
/*000000012548*/ v_add3_u32      v3, s0, s3, v0
/*000000012550*/ v_add3_u32      v5, s2, s6, v1
/*000000012558*/ s_waitcnt       lgkmcnt(0)
/*00000001255c*/ v_add3_u32      v7, s1, s7, v2
/*000000012564*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000001256c*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000012574*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*00000001257c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012584*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012588*/ v_add_co_u32    v2, vcc, s4, v2
/*000000012590*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*000000012594*/ v_add_co_u32    v4, vcc, s4, v4
/*00000001259c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000125a0*/ s_waitcnt       vmcnt(0)
/*0000000125a4*/ v_mul_hi_u32    v7, v10, s8
/*0000000125ac*/ v_mul_lo_u32    v6, v10, s8
/*0000000125b4*/ v_mul_hi_u32    v9, v10, s9
/*0000000125bc*/ v_mul_lo_u32    v8, v10, s9
/*0000000125c4*/ v_mul_hi_u32    v11, v10, s10
/*0000000125cc*/ v_mul_lo_u32    v10, v10, s10
/*0000000125d4*/ global_store_dwordx2 v[0:1], v[6:7], off
/*0000000125dc*/ global_store_dwordx2 v[2:3], v[8:9], off
/*0000000125e4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000125ec*/ s_endpgm
/*0000000125f0*/ s_nop           0x0
/*0000000125f4*/ s_nop           0x0
/*0000000125f8*/ s_nop           0x0
/*0000000125fc*/ s_nop           0x0
mul_long_x_get_local_size:
.skip 256
/*000000012700*/ s_clause        0x1
/*000000012704*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001270c*/ s_load_dword    s10, s[4:5], 0x8
/*000000012714*/ s_waitcnt       lgkmcnt(0)
/*000000012718*/ s_clause        0x1
/*00000001271c*/ s_load_dword    s1, s[4:5], 0x20
/*000000012724*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001272c*/ v_mov_b32       v4, 0
/*000000012730*/ s_lshl_b32      s3, s6, 4
/*000000012734*/ s_lshl_b32      s6, s7, 1
/*000000012738*/ s_lshl_b32      s7, s8, 1
/*00000001273c*/ v_mov_b32       v6, v4
/*000000012740*/ v_mov_b32       v8, v4
/*000000012744*/ v_add3_u32      v3, s0, s3, v0
/*00000001274c*/ v_add3_u32      v5, s2, s6, v1
/*000000012754*/ s_waitcnt       lgkmcnt(0)
/*000000012758*/ v_add3_u32      v7, s1, s7, v2
/*000000012760*/ s_ashr_i32      s11, s10, 31
/*000000012764*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000001276c*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000012774*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000001277c*/ s_lshl_b64      s[0:1], s[10:11], 4
/*000000012780*/ s_lshl_b64      s[2:3], s[10:11], 1
/*000000012784*/ v_mov_b32       v3, s1
/*000000012788*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012790*/ v_mov_b32       v9, s3
/*000000012794*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012798*/ v_add_co_u32    v10, vcc, s4, v4
/*0000000127a0*/ v_mov_b32       v2, s0
/*0000000127a4*/ v_add_co_ci_u32 v11, vcc, s5, v5, vcc
/*0000000127a8*/ v_add_co_u32    v6, vcc, s4, v6
/*0000000127b0*/ v_mov_b32       v8, s2
/*0000000127b4*/ v_add_co_ci_u32 v7, vcc, s5, v7, vcc
/*0000000127b8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000127c0*/ global_store_dwordx2 v[10:11], v[8:9], off
/*0000000127c8*/ global_store_dwordx2 v[6:7], v[8:9], off
/*0000000127d0*/ s_endpgm
/*0000000127d4*/ s_nop           0x0
/*0000000127d8*/ s_nop           0x0
/*0000000127dc*/ s_nop           0x0
/*0000000127e0*/ s_nop           0x0
/*0000000127e4*/ s_nop           0x0
/*0000000127e8*/ s_nop           0x0
/*0000000127ec*/ s_nop           0x0
/*0000000127f0*/ s_nop           0x0
/*0000000127f4*/ s_nop           0x0
/*0000000127f8*/ s_nop           0x0
/*0000000127fc*/ s_nop           0x0
mul_long_get_global_offset_get_local_size:
.skip 256
/*000000012900*/ s_clause        0x2
/*000000012904*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001290c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000012914*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001291c*/ v_mov_b32       v4, 0
/*000000012920*/ s_lshl_b32      s6, s6, 1
/*000000012924*/ s_lshl_b32      s7, s7, 4
/*000000012928*/ s_lshl_b32      s8, s8, 1
/*00000001292c*/ s_mov_b32       s13, 1
/*000000012930*/ v_mov_b32       v6, v4
/*000000012934*/ v_mov_b32       v8, v4
/*000000012938*/ s_mov_b32       s12, -2
/*00000001293c*/ s_waitcnt       lgkmcnt(0)
/*000000012940*/ v_add3_u32      v3, s0, s6, v0
/*000000012948*/ v_add3_u32      v5, s2, s7, v1
/*000000012950*/ v_add3_u32      v7, s10, s8, v2
/*000000012958*/ s_lshl_b64      s[0:1], s[0:1], 1
/*00000001295c*/ s_lshl_b64      s[2:3], s[2:3], 4
/*000000012960*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012968*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000012970*/ s_and_b64       s[0:1], s[0:1], s[12:13]
/*000000012974*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*00000001297c*/ v_mov_b32       v10, s1
/*000000012980*/ v_mov_b32       v9, s0
/*000000012984*/ v_add_co_u32    v15, vcc, s4, v0
/*00000001298c*/ s_lshl_b64      s[0:1], s[10:11], 1
/*000000012990*/ v_add_co_ci_u32 v16, vcc, s5, v1, vcc
/*000000012994*/ v_add_co_u32    v4, vcc, s4, v4
/*00000001299c*/ s_and_b64       s[0:1], s[0:1], s[12:13]
/*0000000129a0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000129a4*/ s_and_b32       s3, s3, 15
/*0000000129a8*/ v_add_co_u32    v13, vcc, s4, v6
/*0000000129b0*/ v_mov_b32       v12, s1
/*0000000129b4*/ v_mov_b32       v2, s2
/*0000000129b8*/ v_mov_b32       v3, s3
/*0000000129bc*/ v_add_co_ci_u32 v14, vcc, s5, v7, vcc
/*0000000129c0*/ v_mov_b32       v11, s0
/*0000000129c4*/ global_store_dwordx2 v[15:16], v[9:10], off
/*0000000129cc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000129d4*/ global_store_dwordx2 v[13:14], v[11:12], off
/*0000000129dc*/ s_endpgm
/*0000000129e0*/ s_nop           0x0
/*0000000129e4*/ s_nop           0x0
/*0000000129e8*/ s_nop           0x0
/*0000000129ec*/ s_nop           0x0
/*0000000129f0*/ s_nop           0x0
/*0000000129f4*/ s_nop           0x0
/*0000000129f8*/ s_nop           0x0
/*0000000129fc*/ s_nop           0x0
mul_long_get_local_id_get_local_size:
.skip 256
/*000000012b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012b08*/ s_waitcnt       lgkmcnt(0)
/*000000012b0c*/ s_clause        0x1
/*000000012b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000012b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012b20*/ v_mov_b32       v15, 0
/*000000012b24*/ s_lshl_b32      s3, s6, 3
/*000000012b28*/ v_lshlrev_b32   v14, 3, v0
/*000000012b2c*/ v_mov_b32       v6, v15
/*000000012b30*/ v_mov_b32       v8, v15
/*000000012b34*/ v_mov_b32       v10, v15
/*000000012b38*/ v_add3_u32      v5, s0, s3, v0
/*000000012b40*/ s_lshl_b32      s0, s7, 2
/*000000012b44*/ s_lshl_b32      s3, s8, 1
/*000000012b48*/ v_add3_u32      v7, s2, s0, v1
/*000000012b50*/ s_waitcnt       lgkmcnt(0)
/*000000012b54*/ v_add3_u32      v9, s1, s3, v2
/*000000012b5c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000012b64*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000012b6c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000012b74*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000012b78*/ v_add_co_u32    v7, vcc, s4, v7
/*000000012b80*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000012b84*/ global_store_dwordx2 v[4:5], v[14:15], off
/*000000012b8c*/ v_lshlrev_b32   v14, 2, v1
/*000000012b90*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*000000012b98*/ global_store_dwordx2 v[7:8], v[14:15], off
/*000000012ba0*/ v_lshlrev_b32   v14, 1, v2
/*000000012ba4*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012bac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012bb0*/ global_store_dwordx2 v[0:1], v[14:15], off
/*000000012bb8*/ s_endpgm
/*000000012bbc*/ s_nop           0x0
/*000000012bc0*/ s_nop           0x0
/*000000012bc4*/ s_nop           0x0
/*000000012bc8*/ s_nop           0x0
/*000000012bcc*/ s_nop           0x0
/*000000012bd0*/ s_nop           0x0
/*000000012bd4*/ s_nop           0x0
/*000000012bd8*/ s_nop           0x0
/*000000012bdc*/ s_nop           0x0
/*000000012be0*/ s_nop           0x0
/*000000012be4*/ s_nop           0x0
/*000000012be8*/ s_nop           0x0
/*000000012bec*/ s_nop           0x0
/*000000012bf0*/ s_nop           0x0
/*000000012bf4*/ s_nop           0x0
/*000000012bf8*/ s_nop           0x0
/*000000012bfc*/ s_nop           0x0
mul_long_get_group_id_get_local_size:
.skip 256
/*000000012d00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012d08*/ s_waitcnt       lgkmcnt(0)
/*000000012d0c*/ s_clause        0x1
/*000000012d10*/ s_load_dword    s1, s[4:5], 0x20
/*000000012d18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012d20*/ v_mov_b32       v4, 0
/*000000012d24*/ s_lshl_b32      s3, s6, 1
/*000000012d28*/ s_mov_b32       s10, s7
/*000000012d2c*/ s_lshl_b32      s13, s8, 1
/*000000012d30*/ s_lshl_b32      s12, s10, 4
/*000000012d34*/ v_mov_b32       v6, v4
/*000000012d38*/ v_mov_b32       v8, v4
/*000000012d3c*/ s_mov_b32       s7, 0
/*000000012d40*/ s_mov_b32       s11, s7
/*000000012d44*/ s_mov_b32       s9, s7
/*000000012d48*/ s_lshl_b64      s[6:7], s[6:7], 1
/*000000012d4c*/ v_add3_u32      v3, s0, s3, v0
/*000000012d54*/ v_add3_u32      v5, s2, s12, v1
/*000000012d5c*/ s_waitcnt       lgkmcnt(0)
/*000000012d60*/ v_add3_u32      v7, s1, s13, v2
/*000000012d68*/ s_lshl_b64      s[0:1], s[10:11], 4
/*000000012d6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012d74*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000012d7c*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000012d84*/ v_mov_b32       v9, s1
/*000000012d88*/ v_mov_b32       v2, s6
/*000000012d8c*/ v_mov_b32       v8, s0
/*000000012d90*/ v_add_co_u32    v0, vcc, s4, v0
/*000000012d98*/ s_lshl_b64      s[0:1], s[8:9], 1
/*000000012d9c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000012da0*/ v_add_co_u32    v14, vcc, s4, v4
/*000000012da8*/ v_mov_b32       v3, s7
/*000000012dac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000012db0*/ v_add_co_u32    v4, vcc, s4, v6
/*000000012db8*/ v_mov_b32       v11, s1
/*000000012dbc*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000012dc0*/ v_mov_b32       v10, s0
/*000000012dc4*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000012dcc*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000012dd4*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000012ddc*/ s_endpgm
/*000000012de0*/ s_nop           0x0
/*000000012de4*/ s_nop           0x0
/*000000012de8*/ s_nop           0x0
/*000000012dec*/ s_nop           0x0
/*000000012df0*/ s_nop           0x0
/*000000012df4*/ s_nop           0x0
/*000000012df8*/ s_nop           0x0
/*000000012dfc*/ s_nop           0x0
mul_long_get_local_size_get_local_size:
.skip 256
/*000000012f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000012f08*/ s_waitcnt       lgkmcnt(0)
/*000000012f0c*/ s_clause        0x1
/*000000012f10*/ s_load_dword    s3, s[4:5], 0x20
/*000000012f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000012f20*/ v_mov_b32       v4, 0
/*000000012f24*/ s_lshl_b32      s6, s6, 1
/*000000012f28*/ s_lshl_b32      s7, s7, 1
/*000000012f2c*/ s_lshl_b32      s8, s8, 2
/*000000012f30*/ s_mov_b32       s1, 0
/*000000012f34*/ v_mov_b32       v6, v4
/*000000012f38*/ v_mov_b32       v8, v4
/*000000012f3c*/ v_add3_u32      v3, s0, s6, v0
/*000000012f44*/ v_add3_u32      v5, s2, s7, v1
/*000000012f4c*/ s_waitcnt       lgkmcnt(0)
/*000000012f50*/ v_add3_u32      v7, s3, s8, v2
/*000000012f58*/ s_mov_b32       s0, 4
/*000000012f5c*/ v_mov_b32       v10, s1
/*000000012f60*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000012f68*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000012f70*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000012f78*/ v_mov_b32       v9, s0
/*000000012f7c*/ v_mov_b32       v3, 16
/*000000012f80*/ v_add_co_u32    v11, vcc, s4, v0
/*000000012f88*/ v_add_co_ci_u32 v12, vcc, s5, v1, vcc
/*000000012f8c*/ v_add_co_u32    v15, vcc, s4, v5
/*000000012f94*/ v_add_co_ci_u32 v16, vcc, s5, v6, vcc
/*000000012f98*/ v_add_co_u32    v1, vcc, s4, v7
/*000000012fa0*/ v_add_co_ci_u32 v2, vcc, s5, v8, vcc
/*000000012fa4*/ global_store_dwordx2 v[11:12], v[9:10], off
/*000000012fac*/ global_store_dwordx2 v[15:16], v[9:10], off
/*000000012fb4*/ global_store_dwordx2 v[1:2], v[3:4], off
/*000000012fbc*/ s_endpgm
/*000000012fc0*/ s_nop           0x0
/*000000012fc4*/ s_nop           0x0
/*000000012fc8*/ s_nop           0x0
/*000000012fcc*/ s_nop           0x0
/*000000012fd0*/ s_nop           0x0
/*000000012fd4*/ s_nop           0x0
/*000000012fd8*/ s_nop           0x0
/*000000012fdc*/ s_nop           0x0
/*000000012fe0*/ s_nop           0x0
/*000000012fe4*/ s_nop           0x0
/*000000012fe8*/ s_nop           0x0
/*000000012fec*/ s_nop           0x0
/*000000012ff0*/ s_nop           0x0
/*000000012ff4*/ s_nop           0x0
/*000000012ff8*/ s_nop           0x0
/*000000012ffc*/ s_nop           0x0
mul_long_get_global_id_get_local_size:
.skip 256
/*000000013100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013108*/ s_waitcnt       lgkmcnt(0)
/*00000001310c*/ s_clause        0x1
/*000000013110*/ s_load_dword    s1, s[4:5], 0x20
/*000000013118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000013120*/ v_lshl_or_b32   v3, s6, 1, v0
/*000000013128*/ v_mov_b32       v4, 0
/*00000001312c*/ s_lshl_b32      s3, s7, 1
/*000000013130*/ s_lshl_b32      s6, s8, 2
/*000000013134*/ v_lshlrev_b64   v[6:7], 3, v[3:4]
/*00000001313c*/ v_mov_b32       v5, v4
/*000000013140*/ v_add_nc_u32    v0, s0, v3
/*000000013144*/ v_mov_b32       v3, v4
/*000000013148*/ v_add3_u32      v4, s2, s3, v1
/*000000013150*/ s_waitcnt       lgkmcnt(0)
/*000000013154*/ v_add3_u32      v2, s1, s6, v2
/*00000001315c*/ v_add_co_u32    v6, vcc, s4, v6
/*000000013164*/ v_lshlrev_b64   v[0:1], 1, v[0:1]
/*00000001316c*/ v_add_co_ci_u32 v7, vcc, s5, v7, vcc
/*000000013170*/ v_lshlrev_b64   v[8:9], 3, v[4:5]
/*000000013178*/ v_lshlrev_b64   v[10:11], 2, v[2:3]
/*000000013180*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000013188*/ v_lshlrev_b64   v[4:5], 1, v[4:5]
/*000000013190*/ v_and_b32       v1, 1, v1
/*000000013194*/ v_add_co_u32    v14, vcc, s4, v8
/*00000001319c*/ v_add_co_ci_u32 v15, vcc, s5, v9, vcc
/*0000000131a0*/ v_add_co_u32    v8, vcc, s4, v2
/*0000000131a8*/ v_add_co_ci_u32 v9, vcc, s5, v3, vcc
/*0000000131ac*/ global_store_dwordx2 v[6:7], v[0:1], off
/*0000000131b4*/ global_store_dwordx2 v[14:15], v[4:5], off
/*0000000131bc*/ global_store_dwordx2 v[8:9], v[10:11], off
/*0000000131c4*/ s_endpgm
/*0000000131c8*/ s_nop           0x0
/*0000000131cc*/ s_nop           0x0
/*0000000131d0*/ s_nop           0x0
/*0000000131d4*/ s_nop           0x0
/*0000000131d8*/ s_nop           0x0
/*0000000131dc*/ s_nop           0x0
/*0000000131e0*/ s_nop           0x0
/*0000000131e4*/ s_nop           0x0
/*0000000131e8*/ s_nop           0x0
/*0000000131ec*/ s_nop           0x0
/*0000000131f0*/ s_nop           0x0
/*0000000131f4*/ s_nop           0x0
/*0000000131f8*/ s_nop           0x0
/*0000000131fc*/ s_nop           0x0
mul_long_get_global_size_get_local_size:
.skip 256
/*000000013300*/ s_clause        0x1
/*000000013304*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001330c*/ s_load_dword    s11, s[6:7], 0x20
/*000000013314*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001331c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000013324*/ v_mov_b32       v4, 0
/*000000013328*/ s_lshl_b32      s6, s8, 4
/*00000001332c*/ s_lshl_b32      s7, s9, 1
/*000000013330*/ s_lshl_b32      s8, s10, 1
/*000000013334*/ s_waitcnt       lgkmcnt(0)
/*000000013338*/ s_mov_b32       s1, 0
/*00000001333c*/ v_mov_b32       v6, v4
/*000000013340*/ v_mov_b32       v8, v4
/*000000013344*/ s_mov_b32       s3, s1
/*000000013348*/ s_mov_b32       s15, s1
/*00000001334c*/ v_add3_u32      v3, s0, s6, v0
/*000000013354*/ v_add3_u32      v5, s2, s7, v1
/*00000001335c*/ v_add3_u32      v7, s11, s8, v2
/*000000013364*/ s_mov_b32       s0, s12
/*000000013368*/ s_mov_b32       s2, s13
/*00000001336c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000013374*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*00000001337c*/ s_lshl_b64      s[0:1], s[0:1], 4
/*000000013380*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000013388*/ v_mov_b32       v3, s1
/*00000001338c*/ v_mov_b32       v2, s0
/*000000013390*/ v_add_co_u32    v0, vcc, s4, v0
/*000000013398*/ s_lshl_b64      s[0:1], s[2:3], 1
/*00000001339c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000133a0*/ v_add_co_u32    v14, vcc, s4, v4
/*0000000133a8*/ v_mov_b32       v9, s1
/*0000000133ac*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*0000000133b0*/ v_mov_b32       v8, s0
/*0000000133b4*/ s_lshl_b64      s[0:1], s[14:15], 1
/*0000000133b8*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000133c0*/ v_mov_b32       v11, s1
/*0000000133c4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000133c8*/ v_mov_b32       v10, s0
/*0000000133cc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000133d4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000133dc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000133e4*/ s_endpgm
/*0000000133e8*/ s_nop           0x0
/*0000000133ec*/ s_nop           0x0
/*0000000133f0*/ s_nop           0x0
/*0000000133f4*/ s_nop           0x0
/*0000000133f8*/ s_nop           0x0
/*0000000133fc*/ s_nop           0x0
mul_long_get_num_groups_get_local_size:
.skip 256
/*000000013500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000013508*/ s_clause        0x1
/*00000001350c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000013514*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001351c*/ s_waitcnt       lgkmcnt(0)
/*000000013520*/ s_load_dword    s3, s[6:7], 0x20
/*000000013528*/ s_lshl_b32      s8, s8, 1
/*00000001352c*/ s_lshl_b32      s11, s9, 1
/*000000013530*/ s_lshl_b32      s10, s10, 2
/*000000013534*/ v_mov_b32       v4, 0
/*000000013538*/ s_mov_b32       s7, 0
/*00000001353c*/ s_mov_b32       s9, s7
/*000000013540*/ v_mov_b32       v6, v4
/*000000013544*/ v_mov_b32       v8, v4
/*000000013548*/ s_and_b32       s6, s0, -2
/*00000001354c*/ v_add3_u32      v3, s12, s8, v0
/*000000013554*/ v_cmp_gt_u32    s[6:7], s0, s6
/*00000001355c*/ s_lshr_b32      s0, s0, 1
/*000000013560*/ v_add3_u32      v5, s14, s11, v1
/*000000013568*/ s_waitcnt       lgkmcnt(0)
/*00000001356c*/ v_add3_u32      v7, s3, s10, v2
/*000000013574*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*00000001357c*/ s_cmpk_lg_u32   s6, 0x0
/*000000013580*/ s_addc_u32      s6, s0, 0
/*000000013584*/ s_and_b32       s0, s1, -2
/*000000013588*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000013590*/ v_cmp_gt_u32    s[0:1], s1, s0
/*000000013598*/ s_lshr_b32      s1, s1, 1
/*00000001359c*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000135a4*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000135ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000135b0*/ s_cmpk_lg_u32   s0, 0x0
/*0000000135b4*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000135bc*/ s_addc_u32      s8, s1, 0
/*0000000135c0*/ s_and_b32       s0, s2, -4
/*0000000135c4*/ s_mov_b32       s1, s7
/*0000000135c8*/ v_cmp_gt_u32    s[0:1], s2, s0
/*0000000135d0*/ s_lshr_b32      s2, s2, 2
/*0000000135d4*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000135d8*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000135e0*/ s_cmpk_lg_u32   s0, 0x0
/*0000000135e4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000135e8*/ s_addc_u32      s0, s2, 0
/*0000000135ec*/ s_lshl_b64      s[2:3], s[6:7], 1
/*0000000135f0*/ s_lshl_b64      s[6:7], s[8:9], 1
/*0000000135f4*/ s_lshl_b64      s[0:1], s[0:1], 2
/*0000000135f8*/ v_mov_b32       v7, s3
/*0000000135fc*/ v_mov_b32       v9, s7
/*000000013600*/ v_mov_b32       v6, s2
/*000000013604*/ v_mov_b32       v11, s1
/*000000013608*/ v_mov_b32       v8, s6
/*00000001360c*/ v_mov_b32       v10, s0
/*000000013610*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000013618*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000013620*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000013628*/ s_endpgm
/*00000001362c*/ s_nop           0x0
/*000000013630*/ s_nop           0x0
/*000000013634*/ s_nop           0x0
/*000000013638*/ s_nop           0x0
/*00000001363c*/ s_nop           0x0
/*000000013640*/ s_nop           0x0
/*000000013644*/ s_nop           0x0
/*000000013648*/ s_nop           0x0
/*00000001364c*/ s_nop           0x0
/*000000013650*/ s_nop           0x0
/*000000013654*/ s_nop           0x0
/*000000013658*/ s_nop           0x0
/*00000001365c*/ s_nop           0x0
/*000000013660*/ s_nop           0x0
/*000000013664*/ s_nop           0x0
/*000000013668*/ s_nop           0x0
/*00000001366c*/ s_nop           0x0
/*000000013670*/ s_nop           0x0
/*000000013674*/ s_nop           0x0
/*000000013678*/ s_nop           0x0
/*00000001367c*/ s_nop           0x0
/*000000013680*/ s_nop           0x0
/*000000013684*/ s_nop           0x0
/*000000013688*/ s_nop           0x0
/*00000001368c*/ s_nop           0x0
/*000000013690*/ s_nop           0x0
/*000000013694*/ s_nop           0x0
/*000000013698*/ s_nop           0x0
/*00000001369c*/ s_nop           0x0
/*0000000136a0*/ s_nop           0x0
/*0000000136a4*/ s_nop           0x0
/*0000000136a8*/ s_nop           0x0
/*0000000136ac*/ s_nop           0x0
/*0000000136b0*/ s_nop           0x0
/*0000000136b4*/ s_nop           0x0
/*0000000136b8*/ s_nop           0x0
/*0000000136bc*/ s_nop           0x0
/*0000000136c0*/ s_nop           0x0
/*0000000136c4*/ s_nop           0x0
/*0000000136c8*/ s_nop           0x0
/*0000000136cc*/ s_nop           0x0
/*0000000136d0*/ s_nop           0x0
/*0000000136d4*/ s_nop           0x0
/*0000000136d8*/ s_nop           0x0
/*0000000136dc*/ s_nop           0x0
/*0000000136e0*/ s_nop           0x0
/*0000000136e4*/ s_nop           0x0
/*0000000136e8*/ s_nop           0x0
/*0000000136ec*/ s_nop           0x0
/*0000000136f0*/ s_nop           0x0
/*0000000136f4*/ s_nop           0x0
/*0000000136f8*/ s_nop           0x0
/*0000000136fc*/ s_nop           0x0
mul_long_get_work_dim_get_local_size:
.skip 256
/*000000013800*/ v_mov_b32       v3, s4
/*000000013804*/ v_mov_b32       v4, s5
/*000000013808*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000013810*/ s_waitcnt       lgkmcnt(0)
/*000000013814*/ s_clause        0x1
/*000000013818*/ s_load_dword    s1, s[6:7], 0x20
/*000000013820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000013828*/ s_lshl_b32      s3, s8, 1
/*00000001382c*/ s_lshl_b32      s6, s9, 1
/*000000013830*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*000000013838*/ v_mov_b32       v3, 0
/*00000001383c*/ s_lshl_b32      s7, s10, 2
/*000000013840*/ v_mov_b32       v5, v3
/*000000013844*/ v_mov_b32       v7, v3
/*000000013848*/ v_mov_b32       v9, v3
/*00000001384c*/ v_add3_u32      v4, s0, s3, v0
/*000000013854*/ v_add3_u32      v6, s2, s6, v1
/*00000001385c*/ s_waitcnt       lgkmcnt(0)
/*000000013860*/ v_add3_u32      v8, s1, s7, v2
/*000000013868*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000013870*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000013878*/ v_lshlrev_b64   v[6:7], 3, v[8:9]
/*000000013880*/ v_add_co_u32    v14, vcc, s4, v0
/*000000013888*/ v_add_co_ci_u32 v15, vcc, s5, v1, vcc
/*00000001388c*/ s_waitcnt       vmcnt(0)
/*000000013890*/ v_and_b32       v2, 0xffff, v10
/*000000013898*/ v_add_co_u32    v10, vcc, s4, v4
/*0000000138a0*/ v_add_co_ci_u32 v11, vcc, s5, v5, vcc
/*0000000138a4*/ v_add_co_u32    v0, vcc, s4, v6
/*0000000138ac*/ v_lshlrev_b64   v[8:9], 1, v[2:3]
/*0000000138b4*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*0000000138bc*/ v_add_co_ci_u32 v1, vcc, s5, v7, vcc
/*0000000138c0*/ global_store_dwordx2 v[14:15], v[8:9], off
/*0000000138c8*/ global_store_dwordx2 v[10:11], v[8:9], off
/*0000000138d0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000138d8*/ s_endpgm
/*0000000138dc*/ s_nop           0x0
/*0000000138e0*/ s_nop           0x0
/*0000000138e4*/ s_nop           0x0
/*0000000138e8*/ s_nop           0x0
/*0000000138ec*/ s_nop           0x0
/*0000000138f0*/ s_nop           0x0
/*0000000138f4*/ s_nop           0x0
/*0000000138f8*/ s_nop           0x0
/*0000000138fc*/ s_nop           0x0
mul_long_x_get_global_id:
.skip 256
/*000000013a00*/ s_clause        0x3
/*000000013a04*/ s_load_dword    s9, s[4:5], 0x8
/*000000013a0c*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013a14*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013a1c*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000013a24*/ v_lshl_or_b32   v0, s6, 4, v0
/*000000013a2c*/ v_lshl_or_b32   v4, s8, 1, v2
/*000000013a34*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000013a3c*/ v_mov_b32       v3, 0
/*000000013a40*/ s_waitcnt       lgkmcnt(0)
/*000000013a44*/ s_ashr_i32      s6, s9, 31
/*000000013a48*/ v_add_co_u32    v2, s[0:1], s0, v0
/*000000013a50*/ v_add_co_ci_u32 v5, s[0:1], s1, 0, s[0:1]
/*000000013a58*/ v_add_co_u32    v0, s[0:1], s2, v1
/*000000013a60*/ v_mul_lo_u32    v7, v2, s6
/*000000013a68*/ v_mul_hi_u32    v10, v2, s9
/*000000013a70*/ v_mul_lo_u32    v5, v5, s9
/*000000013a78*/ v_add_co_ci_u32 v1, s[0:1], s3, 0, s[0:1]
/*000000013a80*/ v_mul_lo_u32    v13, v0, s6
/*000000013a88*/ v_add_co_u32    v4, s[0:1], s10, v4
/*000000013a90*/ v_lshlrev_b64   v[8:9], 3, v[2:3]
/*000000013a98*/ v_add_co_ci_u32 v11, s[0:1], s11, 0, s[0:1]
/*000000013aa0*/ v_mul_lo_u32    v12, v1, s9
/*000000013aa8*/ v_mov_b32       v1, v3
/*000000013aac*/ v_add3_u32      v7, v10, v7, v5
/*000000013ab4*/ v_mul_hi_u32    v10, v0, s9
/*000000013abc*/ v_mov_b32       v5, v3
/*000000013ac0*/ v_mul_lo_u32    v6, v2, s9
/*000000013ac8*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013ad0*/ v_add_co_u32    v8, vcc, s4, v8
/*000000013ad8*/ v_mul_lo_u32    v14, v11, s9
/*000000013ae0*/ v_mul_lo_u32    v3, v4, s6
/*000000013ae8*/ v_mul_hi_u32    v17, v4, s9
/*000000013af0*/ v_add3_u32      v11, v10, v13, v12
/*000000013af8*/ v_lshlrev_b64   v[12:13], 3, v[4:5]
/*000000013b00*/ v_add_co_ci_u32 v9, vcc, s5, v9, vcc
/*000000013b04*/ v_mul_lo_u32    v10, v0, s9
/*000000013b0c*/ v_add_co_u32    v0, vcc, s4, v1
/*000000013b14*/ v_add_co_ci_u32 v1, vcc, s5, v2, vcc
/*000000013b18*/ v_mul_lo_u32    v2, v4, s9
/*000000013b20*/ v_add_co_u32    v4, vcc, s4, v12
/*000000013b28*/ v_add3_u32      v3, v17, v3, v14
/*000000013b30*/ v_add_co_ci_u32 v5, vcc, s5, v13, vcc
/*000000013b34*/ global_store_dwordx2 v[8:9], v[6:7], off
/*000000013b3c*/ global_store_dwordx2 v[0:1], v[10:11], off
/*000000013b44*/ global_store_dwordx2 v[4:5], v[2:3], off
/*000000013b4c*/ s_endpgm
/*000000013b50*/ s_nop           0x0
/*000000013b54*/ s_nop           0x0
/*000000013b58*/ s_nop           0x0
/*000000013b5c*/ s_nop           0x0
/*000000013b60*/ s_nop           0x0
/*000000013b64*/ s_nop           0x0
/*000000013b68*/ s_nop           0x0
/*000000013b6c*/ s_nop           0x0
/*000000013b70*/ s_nop           0x0
/*000000013b74*/ s_nop           0x0
/*000000013b78*/ s_nop           0x0
/*000000013b7c*/ s_nop           0x0
/*000000013b80*/ s_nop           0x0
/*000000013b84*/ s_nop           0x0
/*000000013b88*/ s_nop           0x0
/*000000013b8c*/ s_nop           0x0
/*000000013b90*/ s_nop           0x0
/*000000013b94*/ s_nop           0x0
/*000000013b98*/ s_nop           0x0
/*000000013b9c*/ s_nop           0x0
/*000000013ba0*/ s_nop           0x0
/*000000013ba4*/ s_nop           0x0
/*000000013ba8*/ s_nop           0x0
/*000000013bac*/ s_nop           0x0
/*000000013bb0*/ s_nop           0x0
/*000000013bb4*/ s_nop           0x0
/*000000013bb8*/ s_nop           0x0
/*000000013bbc*/ s_nop           0x0
/*000000013bc0*/ s_nop           0x0
/*000000013bc4*/ s_nop           0x0
/*000000013bc8*/ s_nop           0x0
/*000000013bcc*/ s_nop           0x0
/*000000013bd0*/ s_nop           0x0
/*000000013bd4*/ s_nop           0x0
/*000000013bd8*/ s_nop           0x0
/*000000013bdc*/ s_nop           0x0
/*000000013be0*/ s_nop           0x0
/*000000013be4*/ s_nop           0x0
/*000000013be8*/ s_nop           0x0
/*000000013bec*/ s_nop           0x0
/*000000013bf0*/ s_nop           0x0
/*000000013bf4*/ s_nop           0x0
/*000000013bf8*/ s_nop           0x0
/*000000013bfc*/ s_nop           0x0
mul_long_get_global_offset_get_global_id:
.skip 256
/*000000013d00*/ s_clause        0x2
/*000000013d04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000013d0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000013d14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000013d1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000013d24*/ v_lshl_or_b32   v5, s8, 1, v2
/*000000013d2c*/ v_lshl_or_b32   v4, s7, 4, v1
/*000000013d34*/ v_mov_b32       v3, 0
/*000000013d38*/ v_mov_b32       v1, v3
/*000000013d3c*/ s_waitcnt       lgkmcnt(0)
/*000000013d40*/ v_add_co_u32    v2, s[6:7], s0, v0
/*000000013d48*/ v_add_co_ci_u32 v6, s[1:2], s1, 0, s[6:7]
/*000000013d50*/ v_add_co_u32    v0, s[1:2], s2, v4
/*000000013d58*/ v_mul_hi_u32    v10, s0, v2
/*000000013d60*/ v_add_co_ci_u32 v8, s[1:2], s3, 0, s[1:2]
/*000000013d68*/ v_mul_lo_u32    v9, s0, v6
/*000000013d70*/ v_add_co_u32    v4, s[1:2], s10, v5
/*000000013d78*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000013d80*/ v_add_co_ci_u32 v11, s[1:2], s11, 0, s[1:2]
/*000000013d88*/ v_mul_lo_u32    v12, s2, v8
/*000000013d90*/ v_mul_lo_u32    v7, s0, v2
/*000000013d98*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000013da0*/ v_mul_hi_u32    v13, s2, v0
/*000000013da8*/ v_add_nc_u32    v8, v10, v9
/*000000013dac*/ v_add_co_u32    v9, vcc, s4, v5
/*000000013db4*/ v_mov_b32       v5, v3
/*000000013db8*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000013dbc*/ v_mul_lo_u32    v3, s10, v11
/*000000013dc4*/ v_mul_hi_u32    v14, s10, v4
/*000000013dcc*/ v_add_co_u32    v17, vcc, s4, v1
/*000000013dd4*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*000000013ddc*/ v_mul_lo_u32    v11, s2, v0
/*000000013de4*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*000000013de8*/ v_mul_lo_u32    v2, s10, v4
/*000000013df0*/ v_add_nc_u32    v12, v13, v12
/*000000013df4*/ v_add_co_u32    v4, vcc, s4, v5
/*000000013dfc*/ v_add_nc_u32    v3, v14, v3
/*000000013e00*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000013e04*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000013e0c*/ global_store_dwordx2 v[17:18], v[11:12], off
/*000000013e14*/ global_store_dwordx2 v[4:5], v[2:3], off
/*000000013e1c*/ s_endpgm
/*000000013e20*/ s_nop           0x0
/*000000013e24*/ s_nop           0x0
/*000000013e28*/ s_nop           0x0
/*000000013e2c*/ s_nop           0x0
/*000000013e30*/ s_nop           0x0
/*000000013e34*/ s_nop           0x0
/*000000013e38*/ s_nop           0x0
/*000000013e3c*/ s_nop           0x0
/*000000013e40*/ s_nop           0x0
/*000000013e44*/ s_nop           0x0
/*000000013e48*/ s_nop           0x0
/*000000013e4c*/ s_nop           0x0
/*000000013e50*/ s_nop           0x0
/*000000013e54*/ s_nop           0x0
/*000000013e58*/ s_nop           0x0
/*000000013e5c*/ s_nop           0x0
/*000000013e60*/ s_nop           0x0
/*000000013e64*/ s_nop           0x0
/*000000013e68*/ s_nop           0x0
/*000000013e6c*/ s_nop           0x0
/*000000013e70*/ s_nop           0x0
/*000000013e74*/ s_nop           0x0
/*000000013e78*/ s_nop           0x0
/*000000013e7c*/ s_nop           0x0
/*000000013e80*/ s_nop           0x0
/*000000013e84*/ s_nop           0x0
/*000000013e88*/ s_nop           0x0
/*000000013e8c*/ s_nop           0x0
/*000000013e90*/ s_nop           0x0
/*000000013e94*/ s_nop           0x0
/*000000013e98*/ s_nop           0x0
/*000000013e9c*/ s_nop           0x0
/*000000013ea0*/ s_nop           0x0
/*000000013ea4*/ s_nop           0x0
/*000000013ea8*/ s_nop           0x0
/*000000013eac*/ s_nop           0x0
/*000000013eb0*/ s_nop           0x0
/*000000013eb4*/ s_nop           0x0
/*000000013eb8*/ s_nop           0x0
/*000000013ebc*/ s_nop           0x0
/*000000013ec0*/ s_nop           0x0
/*000000013ec4*/ s_nop           0x0
/*000000013ec8*/ s_nop           0x0
/*000000013ecc*/ s_nop           0x0
/*000000013ed0*/ s_nop           0x0
/*000000013ed4*/ s_nop           0x0
/*000000013ed8*/ s_nop           0x0
/*000000013edc*/ s_nop           0x0
/*000000013ee0*/ s_nop           0x0
/*000000013ee4*/ s_nop           0x0
/*000000013ee8*/ s_nop           0x0
/*000000013eec*/ s_nop           0x0
/*000000013ef0*/ s_nop           0x0
/*000000013ef4*/ s_nop           0x0
/*000000013ef8*/ s_nop           0x0
/*000000013efc*/ s_nop           0x0
mul_long_get_local_id_get_global_id:
.skip 256
/*000000014000*/ s_clause        0x1
/*000000014004*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001400c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000014014*/ v_lshl_or_b32   v3, s6, 3, v0
/*00000001401c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000014024*/ v_lshl_or_b32   v5, s7, 2, v1
/*00000001402c*/ v_mov_b32       v4, 0
/*000000014030*/ v_lshl_or_b32   v7, s8, 1, v2
/*000000014038*/ v_mov_b32       v20, v4
/*00000001403c*/ s_waitcnt       lgkmcnt(0)
/*000000014040*/ v_add_co_u32    v3, s[0:1], s0, v3
/*000000014048*/ v_add_co_ci_u32 v15, s[0:1], s1, 0, s[0:1]
/*000000014050*/ v_add_co_u32    v19, s[0:1], s2, v5
/*000000014058*/ v_add_co_ci_u32 v11, s[0:1], s3, 0, s[0:1]
/*000000014060*/ v_mul_hi_u32    v13, v3, v0
/*000000014068*/ v_mul_lo_u32    v12, v15, v0
/*000000014070*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000014078*/ v_mul_lo_u32    v10, v3, v0
/*000000014080*/ v_mul_lo_u32    v0, v11, v1
/*000000014088*/ v_mul_hi_u32    v3, v19, v1
/*000000014090*/ v_add_co_u32    v7, s[0:1], s10, v7
/*000000014098*/ v_lshlrev_b64   v[14:15], 3, v[19:20]
/*0000000140a0*/ v_add_co_ci_u32 v16, s[0:1], s11, 0, s[0:1]
/*0000000140a8*/ v_add_nc_u32    v11, v13, v12
/*0000000140ac*/ v_add_co_u32    v12, vcc, s4, v8
/*0000000140b4*/ v_mov_b32       v8, v4
/*0000000140b8*/ v_add_co_ci_u32 v13, vcc, s5, v9, vcc
/*0000000140bc*/ v_mul_lo_u32    v9, v16, v2
/*0000000140c4*/ v_add_nc_u32    v4, v3, v0
/*0000000140c8*/ v_mul_lo_u32    v3, v19, v1
/*0000000140d0*/ v_mul_hi_u32    v16, v7, v2
/*0000000140d8*/ v_lshlrev_b64   v[0:1], 3, v[7:8]
/*0000000140e0*/ v_add_co_u32    v5, vcc, s4, v14
/*0000000140e8*/ v_mul_lo_u32    v7, v7, v2
/*0000000140f0*/ v_add_co_ci_u32 v6, vcc, s5, v15, vcc
/*0000000140f4*/ v_add_co_u32    v17, vcc, s4, v0
/*0000000140fc*/ v_add_nc_u32    v8, v16, v9
/*000000014100*/ v_add_co_ci_u32 v18, vcc, s5, v1, vcc
/*000000014104*/ global_store_dwordx2 v[12:13], v[10:11], off
/*00000001410c*/ global_store_dwordx2 v[5:6], v[3:4], off
/*000000014114*/ global_store_dwordx2 v[17:18], v[7:8], off
/*00000001411c*/ s_endpgm
/*000000014120*/ s_nop           0x0
/*000000014124*/ s_nop           0x0
/*000000014128*/ s_nop           0x0
/*00000001412c*/ s_nop           0x0
/*000000014130*/ s_nop           0x0
/*000000014134*/ s_nop           0x0
/*000000014138*/ s_nop           0x0
/*00000001413c*/ s_nop           0x0
/*000000014140*/ s_nop           0x0
/*000000014144*/ s_nop           0x0
/*000000014148*/ s_nop           0x0
/*00000001414c*/ s_nop           0x0
/*000000014150*/ s_nop           0x0
/*000000014154*/ s_nop           0x0
/*000000014158*/ s_nop           0x0
/*00000001415c*/ s_nop           0x0
/*000000014160*/ s_nop           0x0
/*000000014164*/ s_nop           0x0
/*000000014168*/ s_nop           0x0
/*00000001416c*/ s_nop           0x0
/*000000014170*/ s_nop           0x0
/*000000014174*/ s_nop           0x0
/*000000014178*/ s_nop           0x0
/*00000001417c*/ s_nop           0x0
/*000000014180*/ s_nop           0x0
/*000000014184*/ s_nop           0x0
/*000000014188*/ s_nop           0x0
/*00000001418c*/ s_nop           0x0
/*000000014190*/ s_nop           0x0
/*000000014194*/ s_nop           0x0
/*000000014198*/ s_nop           0x0
/*00000001419c*/ s_nop           0x0
/*0000000141a0*/ s_nop           0x0
/*0000000141a4*/ s_nop           0x0
/*0000000141a8*/ s_nop           0x0
/*0000000141ac*/ s_nop           0x0
/*0000000141b0*/ s_nop           0x0
/*0000000141b4*/ s_nop           0x0
/*0000000141b8*/ s_nop           0x0
/*0000000141bc*/ s_nop           0x0
/*0000000141c0*/ s_nop           0x0
/*0000000141c4*/ s_nop           0x0
/*0000000141c8*/ s_nop           0x0
/*0000000141cc*/ s_nop           0x0
/*0000000141d0*/ s_nop           0x0
/*0000000141d4*/ s_nop           0x0
/*0000000141d8*/ s_nop           0x0
/*0000000141dc*/ s_nop           0x0
/*0000000141e0*/ s_nop           0x0
/*0000000141e4*/ s_nop           0x0
/*0000000141e8*/ s_nop           0x0
/*0000000141ec*/ s_nop           0x0
/*0000000141f0*/ s_nop           0x0
/*0000000141f4*/ s_nop           0x0
/*0000000141f8*/ s_nop           0x0
/*0000000141fc*/ s_nop           0x0
mul_long_get_group_id_get_global_id:
.skip 256
/*000000014300*/ s_clause        0x2
/*000000014304*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001430c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000014314*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001431c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000014324*/ v_lshl_or_b32   v5, s8, 1, v2
/*00000001432c*/ v_lshl_or_b32   v4, s7, 4, v1
/*000000014334*/ v_mov_b32       v3, 0
/*000000014338*/ v_mov_b32       v1, v3
/*00000001433c*/ s_waitcnt       lgkmcnt(0)
/*000000014340*/ v_add_co_u32    v2, s[0:1], s0, v0
/*000000014348*/ v_add_co_ci_u32 v6, s[0:1], s1, 0, s[0:1]
/*000000014350*/ v_add_co_u32    v0, s[0:1], s2, v4
/*000000014358*/ v_mul_hi_u32    v10, v2, s6
/*000000014360*/ v_add_co_ci_u32 v8, s[0:1], s3, 0, s[0:1]
/*000000014368*/ v_mul_lo_u32    v9, v6, s6
/*000000014370*/ v_add_co_u32    v4, s[0:1], s10, v5
/*000000014378*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000014380*/ v_add_co_ci_u32 v11, s[0:1], s11, 0, s[0:1]
/*000000014388*/ v_mul_lo_u32    v12, v8, s7
/*000000014390*/ v_mul_lo_u32    v7, v2, s6
/*000000014398*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*0000000143a0*/ v_mul_hi_u32    v13, v0, s7
/*0000000143a8*/ v_add_nc_u32    v8, v10, v9
/*0000000143ac*/ v_add_co_u32    v9, vcc, s4, v5
/*0000000143b4*/ v_mov_b32       v5, v3
/*0000000143b8*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*0000000143bc*/ v_mul_lo_u32    v3, v11, s8
/*0000000143c4*/ v_mul_hi_u32    v14, v4, s8
/*0000000143cc*/ v_add_co_u32    v17, vcc, s4, v1
/*0000000143d4*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*0000000143dc*/ v_mul_lo_u32    v11, v0, s7
/*0000000143e4*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*0000000143e8*/ v_mul_lo_u32    v2, v4, s8
/*0000000143f0*/ v_add_nc_u32    v12, v13, v12
/*0000000143f4*/ v_add_co_u32    v4, vcc, s4, v5
/*0000000143fc*/ v_add_nc_u32    v3, v14, v3
/*000000014400*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000014404*/ global_store_dwordx2 v[9:10], v[7:8], off
/*00000001440c*/ global_store_dwordx2 v[17:18], v[11:12], off
/*000000014414*/ global_store_dwordx2 v[4:5], v[2:3], off
/*00000001441c*/ s_endpgm
/*000000014420*/ s_nop           0x0
/*000000014424*/ s_nop           0x0
/*000000014428*/ s_nop           0x0
/*00000001442c*/ s_nop           0x0
/*000000014430*/ s_nop           0x0
/*000000014434*/ s_nop           0x0
/*000000014438*/ s_nop           0x0
/*00000001443c*/ s_nop           0x0
/*000000014440*/ s_nop           0x0
/*000000014444*/ s_nop           0x0
/*000000014448*/ s_nop           0x0
/*00000001444c*/ s_nop           0x0
/*000000014450*/ s_nop           0x0
/*000000014454*/ s_nop           0x0
/*000000014458*/ s_nop           0x0
/*00000001445c*/ s_nop           0x0
/*000000014460*/ s_nop           0x0
/*000000014464*/ s_nop           0x0
/*000000014468*/ s_nop           0x0
/*00000001446c*/ s_nop           0x0
/*000000014470*/ s_nop           0x0
/*000000014474*/ s_nop           0x0
/*000000014478*/ s_nop           0x0
/*00000001447c*/ s_nop           0x0
/*000000014480*/ s_nop           0x0
/*000000014484*/ s_nop           0x0
/*000000014488*/ s_nop           0x0
/*00000001448c*/ s_nop           0x0
/*000000014490*/ s_nop           0x0
/*000000014494*/ s_nop           0x0
/*000000014498*/ s_nop           0x0
/*00000001449c*/ s_nop           0x0
/*0000000144a0*/ s_nop           0x0
/*0000000144a4*/ s_nop           0x0
/*0000000144a8*/ s_nop           0x0
/*0000000144ac*/ s_nop           0x0
/*0000000144b0*/ s_nop           0x0
/*0000000144b4*/ s_nop           0x0
/*0000000144b8*/ s_nop           0x0
/*0000000144bc*/ s_nop           0x0
/*0000000144c0*/ s_nop           0x0
/*0000000144c4*/ s_nop           0x0
/*0000000144c8*/ s_nop           0x0
/*0000000144cc*/ s_nop           0x0
/*0000000144d0*/ s_nop           0x0
/*0000000144d4*/ s_nop           0x0
/*0000000144d8*/ s_nop           0x0
/*0000000144dc*/ s_nop           0x0
/*0000000144e0*/ s_nop           0x0
/*0000000144e4*/ s_nop           0x0
/*0000000144e8*/ s_nop           0x0
/*0000000144ec*/ s_nop           0x0
/*0000000144f0*/ s_nop           0x0
/*0000000144f4*/ s_nop           0x0
/*0000000144f8*/ s_nop           0x0
/*0000000144fc*/ s_nop           0x0
mul_long_get_local_size_get_global_id:
.skip 256
/*000000014600*/ s_clause        0x1
/*000000014604*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001460c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000014614*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001461c*/ v_lshl_or_b32   v3, s7, 1, v1
/*000000014624*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001462c*/ v_lshl_or_b32   v4, s8, 2, v2
/*000000014634*/ s_waitcnt       lgkmcnt(0)
/*000000014638*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000014640*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000014648*/ v_add_co_u32    v2, s[0:1], s2, v3
/*000000014650*/ v_add_co_ci_u32 v3, s[0:1], s3, 0, s[0:1]
/*000000014658*/ v_add_co_u32    v4, s[0:1], s10, v4
/*000000014660*/ v_lshlrev_b64   v[6:7], 1, v[0:1]
/*000000014668*/ v_mov_b32       v1, 0
/*00000001466c*/ v_add_co_ci_u32 v5, s[0:1], s11, 0, s[0:1]
/*000000014674*/ v_lshlrev_b64   v[8:9], 1, v[2:3]
/*00000001467c*/ v_mov_b32       v3, v1
/*000000014680*/ v_lshlrev_b64   v[10:11], 2, v[4:5]
/*000000014688*/ v_mov_b32       v5, v1
/*00000001468c*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000014694*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001469c*/ v_lshlrev_b64   v[4:5], 3, v[4:5]
/*0000000146a4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000146ac*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000146b0*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000146b8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000146bc*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000146c4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000146c8*/ global_store_dwordx2 v[0:1], v[6:7], off
/*0000000146d0*/ global_store_dwordx2 v[2:3], v[8:9], off
/*0000000146d8*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000146e0*/ s_endpgm
/*0000000146e4*/ s_nop           0x0
/*0000000146e8*/ s_nop           0x0
/*0000000146ec*/ s_nop           0x0
/*0000000146f0*/ s_nop           0x0
/*0000000146f4*/ s_nop           0x0
/*0000000146f8*/ s_nop           0x0
/*0000000146fc*/ s_nop           0x0
mul_long_get_global_id_get_global_id:
.skip 256
/*000000014800*/ s_clause        0x1
/*000000014804*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001480c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000014814*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000001481c*/ v_mov_b32       v4, 0
/*000000014820*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000014828*/ v_lshl_or_b32   v0, s7, 1, v1
/*000000014830*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000014838*/ v_lshlrev_b64   v[5:6], 3, v[3:4]
/*000000014840*/ v_mov_b32       v20, v4
/*000000014844*/ s_waitcnt       lgkmcnt(0)
/*000000014848*/ v_add_co_u32    v18, s[0:1], s0, v3
/*000000014850*/ v_add_co_ci_u32 v3, s[0:1], s1, 0, s[0:1]
/*000000014858*/ v_add_co_u32    v19, s[0:1], s2, v0
/*000000014860*/ v_add_co_u32    v5, vcc, s4, v5
/*000000014868*/ v_add_co_ci_u32 v8, s[0:1], s3, 0, s[0:1]
/*000000014870*/ v_mul_hi_u32    v10, v18, v18
/*000000014878*/ v_mul_lo_u32    v9, v18, v3
/*000000014880*/ v_mul_hi_u32    v13, v19, v19
/*000000014888*/ v_add_co_u32    v3, s[0:1], s10, v2
/*000000014890*/ v_mul_lo_u32    v12, v19, v8
/*000000014898*/ v_add_co_ci_u32 v14, s[0:1], s11, 0, s[0:1]
/*0000000148a0*/ v_lshlrev_b64   v[1:2], 3, v[19:20]
/*0000000148a8*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000148ac*/ v_mul_hi_u32    v15, v3, v3
/*0000000148b4*/ v_add_nc_u32    v8, v10, v9
/*0000000148b8*/ v_mul_lo_u32    v14, v3, v14
/*0000000148c0*/ v_mul_lo_u32    v9, v19, v19
/*0000000148c8*/ v_add_nc_u32    v10, v13, v12
/*0000000148cc*/ v_lshlrev_b64   v[11:12], 3, v[3:4]
/*0000000148d4*/ v_add_co_u32    v19, vcc, s4, v1
/*0000000148dc*/ v_mul_lo_u32    v7, v18, v18
/*0000000148e4*/ v_add_co_ci_u32 v20, vcc, s5, v2, vcc
/*0000000148e8*/ v_mul_lo_u32    v3, v3, v3
/*0000000148f0*/ v_add_nc_u32    v4, v15, v14
/*0000000148f4*/ v_add_co_u32    v1, vcc, s4, v11
/*0000000148fc*/ v_add_co_ci_u32 v2, vcc, s5, v12, vcc
/*000000014900*/ global_store_dwordx2 v[5:6], v[7:8], off
/*000000014908*/ global_store_dwordx2 v[19:20], v[9:10], off
/*000000014910*/ global_store_dwordx2 v[1:2], v[3:4], off
/*000000014918*/ s_endpgm
/*00000001491c*/ s_nop           0x0
/*000000014920*/ s_nop           0x0
/*000000014924*/ s_nop           0x0
/*000000014928*/ s_nop           0x0
/*00000001492c*/ s_nop           0x0
/*000000014930*/ s_nop           0x0
/*000000014934*/ s_nop           0x0
/*000000014938*/ s_nop           0x0
/*00000001493c*/ s_nop           0x0
/*000000014940*/ s_nop           0x0
/*000000014944*/ s_nop           0x0
/*000000014948*/ s_nop           0x0
/*00000001494c*/ s_nop           0x0
/*000000014950*/ s_nop           0x0
/*000000014954*/ s_nop           0x0
/*000000014958*/ s_nop           0x0
/*00000001495c*/ s_nop           0x0
/*000000014960*/ s_nop           0x0
/*000000014964*/ s_nop           0x0
/*000000014968*/ s_nop           0x0
/*00000001496c*/ s_nop           0x0
/*000000014970*/ s_nop           0x0
/*000000014974*/ s_nop           0x0
/*000000014978*/ s_nop           0x0
/*00000001497c*/ s_nop           0x0
/*000000014980*/ s_nop           0x0
/*000000014984*/ s_nop           0x0
/*000000014988*/ s_nop           0x0
/*00000001498c*/ s_nop           0x0
/*000000014990*/ s_nop           0x0
/*000000014994*/ s_nop           0x0
/*000000014998*/ s_nop           0x0
/*00000001499c*/ s_nop           0x0
/*0000000149a0*/ s_nop           0x0
/*0000000149a4*/ s_nop           0x0
/*0000000149a8*/ s_nop           0x0
/*0000000149ac*/ s_nop           0x0
/*0000000149b0*/ s_nop           0x0
/*0000000149b4*/ s_nop           0x0
/*0000000149b8*/ s_nop           0x0
/*0000000149bc*/ s_nop           0x0
/*0000000149c0*/ s_nop           0x0
/*0000000149c4*/ s_nop           0x0
/*0000000149c8*/ s_nop           0x0
/*0000000149cc*/ s_nop           0x0
/*0000000149d0*/ s_nop           0x0
/*0000000149d4*/ s_nop           0x0
/*0000000149d8*/ s_nop           0x0
/*0000000149dc*/ s_nop           0x0
/*0000000149e0*/ s_nop           0x0
/*0000000149e4*/ s_nop           0x0
/*0000000149e8*/ s_nop           0x0
/*0000000149ec*/ s_nop           0x0
/*0000000149f0*/ s_nop           0x0
/*0000000149f4*/ s_nop           0x0
/*0000000149f8*/ s_nop           0x0
/*0000000149fc*/ s_nop           0x0
mul_long_get_global_size_get_global_id:
.skip 256
/*000000014b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000014b08*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000014b10*/ s_clause        0x1
/*000000014b14*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*000000014b1c*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*000000014b24*/ v_lshl_or_b32   v0, s8, 4, v0
/*000000014b2c*/ v_lshl_or_b32   v5, s10, 1, v2
/*000000014b34*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000014b3c*/ v_mov_b32       v3, 0
/*000000014b40*/ v_mov_b32       v1, v3
/*000000014b44*/ s_waitcnt       lgkmcnt(0)
/*000000014b48*/ v_add_co_u32    v2, s[0:1], s0, v0
/*000000014b50*/ v_add_co_ci_u32 v6, s[0:1], s1, 0, s[0:1]
/*000000014b58*/ v_add_co_u32    v0, s[0:1], s2, v4
/*000000014b60*/ v_mul_hi_u32    v10, v2, s12
/*000000014b68*/ v_add_co_ci_u32 v8, s[0:1], s3, 0, s[0:1]
/*000000014b70*/ v_mul_lo_u32    v9, v6, s12
/*000000014b78*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000014b80*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000014b88*/ v_add_co_ci_u32 v11, s[0:1], s5, 0, s[0:1]
/*000000014b90*/ v_mul_lo_u32    v12, v8, s13
/*000000014b98*/ v_mul_lo_u32    v7, v2, s12
/*000000014ba0*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000014ba8*/ v_mul_hi_u32    v13, v0, s13
/*000000014bb0*/ v_add_nc_u32    v8, v10, v9
/*000000014bb4*/ v_add_co_u32    v9, vcc, s6, v5
/*000000014bbc*/ v_mov_b32       v5, v3
/*000000014bc0*/ v_add_co_ci_u32 v10, vcc, s7, v6, vcc
/*000000014bc4*/ v_mul_lo_u32    v3, v11, s14
/*000000014bcc*/ v_mul_hi_u32    v14, v4, s14
/*000000014bd4*/ v_add_co_u32    v17, vcc, s6, v1
/*000000014bdc*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*000000014be4*/ v_mul_lo_u32    v11, v0, s13
/*000000014bec*/ v_add_co_ci_u32 v18, vcc, s7, v2, vcc
/*000000014bf0*/ v_mul_lo_u32    v2, v4, s14
/*000000014bf8*/ v_add_nc_u32    v12, v13, v12
/*000000014bfc*/ v_add_co_u32    v4, vcc, s6, v5
/*000000014c04*/ v_add_nc_u32    v3, v14, v3
/*000000014c08*/ v_add_co_ci_u32 v5, vcc, s7, v6, vcc
/*000000014c0c*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000014c14*/ global_store_dwordx2 v[17:18], v[11:12], off
/*000000014c1c*/ global_store_dwordx2 v[4:5], v[2:3], off
/*000000014c24*/ s_endpgm
/*000000014c28*/ s_nop           0x0
/*000000014c2c*/ s_nop           0x0
/*000000014c30*/ s_nop           0x0
/*000000014c34*/ s_nop           0x0
/*000000014c38*/ s_nop           0x0
/*000000014c3c*/ s_nop           0x0
/*000000014c40*/ s_nop           0x0
/*000000014c44*/ s_nop           0x0
/*000000014c48*/ s_nop           0x0
/*000000014c4c*/ s_nop           0x0
/*000000014c50*/ s_nop           0x0
/*000000014c54*/ s_nop           0x0
/*000000014c58*/ s_nop           0x0
/*000000014c5c*/ s_nop           0x0
/*000000014c60*/ s_nop           0x0
/*000000014c64*/ s_nop           0x0
/*000000014c68*/ s_nop           0x0
/*000000014c6c*/ s_nop           0x0
/*000000014c70*/ s_nop           0x0
/*000000014c74*/ s_nop           0x0
/*000000014c78*/ s_nop           0x0
/*000000014c7c*/ s_nop           0x0
/*000000014c80*/ s_nop           0x0
/*000000014c84*/ s_nop           0x0
/*000000014c88*/ s_nop           0x0
/*000000014c8c*/ s_nop           0x0
/*000000014c90*/ s_nop           0x0
/*000000014c94*/ s_nop           0x0
/*000000014c98*/ s_nop           0x0
/*000000014c9c*/ s_nop           0x0
/*000000014ca0*/ s_nop           0x0
/*000000014ca4*/ s_nop           0x0
/*000000014ca8*/ s_nop           0x0
/*000000014cac*/ s_nop           0x0
/*000000014cb0*/ s_nop           0x0
/*000000014cb4*/ s_nop           0x0
/*000000014cb8*/ s_nop           0x0
/*000000014cbc*/ s_nop           0x0
/*000000014cc0*/ s_nop           0x0
/*000000014cc4*/ s_nop           0x0
/*000000014cc8*/ s_nop           0x0
/*000000014ccc*/ s_nop           0x0
/*000000014cd0*/ s_nop           0x0
/*000000014cd4*/ s_nop           0x0
/*000000014cd8*/ s_nop           0x0
/*000000014cdc*/ s_nop           0x0
/*000000014ce0*/ s_nop           0x0
/*000000014ce4*/ s_nop           0x0
/*000000014ce8*/ s_nop           0x0
/*000000014cec*/ s_nop           0x0
/*000000014cf0*/ s_nop           0x0
/*000000014cf4*/ s_nop           0x0
/*000000014cf8*/ s_nop           0x0
/*000000014cfc*/ s_nop           0x0
mul_long_get_num_groups_get_global_id:
.skip 256
/*000000014e00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000014e08*/ s_clause        0x2
/*000000014e0c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000014e14*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000014e1c*/ s_load_dwordx2  s[6:7], s[6:7], 0x20
/*000000014e24*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000014e2c*/ v_mov_b32       v5, 0
/*000000014e30*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000014e38*/ v_lshl_or_b32   v4, s10, 2, v2
/*000000014e40*/ v_mov_b32       v3, 0
/*000000014e44*/ s_waitcnt       lgkmcnt(0)
/*000000014e48*/ s_and_b32       s3, s0, -2
/*000000014e4c*/ v_add_co_u32    v2, vcc, s12, v0
/*000000014e54*/ v_cmp_gt_u32    s[3:4], s0, s3
/*000000014e5c*/ s_lshr_b32      s0, s0, 1
/*000000014e60*/ v_add_co_ci_u32 v6, vcc, s13, v5, vcc
/*000000014e64*/ v_add_co_u32    v0, vcc, s14, v1
/*000000014e6c*/ s_cmpk_lg_u32   s3, 0x0
/*000000014e70*/ v_add_co_ci_u32 v1, vcc, s15, v5, vcc
/*000000014e74*/ s_addc_u32      s0, s0, 0
/*000000014e78*/ s_and_b32       s3, s1, -2
/*000000014e7c*/ v_add_co_u32    v4, vcc, s6, v4
/*000000014e84*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000014e8c*/ s_lshr_b32      s1, s1, 1
/*000000014e90*/ v_mul_lo_u32    v8, v6, s0
/*000000014e98*/ v_mul_hi_u32    v9, v2, s0
/*000000014ea0*/ v_add_co_ci_u32 v11, vcc, s7, v5, vcc
/*000000014ea4*/ s_cmpk_lg_u32   s3, 0x0
/*000000014ea8*/ v_lshlrev_b64   v[5:6], 3, v[2:3]
/*000000014eb0*/ s_addc_u32      s1, s1, 0
/*000000014eb4*/ s_and_b32       s3, s2, -4
/*000000014eb8*/ v_mul_lo_u32    v12, v1, s1
/*000000014ec0*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000014ec8*/ v_mov_b32       v1, v3
/*000000014ecc*/ v_mul_lo_u32    v7, v2, s0
/*000000014ed4*/ s_lshr_b32      s0, s2, 2
/*000000014ed8*/ v_add_nc_u32    v8, v9, v8
/*000000014edc*/ v_add_co_u32    v9, vcc, s4, v5
/*000000014ee4*/ v_mov_b32       v5, v3
/*000000014ee8*/ s_cmpk_lg_u32   s3, 0x0
/*000000014eec*/ v_lshlrev_b64   v[1:2], 3, v[0:1]
/*000000014ef4*/ s_addc_u32      s0, s0, 0
/*000000014ef8*/ v_mul_hi_u32    v13, v0, s1
/*000000014f00*/ v_add_co_ci_u32 v10, vcc, s5, v6, vcc
/*000000014f04*/ v_mul_lo_u32    v3, v11, s0
/*000000014f0c*/ v_mul_hi_u32    v14, v4, s0
/*000000014f14*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*000000014f1c*/ v_add_co_u32    v17, vcc, s4, v1
/*000000014f24*/ v_mul_lo_u32    v11, v0, s1
/*000000014f2c*/ v_add_co_ci_u32 v18, vcc, s5, v2, vcc
/*000000014f30*/ v_mul_lo_u32    v2, v4, s0
/*000000014f38*/ v_add_nc_u32    v12, v13, v12
/*000000014f3c*/ v_add_co_u32    v4, vcc, s4, v5
/*000000014f44*/ v_add_nc_u32    v3, v14, v3
/*000000014f48*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000014f4c*/ global_store_dwordx2 v[9:10], v[7:8], off
/*000000014f54*/ global_store_dwordx2 v[17:18], v[11:12], off
/*000000014f5c*/ global_store_dwordx2 v[4:5], v[2:3], off
/*000000014f64*/ s_endpgm
/*000000014f68*/ s_nop           0x0
/*000000014f6c*/ s_nop           0x0
/*000000014f70*/ s_nop           0x0
/*000000014f74*/ s_nop           0x0
/*000000014f78*/ s_nop           0x0
/*000000014f7c*/ s_nop           0x0
/*000000014f80*/ s_nop           0x0
/*000000014f84*/ s_nop           0x0
/*000000014f88*/ s_nop           0x0
/*000000014f8c*/ s_nop           0x0
/*000000014f90*/ s_nop           0x0
/*000000014f94*/ s_nop           0x0
/*000000014f98*/ s_nop           0x0
/*000000014f9c*/ s_nop           0x0
/*000000014fa0*/ s_nop           0x0
/*000000014fa4*/ s_nop           0x0
/*000000014fa8*/ s_nop           0x0
/*000000014fac*/ s_nop           0x0
/*000000014fb0*/ s_nop           0x0
/*000000014fb4*/ s_nop           0x0
/*000000014fb8*/ s_nop           0x0
/*000000014fbc*/ s_nop           0x0
/*000000014fc0*/ s_nop           0x0
/*000000014fc4*/ s_nop           0x0
/*000000014fc8*/ s_nop           0x0
/*000000014fcc*/ s_nop           0x0
/*000000014fd0*/ s_nop           0x0
/*000000014fd4*/ s_nop           0x0
/*000000014fd8*/ s_nop           0x0
/*000000014fdc*/ s_nop           0x0
/*000000014fe0*/ s_nop           0x0
/*000000014fe4*/ s_nop           0x0
/*000000014fe8*/ s_nop           0x0
/*000000014fec*/ s_nop           0x0
/*000000014ff0*/ s_nop           0x0
/*000000014ff4*/ s_nop           0x0
/*000000014ff8*/ s_nop           0x0
/*000000014ffc*/ s_nop           0x0
mul_long_get_work_dim_get_global_id:
.skip 256
/*000000015100*/ v_mov_b32       v3, s4
/*000000015104*/ v_mov_b32       v4, s5
/*000000015108*/ s_clause        0x2
/*00000001510c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015114*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*00000001511c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000015124*/ v_lshl_or_b32   v0, s8, 1, v0
/*00000001512c*/ v_lshl_or_b32   v6, s10, 2, v2
/*000000015134*/ global_load_ushort v12, v[3:4], off inst_offset:2
/*00000001513c*/ v_lshl_or_b32   v4, s9, 1, v1
/*000000015144*/ v_mov_b32       v3, 0
/*000000015148*/ v_mov_b32       v20, v3
/*00000001514c*/ v_mov_b32       v24, v3
/*000000015150*/ s_waitcnt       lgkmcnt(0)
/*000000015154*/ v_add_co_u32    v2, s[0:1], s0, v0
/*00000001515c*/ v_add_co_ci_u32 v13, s[0:1], s1, 0, s[0:1]
/*000000015164*/ v_add_co_u32    v19, s[0:1], s2, v4
/*00000001516c*/ v_add_co_ci_u32 v14, s[0:1], s3, 0, s[0:1]
/*000000015174*/ v_add_co_u32    v23, s[0:1], s4, v6
/*00000001517c*/ v_lshlrev_b64   v[6:7], 3, v[2:3]
/*000000015184*/ v_lshlrev_b64   v[8:9], 3, v[19:20]
/*00000001518c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000015194*/ v_lshlrev_b64   v[10:11], 3, v[23:24]
/*00000001519c*/ v_add_co_u32    v27, vcc, s6, v6
/*0000000151a4*/ v_add_co_ci_u32 v28, vcc, s7, v7, vcc
/*0000000151a8*/ v_add_co_u32    v5, vcc, s6, v8
/*0000000151b0*/ v_add_co_ci_u32 v6, vcc, s7, v9, vcc
/*0000000151b4*/ v_add_co_u32    v9, vcc, s6, v10
/*0000000151bc*/ v_add_co_ci_u32 v10, vcc, s7, v11, vcc
/*0000000151c0*/ s_waitcnt       vmcnt(0)
/*0000000151c4*/ v_mul_lo_u32    v13, v13, v12
/*0000000151cc*/ v_mul_hi_u32    v15, v2, v12
/*0000000151d4*/ v_mul_lo_u32    v14, v14, v12
/*0000000151dc*/ v_mul_hi_u32    v16, v19, v12
/*0000000151e4*/ v_mul_lo_u32    v17, v3, v12
/*0000000151ec*/ v_mul_hi_u32    v18, v23, v12
/*0000000151f4*/ v_mul_lo_u32    v1, v2, v12
/*0000000151fc*/ v_mul_lo_u32    v3, v19, v12
/*000000015204*/ v_mul_lo_u32    v11, v23, v12
/*00000001520c*/ v_add_nc_u32    v2, v15, v13
/*000000015210*/ v_add_nc_u32    v4, v16, v14
/*000000015214*/ v_add_nc_u32    v12, v18, v17
/*000000015218*/ global_store_dwordx2 v[27:28], v[1:2], off
/*000000015220*/ global_store_dwordx2 v[5:6], v[3:4], off
/*000000015228*/ global_store_dwordx2 v[9:10], v[11:12], off
/*000000015230*/ s_endpgm
/*000000015234*/ s_nop           0x0
/*000000015238*/ s_nop           0x0
/*00000001523c*/ s_nop           0x0
/*000000015240*/ s_nop           0x0
/*000000015244*/ s_nop           0x0
/*000000015248*/ s_nop           0x0
/*00000001524c*/ s_nop           0x0
/*000000015250*/ s_nop           0x0
/*000000015254*/ s_nop           0x0
/*000000015258*/ s_nop           0x0
/*00000001525c*/ s_nop           0x0
/*000000015260*/ s_nop           0x0
/*000000015264*/ s_nop           0x0
/*000000015268*/ s_nop           0x0
/*00000001526c*/ s_nop           0x0
/*000000015270*/ s_nop           0x0
/*000000015274*/ s_nop           0x0
/*000000015278*/ s_nop           0x0
/*00000001527c*/ s_nop           0x0
/*000000015280*/ s_nop           0x0
/*000000015284*/ s_nop           0x0
/*000000015288*/ s_nop           0x0
/*00000001528c*/ s_nop           0x0
/*000000015290*/ s_nop           0x0
/*000000015294*/ s_nop           0x0
/*000000015298*/ s_nop           0x0
/*00000001529c*/ s_nop           0x0
/*0000000152a0*/ s_nop           0x0
/*0000000152a4*/ s_nop           0x0
/*0000000152a8*/ s_nop           0x0
/*0000000152ac*/ s_nop           0x0
/*0000000152b0*/ s_nop           0x0
/*0000000152b4*/ s_nop           0x0
/*0000000152b8*/ s_nop           0x0
/*0000000152bc*/ s_nop           0x0
/*0000000152c0*/ s_nop           0x0
/*0000000152c4*/ s_nop           0x0
/*0000000152c8*/ s_nop           0x0
/*0000000152cc*/ s_nop           0x0
/*0000000152d0*/ s_nop           0x0
/*0000000152d4*/ s_nop           0x0
/*0000000152d8*/ s_nop           0x0
/*0000000152dc*/ s_nop           0x0
/*0000000152e0*/ s_nop           0x0
/*0000000152e4*/ s_nop           0x0
/*0000000152e8*/ s_nop           0x0
/*0000000152ec*/ s_nop           0x0
/*0000000152f0*/ s_nop           0x0
/*0000000152f4*/ s_nop           0x0
/*0000000152f8*/ s_nop           0x0
/*0000000152fc*/ s_nop           0x0
mul_long_x_get_global_size:
.skip 256
/*000000015400*/ s_clause        0x1
/*000000015404*/ s_load_dword    s11, s[6:7], 0x8
/*00000001540c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015414*/ s_waitcnt       lgkmcnt(0)
/*000000015418*/ s_load_dword    s1, s[6:7], 0x20
/*000000015420*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000015428*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000015430*/ s_lshl_b32      s3, s8, 4
/*000000015434*/ v_mov_b32       v4, 0
/*000000015438*/ s_lshl_b32      s6, s9, 1
/*00000001543c*/ s_lshl_b32      s7, s10, 1
/*000000015440*/ v_mov_b32       v6, v4
/*000000015444*/ s_ashr_i32      s8, s11, 31
/*000000015448*/ v_add3_u32      v3, s0, s3, v0
/*000000015450*/ v_add3_u32      v5, s2, s6, v1
/*000000015458*/ s_waitcnt       lgkmcnt(0)
/*00000001545c*/ v_add3_u32      v0, s1, s7, v2
/*000000015464*/ s_mul_hi_u32    s0, s12, s11
/*000000015468*/ s_mul_i32       s2, s12, s8
/*00000001546c*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*000000015474*/ s_add_i32       s0, s0, s2
/*000000015478*/ s_mul_i32       s1, s12, s11
/*00000001547c*/ v_mov_b32       v8, s0
/*000000015480*/ v_mov_b32       v7, s1
/*000000015484*/ s_mul_hi_u32    s3, s13, s11
/*000000015488*/ v_add_co_u32    v9, vcc, s4, v1
/*000000015490*/ v_mov_b32       v1, v4
/*000000015494*/ v_add_co_ci_u32 v10, vcc, s5, v2, vcc
/*000000015498*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*0000000154a0*/ s_mul_i32       s0, s13, s8
/*0000000154a4*/ s_mul_i32       s1, s13, s11
/*0000000154a8*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*0000000154b0*/ s_add_i32       s3, s3, s0
/*0000000154b4*/ v_mov_b32       v5, s1
/*0000000154b8*/ v_add_co_u32    v15, vcc, s4, v2
/*0000000154c0*/ s_mul_hi_u32    s0, s14, s11
/*0000000154c4*/ s_mul_i32       s1, s14, s8
/*0000000154c8*/ v_add_co_ci_u32 v16, vcc, s5, v3, vcc
/*0000000154cc*/ v_add_co_u32    v13, vcc, s4, v0
/*0000000154d4*/ s_mul_i32       s2, s14, s11
/*0000000154d8*/ s_add_i32       s0, s0, s1
/*0000000154dc*/ v_mov_b32       v6, s3
/*0000000154e0*/ v_mov_b32       v11, s2
/*0000000154e4*/ v_mov_b32       v12, s0
/*0000000154e8*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*0000000154ec*/ global_store_dwordx2 v[9:10], v[7:8], off
/*0000000154f4*/ global_store_dwordx2 v[15:16], v[5:6], off
/*0000000154fc*/ global_store_dwordx2 v[13:14], v[11:12], off
/*000000015504*/ s_endpgm
/*000000015508*/ s_nop           0x0
/*00000001550c*/ s_nop           0x0
/*000000015510*/ s_nop           0x0
/*000000015514*/ s_nop           0x0
/*000000015518*/ s_nop           0x0
/*00000001551c*/ s_nop           0x0
/*000000015520*/ s_nop           0x0
/*000000015524*/ s_nop           0x0
/*000000015528*/ s_nop           0x0
/*00000001552c*/ s_nop           0x0
/*000000015530*/ s_nop           0x0
/*000000015534*/ s_nop           0x0
/*000000015538*/ s_nop           0x0
/*00000001553c*/ s_nop           0x0
/*000000015540*/ s_nop           0x0
/*000000015544*/ s_nop           0x0
/*000000015548*/ s_nop           0x0
/*00000001554c*/ s_nop           0x0
/*000000015550*/ s_nop           0x0
/*000000015554*/ s_nop           0x0
/*000000015558*/ s_nop           0x0
/*00000001555c*/ s_nop           0x0
/*000000015560*/ s_nop           0x0
/*000000015564*/ s_nop           0x0
/*000000015568*/ s_nop           0x0
/*00000001556c*/ s_nop           0x0
/*000000015570*/ s_nop           0x0
/*000000015574*/ s_nop           0x0
/*000000015578*/ s_nop           0x0
/*00000001557c*/ s_nop           0x0
/*000000015580*/ s_nop           0x0
/*000000015584*/ s_nop           0x0
/*000000015588*/ s_nop           0x0
/*00000001558c*/ s_nop           0x0
/*000000015590*/ s_nop           0x0
/*000000015594*/ s_nop           0x0
/*000000015598*/ s_nop           0x0
/*00000001559c*/ s_nop           0x0
/*0000000155a0*/ s_nop           0x0
/*0000000155a4*/ s_nop           0x0
/*0000000155a8*/ s_nop           0x0
/*0000000155ac*/ s_nop           0x0
/*0000000155b0*/ s_nop           0x0
/*0000000155b4*/ s_nop           0x0
/*0000000155b8*/ s_nop           0x0
/*0000000155bc*/ s_nop           0x0
/*0000000155c0*/ s_nop           0x0
/*0000000155c4*/ s_nop           0x0
/*0000000155c8*/ s_nop           0x0
/*0000000155cc*/ s_nop           0x0
/*0000000155d0*/ s_nop           0x0
/*0000000155d4*/ s_nop           0x0
/*0000000155d8*/ s_nop           0x0
/*0000000155dc*/ s_nop           0x0
/*0000000155e0*/ s_nop           0x0
/*0000000155e4*/ s_nop           0x0
/*0000000155e8*/ s_nop           0x0
/*0000000155ec*/ s_nop           0x0
/*0000000155f0*/ s_nop           0x0
/*0000000155f4*/ s_nop           0x0
/*0000000155f8*/ s_nop           0x0
/*0000000155fc*/ s_nop           0x0
mul_long_get_global_offset_get_global_size:
.skip 256
/*000000015700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015708*/ s_waitcnt       lgkmcnt(0)
/*00000001570c*/ s_load_dword    s1, s[6:7], 0x20
/*000000015714*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001571c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015724*/ v_mov_b32       v4, 0
/*000000015728*/ s_lshl_b32      s3, s8, 1
/*00000001572c*/ s_lshl_b32      s6, s9, 4
/*000000015730*/ s_lshl_b32      s7, s10, 1
/*000000015734*/ v_mov_b32       v6, v4
/*000000015738*/ v_add3_u32      v3, s0, s3, v0
/*000000015740*/ v_add3_u32      v5, s2, s6, v1
/*000000015748*/ s_waitcnt       lgkmcnt(0)
/*00000001574c*/ v_add3_u32      v0, s1, s7, v2
/*000000015754*/ v_mov_b32       v1, v4
/*000000015758*/ s_mul_hi_u32    s3, s0, s12
/*00000001575c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000015764*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000001576c*/ s_mul_i32       s0, s0, s12
/*000000015770*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000015778*/ s_mul_hi_u32    s6, s2, s13
/*00000001577c*/ s_mul_i32       s2, s2, s13
/*000000015780*/ v_add_co_u32    v7, vcc, s4, v7
/*000000015788*/ v_mov_b32       v13, s0
/*00000001578c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000015790*/ v_add_co_u32    v3, vcc, s4, v5
/*000000015798*/ s_mul_i32       s0, s1, s14
/*00000001579c*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*0000000157a0*/ v_add_co_u32    v5, vcc, s4, v0
/*0000000157a8*/ s_mul_hi_u32    s1, s1, s14
/*0000000157ac*/ v_mov_b32       v14, s3
/*0000000157b0*/ v_mov_b32       v9, s2
/*0000000157b4*/ v_mov_b32       v10, s6
/*0000000157b8*/ v_mov_b32       v11, s0
/*0000000157bc*/ v_mov_b32       v12, s1
/*0000000157c0*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*0000000157c4*/ global_store_dwordx2 v[7:8], v[13:14], off
/*0000000157cc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*0000000157d4*/ global_store_dwordx2 v[5:6], v[11:12], off
/*0000000157dc*/ s_endpgm
/*0000000157e0*/ s_nop           0x0
/*0000000157e4*/ s_nop           0x0
/*0000000157e8*/ s_nop           0x0
/*0000000157ec*/ s_nop           0x0
/*0000000157f0*/ s_nop           0x0
/*0000000157f4*/ s_nop           0x0
/*0000000157f8*/ s_nop           0x0
/*0000000157fc*/ s_nop           0x0
mul_long_get_local_id_get_global_size:
.skip 256
/*000000015900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015908*/ s_waitcnt       lgkmcnt(0)
/*00000001590c*/ s_load_dword    s1, s[6:7], 0x20
/*000000015914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001591c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015924*/ v_mov_b32       v4, 0
/*000000015928*/ s_lshl_b32      s3, s8, 3
/*00000001592c*/ s_lshl_b32      s6, s9, 2
/*000000015930*/ s_lshl_b32      s7, s10, 1
/*000000015934*/ v_mov_b32       v6, v4
/*000000015938*/ v_mov_b32       v8, v4
/*00000001593c*/ s_waitcnt       lgkmcnt(0)
/*000000015940*/ v_add3_u32      v7, s1, s7, v2
/*000000015948*/ v_add3_u32      v3, s0, s3, v0
/*000000015950*/ v_add3_u32      v5, s2, s6, v1
/*000000015958*/ v_mul_hi_u32    v10, s12, v0
/*000000015960*/ v_mul_lo_u32    v9, s12, v0
/*000000015968*/ v_mul_hi_u32    v12, s13, v1
/*000000015970*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000015978*/ v_mul_lo_u32    v11, s13, v1
/*000000015980*/ v_lshlrev_b64   v[0:1], 3, v[5:6]
/*000000015988*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000015990*/ v_mul_hi_u32    v8, s14, v2
/*000000015998*/ v_mul_lo_u32    v7, s14, v2
/*0000000159a0*/ v_add_co_u32    v3, vcc, s4, v3
/*0000000159a8*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*0000000159ac*/ v_add_co_u32    v13, vcc, s4, v0
/*0000000159b4*/ v_add_co_ci_u32 v14, vcc, s5, v1, vcc
/*0000000159b8*/ v_add_co_u32    v5, vcc, s4, v5
/*0000000159c0*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*0000000159c4*/ global_store_dwordx2 v[3:4], v[9:10], off
/*0000000159cc*/ global_store_dwordx2 v[13:14], v[11:12], off
/*0000000159d4*/ global_store_dwordx2 v[5:6], v[7:8], off
/*0000000159dc*/ s_endpgm
/*0000000159e0*/ s_nop           0x0
/*0000000159e4*/ s_nop           0x0
/*0000000159e8*/ s_nop           0x0
/*0000000159ec*/ s_nop           0x0
/*0000000159f0*/ s_nop           0x0
/*0000000159f4*/ s_nop           0x0
/*0000000159f8*/ s_nop           0x0
/*0000000159fc*/ s_nop           0x0
mul_long_get_group_id_get_global_size:
.skip 256
/*000000015b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015b08*/ s_waitcnt       lgkmcnt(0)
/*000000015b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000015b14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000015b1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015b24*/ v_mov_b32       v4, 0
/*000000015b28*/ s_lshl_b32      s3, s8, 1
/*000000015b2c*/ s_lshl_b32      s6, s9, 4
/*000000015b30*/ s_lshl_b32      s7, s10, 1
/*000000015b34*/ v_mov_b32       v6, v4
/*000000015b38*/ v_add3_u32      v3, s0, s3, v0
/*000000015b40*/ v_add3_u32      v5, s2, s6, v1
/*000000015b48*/ s_waitcnt       lgkmcnt(0)
/*000000015b4c*/ v_add3_u32      v0, s1, s7, v2
/*000000015b54*/ v_mov_b32       v1, v4
/*000000015b58*/ s_mul_hi_u32    s0, s12, s8
/*000000015b5c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000015b64*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000015b6c*/ s_mul_i32       s1, s12, s8
/*000000015b70*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000015b78*/ s_mul_hi_u32    s2, s13, s9
/*000000015b7c*/ s_mul_i32       s3, s13, s9
/*000000015b80*/ v_add_co_u32    v7, vcc, s4, v7
/*000000015b88*/ v_mov_b32       v13, s1
/*000000015b8c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000015b90*/ v_add_co_u32    v3, vcc, s4, v5
/*000000015b98*/ v_mov_b32       v14, s0
/*000000015b9c*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*000000015ba0*/ v_add_co_u32    v5, vcc, s4, v0
/*000000015ba8*/ s_mul_i32       s0, s14, s10
/*000000015bac*/ s_mul_hi_u32    s1, s14, s10
/*000000015bb0*/ v_mov_b32       v9, s3
/*000000015bb4*/ v_mov_b32       v10, s2
/*000000015bb8*/ v_mov_b32       v11, s0
/*000000015bbc*/ v_mov_b32       v12, s1
/*000000015bc0*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*000000015bc4*/ global_store_dwordx2 v[7:8], v[13:14], off
/*000000015bcc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000015bd4*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000015bdc*/ s_endpgm
/*000000015be0*/ s_nop           0x0
/*000000015be4*/ s_nop           0x0
/*000000015be8*/ s_nop           0x0
/*000000015bec*/ s_nop           0x0
/*000000015bf0*/ s_nop           0x0
/*000000015bf4*/ s_nop           0x0
/*000000015bf8*/ s_nop           0x0
/*000000015bfc*/ s_nop           0x0
mul_long_get_local_size_get_global_size:
.skip 256
/*000000015d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015d08*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000015d10*/ s_waitcnt       lgkmcnt(0)
/*000000015d14*/ s_clause        0x1
/*000000015d18*/ s_load_dword    s3, s[6:7], 0x20
/*000000015d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000015d28*/ v_mov_b32       v4, 0
/*000000015d2c*/ s_lshl_b32      s6, s8, 1
/*000000015d30*/ s_lshl_b32      s7, s9, 1
/*000000015d34*/ s_lshl_b32      s8, s10, 2
/*000000015d38*/ s_mov_b32       s1, 0
/*000000015d3c*/ v_mov_b32       v6, v4
/*000000015d40*/ v_mov_b32       v8, v4
/*000000015d44*/ s_mov_b32       s15, s1
/*000000015d48*/ v_add3_u32      v3, s0, s6, v0
/*000000015d50*/ v_add3_u32      v5, s2, s7, v1
/*000000015d58*/ s_waitcnt       lgkmcnt(0)
/*000000015d5c*/ v_add3_u32      v7, s3, s8, v2
/*000000015d64*/ s_mov_b32       s0, s12
/*000000015d68*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000015d70*/ v_lshlrev_b64   v[4:5], 3, v[5:6]
/*000000015d78*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000015d80*/ s_lshl_b64      s[2:3], s[0:1], 1
/*000000015d84*/ s_mov_b32       s0, s13
/*000000015d88*/ v_mov_b32       v2, s2
/*000000015d8c*/ v_add_co_u32    v0, vcc, s4, v0
/*000000015d94*/ v_mov_b32       v3, s3
/*000000015d98*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000015d9c*/ v_add_co_u32    v14, vcc, s4, v4
/*000000015da4*/ s_lshl_b64      s[2:3], s[0:1], 1
/*000000015da8*/ v_add_co_ci_u32 v15, vcc, s5, v5, vcc
/*000000015dac*/ s_lshl_b64      s[0:1], s[14:15], 2
/*000000015db0*/ v_add_co_u32    v4, vcc, s4, v6
/*000000015db8*/ v_mov_b32       v9, s3
/*000000015dbc*/ v_mov_b32       v11, s1
/*000000015dc0*/ v_mov_b32       v8, s2
/*000000015dc4*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*000000015dc8*/ v_mov_b32       v10, s0
/*000000015dcc*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000015dd4*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000015ddc*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015de4*/ s_endpgm
/*000000015de8*/ s_nop           0x0
/*000000015dec*/ s_nop           0x0
/*000000015df0*/ s_nop           0x0
/*000000015df4*/ s_nop           0x0
/*000000015df8*/ s_nop           0x0
/*000000015dfc*/ s_nop           0x0
mul_long_get_global_id_get_global_size:
.skip 256
/*000000015f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000015f08*/ s_waitcnt       lgkmcnt(0)
/*000000015f0c*/ s_clause        0x1
/*000000015f10*/ s_load_dword    s1, s[6:7], 0x20
/*000000015f18*/ s_load_dwordx2  s[12:13], s[6:7], 0x8
/*000000015f20*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000015f28*/ v_mov_b32       v4, 0
/*000000015f2c*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000015f34*/ s_lshl_b32      s3, s9, 1
/*000000015f38*/ s_waitcnt       lgkmcnt(0)
/*000000015f3c*/ s_lshl_b32      s7, s10, 2
/*000000015f40*/ v_mov_b32       v5, v4
/*000000015f44*/ v_lshlrev_b64   v[6:7], 3, v[3:4]
/*000000015f4c*/ v_mov_b32       v9, v4
/*000000015f50*/ v_add3_u32      v8, s1, s7, v2
/*000000015f58*/ v_add3_u32      v4, s2, s3, v1
/*000000015f60*/ v_add_co_u32    v0, vcc, s12, v6
/*000000015f68*/ v_add_nc_u32    v10, s0, v3
/*000000015f6c*/ v_add_co_ci_u32 v1, vcc, s13, v7, vcc
/*000000015f70*/ v_lshlrev_b64   v[12:13], 3, v[8:9]
/*000000015f78*/ v_lshlrev_b64   v[5:6], 3, v[4:5]
/*000000015f80*/ v_mul_hi_u32    v11, v4, s5
/*000000015f88*/ v_mul_hi_u32    v3, v10, s4
/*000000015f90*/ v_mul_lo_u32    v2, v10, s4
/*000000015f98*/ v_mul_lo_u32    v10, v4, s5
/*000000015fa0*/ v_mul_hi_u32    v7, v8, s6
/*000000015fa8*/ v_add_co_u32    v4, vcc, s12, v5
/*000000015fb0*/ v_add_co_ci_u32 v5, vcc, s13, v6, vcc
/*000000015fb4*/ v_mul_lo_u32    v6, v8, s6
/*000000015fbc*/ v_add_co_u32    v8, vcc, s12, v12
/*000000015fc4*/ v_add_co_ci_u32 v9, vcc, s13, v13, vcc
/*000000015fc8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000015fd0*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000015fd8*/ global_store_dwordx2 v[8:9], v[6:7], off
/*000000015fe0*/ s_endpgm
/*000000015fe4*/ s_nop           0x0
/*000000015fe8*/ s_nop           0x0
/*000000015fec*/ s_nop           0x0
/*000000015ff0*/ s_nop           0x0
/*000000015ff4*/ s_nop           0x0
/*000000015ff8*/ s_nop           0x0
/*000000015ffc*/ s_nop           0x0
mul_long_get_global_size_get_global_size:
.skip 256
/*000000016100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000016108*/ s_waitcnt       lgkmcnt(0)
/*00000001610c*/ s_load_dword    s1, s[6:7], 0x20
/*000000016114*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001611c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000016124*/ v_mov_b32       v4, 0
/*000000016128*/ s_lshl_b32      s3, s8, 4
/*00000001612c*/ s_lshl_b32      s6, s9, 1
/*000000016130*/ s_lshl_b32      s7, s10, 1
/*000000016134*/ v_mov_b32       v6, v4
/*000000016138*/ v_add3_u32      v3, s0, s3, v0
/*000000016140*/ v_add3_u32      v5, s2, s6, v1
/*000000016148*/ s_waitcnt       lgkmcnt(0)
/*00000001614c*/ v_add3_u32      v0, s1, s7, v2
/*000000016154*/ v_mov_b32       v1, v4
/*000000016158*/ s_mul_hi_u32    s0, s12, s12
/*00000001615c*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000016164*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000001616c*/ s_mul_i32       s1, s12, s12
/*000000016170*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000016178*/ s_mul_hi_u32    s2, s13, s13
/*00000001617c*/ s_mul_i32       s3, s13, s13
/*000000016180*/ v_add_co_u32    v7, vcc, s4, v7
/*000000016188*/ v_mov_b32       v13, s1
/*00000001618c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000016190*/ v_add_co_u32    v3, vcc, s4, v5
/*000000016198*/ v_mov_b32       v14, s0
/*00000001619c*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*0000000161a0*/ v_add_co_u32    v5, vcc, s4, v0
/*0000000161a8*/ s_mul_i32       s0, s14, s14
/*0000000161ac*/ s_mul_hi_u32    s1, s14, s14
/*0000000161b0*/ v_mov_b32       v9, s3
/*0000000161b4*/ v_mov_b32       v10, s2
/*0000000161b8*/ v_mov_b32       v11, s0
/*0000000161bc*/ v_mov_b32       v12, s1
/*0000000161c0*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*0000000161c4*/ global_store_dwordx2 v[7:8], v[13:14], off
/*0000000161cc*/ global_store_dwordx2 v[3:4], v[9:10], off
/*0000000161d4*/ global_store_dwordx2 v[5:6], v[11:12], off
/*0000000161dc*/ s_endpgm
/*0000000161e0*/ s_nop           0x0
/*0000000161e4*/ s_nop           0x0
/*0000000161e8*/ s_nop           0x0
/*0000000161ec*/ s_nop           0x0
/*0000000161f0*/ s_nop           0x0
/*0000000161f4*/ s_nop           0x0
/*0000000161f8*/ s_nop           0x0
/*0000000161fc*/ s_nop           0x0
mul_long_get_num_groups_get_global_size:
.skip 256
/*000000016300*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016308*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016310*/ s_waitcnt       lgkmcnt(0)
/*000000016314*/ s_clause        0x1
/*000000016318*/ s_load_dword    s3, s[6:7], 0x20
/*000000016320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016328*/ s_lshl_b32      s6, s8, 1
/*00000001632c*/ s_lshl_b32      s7, s9, 1
/*000000016330*/ s_lshl_b32      s8, s10, 2
/*000000016334*/ v_mov_b32       v4, 0
/*000000016338*/ v_mov_b32       v6, v4
/*00000001633c*/ v_mov_b32       v8, v4
/*000000016340*/ s_and_b32       s9, s0, -2
/*000000016344*/ v_add3_u32      v3, s12, s6, v0
/*00000001634c*/ v_cmp_gt_u32    s[6:7], s0, s9
/*000000016354*/ s_waitcnt       lgkmcnt(0)
/*000000016358*/ v_add3_u32      v7, s3, s8, v2
/*000000016360*/ s_lshr_b32      s3, s0, 1
/*000000016364*/ v_add3_u32      v5, s14, s7, v1
/*00000001636c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016374*/ s_cmpk_lg_u32   s6, 0x0
/*000000016378*/ s_addc_u32      s3, s3, 0
/*00000001637c*/ s_and_b32       s6, s1, -2
/*000000016380*/ s_lshr_b32      s7, s1, 1
/*000000016384*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000001638c*/ s_mul_hi_u32    s8, s3, s0
/*000000016390*/ s_mul_i32       s3, s3, s0
/*000000016394*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000001639c*/ v_mov_b32       v4, s3
/*0000000163a0*/ s_cmpk_lg_u32   s6, 0x0
/*0000000163a4*/ v_add_co_u32    v14, vcc, s4, v0
/*0000000163ac*/ s_addc_u32      s0, s7, 0
/*0000000163b0*/ s_and_b32       s3, s2, -4
/*0000000163b4*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*0000000163bc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000163c4*/ s_lshr_b32      s6, s2, 2
/*0000000163c8*/ v_add_co_ci_u32 v15, vcc, s5, v1, vcc
/*0000000163cc*/ s_mul_i32       s7, s0, s1
/*0000000163d0*/ s_mul_hi_u32    s0, s0, s1
/*0000000163d4*/ s_cmpk_lg_u32   s3, 0x0
/*0000000163d8*/ v_add_co_u32    v19, vcc, s4, v2
/*0000000163e0*/ v_mov_b32       v10, s0
/*0000000163e4*/ s_addc_u32      s0, s6, 0
/*0000000163e8*/ v_add_co_ci_u32 v20, vcc, s5, v3, vcc
/*0000000163ec*/ s_mul_i32       s1, s0, s2
/*0000000163f0*/ v_add_co_u32    v1, vcc, s4, v6
/*0000000163f8*/ s_mul_hi_u32    s0, s0, s2
/*0000000163fc*/ v_mov_b32       v5, s8
/*000000016400*/ v_mov_b32       v9, s7
/*000000016404*/ v_mov_b32       v11, s1
/*000000016408*/ v_mov_b32       v12, s0
/*00000001640c*/ v_add_co_ci_u32 v2, vcc, s5, v7, vcc
/*000000016410*/ global_store_dwordx2 v[14:15], v[4:5], off
/*000000016418*/ global_store_dwordx2 v[19:20], v[9:10], off
/*000000016420*/ global_store_dwordx2 v[1:2], v[11:12], off
/*000000016428*/ s_endpgm
/*00000001642c*/ s_nop           0x0
/*000000016430*/ s_nop           0x0
/*000000016434*/ s_nop           0x0
/*000000016438*/ s_nop           0x0
/*00000001643c*/ s_nop           0x0
/*000000016440*/ s_nop           0x0
/*000000016444*/ s_nop           0x0
/*000000016448*/ s_nop           0x0
/*00000001644c*/ s_nop           0x0
/*000000016450*/ s_nop           0x0
/*000000016454*/ s_nop           0x0
/*000000016458*/ s_nop           0x0
/*00000001645c*/ s_nop           0x0
/*000000016460*/ s_nop           0x0
/*000000016464*/ s_nop           0x0
/*000000016468*/ s_nop           0x0
/*00000001646c*/ s_nop           0x0
/*000000016470*/ s_nop           0x0
/*000000016474*/ s_nop           0x0
/*000000016478*/ s_nop           0x0
/*00000001647c*/ s_nop           0x0
/*000000016480*/ s_nop           0x0
/*000000016484*/ s_nop           0x0
/*000000016488*/ s_nop           0x0
/*00000001648c*/ s_nop           0x0
/*000000016490*/ s_nop           0x0
/*000000016494*/ s_nop           0x0
/*000000016498*/ s_nop           0x0
/*00000001649c*/ s_nop           0x0
/*0000000164a0*/ s_nop           0x0
/*0000000164a4*/ s_nop           0x0
/*0000000164a8*/ s_nop           0x0
/*0000000164ac*/ s_nop           0x0
/*0000000164b0*/ s_nop           0x0
/*0000000164b4*/ s_nop           0x0
/*0000000164b8*/ s_nop           0x0
/*0000000164bc*/ s_nop           0x0
/*0000000164c0*/ s_nop           0x0
/*0000000164c4*/ s_nop           0x0
/*0000000164c8*/ s_nop           0x0
/*0000000164cc*/ s_nop           0x0
/*0000000164d0*/ s_nop           0x0
/*0000000164d4*/ s_nop           0x0
/*0000000164d8*/ s_nop           0x0
/*0000000164dc*/ s_nop           0x0
/*0000000164e0*/ s_nop           0x0
/*0000000164e4*/ s_nop           0x0
/*0000000164e8*/ s_nop           0x0
/*0000000164ec*/ s_nop           0x0
/*0000000164f0*/ s_nop           0x0
/*0000000164f4*/ s_nop           0x0
/*0000000164f8*/ s_nop           0x0
/*0000000164fc*/ s_nop           0x0
mul_long_get_work_dim_get_global_size:
.skip 256
/*000000016600*/ v_mov_b32       v3, s4
/*000000016604*/ v_mov_b32       v4, s5
/*000000016608*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000016610*/ s_waitcnt       lgkmcnt(0)
/*000000016614*/ s_clause        0x1
/*000000016618*/ s_load_dword    s1, s[6:7], 0x20
/*000000016620*/ s_load_dwordx2  s[12:13], s[6:7], 0x8
/*000000016628*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000016630*/ s_lshl_b32      s3, s8, 1
/*000000016634*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*00000001663c*/ v_mov_b32       v4, 0
/*000000016640*/ s_lshl_b32      s8, s9, 1
/*000000016644*/ s_waitcnt       lgkmcnt(0)
/*000000016648*/ s_lshl_b32      s7, s10, 2
/*00000001664c*/ v_mov_b32       v6, v4
/*000000016650*/ v_mov_b32       v8, v4
/*000000016654*/ v_add3_u32      v3, s0, s3, v0
/*00000001665c*/ v_add3_u32      v5, s2, s8, v1
/*000000016664*/ v_add3_u32      v7, s1, s7, v2
/*00000001666c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000016674*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000001667c*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*000000016684*/ v_add_co_u32    v0, vcc, s12, v0
/*00000001668c*/ v_add_co_ci_u32 v1, vcc, s13, v1, vcc
/*000000016690*/ v_add_co_u32    v2, vcc, s12, v2
/*000000016698*/ v_add_co_ci_u32 v3, vcc, s13, v3, vcc
/*00000001669c*/ v_add_co_u32    v4, vcc, s12, v4
/*0000000166a4*/ v_add_co_ci_u32 v5, vcc, s13, v5, vcc
/*0000000166a8*/ s_waitcnt       vmcnt(0)
/*0000000166ac*/ v_mul_hi_u32    v7, s4, v10
/*0000000166b4*/ v_mul_lo_u32    v6, s4, v10
/*0000000166bc*/ v_mul_hi_u32    v9, s5, v10
/*0000000166c4*/ v_mul_lo_u32    v8, s5, v10
/*0000000166cc*/ v_mul_hi_u32    v11, s6, v10
/*0000000166d4*/ v_mul_lo_u32    v10, s6, v10
/*0000000166dc*/ global_store_dwordx2 v[0:1], v[6:7], off
/*0000000166e4*/ global_store_dwordx2 v[2:3], v[8:9], off
/*0000000166ec*/ global_store_dwordx2 v[4:5], v[10:11], off
/*0000000166f4*/ s_endpgm
/*0000000166f8*/ s_nop           0x0
/*0000000166fc*/ s_nop           0x0
mul_long_x_get_num_groups:
.skip 256
/*000000016800*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016808*/ s_waitcnt       lgkmcnt(0)
/*00000001680c*/ s_clause        0x3
/*000000016810*/ s_load_dword    s3, s[6:7], 0x8
/*000000016818*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016820*/ s_load_dword    s11, s[6:7], 0x20
/*000000016828*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000016830*/ s_lshl_b32      s7, s9, 1
/*000000016834*/ s_lshl_b32      s6, s8, 4
/*000000016838*/ s_lshl_b32      s8, s10, 1
/*00000001683c*/ v_mov_b32       v4, 0
/*000000016840*/ v_mov_b32       v6, v4
/*000000016844*/ s_waitcnt       lgkmcnt(0)
/*000000016848*/ s_ashr_i32      s10, s3, 31
/*00000001684c*/ s_and_b32       s9, s0, -16
/*000000016850*/ v_add3_u32      v5, s14, s7, v1
/*000000016858*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000016860*/ s_lshr_b32      s0, s0, 4
/*000000016864*/ v_add3_u32      v3, s12, s6, v0
/*00000001686c*/ v_add3_u32      v0, s11, s8, v2
/*000000016874*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000001687c*/ s_cmpk_lg_u32   s9, 0x0
/*000000016880*/ s_addc_u32      s0, s0, 0
/*000000016884*/ s_and_b32       s7, s1, -2
/*000000016888*/ s_lshr_b32      s6, s1, 1
/*00000001688c*/ v_cmp_gt_u32    s[1:2], s1, s7
/*000000016894*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*00000001689c*/ s_mul_hi_i32    s8, s0, s3
/*0000000168a0*/ s_mul_i32       s0, s0, s3
/*0000000168a4*/ v_mov_b32       v14, s8
/*0000000168a8*/ s_cmpk_lg_u32   s1, 0x0
/*0000000168ac*/ v_mov_b32       v13, s0
/*0000000168b0*/ s_addc_u32      s0, s6, 0
/*0000000168b4*/ s_and_b32       s7, s2, -2
/*0000000168b8*/ v_add_co_u32    v7, vcc, s4, v1
/*0000000168c0*/ v_mov_b32       v1, v4
/*0000000168c4*/ v_cmp_gt_u32    s[7:8], s2, s7
/*0000000168cc*/ s_mul_i32       s1, s0, s10
/*0000000168d0*/ s_mul_hi_u32    s6, s0, s3
/*0000000168d4*/ s_mul_i32       s0, s0, s3
/*0000000168d8*/ s_add_i32       s6, s6, s1
/*0000000168dc*/ v_mov_b32       v9, s0
/*0000000168e0*/ s_lshr_b32      s0, s2, 1
/*0000000168e4*/ s_cmpk_lg_u32   s7, 0x0
/*0000000168e8*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*0000000168f0*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*0000000168f4*/ s_addc_u32      s0, s0, 0
/*0000000168f8*/ v_add_co_u32    v3, vcc, s4, v5
/*000000016900*/ s_mul_i32       s1, s0, s10
/*000000016904*/ s_mul_hi_u32    s2, s0, s3
/*000000016908*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*00000001690c*/ v_add_co_u32    v5, vcc, s4, v0
/*000000016914*/ s_mul_i32       s0, s0, s3
/*000000016918*/ s_add_i32       s2, s2, s1
/*00000001691c*/ v_mov_b32       v10, s6
/*000000016920*/ v_mov_b32       v11, s0
/*000000016924*/ v_mov_b32       v12, s2
/*000000016928*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*00000001692c*/ global_store_dwordx2 v[7:8], v[13:14], off
/*000000016934*/ global_store_dwordx2 v[3:4], v[9:10], off
/*00000001693c*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000016944*/ s_endpgm
/*000000016948*/ s_nop           0x0
/*00000001694c*/ s_nop           0x0
/*000000016950*/ s_nop           0x0
/*000000016954*/ s_nop           0x0
/*000000016958*/ s_nop           0x0
/*00000001695c*/ s_nop           0x0
/*000000016960*/ s_nop           0x0
/*000000016964*/ s_nop           0x0
/*000000016968*/ s_nop           0x0
/*00000001696c*/ s_nop           0x0
/*000000016970*/ s_nop           0x0
/*000000016974*/ s_nop           0x0
/*000000016978*/ s_nop           0x0
/*00000001697c*/ s_nop           0x0
/*000000016980*/ s_nop           0x0
/*000000016984*/ s_nop           0x0
/*000000016988*/ s_nop           0x0
/*00000001698c*/ s_nop           0x0
/*000000016990*/ s_nop           0x0
/*000000016994*/ s_nop           0x0
/*000000016998*/ s_nop           0x0
/*00000001699c*/ s_nop           0x0
/*0000000169a0*/ s_nop           0x0
/*0000000169a4*/ s_nop           0x0
/*0000000169a8*/ s_nop           0x0
/*0000000169ac*/ s_nop           0x0
/*0000000169b0*/ s_nop           0x0
/*0000000169b4*/ s_nop           0x0
/*0000000169b8*/ s_nop           0x0
/*0000000169bc*/ s_nop           0x0
/*0000000169c0*/ s_nop           0x0
/*0000000169c4*/ s_nop           0x0
/*0000000169c8*/ s_nop           0x0
/*0000000169cc*/ s_nop           0x0
/*0000000169d0*/ s_nop           0x0
/*0000000169d4*/ s_nop           0x0
/*0000000169d8*/ s_nop           0x0
/*0000000169dc*/ s_nop           0x0
/*0000000169e0*/ s_nop           0x0
/*0000000169e4*/ s_nop           0x0
/*0000000169e8*/ s_nop           0x0
/*0000000169ec*/ s_nop           0x0
/*0000000169f0*/ s_nop           0x0
/*0000000169f4*/ s_nop           0x0
/*0000000169f8*/ s_nop           0x0
/*0000000169fc*/ s_nop           0x0
mul_long_get_global_offset_get_num_groups:
.skip 256
/*000000016b00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016b08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016b10*/ s_waitcnt       lgkmcnt(0)
/*000000016b14*/ s_clause        0x1
/*000000016b18*/ s_load_dword    s3, s[6:7], 0x20
/*000000016b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016b28*/ s_lshl_b32      s6, s8, 1
/*000000016b2c*/ s_lshl_b32      s7, s9, 4
/*000000016b30*/ s_lshl_b32      s8, s10, 1
/*000000016b34*/ v_mov_b32       v4, 0
/*000000016b38*/ v_mov_b32       v6, v4
/*000000016b3c*/ s_and_b32       s9, s0, -2
/*000000016b40*/ v_add3_u32      v3, s12, s6, v0
/*000000016b48*/ v_cmp_gt_u32    s[6:7], s0, s9
/*000000016b50*/ s_lshr_b32      s0, s0, 1
/*000000016b54*/ v_add3_u32      v5, s14, s7, v1
/*000000016b5c*/ s_waitcnt       lgkmcnt(0)
/*000000016b60*/ v_add3_u32      v0, s3, s8, v2
/*000000016b68*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*000000016b70*/ s_cmpk_lg_u32   s6, 0x0
/*000000016b74*/ s_addc_u32      s0, s0, 0
/*000000016b78*/ s_and_b32       s7, s1, -16
/*000000016b7c*/ s_lshr_b32      s6, s1, 4
/*000000016b80*/ v_cmp_gt_u32    s[1:2], s1, s7
/*000000016b88*/ s_mul_hi_u32    s8, s12, s0
/*000000016b8c*/ s_mul_i32       s0, s12, s0
/*000000016b90*/ v_add_co_u32    v7, vcc, s4, v1
/*000000016b98*/ v_mov_b32       v1, v4
/*000000016b9c*/ s_cmpk_lg_u32   s1, 0x0
/*000000016ba0*/ v_mov_b32       v13, s0
/*000000016ba4*/ s_addc_u32      s0, s6, 0
/*000000016ba8*/ s_and_b32       s1, s2, -2
/*000000016bac*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000016bb4*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000016bbc*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000016bc4*/ s_lshr_b32      s6, s2, 1
/*000000016bc8*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000016bcc*/ s_mul_i32       s2, s14, s0
/*000000016bd0*/ s_mul_hi_u32    s0, s14, s0
/*000000016bd4*/ s_cmpk_lg_u32   s1, 0x0
/*000000016bd8*/ v_add_co_u32    v3, vcc, s4, v5
/*000000016be0*/ v_mov_b32       v10, s0
/*000000016be4*/ s_addc_u32      s0, s6, 0
/*000000016be8*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*000000016bec*/ s_mul_i32       s1, s3, s0
/*000000016bf0*/ v_add_co_u32    v5, vcc, s4, v0
/*000000016bf8*/ s_mul_hi_u32    s0, s3, s0
/*000000016bfc*/ v_mov_b32       v14, s8
/*000000016c00*/ v_mov_b32       v9, s2
/*000000016c04*/ v_mov_b32       v11, s1
/*000000016c08*/ v_mov_b32       v12, s0
/*000000016c0c*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*000000016c10*/ global_store_dwordx2 v[7:8], v[13:14], off
/*000000016c18*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000016c20*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000016c28*/ s_endpgm
/*000000016c2c*/ s_nop           0x0
/*000000016c30*/ s_nop           0x0
/*000000016c34*/ s_nop           0x0
/*000000016c38*/ s_nop           0x0
/*000000016c3c*/ s_nop           0x0
/*000000016c40*/ s_nop           0x0
/*000000016c44*/ s_nop           0x0
/*000000016c48*/ s_nop           0x0
/*000000016c4c*/ s_nop           0x0
/*000000016c50*/ s_nop           0x0
/*000000016c54*/ s_nop           0x0
/*000000016c58*/ s_nop           0x0
/*000000016c5c*/ s_nop           0x0
/*000000016c60*/ s_nop           0x0
/*000000016c64*/ s_nop           0x0
/*000000016c68*/ s_nop           0x0
/*000000016c6c*/ s_nop           0x0
/*000000016c70*/ s_nop           0x0
/*000000016c74*/ s_nop           0x0
/*000000016c78*/ s_nop           0x0
/*000000016c7c*/ s_nop           0x0
/*000000016c80*/ s_nop           0x0
/*000000016c84*/ s_nop           0x0
/*000000016c88*/ s_nop           0x0
/*000000016c8c*/ s_nop           0x0
/*000000016c90*/ s_nop           0x0
/*000000016c94*/ s_nop           0x0
/*000000016c98*/ s_nop           0x0
/*000000016c9c*/ s_nop           0x0
/*000000016ca0*/ s_nop           0x0
/*000000016ca4*/ s_nop           0x0
/*000000016ca8*/ s_nop           0x0
/*000000016cac*/ s_nop           0x0
/*000000016cb0*/ s_nop           0x0
/*000000016cb4*/ s_nop           0x0
/*000000016cb8*/ s_nop           0x0
/*000000016cbc*/ s_nop           0x0
/*000000016cc0*/ s_nop           0x0
/*000000016cc4*/ s_nop           0x0
/*000000016cc8*/ s_nop           0x0
/*000000016ccc*/ s_nop           0x0
/*000000016cd0*/ s_nop           0x0
/*000000016cd4*/ s_nop           0x0
/*000000016cd8*/ s_nop           0x0
/*000000016cdc*/ s_nop           0x0
/*000000016ce0*/ s_nop           0x0
/*000000016ce4*/ s_nop           0x0
/*000000016ce8*/ s_nop           0x0
/*000000016cec*/ s_nop           0x0
/*000000016cf0*/ s_nop           0x0
/*000000016cf4*/ s_nop           0x0
/*000000016cf8*/ s_nop           0x0
/*000000016cfc*/ s_nop           0x0
mul_long_get_local_id_get_num_groups:
.skip 256
/*000000016e00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000016e08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000016e10*/ s_waitcnt       lgkmcnt(0)
/*000000016e14*/ s_clause        0x1
/*000000016e18*/ s_load_dword    s3, s[6:7], 0x20
/*000000016e20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000016e28*/ s_lshl_b32      s7, s9, 2
/*000000016e2c*/ s_lshl_b32      s6, s8, 3
/*000000016e30*/ s_lshl_b32      s8, s10, 1
/*000000016e34*/ v_mov_b32       v4, 0
/*000000016e38*/ v_mov_b32       v6, v4
/*000000016e3c*/ v_mov_b32       v8, v4
/*000000016e40*/ s_and_b32       s9, s0, -8
/*000000016e44*/ s_waitcnt       lgkmcnt(0)
/*000000016e48*/ v_add3_u32      v7, s3, s8, v2
/*000000016e50*/ v_cmp_gt_u32    s[9:10], s0, s9
/*000000016e58*/ s_lshr_b32      s0, s0, 3
/*000000016e5c*/ v_add3_u32      v3, s12, s6, v0
/*000000016e64*/ v_add3_u32      v5, s14, s7, v1
/*000000016e6c*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000016e74*/ s_cmpk_lg_u32   s9, 0x0
/*000000016e78*/ s_addc_u32      s0, s0, 0
/*000000016e7c*/ s_and_b32       s3, s1, -4
/*000000016e80*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*000000016e88*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000016e90*/ s_lshr_b32      s1, s1, 2
/*000000016e94*/ v_mul_hi_u32    v10, s0, v0
/*000000016e9c*/ v_mul_lo_u32    v9, s0, v0
/*000000016ea4*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000016eac*/ s_cmpk_lg_u32   s3, 0x0
/*000000016eb0*/ v_add_co_u32    v3, vcc, s4, v3
/*000000016eb8*/ s_addc_u32      s0, s1, 0
/*000000016ebc*/ s_and_b32       s1, s2, -2
/*000000016ec0*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*000000016ec4*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000016ecc*/ s_lshr_b32      s2, s2, 1
/*000000016ed0*/ v_add_co_u32    v5, vcc, s4, v5
/*000000016ed8*/ v_mul_hi_u32    v12, s0, v1
/*000000016ee0*/ v_mul_lo_u32    v11, s0, v1
/*000000016ee8*/ s_cmpk_lg_u32   s1, 0x0
/*000000016eec*/ v_add_co_ci_u32 v6, vcc, s5, v6, vcc
/*000000016ef0*/ s_addc_u32      s1, s2, 0
/*000000016ef4*/ v_add_co_u32    v14, vcc, s4, v7
/*000000016efc*/ v_mul_hi_u32    v1, s1, v2
/*000000016f04*/ v_mul_lo_u32    v0, s1, v2
/*000000016f0c*/ v_add_co_ci_u32 v15, vcc, s5, v8, vcc
/*000000016f10*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000016f18*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000016f20*/ global_store_dwordx2 v[14:15], v[0:1], off
/*000000016f28*/ s_endpgm
/*000000016f2c*/ s_nop           0x0
/*000000016f30*/ s_nop           0x0
/*000000016f34*/ s_nop           0x0
/*000000016f38*/ s_nop           0x0
/*000000016f3c*/ s_nop           0x0
/*000000016f40*/ s_nop           0x0
/*000000016f44*/ s_nop           0x0
/*000000016f48*/ s_nop           0x0
/*000000016f4c*/ s_nop           0x0
/*000000016f50*/ s_nop           0x0
/*000000016f54*/ s_nop           0x0
/*000000016f58*/ s_nop           0x0
/*000000016f5c*/ s_nop           0x0
/*000000016f60*/ s_nop           0x0
/*000000016f64*/ s_nop           0x0
/*000000016f68*/ s_nop           0x0
/*000000016f6c*/ s_nop           0x0
/*000000016f70*/ s_nop           0x0
/*000000016f74*/ s_nop           0x0
/*000000016f78*/ s_nop           0x0
/*000000016f7c*/ s_nop           0x0
/*000000016f80*/ s_nop           0x0
/*000000016f84*/ s_nop           0x0
/*000000016f88*/ s_nop           0x0
/*000000016f8c*/ s_nop           0x0
/*000000016f90*/ s_nop           0x0
/*000000016f94*/ s_nop           0x0
/*000000016f98*/ s_nop           0x0
/*000000016f9c*/ s_nop           0x0
/*000000016fa0*/ s_nop           0x0
/*000000016fa4*/ s_nop           0x0
/*000000016fa8*/ s_nop           0x0
/*000000016fac*/ s_nop           0x0
/*000000016fb0*/ s_nop           0x0
/*000000016fb4*/ s_nop           0x0
/*000000016fb8*/ s_nop           0x0
/*000000016fbc*/ s_nop           0x0
/*000000016fc0*/ s_nop           0x0
/*000000016fc4*/ s_nop           0x0
/*000000016fc8*/ s_nop           0x0
/*000000016fcc*/ s_nop           0x0
/*000000016fd0*/ s_nop           0x0
/*000000016fd4*/ s_nop           0x0
/*000000016fd8*/ s_nop           0x0
/*000000016fdc*/ s_nop           0x0
/*000000016fe0*/ s_nop           0x0
/*000000016fe4*/ s_nop           0x0
/*000000016fe8*/ s_nop           0x0
/*000000016fec*/ s_nop           0x0
/*000000016ff0*/ s_nop           0x0
/*000000016ff4*/ s_nop           0x0
/*000000016ff8*/ s_nop           0x0
/*000000016ffc*/ s_nop           0x0
mul_long_get_group_id_get_num_groups:
.skip 256
/*000000017100*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000017108*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000017110*/ s_waitcnt       lgkmcnt(0)
/*000000017114*/ s_clause        0x1
/*000000017118*/ s_load_dword    s3, s[6:7], 0x20
/*000000017120*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017128*/ s_lshl_b32      s6, s8, 1
/*00000001712c*/ s_lshl_b32      s7, s9, 4
/*000000017130*/ s_lshl_b32      s11, s10, 1
/*000000017134*/ v_mov_b32       v4, 0
/*000000017138*/ v_mov_b32       v6, v4
/*00000001713c*/ s_and_b32       s13, s0, -2
/*000000017140*/ v_add3_u32      v3, s12, s6, v0
/*000000017148*/ v_cmp_gt_u32    s[6:7], s0, s13
/*000000017150*/ s_lshr_b32      s0, s0, 1
/*000000017154*/ s_waitcnt       lgkmcnt(0)
/*000000017158*/ v_add3_u32      v0, s3, s11, v2
/*000000017160*/ v_add3_u32      v5, s14, s7, v1
/*000000017168*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*000000017170*/ s_cmpk_lg_u32   s6, 0x0
/*000000017174*/ s_addc_u32      s0, s0, 0
/*000000017178*/ s_and_b32       s6, s1, -16
/*00000001717c*/ s_lshr_b32      s3, s1, 4
/*000000017180*/ v_cmp_gt_u32    s[1:2], s1, s6
/*000000017188*/ s_mul_hi_u32    s7, s0, s8
/*00000001718c*/ s_mul_i32       s0, s0, s8
/*000000017190*/ v_add_co_u32    v7, vcc, s4, v1
/*000000017198*/ v_mov_b32       v1, v4
/*00000001719c*/ s_cmpk_lg_u32   s1, 0x0
/*0000000171a0*/ v_mov_b32       v13, s0
/*0000000171a4*/ s_addc_u32      s0, s3, 0
/*0000000171a8*/ s_and_b32       s1, s2, -2
/*0000000171ac*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*0000000171b4*/ v_cmp_gt_u32    s[1:2], s2, s1
/*0000000171bc*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*0000000171c4*/ s_lshr_b32      s3, s2, 1
/*0000000171c8*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*0000000171cc*/ s_mul_i32       s2, s0, s9
/*0000000171d0*/ s_mul_hi_u32    s0, s0, s9
/*0000000171d4*/ s_cmpk_lg_u32   s1, 0x0
/*0000000171d8*/ v_add_co_u32    v3, vcc, s4, v5
/*0000000171e0*/ v_mov_b32       v10, s0
/*0000000171e4*/ s_addc_u32      s0, s3, 0
/*0000000171e8*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*0000000171ec*/ s_mul_i32       s1, s0, s10
/*0000000171f0*/ v_add_co_u32    v5, vcc, s4, v0
/*0000000171f8*/ s_mul_hi_u32    s0, s0, s10
/*0000000171fc*/ v_mov_b32       v14, s7
/*000000017200*/ v_mov_b32       v9, s2
/*000000017204*/ v_mov_b32       v11, s1
/*000000017208*/ v_mov_b32       v12, s0
/*00000001720c*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*000000017210*/ global_store_dwordx2 v[7:8], v[13:14], off
/*000000017218*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000017220*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000017228*/ s_endpgm
/*00000001722c*/ s_nop           0x0
/*000000017230*/ s_nop           0x0
/*000000017234*/ s_nop           0x0
/*000000017238*/ s_nop           0x0
/*00000001723c*/ s_nop           0x0
/*000000017240*/ s_nop           0x0
/*000000017244*/ s_nop           0x0
/*000000017248*/ s_nop           0x0
/*00000001724c*/ s_nop           0x0
/*000000017250*/ s_nop           0x0
/*000000017254*/ s_nop           0x0
/*000000017258*/ s_nop           0x0
/*00000001725c*/ s_nop           0x0
/*000000017260*/ s_nop           0x0
/*000000017264*/ s_nop           0x0
/*000000017268*/ s_nop           0x0
/*00000001726c*/ s_nop           0x0
/*000000017270*/ s_nop           0x0
/*000000017274*/ s_nop           0x0
/*000000017278*/ s_nop           0x0
/*00000001727c*/ s_nop           0x0
/*000000017280*/ s_nop           0x0
/*000000017284*/ s_nop           0x0
/*000000017288*/ s_nop           0x0
/*00000001728c*/ s_nop           0x0
/*000000017290*/ s_nop           0x0
/*000000017294*/ s_nop           0x0
/*000000017298*/ s_nop           0x0
/*00000001729c*/ s_nop           0x0
/*0000000172a0*/ s_nop           0x0
/*0000000172a4*/ s_nop           0x0
/*0000000172a8*/ s_nop           0x0
/*0000000172ac*/ s_nop           0x0
/*0000000172b0*/ s_nop           0x0
/*0000000172b4*/ s_nop           0x0
/*0000000172b8*/ s_nop           0x0
/*0000000172bc*/ s_nop           0x0
/*0000000172c0*/ s_nop           0x0
/*0000000172c4*/ s_nop           0x0
/*0000000172c8*/ s_nop           0x0
/*0000000172cc*/ s_nop           0x0
/*0000000172d0*/ s_nop           0x0
/*0000000172d4*/ s_nop           0x0
/*0000000172d8*/ s_nop           0x0
/*0000000172dc*/ s_nop           0x0
/*0000000172e0*/ s_nop           0x0
/*0000000172e4*/ s_nop           0x0
/*0000000172e8*/ s_nop           0x0
/*0000000172ec*/ s_nop           0x0
/*0000000172f0*/ s_nop           0x0
/*0000000172f4*/ s_nop           0x0
/*0000000172f8*/ s_nop           0x0
/*0000000172fc*/ s_nop           0x0
mul_long_get_local_size_get_num_groups:
.skip 256
/*000000017400*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000017408*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000017410*/ s_waitcnt       lgkmcnt(0)
/*000000017414*/ s_clause        0x1
/*000000017418*/ s_load_dword    s3, s[6:7], 0x20
/*000000017420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017428*/ s_lshl_b32      s6, s8, 1
/*00000001742c*/ s_lshl_b32      s9, s9, 1
/*000000017430*/ s_lshl_b32      s10, s10, 2
/*000000017434*/ v_mov_b32       v4, 0
/*000000017438*/ s_mov_b32       s7, 0
/*00000001743c*/ v_mov_b32       v6, v4
/*000000017440*/ v_mov_b32       v8, v4
/*000000017444*/ s_and_b32       s8, s0, -2
/*000000017448*/ v_add3_u32      v3, s12, s6, v0
/*000000017450*/ v_cmp_gt_u32    s[8:9], s0, s8
/*000000017458*/ s_lshr_b32      s0, s0, 1
/*00000001745c*/ s_waitcnt       lgkmcnt(0)
/*000000017460*/ v_add3_u32      v7, s3, s10, v2
/*000000017468*/ v_add3_u32      v5, s14, s9, v1
/*000000017470*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000017478*/ s_cmpk_lg_u32   s8, 0x0
/*00000001747c*/ s_addc_u32      s6, s0, 0
/*000000017480*/ s_and_b32       s0, s1, -2
/*000000017484*/ s_lshr_b32      s3, s1, 1
/*000000017488*/ v_cmp_gt_u32    s[8:9], s1, s0
/*000000017490*/ s_lshl_b64      s[0:1], s[6:7], 1
/*000000017494*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*00000001749c*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000174a4*/ v_mov_b32       v7, s1
/*0000000174a8*/ s_cmpk_lg_u32   s8, 0x0
/*0000000174ac*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000174b4*/ s_addc_u32      s6, s3, 0
/*0000000174b8*/ s_and_b32       s3, s2, -4
/*0000000174bc*/ v_mov_b32       v6, s0
/*0000000174c0*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000174c8*/ s_lshl_b64      s[0:1], s[6:7], 1
/*0000000174cc*/ s_lshr_b32      s2, s2, 2
/*0000000174d0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000174d4*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000174dc*/ s_cmpk_lg_u32   s3, 0x0
/*0000000174e0*/ v_mov_b32       v9, s1
/*0000000174e4*/ s_addc_u32      s6, s2, 0
/*0000000174e8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000174ec*/ v_mov_b32       v8, s0
/*0000000174f0*/ s_lshl_b64      s[0:1], s[6:7], 2
/*0000000174f4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000174fc*/ v_mov_b32       v11, s1
/*000000017500*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000017504*/ v_mov_b32       v10, s0
/*000000017508*/ global_store_dwordx2 v[0:1], v[6:7], off
/*000000017510*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000017518*/ global_store_dwordx2 v[4:5], v[10:11], off
/*000000017520*/ s_endpgm
/*000000017524*/ s_nop           0x0
/*000000017528*/ s_nop           0x0
/*00000001752c*/ s_nop           0x0
/*000000017530*/ s_nop           0x0
/*000000017534*/ s_nop           0x0
/*000000017538*/ s_nop           0x0
/*00000001753c*/ s_nop           0x0
/*000000017540*/ s_nop           0x0
/*000000017544*/ s_nop           0x0
/*000000017548*/ s_nop           0x0
/*00000001754c*/ s_nop           0x0
/*000000017550*/ s_nop           0x0
/*000000017554*/ s_nop           0x0
/*000000017558*/ s_nop           0x0
/*00000001755c*/ s_nop           0x0
/*000000017560*/ s_nop           0x0
/*000000017564*/ s_nop           0x0
/*000000017568*/ s_nop           0x0
/*00000001756c*/ s_nop           0x0
/*000000017570*/ s_nop           0x0
/*000000017574*/ s_nop           0x0
/*000000017578*/ s_nop           0x0
/*00000001757c*/ s_nop           0x0
/*000000017580*/ s_nop           0x0
/*000000017584*/ s_nop           0x0
/*000000017588*/ s_nop           0x0
/*00000001758c*/ s_nop           0x0
/*000000017590*/ s_nop           0x0
/*000000017594*/ s_nop           0x0
/*000000017598*/ s_nop           0x0
/*00000001759c*/ s_nop           0x0
/*0000000175a0*/ s_nop           0x0
/*0000000175a4*/ s_nop           0x0
/*0000000175a8*/ s_nop           0x0
/*0000000175ac*/ s_nop           0x0
/*0000000175b0*/ s_nop           0x0
/*0000000175b4*/ s_nop           0x0
/*0000000175b8*/ s_nop           0x0
/*0000000175bc*/ s_nop           0x0
/*0000000175c0*/ s_nop           0x0
/*0000000175c4*/ s_nop           0x0
/*0000000175c8*/ s_nop           0x0
/*0000000175cc*/ s_nop           0x0
/*0000000175d0*/ s_nop           0x0
/*0000000175d4*/ s_nop           0x0
/*0000000175d8*/ s_nop           0x0
/*0000000175dc*/ s_nop           0x0
/*0000000175e0*/ s_nop           0x0
/*0000000175e4*/ s_nop           0x0
/*0000000175e8*/ s_nop           0x0
/*0000000175ec*/ s_nop           0x0
/*0000000175f0*/ s_nop           0x0
/*0000000175f4*/ s_nop           0x0
/*0000000175f8*/ s_nop           0x0
/*0000000175fc*/ s_nop           0x0
mul_long_get_global_id_get_num_groups:
.skip 256
/*000000017700*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000017708*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000017710*/ s_waitcnt       lgkmcnt(0)
/*000000017714*/ s_clause        0x1
/*000000017718*/ s_load_dword    s3, s[6:7], 0x20
/*000000017720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017728*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000017730*/ v_mov_b32       v4, 0
/*000000017734*/ s_lshl_b32      s7, s10, 2
/*000000017738*/ s_lshl_b32      s6, s9, 1
/*00000001773c*/ v_lshlrev_b64   v[8:9], 3, v[3:4]
/*000000017744*/ v_mov_b32       v5, v4
/*000000017748*/ v_mov_b32       v7, v4
/*00000001774c*/ s_and_b32       s8, s0, -2
/*000000017750*/ v_add3_u32      v4, s14, s6, v1
/*000000017758*/ v_cmp_gt_u32    s[8:9], s0, s8
/*000000017760*/ s_lshr_b32      s0, s0, 1
/*000000017764*/ s_waitcnt       lgkmcnt(0)
/*000000017768*/ v_add3_u32      v6, s3, s7, v2
/*000000017770*/ v_add_nc_u32    v11, s12, v3
/*000000017774*/ v_add_co_u32    v15, vcc, s4, v8
/*00000001777c*/ s_cmpk_lg_u32   s8, 0x0
/*000000017780*/ v_add_co_ci_u32 v16, vcc, s5, v9, vcc
/*000000017784*/ s_addc_u32      s0, s0, 0
/*000000017788*/ s_and_b32       s6, s1, -2
/*00000001778c*/ v_mul_hi_u32    v10, v11, s0
/*000000017794*/ v_cmp_gt_u32    s[3:4], s1, s6
/*00000001779c*/ s_lshr_b32      s1, s1, 1
/*0000000177a0*/ v_mul_lo_u32    v9, v11, s0
/*0000000177a8*/ v_lshlrev_b64   v[2:3], 3, v[4:5]
/*0000000177b0*/ v_lshlrev_b64   v[7:8], 3, v[6:7]
/*0000000177b8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000177bc*/ s_addc_u32      s1, s1, 0
/*0000000177c0*/ s_and_b32       s3, s2, -4
/*0000000177c4*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000177cc*/ v_cmp_gt_u32    s[0:1], s2, s3
/*0000000177d4*/ s_lshr_b32      s2, s2, 2
/*0000000177d8*/ v_mul_hi_u32    v5, v4, s1
/*0000000177e0*/ v_mul_lo_u32    v4, v4, s1
/*0000000177e8*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000177ec*/ s_cmpk_lg_u32   s0, 0x0
/*0000000177f0*/ v_add_co_u32    v13, vcc, s4, v7
/*0000000177f8*/ s_addc_u32      s0, s2, 0
/*0000000177fc*/ v_add_co_ci_u32 v14, vcc, s5, v8, vcc
/*000000017800*/ v_mul_hi_u32    v12, v6, s0
/*000000017808*/ v_mul_lo_u32    v11, v6, s0
/*000000017810*/ global_store_dwordx2 v[15:16], v[9:10], off
/*000000017818*/ global_store_dwordx2 v[2:3], v[4:5], off
/*000000017820*/ global_store_dwordx2 v[13:14], v[11:12], off
/*000000017828*/ s_endpgm
/*00000001782c*/ s_nop           0x0
/*000000017830*/ s_nop           0x0
/*000000017834*/ s_nop           0x0
/*000000017838*/ s_nop           0x0
/*00000001783c*/ s_nop           0x0
/*000000017840*/ s_nop           0x0
/*000000017844*/ s_nop           0x0
/*000000017848*/ s_nop           0x0
/*00000001784c*/ s_nop           0x0
/*000000017850*/ s_nop           0x0
/*000000017854*/ s_nop           0x0
/*000000017858*/ s_nop           0x0
/*00000001785c*/ s_nop           0x0
/*000000017860*/ s_nop           0x0
/*000000017864*/ s_nop           0x0
/*000000017868*/ s_nop           0x0
/*00000001786c*/ s_nop           0x0
/*000000017870*/ s_nop           0x0
/*000000017874*/ s_nop           0x0
/*000000017878*/ s_nop           0x0
/*00000001787c*/ s_nop           0x0
/*000000017880*/ s_nop           0x0
/*000000017884*/ s_nop           0x0
/*000000017888*/ s_nop           0x0
/*00000001788c*/ s_nop           0x0
/*000000017890*/ s_nop           0x0
/*000000017894*/ s_nop           0x0
/*000000017898*/ s_nop           0x0
/*00000001789c*/ s_nop           0x0
/*0000000178a0*/ s_nop           0x0
/*0000000178a4*/ s_nop           0x0
/*0000000178a8*/ s_nop           0x0
/*0000000178ac*/ s_nop           0x0
/*0000000178b0*/ s_nop           0x0
/*0000000178b4*/ s_nop           0x0
/*0000000178b8*/ s_nop           0x0
/*0000000178bc*/ s_nop           0x0
/*0000000178c0*/ s_nop           0x0
/*0000000178c4*/ s_nop           0x0
/*0000000178c8*/ s_nop           0x0
/*0000000178cc*/ s_nop           0x0
/*0000000178d0*/ s_nop           0x0
/*0000000178d4*/ s_nop           0x0
/*0000000178d8*/ s_nop           0x0
/*0000000178dc*/ s_nop           0x0
/*0000000178e0*/ s_nop           0x0
/*0000000178e4*/ s_nop           0x0
/*0000000178e8*/ s_nop           0x0
/*0000000178ec*/ s_nop           0x0
/*0000000178f0*/ s_nop           0x0
/*0000000178f4*/ s_nop           0x0
/*0000000178f8*/ s_nop           0x0
/*0000000178fc*/ s_nop           0x0
mul_long_get_global_size_get_num_groups:
.skip 256
/*000000017a00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000017a08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000017a10*/ s_waitcnt       lgkmcnt(0)
/*000000017a14*/ s_clause        0x1
/*000000017a18*/ s_load_dword    s3, s[6:7], 0x20
/*000000017a20*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000017a28*/ s_lshl_b32      s6, s8, 4
/*000000017a2c*/ s_lshl_b32      s7, s9, 1
/*000000017a30*/ s_lshl_b32      s8, s10, 1
/*000000017a34*/ v_mov_b32       v4, 0
/*000000017a38*/ v_mov_b32       v6, v4
/*000000017a3c*/ s_and_b32       s9, s0, -16
/*000000017a40*/ v_add3_u32      v3, s12, s6, v0
/*000000017a48*/ v_cmp_gt_u32    s[6:7], s0, s9
/*000000017a50*/ s_waitcnt       lgkmcnt(0)
/*000000017a54*/ v_add3_u32      v0, s3, s8, v2
/*000000017a5c*/ s_lshr_b32      s3, s0, 4
/*000000017a60*/ v_add3_u32      v5, s14, s7, v1
/*000000017a68*/ v_lshlrev_b64   v[1:2], 3, v[3:4]
/*000000017a70*/ s_cmpk_lg_u32   s6, 0x0
/*000000017a74*/ s_addc_u32      s3, s3, 0
/*000000017a78*/ s_and_b32       s7, s1, -2
/*000000017a7c*/ s_mul_hi_u32    s8, s3, s0
/*000000017a80*/ s_mul_i32       s3, s3, s0
/*000000017a84*/ v_cmp_gt_u32    s[0:1], s1, s7
/*000000017a8c*/ s_lshr_b32      s6, s1, 1
/*000000017a90*/ v_add_co_u32    v7, vcc, s4, v1
/*000000017a98*/ v_mov_b32       v1, v4
/*000000017a9c*/ v_mov_b32       v13, s3
/*000000017aa0*/ s_cmpk_lg_u32   s0, 0x0
/*000000017aa4*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000017aac*/ s_addc_u32      s0, s6, 0
/*000000017ab0*/ s_and_b32       s3, s2, -2
/*000000017ab4*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*000000017abc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000017ac4*/ s_lshr_b32      s6, s2, 1
/*000000017ac8*/ v_add_co_ci_u32 v8, vcc, s5, v2, vcc
/*000000017acc*/ s_mul_i32       s7, s0, s1
/*000000017ad0*/ s_mul_hi_u32    s0, s0, s1
/*000000017ad4*/ s_cmpk_lg_u32   s3, 0x0
/*000000017ad8*/ v_add_co_u32    v3, vcc, s4, v5
/*000000017ae0*/ v_mov_b32       v10, s0
/*000000017ae4*/ s_addc_u32      s0, s6, 0
/*000000017ae8*/ v_add_co_ci_u32 v4, vcc, s5, v6, vcc
/*000000017aec*/ s_mul_i32       s1, s0, s2
/*000000017af0*/ v_add_co_u32    v5, vcc, s4, v0
/*000000017af8*/ s_mul_hi_u32    s0, s0, s2
/*000000017afc*/ v_mov_b32       v14, s8
/*000000017b00*/ v_mov_b32       v9, s7
/*000000017b04*/ v_mov_b32       v11, s1
/*000000017b08*/ v_mov_b32       v12, s0
/*000000017b0c*/ v_add_co_ci_u32 v6, vcc, s5, v1, vcc
/*000000017b10*/ global_store_dwordx2 v[7:8], v[13:14], off
/*000000017b18*/ global_store_dwordx2 v[3:4], v[9:10], off
/*000000017b20*/ global_store_dwordx2 v[5:6], v[11:12], off
/*000000017b28*/ s_endpgm
/*000000017b2c*/ s_nop           0x0
/*000000017b30*/ s_nop           0x0
/*000000017b34*/ s_nop           0x0
/*000000017b38*/ s_nop           0x0
/*000000017b3c*/ s_nop           0x0
/*000000017b40*/ s_nop           0x0
/*000000017b44*/ s_nop           0x0
/*000000017b48*/ s_nop           0x0
/*000000017b4c*/ s_nop           0x0
/*000000017b50*/ s_nop           0x0
/*000000017b54*/ s_nop           0x0
/*000000017b58*/ s_nop           0x0
/*000000017b5c*/ s_nop           0x0
/*000000017b60*/ s_nop           0x0
/*000000017b64*/ s_nop           0x0
/*000000017b68*/ s_nop           0x0
/*000000017b6c*/ s_nop           0x0
/*000000017b70*/ s_nop           0x0
/*000000017b74*/ s_nop           0x0
/*000000017b78*/ s_nop           0x0
/*000000017b7c*/ s_nop           0x0
/*000000017b80*/ s_nop           0x0
/*000000017b84*/ s_nop           0x0
/*000000017b88*/ s_nop           0x0
/*000000017b8c*/ s_nop           0x0
/*000000017b90*/ s_nop           0x0
/*000000017b94*/ s_nop           0x0
/*000000017b98*/ s_nop           0x0
/*000000017b9c*/ s_nop           0x0
/*000000017ba0*/ s_nop           0x0
/*000000017ba4*/ s_nop           0x0
/*000000017ba8*/ s_nop           0x0
/*000000017bac*/ s_nop           0x0
/*000000017bb0*/ s_nop           0x0
/*000000017bb4*/ s_nop           0x0
/*000000017bb8*/ s_nop           0x0
/*000000017bbc*/ s_nop           0x0
/*000000017bc0*/ s_nop           0x0
/*000000017bc4*/ s_nop           0x0
/*000000017bc8*/ s_nop           0x0
/*000000017bcc*/ s_nop           0x0
/*000000017bd0*/ s_nop           0x0
/*000000017bd4*/ s_nop           0x0
/*000000017bd8*/ s_nop           0x0
/*000000017bdc*/ s_nop           0x0
/*000000017be0*/ s_nop           0x0
/*000000017be4*/ s_nop           0x0
/*000000017be8*/ s_nop           0x0
/*000000017bec*/ s_nop           0x0
/*000000017bf0*/ s_nop           0x0
/*000000017bf4*/ s_nop           0x0
/*000000017bf8*/ s_nop           0x0
/*000000017bfc*/ s_nop           0x0
mul_long_get_num_groups_get_num_groups:
.skip 256
/*000000017d00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000017d08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000017d10*/ s_waitcnt       lgkmcnt(0)
/*000000017d14*/ s_clause        0x1
/*000000017d18*/ s_load_dword    s3, s[6:7], 0x20
/*000000017d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000017d28*/ s_lshl_b32      s6, s8, 1
/*000000017d2c*/ s_lshl_b32      s7, s9, 1
/*000000017d30*/ s_lshl_b32      s8, s10, 2
/*000000017d34*/ v_mov_b32       v4, 0
/*000000017d38*/ v_mov_b32       v6, v4
/*000000017d3c*/ v_mov_b32       v8, v4
/*000000017d40*/ s_and_b32       s9, s0, -2
/*000000017d44*/ v_add3_u32      v3, s12, s6, v0
/*000000017d4c*/ v_cmp_gt_u32    s[6:7], s0, s9
/*000000017d54*/ s_lshr_b32      s0, s0, 1
/*000000017d58*/ s_waitcnt       lgkmcnt(0)
/*000000017d5c*/ v_add3_u32      v7, s3, s8, v2
/*000000017d64*/ v_add3_u32      v5, s14, s7, v1
/*000000017d6c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000017d74*/ s_cmpk_lg_u32   s6, 0x0
/*000000017d78*/ s_addc_u32      s0, s0, 0
/*000000017d7c*/ s_and_b32       s3, s1, -2
/*000000017d80*/ s_lshr_b32      s6, s1, 1
/*000000017d84*/ v_cmp_gt_u32    s[1:2], s1, s3
/*000000017d8c*/ s_mul_hi_u32    s3, s0, s0
/*000000017d90*/ s_mul_i32       s0, s0, s0
/*000000017d94*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000017d9c*/ v_mov_b32       v4, s0
/*000000017da0*/ s_cmpk_lg_u32   s1, 0x0
/*000000017da4*/ v_add_co_u32    v14, vcc, s4, v0
/*000000017dac*/ s_addc_u32      s0, s6, 0
/*000000017db0*/ s_and_b32       s1, s2, -4
/*000000017db4*/ v_lshlrev_b64   v[6:7], 3, v[7:8]
/*000000017dbc*/ v_cmp_gt_u32    s[1:2], s2, s1
/*000000017dc4*/ s_lshr_b32      s2, s2, 2
/*000000017dc8*/ v_add_co_ci_u32 v15, vcc, s5, v1, vcc
/*000000017dcc*/ v_mov_b32       v5, s3
/*000000017dd0*/ s_mul_i32       s3, s0, s0
/*000000017dd4*/ s_mul_hi_u32    s0, s0, s0
/*000000017dd8*/ s_cmpk_lg_u32   s1, 0x0
/*000000017ddc*/ v_add_co_u32    v19, vcc, s4, v2
/*000000017de4*/ v_mov_b32       v10, s0
/*000000017de8*/ s_addc_u32      s0, s2, 0
/*000000017dec*/ v_add_co_ci_u32 v20, vcc, s5, v3, vcc
/*000000017df0*/ s_mul_i32       s1, s0, s0
/*000000017df4*/ v_add_co_u32    v1, vcc, s4, v6
/*000000017dfc*/ s_mul_hi_u32    s0, s0, s0
/*000000017e00*/ v_mov_b32       v9, s3
/*000000017e04*/ v_mov_b32       v11, s1
/*000000017e08*/ v_mov_b32       v12, s0
/*000000017e0c*/ v_add_co_ci_u32 v2, vcc, s5, v7, vcc
/*000000017e10*/ global_store_dwordx2 v[14:15], v[4:5], off
/*000000017e18*/ global_store_dwordx2 v[19:20], v[9:10], off
/*000000017e20*/ global_store_dwordx2 v[1:2], v[11:12], off
/*000000017e28*/ s_endpgm
/*000000017e2c*/ s_nop           0x0
/*000000017e30*/ s_nop           0x0
/*000000017e34*/ s_nop           0x0
/*000000017e38*/ s_nop           0x0
/*000000017e3c*/ s_nop           0x0
/*000000017e40*/ s_nop           0x0
/*000000017e44*/ s_nop           0x0
/*000000017e48*/ s_nop           0x0
/*000000017e4c*/ s_nop           0x0
/*000000017e50*/ s_nop           0x0
/*000000017e54*/ s_nop           0x0
/*000000017e58*/ s_nop           0x0
/*000000017e5c*/ s_nop           0x0
/*000000017e60*/ s_nop           0x0
/*000000017e64*/ s_nop           0x0
/*000000017e68*/ s_nop           0x0
/*000000017e6c*/ s_nop           0x0
/*000000017e70*/ s_nop           0x0
/*000000017e74*/ s_nop           0x0
/*000000017e78*/ s_nop           0x0
/*000000017e7c*/ s_nop           0x0
/*000000017e80*/ s_nop           0x0
/*000000017e84*/ s_nop           0x0
/*000000017e88*/ s_nop           0x0
/*000000017e8c*/ s_nop           0x0
/*000000017e90*/ s_nop           0x0
/*000000017e94*/ s_nop           0x0
/*000000017e98*/ s_nop           0x0
/*000000017e9c*/ s_nop           0x0
/*000000017ea0*/ s_nop           0x0
/*000000017ea4*/ s_nop           0x0
/*000000017ea8*/ s_nop           0x0
/*000000017eac*/ s_nop           0x0
/*000000017eb0*/ s_nop           0x0
/*000000017eb4*/ s_nop           0x0
/*000000017eb8*/ s_nop           0x0
/*000000017ebc*/ s_nop           0x0
/*000000017ec0*/ s_nop           0x0
/*000000017ec4*/ s_nop           0x0
/*000000017ec8*/ s_nop           0x0
/*000000017ecc*/ s_nop           0x0
/*000000017ed0*/ s_nop           0x0
/*000000017ed4*/ s_nop           0x0
/*000000017ed8*/ s_nop           0x0
/*000000017edc*/ s_nop           0x0
/*000000017ee0*/ s_nop           0x0
/*000000017ee4*/ s_nop           0x0
/*000000017ee8*/ s_nop           0x0
/*000000017eec*/ s_nop           0x0
/*000000017ef0*/ s_nop           0x0
/*000000017ef4*/ s_nop           0x0
/*000000017ef8*/ s_nop           0x0
/*000000017efc*/ s_nop           0x0
mul_long_get_work_dim_get_num_groups:
.skip 256
/*000000018000*/ v_mov_b32       v3, s4
/*000000018004*/ v_mov_b32       v4, s5
/*000000018008*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000018010*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000018018*/ s_waitcnt       lgkmcnt(0)
/*00000001801c*/ s_clause        0x1
/*000000018020*/ s_load_dword    s3, s[6:7], 0x20
/*000000018028*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000018030*/ s_lshl_b32      s7, s8, 1
/*000000018034*/ s_lshl_b32      s8, s9, 1
/*000000018038*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*000000018040*/ s_lshl_b32      s9, s10, 2
/*000000018044*/ v_mov_b32       v4, 0
/*000000018048*/ v_mov_b32       v6, v4
/*00000001804c*/ v_mov_b32       v8, v4
/*000000018050*/ s_and_b32       s6, s0, -2
/*000000018054*/ v_add3_u32      v3, s12, s7, v0
/*00000001805c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000018064*/ s_lshr_b32      s0, s0, 1
/*000000018068*/ v_add3_u32      v5, s14, s8, v1
/*000000018070*/ s_waitcnt       lgkmcnt(0)
/*000000018074*/ v_add3_u32      v7, s3, s9, v2
/*00000001807c*/ v_lshlrev_b64   v[0:1], 3, v[3:4]
/*000000018084*/ s_cmpk_lg_u32   s6, 0x0
/*000000018088*/ s_addc_u32      s0, s0, 0
/*00000001808c*/ s_and_b32       s6, s1, -2
/*000000018090*/ v_lshlrev_b64   v[2:3], 3, v[5:6]
/*000000018098*/ v_cmp_gt_u32    s[6:7], s1, s6
/*0000000180a0*/ s_lshr_b32      s1, s1, 1
/*0000000180a4*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000180ac*/ v_lshlrev_b64   v[4:5], 3, v[7:8]
/*0000000180b4*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000180b8*/ s_cmpk_lg_u32   s6, 0x0
/*0000000180bc*/ v_add_co_u32    v2, vcc, s4, v2
/*0000000180c4*/ s_addc_u32      s1, s1, 0
/*0000000180c8*/ s_and_b32       s3, s2, -4
/*0000000180cc*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*0000000180d0*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000180d8*/ s_lshr_b32      s2, s2, 2
/*0000000180dc*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000180e4*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000180e8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000180ec*/ s_addc_u32      s2, s2, 0
/*0000000180f0*/ s_waitcnt       vmcnt(0)
/*0000000180f4*/ v_mul_hi_u32    v7, s0, v10
/*0000000180fc*/ v_mul_lo_u32    v6, s0, v10
/*000000018104*/ v_mul_hi_u32    v9, s1, v10
/*00000001810c*/ v_mul_lo_u32    v8, s1, v10
/*000000018114*/ v_mul_hi_u32    v11, s2, v10
/*00000001811c*/ v_mul_lo_u32    v10, s2, v10
/*000000018124*/ global_store_dwordx2 v[0:1], v[6:7], off
/*00000001812c*/ global_store_dwordx2 v[2:3], v[8:9], off
/*000000018134*/ global_store_dwordx2 v[4:5], v[10:11], off
/*00000001813c*/ s_endpgm
/*000000018140*/ s_nop           0x0
/*000000018144*/ s_nop           0x0
/*000000018148*/ s_nop           0x0
/*00000001814c*/ s_nop           0x0
/*000000018150*/ s_nop           0x0
/*000000018154*/ s_nop           0x0
/*000000018158*/ s_nop           0x0
/*00000001815c*/ s_nop           0x0
/*000000018160*/ s_nop           0x0
/*000000018164*/ s_nop           0x0
/*000000018168*/ s_nop           0x0
/*00000001816c*/ s_nop           0x0
/*000000018170*/ s_nop           0x0
/*000000018174*/ s_nop           0x0
/*000000018178*/ s_nop           0x0
/*00000001817c*/ s_nop           0x0
/*000000018180*/ s_nop           0x0
/*000000018184*/ s_nop           0x0
/*000000018188*/ s_nop           0x0
/*00000001818c*/ s_nop           0x0
/*000000018190*/ s_nop           0x0
/*000000018194*/ s_nop           0x0
/*000000018198*/ s_nop           0x0
/*00000001819c*/ s_nop           0x0
/*0000000181a0*/ s_nop           0x0
/*0000000181a4*/ s_nop           0x0
/*0000000181a8*/ s_nop           0x0
/*0000000181ac*/ s_nop           0x0
/*0000000181b0*/ s_nop           0x0
/*0000000181b4*/ s_nop           0x0
/*0000000181b8*/ s_nop           0x0
/*0000000181bc*/ s_nop           0x0
/*0000000181c0*/ s_nop           0x0
/*0000000181c4*/ s_nop           0x0
/*0000000181c8*/ s_nop           0x0
/*0000000181cc*/ s_nop           0x0
/*0000000181d0*/ s_nop           0x0
/*0000000181d4*/ s_nop           0x0
/*0000000181d8*/ s_nop           0x0
/*0000000181dc*/ s_nop           0x0
/*0000000181e0*/ s_nop           0x0
/*0000000181e4*/ s_nop           0x0
/*0000000181e8*/ s_nop           0x0
/*0000000181ec*/ s_nop           0x0
/*0000000181f0*/ s_nop           0x0
/*0000000181f4*/ s_nop           0x0
/*0000000181f8*/ s_nop           0x0
/*0000000181fc*/ s_nop           0x0
mul_long_x_get_work_dim:
.skip 256
/*000000018300*/ v_mov_b32       v3, s4
/*000000018304*/ v_mov_b32       v4, s5
/*000000018308*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018310*/ s_waitcnt       lgkmcnt(0)
/*000000018314*/ s_clause        0x2
/*000000018318*/ s_load_dword    s1, s[6:7], 0x20
/*000000018320*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000018328*/ s_load_dword    s3, s[6:7], 0x8
/*000000018330*/ s_lshl_b32      s6, s8, 4
/*000000018334*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*00000001833c*/ v_mov_b32       v3, 0
/*000000018340*/ s_lshl_b32      s7, s9, 1
/*000000018344*/ s_lshl_b32      s8, s10, 1
/*000000018348*/ v_mov_b32       v5, v3
/*00000001834c*/ v_mov_b32       v7, v3
/*000000018350*/ v_mov_b32       v9, v3
/*000000018354*/ v_add3_u32      v4, s0, s6, v0
/*00000001835c*/ v_add3_u32      v6, s2, s7, v1
/*000000018364*/ s_waitcnt       lgkmcnt(0)
/*000000018368*/ v_add3_u32      v8, s1, s8, v2
/*000000018370*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000018378*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000018380*/ v_lshlrev_b64   v[6:7], 3, v[8:9]
/*000000018388*/ v_add_co_u32    v0, vcc, s4, v0
/*000000018390*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000018394*/ v_add_co_u32    v4, vcc, s4, v4
/*00000001839c*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000183a0*/ v_add_co_u32    v8, vcc, s4, v6
/*0000000183a8*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000183ac*/ s_waitcnt       vmcnt(0)
/*0000000183b0*/ v_mul_lo_u32    v2, v10, s3
/*0000000183b8*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000183c0*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000183c8*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000183d0*/ s_endpgm
/*0000000183d4*/ s_nop           0x0
/*0000000183d8*/ s_nop           0x0
/*0000000183dc*/ s_nop           0x0
/*0000000183e0*/ s_nop           0x0
/*0000000183e4*/ s_nop           0x0
/*0000000183e8*/ s_nop           0x0
/*0000000183ec*/ s_nop           0x0
/*0000000183f0*/ s_nop           0x0
/*0000000183f4*/ s_nop           0x0
/*0000000183f8*/ s_nop           0x0
/*0000000183fc*/ s_nop           0x0
mul_long_get_global_offset_get_work_dim:
.skip 256
/*000000018500*/ v_mov_b32       v3, s4
/*000000018504*/ v_mov_b32       v4, s5
/*000000018508*/ s_clause        0x1
/*00000001850c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018514*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001851c*/ s_waitcnt       lgkmcnt(0)
/*000000018520*/ s_load_dword    s1, s[6:7], 0x20
/*000000018528*/ s_lshl_b32      s3, s8, 1
/*00000001852c*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000018534*/ v_mov_b32       v4, 0
/*000000018538*/ v_mov_b32       v6, v4
/*00000001853c*/ v_mov_b32       v8, v4
/*000000018540*/ v_add3_u32      v5, s0, s3, v0
/*000000018548*/ s_lshl_b32      s3, s9, 4
/*00000001854c*/ v_add3_u32      v7, s2, s3, v1
/*000000018554*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*00000001855c*/ v_add_co_u32    v13, vcc, s4, v5
/*000000018564*/ v_add_co_ci_u32 v14, vcc, s5, v6, vcc
/*000000018568*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000018570*/ v_add_co_u32    v1, vcc, s4, v5
/*000000018578*/ s_waitcnt       vmcnt(0)
/*00000001857c*/ v_mul_lo_u32    v3, v9, s0
/*000000018584*/ s_lshl_b32      s0, s10, 1
/*000000018588*/ s_waitcnt       lgkmcnt(0)
/*00000001858c*/ v_add3_u32      v7, s1, s0, v2
/*000000018594*/ v_add_co_ci_u32 v2, vcc, s5, v6, vcc
/*000000018598*/ global_store_dwordx2 v[13:14], v[3:4], off
/*0000000185a0*/ v_mul_lo_u32    v3, v9, s2
/*0000000185a8*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*0000000185b0*/ global_store_dwordx2 v[1:2], v[3:4], off
/*0000000185b8*/ v_mul_lo_u32    v3, v9, s1
/*0000000185c0*/ v_add_co_u32    v1, vcc, s4, v5
/*0000000185c8*/ v_add_co_ci_u32 v2, vcc, s5, v6, vcc
/*0000000185cc*/ global_store_dwordx2 v[1:2], v[3:4], off
/*0000000185d4*/ s_endpgm
/*0000000185d8*/ s_nop           0x0
/*0000000185dc*/ s_nop           0x0
/*0000000185e0*/ s_nop           0x0
/*0000000185e4*/ s_nop           0x0
/*0000000185e8*/ s_nop           0x0
/*0000000185ec*/ s_nop           0x0
/*0000000185f0*/ s_nop           0x0
/*0000000185f4*/ s_nop           0x0
/*0000000185f8*/ s_nop           0x0
/*0000000185fc*/ s_nop           0x0
mul_long_get_local_id_get_work_dim:
.skip 256
/*000000018700*/ v_mov_b32       v3, s4
/*000000018704*/ v_mov_b32       v4, s5
/*000000018708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018710*/ s_waitcnt       lgkmcnt(0)
/*000000018714*/ s_clause        0x1
/*000000018718*/ s_load_dword    s1, s[6:7], 0x20
/*000000018720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000018728*/ v_mov_b32       v15, 0
/*00000001872c*/ s_lshl_b32      s3, s8, 3
/*000000018730*/ global_load_ushort v11, v[3:4], off inst_offset:2
/*000000018738*/ v_mov_b32       v6, v15
/*00000001873c*/ v_mov_b32       v8, v15
/*000000018740*/ v_mov_b32       v10, v15
/*000000018744*/ v_add3_u32      v5, s0, s3, v0
/*00000001874c*/ s_lshl_b32      s0, s9, 2
/*000000018750*/ v_add3_u32      v7, s2, s0, v1
/*000000018758*/ s_lshl_b32      s0, s10, 1
/*00000001875c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000018764*/ s_waitcnt       lgkmcnt(0)
/*000000018768*/ v_add3_u32      v9, s1, s0, v2
/*000000018770*/ v_lshlrev_b64   v[7:8], 3, v[7:8]
/*000000018778*/ v_add_co_u32    v4, vcc, s4, v5
/*000000018780*/ v_add_co_ci_u32 v5, vcc, s5, v6, vcc
/*000000018784*/ v_add_co_u32    v7, vcc, s4, v7
/*00000001878c*/ v_add_co_ci_u32 v8, vcc, s5, v8, vcc
/*000000018790*/ s_waitcnt       vmcnt(0)
/*000000018794*/ v_mul_u32_u24   v14, v0, v11
/*000000018798*/ global_store_dwordx2 v[4:5], v[14:15], off
/*0000000187a0*/ v_mul_u32_u24   v14, v1, v11
/*0000000187a4*/ v_lshlrev_b64   v[0:1], 3, v[9:10]
/*0000000187ac*/ global_store_dwordx2 v[7:8], v[14:15], off
/*0000000187b4*/ v_mul_u32_u24   v14, v2, v11
/*0000000187b8*/ v_add_co_u32    v0, vcc, s4, v0
/*0000000187c0*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*0000000187c4*/ global_store_dwordx2 v[0:1], v[14:15], off
/*0000000187cc*/ s_endpgm
/*0000000187d0*/ s_nop           0x0
/*0000000187d4*/ s_nop           0x0
/*0000000187d8*/ s_nop           0x0
/*0000000187dc*/ s_nop           0x0
/*0000000187e0*/ s_nop           0x0
/*0000000187e4*/ s_nop           0x0
/*0000000187e8*/ s_nop           0x0
/*0000000187ec*/ s_nop           0x0
/*0000000187f0*/ s_nop           0x0
/*0000000187f4*/ s_nop           0x0
/*0000000187f8*/ s_nop           0x0
/*0000000187fc*/ s_nop           0x0
mul_long_get_group_id_get_work_dim:
.skip 256
/*000000018900*/ v_mov_b32       v3, s4
/*000000018904*/ v_mov_b32       v4, s5
/*000000018908*/ s_clause        0x1
/*00000001890c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018914*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001891c*/ s_waitcnt       lgkmcnt(0)
/*000000018920*/ s_load_dword    s1, s[6:7], 0x20
/*000000018928*/ s_lshl_b32      s3, s8, 1
/*00000001892c*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000018934*/ v_mov_b32       v4, 0
/*000000018938*/ v_mov_b32       v6, v4
/*00000001893c*/ v_mov_b32       v8, v4
/*000000018940*/ v_add3_u32      v5, s0, s3, v0
/*000000018948*/ s_lshl_b32      s0, s9, 4
/*00000001894c*/ v_add3_u32      v7, s2, s0, v1
/*000000018954*/ s_lshl_b32      s0, s10, 1
/*000000018958*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000018960*/ v_add_co_u32    v13, vcc, s4, v5
/*000000018968*/ v_add_co_ci_u32 v14, vcc, s5, v6, vcc
/*00000001896c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000018974*/ s_waitcnt       lgkmcnt(0)
/*000000018978*/ v_add3_u32      v7, s1, s0, v2
/*000000018980*/ v_add_co_u32    v1, vcc, s4, v5
/*000000018988*/ v_add_co_ci_u32 v2, vcc, s5, v6, vcc
/*00000001898c*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000018994*/ s_waitcnt       vmcnt(0)
/*000000018998*/ v_mul_lo_u32    v3, s8, v9
/*0000000189a0*/ global_store_dwordx2 v[13:14], v[3:4], off
/*0000000189a8*/ v_mul_lo_u32    v3, s9, v9
/*0000000189b0*/ global_store_dwordx2 v[1:2], v[3:4], off
/*0000000189b8*/ v_mul_lo_u32    v3, s10, v9
/*0000000189c0*/ v_add_co_u32    v1, vcc, s4, v5
/*0000000189c8*/ v_add_co_ci_u32 v2, vcc, s5, v6, vcc
/*0000000189cc*/ global_store_dwordx2 v[1:2], v[3:4], off
/*0000000189d4*/ s_endpgm
/*0000000189d8*/ s_nop           0x0
/*0000000189dc*/ s_nop           0x0
/*0000000189e0*/ s_nop           0x0
/*0000000189e4*/ s_nop           0x0
/*0000000189e8*/ s_nop           0x0
/*0000000189ec*/ s_nop           0x0
/*0000000189f0*/ s_nop           0x0
/*0000000189f4*/ s_nop           0x0
/*0000000189f8*/ s_nop           0x0
/*0000000189fc*/ s_nop           0x0
mul_long_get_local_size_get_work_dim:
.skip 256
/*000000018b00*/ v_mov_b32       v3, s4
/*000000018b04*/ v_mov_b32       v4, s5
/*000000018b08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018b10*/ s_waitcnt       lgkmcnt(0)
/*000000018b14*/ s_clause        0x1
/*000000018b18*/ s_load_dword    s1, s[6:7], 0x20
/*000000018b20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000018b28*/ s_lshl_b32      s3, s8, 1
/*000000018b2c*/ s_lshl_b32      s6, s9, 1
/*000000018b30*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*000000018b38*/ v_mov_b32       v3, 0
/*000000018b3c*/ s_lshl_b32      s7, s10, 2
/*000000018b40*/ v_mov_b32       v5, v3
/*000000018b44*/ v_mov_b32       v7, v3
/*000000018b48*/ v_mov_b32       v9, v3
/*000000018b4c*/ v_add3_u32      v4, s0, s3, v0
/*000000018b54*/ v_add3_u32      v6, s2, s6, v1
/*000000018b5c*/ s_waitcnt       lgkmcnt(0)
/*000000018b60*/ v_add3_u32      v8, s1, s7, v2
/*000000018b68*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000018b70*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000018b78*/ v_lshlrev_b64   v[6:7], 3, v[8:9]
/*000000018b80*/ v_add_co_u32    v14, vcc, s4, v0
/*000000018b88*/ v_add_co_ci_u32 v15, vcc, s5, v1, vcc
/*000000018b8c*/ s_waitcnt       vmcnt(0)
/*000000018b90*/ v_and_b32       v2, 0xffff, v10
/*000000018b98*/ v_add_co_u32    v10, vcc, s4, v4
/*000000018ba0*/ v_add_co_ci_u32 v11, vcc, s5, v5, vcc
/*000000018ba4*/ v_add_co_u32    v0, vcc, s4, v6
/*000000018bac*/ v_lshlrev_b64   v[8:9], 1, v[2:3]
/*000000018bb4*/ v_lshlrev_b64   v[2:3], 2, v[2:3]
/*000000018bbc*/ v_add_co_ci_u32 v1, vcc, s5, v7, vcc
/*000000018bc0*/ global_store_dwordx2 v[14:15], v[8:9], off
/*000000018bc8*/ global_store_dwordx2 v[10:11], v[8:9], off
/*000000018bd0*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000018bd8*/ s_endpgm
/*000000018bdc*/ s_nop           0x0
/*000000018be0*/ s_nop           0x0
/*000000018be4*/ s_nop           0x0
/*000000018be8*/ s_nop           0x0
/*000000018bec*/ s_nop           0x0
/*000000018bf0*/ s_nop           0x0
/*000000018bf4*/ s_nop           0x0
/*000000018bf8*/ s_nop           0x0
/*000000018bfc*/ s_nop           0x0
mul_long_get_global_id_get_work_dim:
.skip 256
/*000000018d00*/ v_mov_b32       v3, s4
/*000000018d04*/ v_mov_b32       v4, s5
/*000000018d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018d10*/ s_waitcnt       lgkmcnt(0)
/*000000018d14*/ s_clause        0x1
/*000000018d18*/ s_load_dword    s1, s[6:7], 0x20
/*000000018d20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000018d28*/ v_lshl_or_b32   v5, s9, 1, v1
/*000000018d30*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000018d38*/ v_mov_b32       v4, 0
/*000000018d3c*/ v_lshl_or_b32   v3, s8, 1, v0
/*000000018d44*/ v_lshl_or_b32   v0, s10, 2, v2
/*000000018d4c*/ v_mov_b32       v6, v4
/*000000018d50*/ v_lshlrev_b64   v[7:8], 3, v[3:4]
/*000000018d58*/ v_mov_b32       v10, v4
/*000000018d5c*/ v_mov_b32       v1, v4
/*000000018d60*/ v_add_nc_u32    v5, s2, v5
/*000000018d64*/ v_add_nc_u32    v2, s0, v3
/*000000018d68*/ s_waitcnt       lgkmcnt(0)
/*000000018d6c*/ v_add_nc_u32    v9, s1, v0
/*000000018d70*/ v_lshlrev_b64   v[11:12], 3, v[5:6]
/*000000018d78*/ v_add_co_u32    v6, vcc, s4, v7
/*000000018d80*/ v_lshlrev_b64   v[13:14], 3, v[9:10]
/*000000018d88*/ v_add_co_ci_u32 v7, vcc, s5, v8, vcc
/*000000018d8c*/ v_add_co_u32    v17, vcc, s4, v11
/*000000018d94*/ v_add_co_ci_u32 v18, vcc, s5, v12, vcc
/*000000018d98*/ s_waitcnt       vmcnt(0)
/*000000018d9c*/ v_mul_lo_u32    v0, v2, v15
/*000000018da4*/ v_mul_lo_u32    v3, v15, v5
/*000000018dac*/ global_store_dwordx2 v[6:7], v[0:1], off
/*000000018db4*/ global_store_dwordx2 v[17:18], v[3:4], off
/*000000018dbc*/ v_mul_lo_u32    v3, v15, v9
/*000000018dc4*/ v_add_co_u32    v1, vcc, s4, v13
/*000000018dcc*/ v_add_co_ci_u32 v2, vcc, s5, v14, vcc
/*000000018dd0*/ global_store_dwordx2 v[1:2], v[3:4], off
/*000000018dd8*/ s_endpgm
/*000000018ddc*/ s_nop           0x0
/*000000018de0*/ s_nop           0x0
/*000000018de4*/ s_nop           0x0
/*000000018de8*/ s_nop           0x0
/*000000018dec*/ s_nop           0x0
/*000000018df0*/ s_nop           0x0
/*000000018df4*/ s_nop           0x0
/*000000018df8*/ s_nop           0x0
/*000000018dfc*/ s_nop           0x0
mul_long_get_global_size_get_work_dim:
.skip 256
/*000000018f00*/ v_mov_b32       v3, s4
/*000000018f04*/ v_mov_b32       v4, s5
/*000000018f08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000018f10*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000018f18*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000018f20*/ s_waitcnt       lgkmcnt(0)
/*000000018f24*/ s_load_dword    s1, s[6:7], 0x20
/*000000018f2c*/ s_lshl_b32      s3, s8, 4
/*000000018f30*/ global_load_ushort v9, v[3:4], off inst_offset:2
/*000000018f38*/ v_mov_b32       v4, 0
/*000000018f3c*/ v_mov_b32       v6, v4
/*000000018f40*/ v_mov_b32       v8, v4
/*000000018f44*/ v_add3_u32      v5, s0, s3, v0
/*000000018f4c*/ s_lshl_b32      s0, s9, 1
/*000000018f50*/ v_add3_u32      v7, s2, s0, v1
/*000000018f58*/ s_lshl_b32      s0, s10, 1
/*000000018f5c*/ v_lshlrev_b64   v[5:6], 3, v[5:6]
/*000000018f64*/ v_add_co_u32    v13, vcc, s4, v5
/*000000018f6c*/ v_add_co_ci_u32 v14, vcc, s5, v6, vcc
/*000000018f70*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000018f78*/ s_waitcnt       lgkmcnt(0)
/*000000018f7c*/ v_add3_u32      v7, s1, s0, v2
/*000000018f84*/ v_add_co_u32    v1, vcc, s4, v5
/*000000018f8c*/ v_add_co_ci_u32 v2, vcc, s5, v6, vcc
/*000000018f90*/ v_lshlrev_b64   v[5:6], 3, v[7:8]
/*000000018f98*/ s_waitcnt       vmcnt(0)
/*000000018f9c*/ v_mul_lo_u32    v3, s12, v9
/*000000018fa4*/ global_store_dwordx2 v[13:14], v[3:4], off
/*000000018fac*/ v_mul_lo_u32    v3, s13, v9
/*000000018fb4*/ global_store_dwordx2 v[1:2], v[3:4], off
/*000000018fbc*/ v_mul_lo_u32    v3, s14, v9
/*000000018fc4*/ v_add_co_u32    v1, vcc, s4, v5
/*000000018fcc*/ v_add_co_ci_u32 v2, vcc, s5, v6, vcc
/*000000018fd0*/ global_store_dwordx2 v[1:2], v[3:4], off
/*000000018fd8*/ s_endpgm
/*000000018fdc*/ s_nop           0x0
/*000000018fe0*/ s_nop           0x0
/*000000018fe4*/ s_nop           0x0
/*000000018fe8*/ s_nop           0x0
/*000000018fec*/ s_nop           0x0
/*000000018ff0*/ s_nop           0x0
/*000000018ff4*/ s_nop           0x0
/*000000018ff8*/ s_nop           0x0
/*000000018ffc*/ s_nop           0x0
mul_long_get_num_groups_get_work_dim:
.skip 256
/*000000019100*/ v_mov_b32       v3, s4
/*000000019104*/ v_mov_b32       v4, s5
/*000000019108*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000019110*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000019118*/ s_waitcnt       lgkmcnt(0)
/*00000001911c*/ s_clause        0x1
/*000000019120*/ s_load_dword    s3, s[6:7], 0x20
/*000000019128*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000019130*/ s_lshl_b32      s6, s8, 1
/*000000019134*/ s_lshl_b32      s7, s9, 1
/*000000019138*/ global_load_ushort v8, v[3:4], off inst_offset:2
/*000000019140*/ v_mov_b32       v3, 0
/*000000019144*/ s_lshl_b32      s9, s10, 2
/*000000019148*/ v_mov_b32       v5, v3
/*00000001914c*/ v_mov_b32       v7, v3
/*000000019150*/ s_and_b32       s8, s0, -2
/*000000019154*/ v_add3_u32      v4, s12, s6, v0
/*00000001915c*/ v_cmp_gt_u32    s[8:9], s0, s8
/*000000019164*/ s_lshr_b32      s0, s0, 1
/*000000019168*/ v_add3_u32      v6, s14, s7, v1
/*000000019170*/ s_waitcnt       lgkmcnt(0)
/*000000019174*/ v_add3_u32      v0, s3, s9, v2
/*00000001917c*/ v_lshlrev_b64   v[4:5], 3, v[4:5]
/*000000019184*/ s_cmpk_lg_u32   s8, 0x0
/*000000019188*/ v_mov_b32       v1, v3
/*00000001918c*/ s_addc_u32      s0, s0, 0
/*000000019190*/ s_and_b32       s6, s1, -2
/*000000019194*/ v_lshlrev_b64   v[6:7], 3, v[6:7]
/*00000001919c*/ v_cmp_gt_u32    s[6:7], s1, s6
/*0000000191a4*/ v_add_co_u32    v4, vcc, s4, v4
/*0000000191ac*/ s_lshr_b32      s1, s1, 1
/*0000000191b0*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000191b4*/ v_lshlrev_b64   v[0:1], 3, v[0:1]
/*0000000191bc*/ s_cmpk_lg_u32   s6, 0x0
/*0000000191c0*/ s_waitcnt       vmcnt(0)
/*0000000191c4*/ v_mul_lo_u32    v2, s0, v8
/*0000000191cc*/ s_addc_u32      s0, s1, 0
/*0000000191d0*/ s_and_b32       s1, s2, -4
/*0000000191d4*/ v_cmp_gt_u32    s[1:2], s2, s1
/*0000000191dc*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000191e4*/ v_mul_lo_u32    v2, s0, v8
/*0000000191ec*/ v_add_co_u32    v4, vcc, s4, v6
/*0000000191f4*/ s_lshr_b32      s0, s2, 2
/*0000000191f8*/ v_add_co_ci_u32 v5, vcc, s5, v7, vcc
/*0000000191fc*/ s_cmpk_lg_u32   s1, 0x0
/*000000019200*/ v_add_co_u32    v0, vcc, s4, v0
/*000000019208*/ s_addc_u32      s0, s0, 0
/*00000001920c*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*000000019210*/ global_store_dwordx2 v[4:5], v[2:3], off
/*000000019218*/ v_mul_lo_u32    v2, s0, v8
/*000000019220*/ global_store_dwordx2 v[0:1], v[2:3], off
/*000000019228*/ s_endpgm
/*00000001922c*/ s_nop           0x0
/*000000019230*/ s_nop           0x0
/*000000019234*/ s_nop           0x0
/*000000019238*/ s_nop           0x0
/*00000001923c*/ s_nop           0x0
/*000000019240*/ s_nop           0x0
/*000000019244*/ s_nop           0x0
/*000000019248*/ s_nop           0x0
/*00000001924c*/ s_nop           0x0
/*000000019250*/ s_nop           0x0
/*000000019254*/ s_nop           0x0
/*000000019258*/ s_nop           0x0
/*00000001925c*/ s_nop           0x0
/*000000019260*/ s_nop           0x0
/*000000019264*/ s_nop           0x0
/*000000019268*/ s_nop           0x0
/*00000001926c*/ s_nop           0x0
/*000000019270*/ s_nop           0x0
/*000000019274*/ s_nop           0x0
/*000000019278*/ s_nop           0x0
/*00000001927c*/ s_nop           0x0
/*000000019280*/ s_nop           0x0
/*000000019284*/ s_nop           0x0
/*000000019288*/ s_nop           0x0
/*00000001928c*/ s_nop           0x0
/*000000019290*/ s_nop           0x0
/*000000019294*/ s_nop           0x0
/*000000019298*/ s_nop           0x0
/*00000001929c*/ s_nop           0x0
/*0000000192a0*/ s_nop           0x0
/*0000000192a4*/ s_nop           0x0
/*0000000192a8*/ s_nop           0x0
/*0000000192ac*/ s_nop           0x0
/*0000000192b0*/ s_nop           0x0
/*0000000192b4*/ s_nop           0x0
/*0000000192b8*/ s_nop           0x0
/*0000000192bc*/ s_nop           0x0
/*0000000192c0*/ s_nop           0x0
/*0000000192c4*/ s_nop           0x0
/*0000000192c8*/ s_nop           0x0
/*0000000192cc*/ s_nop           0x0
/*0000000192d0*/ s_nop           0x0
/*0000000192d4*/ s_nop           0x0
/*0000000192d8*/ s_nop           0x0
/*0000000192dc*/ s_nop           0x0
/*0000000192e0*/ s_nop           0x0
/*0000000192e4*/ s_nop           0x0
/*0000000192e8*/ s_nop           0x0
/*0000000192ec*/ s_nop           0x0
/*0000000192f0*/ s_nop           0x0
/*0000000192f4*/ s_nop           0x0
/*0000000192f8*/ s_nop           0x0
/*0000000192fc*/ s_nop           0x0
mul_long_get_work_dim_get_work_dim:
.skip 256
/*000000019400*/ v_mov_b32       v3, s4
/*000000019404*/ v_mov_b32       v4, s5
/*000000019408*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000019410*/ s_waitcnt       lgkmcnt(0)
/*000000019414*/ s_clause        0x1
/*000000019418*/ s_load_dword    s1, s[6:7], 0x20
/*000000019420*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000019428*/ s_lshl_b32      s3, s8, 1
/*00000001942c*/ s_lshl_b32      s6, s9, 1
/*000000019430*/ global_load_ushort v10, v[3:4], off inst_offset:2
/*000000019438*/ v_mov_b32       v3, 0
/*00000001943c*/ s_lshl_b32      s7, s10, 2
/*000000019440*/ v_mov_b32       v5, v3
/*000000019444*/ v_mov_b32       v7, v3
/*000000019448*/ v_mov_b32       v9, v3
/*00000001944c*/ v_add3_u32      v4, s0, s3, v0
/*000000019454*/ v_add3_u32      v6, s2, s6, v1
/*00000001945c*/ s_waitcnt       lgkmcnt(0)
/*000000019460*/ v_add3_u32      v8, s1, s7, v2
/*000000019468*/ v_lshlrev_b64   v[0:1], 3, v[4:5]
/*000000019470*/ v_lshlrev_b64   v[4:5], 3, v[6:7]
/*000000019478*/ v_lshlrev_b64   v[6:7], 3, v[8:9]
/*000000019480*/ v_add_co_u32    v0, vcc, s4, v0
/*000000019488*/ v_add_co_ci_u32 v1, vcc, s5, v1, vcc
/*00000001948c*/ v_add_co_u32    v4, vcc, s4, v4
/*000000019494*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*000000019498*/ v_add_co_u32    v8, vcc, s4, v6
/*0000000194a0*/ v_add_co_ci_u32 v9, vcc, s5, v7, vcc
/*0000000194a4*/ s_waitcnt       vmcnt(0)
/*0000000194a8*/ v_mul_u32_u24   v2, v10, v10
/*0000000194ac*/ global_store_dwordx2 v[0:1], v[2:3], off
/*0000000194b4*/ global_store_dwordx2 v[4:5], v[2:3], off
/*0000000194bc*/ global_store_dwordx2 v[8:9], v[2:3], off
/*0000000194c4*/ s_endpgm
/*0000000194c8*/ s_nop           0x0
/*0000000194cc*/ s_nop           0x0
/*0000000194d0*/ s_nop           0x0
/*0000000194d4*/ s_nop           0x0
/*0000000194d8*/ s_nop           0x0
/*0000000194dc*/ s_nop           0x0
/*0000000194e0*/ s_nop           0x0
/*0000000194e4*/ s_nop           0x0
/*0000000194e8*/ s_nop           0x0
/*0000000194ec*/ s_nop           0x0
/*0000000194f0*/ s_nop           0x0
/*0000000194f4*/ s_nop           0x0
/*0000000194f8*/ s_nop           0x0
/*0000000194fc*/ s_nop           0x0
mul_long_x_64:
.skip 256
/*000000019600*/ s_clause        0x2
/*000000019604*/ s_load_dword    s2, s[4:5], 0x10
/*00000001960c*/ s_load_dword    s3, s[4:5], 0x0
/*000000019614*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001961c*/ v_mov_b32       v1, 0
/*000000019620*/ s_lshl_b32      s4, s6, 6
/*000000019624*/ v_mov_b32       v3, v1
/*000000019628*/ s_waitcnt       lgkmcnt(0)
/*00000001962c*/ v_add3_u32      v2, s2, s4, v0
/*000000019634*/ s_mul_i32       s3, s3, s3
/*000000019638*/ v_mov_b32       v0, s3
/*00000001963c*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019644*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001964c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019650*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019658*/ s_endpgm
/*00000001965c*/ s_nop           0x0
/*000000019660*/ s_nop           0x0
/*000000019664*/ s_nop           0x0
/*000000019668*/ s_nop           0x0
/*00000001966c*/ s_nop           0x0
/*000000019670*/ s_nop           0x0
/*000000019674*/ s_nop           0x0
/*000000019678*/ s_nop           0x0
/*00000001967c*/ s_nop           0x0
/*000000019680*/ s_nop           0x0
/*000000019684*/ s_nop           0x0
/*000000019688*/ s_nop           0x0
/*00000001968c*/ s_nop           0x0
/*000000019690*/ s_nop           0x0
/*000000019694*/ s_nop           0x0
/*000000019698*/ s_nop           0x0
/*00000001969c*/ s_nop           0x0
/*0000000196a0*/ s_nop           0x0
/*0000000196a4*/ s_nop           0x0
/*0000000196a8*/ s_nop           0x0
/*0000000196ac*/ s_nop           0x0
/*0000000196b0*/ s_nop           0x0
/*0000000196b4*/ s_nop           0x0
/*0000000196b8*/ s_nop           0x0
/*0000000196bc*/ s_nop           0x0
/*0000000196c0*/ s_nop           0x0
/*0000000196c4*/ s_nop           0x0
/*0000000196c8*/ s_nop           0x0
/*0000000196cc*/ s_nop           0x0
/*0000000196d0*/ s_nop           0x0
/*0000000196d4*/ s_nop           0x0
/*0000000196d8*/ s_nop           0x0
/*0000000196dc*/ s_nop           0x0
/*0000000196e0*/ s_nop           0x0
/*0000000196e4*/ s_nop           0x0
/*0000000196e8*/ s_nop           0x0
/*0000000196ec*/ s_nop           0x0
/*0000000196f0*/ s_nop           0x0
/*0000000196f4*/ s_nop           0x0
/*0000000196f8*/ s_nop           0x0
/*0000000196fc*/ s_nop           0x0
mul_long_get_global_offset_64:
.skip 256
/*000000019800*/ s_clause        0x1
/*000000019804*/ s_load_dword    s2, s[4:5], 0x10
/*00000001980c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019814*/ v_mov_b32       v1, 0
/*000000019818*/ s_lshl_b32      s3, s6, 6
/*00000001981c*/ v_mov_b32       v3, v1
/*000000019820*/ s_waitcnt       lgkmcnt(0)
/*000000019824*/ v_add3_u32      v2, s2, s3, v0
/*00000001982c*/ s_mul_i32       s2, s2, s2
/*000000019830*/ v_mov_b32       v0, s2
/*000000019834*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001983c*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019844*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019848*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019850*/ s_endpgm
/*000000019854*/ s_nop           0x0
/*000000019858*/ s_nop           0x0
/*00000001985c*/ s_nop           0x0
/*000000019860*/ s_nop           0x0
/*000000019864*/ s_nop           0x0
/*000000019868*/ s_nop           0x0
/*00000001986c*/ s_nop           0x0
/*000000019870*/ s_nop           0x0
/*000000019874*/ s_nop           0x0
/*000000019878*/ s_nop           0x0
/*00000001987c*/ s_nop           0x0
/*000000019880*/ s_nop           0x0
/*000000019884*/ s_nop           0x0
/*000000019888*/ s_nop           0x0
/*00000001988c*/ s_nop           0x0
/*000000019890*/ s_nop           0x0
/*000000019894*/ s_nop           0x0
/*000000019898*/ s_nop           0x0
/*00000001989c*/ s_nop           0x0
/*0000000198a0*/ s_nop           0x0
/*0000000198a4*/ s_nop           0x0
/*0000000198a8*/ s_nop           0x0
/*0000000198ac*/ s_nop           0x0
/*0000000198b0*/ s_nop           0x0
/*0000000198b4*/ s_nop           0x0
/*0000000198b8*/ s_nop           0x0
/*0000000198bc*/ s_nop           0x0
/*0000000198c0*/ s_nop           0x0
/*0000000198c4*/ s_nop           0x0
/*0000000198c8*/ s_nop           0x0
/*0000000198cc*/ s_nop           0x0
/*0000000198d0*/ s_nop           0x0
/*0000000198d4*/ s_nop           0x0
/*0000000198d8*/ s_nop           0x0
/*0000000198dc*/ s_nop           0x0
/*0000000198e0*/ s_nop           0x0
/*0000000198e4*/ s_nop           0x0
/*0000000198e8*/ s_nop           0x0
/*0000000198ec*/ s_nop           0x0
/*0000000198f0*/ s_nop           0x0
/*0000000198f4*/ s_nop           0x0
/*0000000198f8*/ s_nop           0x0
/*0000000198fc*/ s_nop           0x0
mul_long_get_local_id_64:
.skip 256
/*000000019a00*/ s_clause        0x1
/*000000019a04*/ s_load_dword    s2, s[4:5], 0x10
/*000000019a0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019a14*/ v_mov_b32       v1, 0
/*000000019a18*/ s_lshl_b32      s3, s6, 6
/*000000019a1c*/ v_mov_b32       v3, v1
/*000000019a20*/ s_waitcnt       lgkmcnt(0)
/*000000019a24*/ v_add3_u32      v2, s2, s3, v0
/*000000019a2c*/ v_mul_u32_u24   v0, v0, v0
/*000000019a30*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019a38*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019a40*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019a44*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019a4c*/ s_endpgm
/*000000019a50*/ s_nop           0x0
/*000000019a54*/ s_nop           0x0
/*000000019a58*/ s_nop           0x0
/*000000019a5c*/ s_nop           0x0
/*000000019a60*/ s_nop           0x0
/*000000019a64*/ s_nop           0x0
/*000000019a68*/ s_nop           0x0
/*000000019a6c*/ s_nop           0x0
/*000000019a70*/ s_nop           0x0
/*000000019a74*/ s_nop           0x0
/*000000019a78*/ s_nop           0x0
/*000000019a7c*/ s_nop           0x0
/*000000019a80*/ s_nop           0x0
/*000000019a84*/ s_nop           0x0
/*000000019a88*/ s_nop           0x0
/*000000019a8c*/ s_nop           0x0
/*000000019a90*/ s_nop           0x0
/*000000019a94*/ s_nop           0x0
/*000000019a98*/ s_nop           0x0
/*000000019a9c*/ s_nop           0x0
/*000000019aa0*/ s_nop           0x0
/*000000019aa4*/ s_nop           0x0
/*000000019aa8*/ s_nop           0x0
/*000000019aac*/ s_nop           0x0
/*000000019ab0*/ s_nop           0x0
/*000000019ab4*/ s_nop           0x0
/*000000019ab8*/ s_nop           0x0
/*000000019abc*/ s_nop           0x0
/*000000019ac0*/ s_nop           0x0
/*000000019ac4*/ s_nop           0x0
/*000000019ac8*/ s_nop           0x0
/*000000019acc*/ s_nop           0x0
/*000000019ad0*/ s_nop           0x0
/*000000019ad4*/ s_nop           0x0
/*000000019ad8*/ s_nop           0x0
/*000000019adc*/ s_nop           0x0
/*000000019ae0*/ s_nop           0x0
/*000000019ae4*/ s_nop           0x0
/*000000019ae8*/ s_nop           0x0
/*000000019aec*/ s_nop           0x0
/*000000019af0*/ s_nop           0x0
/*000000019af4*/ s_nop           0x0
/*000000019af8*/ s_nop           0x0
/*000000019afc*/ s_nop           0x0
mul_long_get_group_id_64:
.skip 256
/*000000019c00*/ s_clause        0x1
/*000000019c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000019c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019c14*/ v_mov_b32       v1, 0
/*000000019c18*/ s_lshl_b32      s3, s6, 6
/*000000019c1c*/ s_mul_i32       s6, s6, s6
/*000000019c20*/ v_mov_b32       v3, v1
/*000000019c24*/ s_waitcnt       lgkmcnt(0)
/*000000019c28*/ v_add3_u32      v2, s2, s3, v0
/*000000019c30*/ v_mov_b32       v0, s6
/*000000019c34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*000000019c3c*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019c44*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019c48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019c50*/ s_endpgm
/*000000019c54*/ s_nop           0x0
/*000000019c58*/ s_nop           0x0
/*000000019c5c*/ s_nop           0x0
/*000000019c60*/ s_nop           0x0
/*000000019c64*/ s_nop           0x0
/*000000019c68*/ s_nop           0x0
/*000000019c6c*/ s_nop           0x0
/*000000019c70*/ s_nop           0x0
/*000000019c74*/ s_nop           0x0
/*000000019c78*/ s_nop           0x0
/*000000019c7c*/ s_nop           0x0
/*000000019c80*/ s_nop           0x0
/*000000019c84*/ s_nop           0x0
/*000000019c88*/ s_nop           0x0
/*000000019c8c*/ s_nop           0x0
/*000000019c90*/ s_nop           0x0
/*000000019c94*/ s_nop           0x0
/*000000019c98*/ s_nop           0x0
/*000000019c9c*/ s_nop           0x0
/*000000019ca0*/ s_nop           0x0
/*000000019ca4*/ s_nop           0x0
/*000000019ca8*/ s_nop           0x0
/*000000019cac*/ s_nop           0x0
/*000000019cb0*/ s_nop           0x0
/*000000019cb4*/ s_nop           0x0
/*000000019cb8*/ s_nop           0x0
/*000000019cbc*/ s_nop           0x0
/*000000019cc0*/ s_nop           0x0
/*000000019cc4*/ s_nop           0x0
/*000000019cc8*/ s_nop           0x0
/*000000019ccc*/ s_nop           0x0
/*000000019cd0*/ s_nop           0x0
/*000000019cd4*/ s_nop           0x0
/*000000019cd8*/ s_nop           0x0
/*000000019cdc*/ s_nop           0x0
/*000000019ce0*/ s_nop           0x0
/*000000019ce4*/ s_nop           0x0
/*000000019ce8*/ s_nop           0x0
/*000000019cec*/ s_nop           0x0
/*000000019cf0*/ s_nop           0x0
/*000000019cf4*/ s_nop           0x0
/*000000019cf8*/ s_nop           0x0
/*000000019cfc*/ s_nop           0x0
mul_long_get_local_size_64:
.skip 256
/*000000019e00*/ s_clause        0x1
/*000000019e04*/ s_load_dword    s2, s[4:5], 0x10
/*000000019e0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000019e14*/ s_lshl_b32      s3, s6, 6
/*000000019e18*/ v_mov_b32       v1, 0
/*000000019e1c*/ s_waitcnt       lgkmcnt(0)
/*000000019e20*/ v_add3_u32      v0, s2, s3, v0
/*000000019e28*/ v_lshlrev_b64   v[2:3], 3, v[0:1]
/*000000019e30*/ v_mov_b32       v0, 0x1000
/*000000019e38*/ v_add_co_u32    v2, vcc, s0, v2
/*000000019e40*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*000000019e44*/ global_store_dwordx2 v[2:3], v[0:1], off
/*000000019e4c*/ s_endpgm
/*000000019e50*/ s_nop           0x0
/*000000019e54*/ s_nop           0x0
/*000000019e58*/ s_nop           0x0
/*000000019e5c*/ s_nop           0x0
/*000000019e60*/ s_nop           0x0
/*000000019e64*/ s_nop           0x0
/*000000019e68*/ s_nop           0x0
/*000000019e6c*/ s_nop           0x0
/*000000019e70*/ s_nop           0x0
/*000000019e74*/ s_nop           0x0
/*000000019e78*/ s_nop           0x0
/*000000019e7c*/ s_nop           0x0
/*000000019e80*/ s_nop           0x0
/*000000019e84*/ s_nop           0x0
/*000000019e88*/ s_nop           0x0
/*000000019e8c*/ s_nop           0x0
/*000000019e90*/ s_nop           0x0
/*000000019e94*/ s_nop           0x0
/*000000019e98*/ s_nop           0x0
/*000000019e9c*/ s_nop           0x0
/*000000019ea0*/ s_nop           0x0
/*000000019ea4*/ s_nop           0x0
/*000000019ea8*/ s_nop           0x0
/*000000019eac*/ s_nop           0x0
/*000000019eb0*/ s_nop           0x0
/*000000019eb4*/ s_nop           0x0
/*000000019eb8*/ s_nop           0x0
/*000000019ebc*/ s_nop           0x0
/*000000019ec0*/ s_nop           0x0
/*000000019ec4*/ s_nop           0x0
/*000000019ec8*/ s_nop           0x0
/*000000019ecc*/ s_nop           0x0
/*000000019ed0*/ s_nop           0x0
/*000000019ed4*/ s_nop           0x0
/*000000019ed8*/ s_nop           0x0
/*000000019edc*/ s_nop           0x0
/*000000019ee0*/ s_nop           0x0
/*000000019ee4*/ s_nop           0x0
/*000000019ee8*/ s_nop           0x0
/*000000019eec*/ s_nop           0x0
/*000000019ef0*/ s_nop           0x0
/*000000019ef4*/ s_nop           0x0
/*000000019ef8*/ s_nop           0x0
/*000000019efc*/ s_nop           0x0
mul_long_get_global_id_64:
.skip 256
/*00000001a000*/ s_clause        0x1
/*00000001a004*/ s_load_dword    s2, s[4:5], 0x10
/*00000001a00c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001a014*/ v_mov_b32       v1, 0
/*00000001a018*/ v_lshl_or_b32   v0, s6, 6, v0
/*00000001a020*/ v_mov_b32       v3, v1
/*00000001a024*/ s_waitcnt       lgkmcnt(0)
/*00000001a028*/ v_add_nc_u32    v2, s2, v0
/*00000001a02c*/ v_lshlrev_b64   v[3:4], 3, v[2:3]
/*00000001a034*/ v_mul_lo_u32    v0, v2, v2
/*00000001a03c*/ v_add_co_u32    v2, vcc, s0, v3
/*00000001a044*/ v_add_co_ci_u32 v3, vcc, s1, v4, vcc
/*00000001a048*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a050*/ s_endpgm
/*00000001a054*/ s_nop           0x0
/*00000001a058*/ s_nop           0x0
/*00000001a05c*/ s_nop           0x0
/*00000001a060*/ s_nop           0x0
/*00000001a064*/ s_nop           0x0
/*00000001a068*/ s_nop           0x0
/*00000001a06c*/ s_nop           0x0
/*00000001a070*/ s_nop           0x0
/*00000001a074*/ s_nop           0x0
/*00000001a078*/ s_nop           0x0
/*00000001a07c*/ s_nop           0x0
/*00000001a080*/ s_nop           0x0
/*00000001a084*/ s_nop           0x0
/*00000001a088*/ s_nop           0x0
/*00000001a08c*/ s_nop           0x0
/*00000001a090*/ s_nop           0x0
/*00000001a094*/ s_nop           0x0
/*00000001a098*/ s_nop           0x0
/*00000001a09c*/ s_nop           0x0
/*00000001a0a0*/ s_nop           0x0
/*00000001a0a4*/ s_nop           0x0
/*00000001a0a8*/ s_nop           0x0
/*00000001a0ac*/ s_nop           0x0
/*00000001a0b0*/ s_nop           0x0
/*00000001a0b4*/ s_nop           0x0
/*00000001a0b8*/ s_nop           0x0
/*00000001a0bc*/ s_nop           0x0
/*00000001a0c0*/ s_nop           0x0
/*00000001a0c4*/ s_nop           0x0
/*00000001a0c8*/ s_nop           0x0
/*00000001a0cc*/ s_nop           0x0
/*00000001a0d0*/ s_nop           0x0
/*00000001a0d4*/ s_nop           0x0
/*00000001a0d8*/ s_nop           0x0
/*00000001a0dc*/ s_nop           0x0
/*00000001a0e0*/ s_nop           0x0
/*00000001a0e4*/ s_nop           0x0
/*00000001a0e8*/ s_nop           0x0
/*00000001a0ec*/ s_nop           0x0
/*00000001a0f0*/ s_nop           0x0
/*00000001a0f4*/ s_nop           0x0
/*00000001a0f8*/ s_nop           0x0
/*00000001a0fc*/ s_nop           0x0
mul_long_get_global_size_64:
.skip 256
/*00000001a200*/ s_load_dword    s2, s[6:7], 0x10
/*00000001a208*/ s_load_dword    s3, s[4:5], 0xc
/*00000001a210*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001a218*/ v_mov_b32       v1, 0
/*00000001a21c*/ s_lshl_b32      s4, s8, 6
/*00000001a220*/ v_mov_b32       v3, v1
/*00000001a224*/ s_waitcnt       lgkmcnt(0)
/*00000001a228*/ v_add3_u32      v2, s2, s4, v0
/*00000001a230*/ s_mul_i32       s3, s3, s3
/*00000001a234*/ v_mov_b32       v0, s3
/*00000001a238*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a240*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001a248*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001a24c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a254*/ s_endpgm
/*00000001a258*/ s_nop           0x0
/*00000001a25c*/ s_nop           0x0
/*00000001a260*/ s_nop           0x0
/*00000001a264*/ s_nop           0x0
/*00000001a268*/ s_nop           0x0
/*00000001a26c*/ s_nop           0x0
/*00000001a270*/ s_nop           0x0
/*00000001a274*/ s_nop           0x0
/*00000001a278*/ s_nop           0x0
/*00000001a27c*/ s_nop           0x0
/*00000001a280*/ s_nop           0x0
/*00000001a284*/ s_nop           0x0
/*00000001a288*/ s_nop           0x0
/*00000001a28c*/ s_nop           0x0
/*00000001a290*/ s_nop           0x0
/*00000001a294*/ s_nop           0x0
/*00000001a298*/ s_nop           0x0
/*00000001a29c*/ s_nop           0x0
/*00000001a2a0*/ s_nop           0x0
/*00000001a2a4*/ s_nop           0x0
/*00000001a2a8*/ s_nop           0x0
/*00000001a2ac*/ s_nop           0x0
/*00000001a2b0*/ s_nop           0x0
/*00000001a2b4*/ s_nop           0x0
/*00000001a2b8*/ s_nop           0x0
/*00000001a2bc*/ s_nop           0x0
/*00000001a2c0*/ s_nop           0x0
/*00000001a2c4*/ s_nop           0x0
/*00000001a2c8*/ s_nop           0x0
/*00000001a2cc*/ s_nop           0x0
/*00000001a2d0*/ s_nop           0x0
/*00000001a2d4*/ s_nop           0x0
/*00000001a2d8*/ s_nop           0x0
/*00000001a2dc*/ s_nop           0x0
/*00000001a2e0*/ s_nop           0x0
/*00000001a2e4*/ s_nop           0x0
/*00000001a2e8*/ s_nop           0x0
/*00000001a2ec*/ s_nop           0x0
/*00000001a2f0*/ s_nop           0x0
/*00000001a2f4*/ s_nop           0x0
/*00000001a2f8*/ s_nop           0x0
/*00000001a2fc*/ s_nop           0x0
mul_long_get_num_groups_64:
.skip 256
/*00000001a400*/ s_load_dword    s2, s[4:5], 0xc
/*00000001a408*/ s_clause        0x1
/*00000001a40c*/ s_load_dword    s3, s[6:7], 0x10
/*00000001a414*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001a41c*/ v_mov_b32       v1, 0
/*00000001a420*/ s_lshl_b32      s4, s8, 6
/*00000001a424*/ v_mov_b32       v3, v1
/*00000001a428*/ s_waitcnt       lgkmcnt(0)
/*00000001a42c*/ s_and_b32       s5, s2, 0xffffffc0
/*00000001a434*/ v_add3_u32      v2, s3, s4, v0
/*00000001a43c*/ v_cmp_gt_u32    s[5:6], s2, s5
/*00000001a444*/ s_lshr_b32      s2, s2, 6
/*00000001a448*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a450*/ s_cmpk_lg_u32   s5, 0x0
/*00000001a454*/ s_addc_u32      s2, s2, 0
/*00000001a458*/ s_mul_i32       s2, s2, s2
/*00000001a45c*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001a464*/ v_mov_b32       v0, s2
/*00000001a468*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001a46c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a474*/ s_endpgm
/*00000001a478*/ s_nop           0x0
/*00000001a47c*/ s_nop           0x0
/*00000001a480*/ s_nop           0x0
/*00000001a484*/ s_nop           0x0
/*00000001a488*/ s_nop           0x0
/*00000001a48c*/ s_nop           0x0
/*00000001a490*/ s_nop           0x0
/*00000001a494*/ s_nop           0x0
/*00000001a498*/ s_nop           0x0
/*00000001a49c*/ s_nop           0x0
/*00000001a4a0*/ s_nop           0x0
/*00000001a4a4*/ s_nop           0x0
/*00000001a4a8*/ s_nop           0x0
/*00000001a4ac*/ s_nop           0x0
/*00000001a4b0*/ s_nop           0x0
/*00000001a4b4*/ s_nop           0x0
/*00000001a4b8*/ s_nop           0x0
/*00000001a4bc*/ s_nop           0x0
/*00000001a4c0*/ s_nop           0x0
/*00000001a4c4*/ s_nop           0x0
/*00000001a4c8*/ s_nop           0x0
/*00000001a4cc*/ s_nop           0x0
/*00000001a4d0*/ s_nop           0x0
/*00000001a4d4*/ s_nop           0x0
/*00000001a4d8*/ s_nop           0x0
/*00000001a4dc*/ s_nop           0x0
/*00000001a4e0*/ s_nop           0x0
/*00000001a4e4*/ s_nop           0x0
/*00000001a4e8*/ s_nop           0x0
/*00000001a4ec*/ s_nop           0x0
/*00000001a4f0*/ s_nop           0x0
/*00000001a4f4*/ s_nop           0x0
/*00000001a4f8*/ s_nop           0x0
/*00000001a4fc*/ s_nop           0x0
mul_long_get_work_dim:
.skip 256
/*00000001a600*/ v_mov_b32       v1, s4
/*00000001a604*/ v_mov_b32       v2, s5
/*00000001a608*/ s_clause        0x1
/*00000001a60c*/ s_load_dword    s2, s[6:7], 0x10
/*00000001a614*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001a61c*/ s_lshl_b32      s3, s8, 6
/*00000001a620*/ global_load_ushort v4, v[1:2], off inst_offset:2
/*00000001a628*/ v_mov_b32       v1, 0
/*00000001a62c*/ v_mov_b32       v3, v1
/*00000001a630*/ s_waitcnt       lgkmcnt(0)
/*00000001a634*/ v_add3_u32      v2, s2, s3, v0
/*00000001a63c*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001a644*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001a64c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001a650*/ s_waitcnt       vmcnt(0)
/*00000001a654*/ v_mul_u32_u24   v0, v4, v4
/*00000001a658*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001a660*/ s_endpgm
/*00000001a664*/ s_nop           0x0
/*00000001a668*/ s_nop           0x0
/*00000001a66c*/ s_nop           0x0
/*00000001a670*/ s_nop           0x0
/*00000001a674*/ s_nop           0x0
/*00000001a678*/ s_nop           0x0
/*00000001a67c*/ s_nop           0x0
/*00000001a680*/ s_nop           0x0
/*00000001a684*/ s_nop           0x0
/*00000001a688*/ s_nop           0x0
/*00000001a68c*/ s_nop           0x0
/*00000001a690*/ s_nop           0x0
/*00000001a694*/ s_nop           0x0
/*00000001a698*/ s_nop           0x0
/*00000001a69c*/ s_nop           0x0
/*00000001a6a0*/ s_nop           0x0
/*00000001a6a4*/ s_nop           0x0
/*00000001a6a8*/ s_nop           0x0
/*00000001a6ac*/ s_nop           0x0
/*00000001a6b0*/ s_nop           0x0
/*00000001a6b4*/ s_nop           0x0
/*00000001a6b8*/ s_nop           0x0
/*00000001a6bc*/ s_nop           0x0
/*00000001a6c0*/ s_nop           0x0
/*00000001a6c4*/ s_nop           0x0
/*00000001a6c8*/ s_nop           0x0
/*00000001a6cc*/ s_nop           0x0
/*00000001a6d0*/ s_nop           0x0
/*00000001a6d4*/ s_nop           0x0
/*00000001a6d8*/ s_nop           0x0
/*00000001a6dc*/ s_nop           0x0
/*00000001a6e0*/ s_nop           0x0
/*00000001a6e4*/ s_nop           0x0
/*00000001a6e8*/ s_nop           0x0
/*00000001a6ec*/ s_nop           0x0
/*00000001a6f0*/ s_nop           0x0
/*00000001a6f4*/ s_nop           0x0
/*00000001a6f8*/ s_nop           0x0
/*00000001a6fc*/ s_nop           0x0
mul_long_x_8_8:
.skip 256
/*00000001a800*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001a808*/ s_waitcnt       lgkmcnt(0)
/*00000001a80c*/ s_clause        0x1
/*00000001a810*/ s_load_dword    s1, s[4:5], 0x0
/*00000001a818*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001a820*/ v_mov_b32       v2, 0
/*00000001a824*/ s_lshl_b32      s3, s6, 3
/*00000001a828*/ v_mov_b32       v4, v2
/*00000001a82c*/ v_add3_u32      v3, s0, s3, v0
/*00000001a834*/ s_lshl_b32      s0, s7, 3
/*00000001a838*/ v_add3_u32      v0, s2, s0, v1
/*00000001a840*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001a848*/ s_waitcnt       lgkmcnt(0)
/*00000001a84c*/ v_mul_lo_u32    v1, v0, s1
/*00000001a854*/ v_add_co_u32    v3, vcc, s4, v3
/*00000001a85c*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000001a860*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001a868*/ s_endpgm
/*00000001a86c*/ s_nop           0x0
/*00000001a870*/ s_nop           0x0
/*00000001a874*/ s_nop           0x0
/*00000001a878*/ s_nop           0x0
/*00000001a87c*/ s_nop           0x0
/*00000001a880*/ s_nop           0x0
/*00000001a884*/ s_nop           0x0
/*00000001a888*/ s_nop           0x0
/*00000001a88c*/ s_nop           0x0
/*00000001a890*/ s_nop           0x0
/*00000001a894*/ s_nop           0x0
/*00000001a898*/ s_nop           0x0
/*00000001a89c*/ s_nop           0x0
/*00000001a8a0*/ s_nop           0x0
/*00000001a8a4*/ s_nop           0x0
/*00000001a8a8*/ s_nop           0x0
/*00000001a8ac*/ s_nop           0x0
/*00000001a8b0*/ s_nop           0x0
/*00000001a8b4*/ s_nop           0x0
/*00000001a8b8*/ s_nop           0x0
/*00000001a8bc*/ s_nop           0x0
/*00000001a8c0*/ s_nop           0x0
/*00000001a8c4*/ s_nop           0x0
/*00000001a8c8*/ s_nop           0x0
/*00000001a8cc*/ s_nop           0x0
/*00000001a8d0*/ s_nop           0x0
/*00000001a8d4*/ s_nop           0x0
/*00000001a8d8*/ s_nop           0x0
/*00000001a8dc*/ s_nop           0x0
/*00000001a8e0*/ s_nop           0x0
/*00000001a8e4*/ s_nop           0x0
/*00000001a8e8*/ s_nop           0x0
/*00000001a8ec*/ s_nop           0x0
/*00000001a8f0*/ s_nop           0x0
/*00000001a8f4*/ s_nop           0x0
/*00000001a8f8*/ s_nop           0x0
/*00000001a8fc*/ s_nop           0x0
mul_long_get_global_offset_8_8:
.skip 256
/*00000001aa00*/ s_clause        0x1
/*00000001aa04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001aa0c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001aa14*/ v_mov_b32       v1, 0
/*00000001aa18*/ s_waitcnt       lgkmcnt(0)
/*00000001aa1c*/ s_lshl_b32      s1, s6, 3
/*00000001aa20*/ v_mov_b32       v3, v1
/*00000001aa24*/ v_add3_u32      v2, s0, s1, v0
/*00000001aa2c*/ s_mul_i32       s0, s2, s0
/*00000001aa30*/ v_mov_b32       v0, s0
/*00000001aa34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001aa3c*/ v_add_co_u32    v2, vcc, s4, v2
/*00000001aa44*/ v_add_co_ci_u32 v3, vcc, s5, v3, vcc
/*00000001aa48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001aa50*/ s_endpgm
/*00000001aa54*/ s_nop           0x0
/*00000001aa58*/ s_nop           0x0
/*00000001aa5c*/ s_nop           0x0
/*00000001aa60*/ s_nop           0x0
/*00000001aa64*/ s_nop           0x0
/*00000001aa68*/ s_nop           0x0
/*00000001aa6c*/ s_nop           0x0
/*00000001aa70*/ s_nop           0x0
/*00000001aa74*/ s_nop           0x0
/*00000001aa78*/ s_nop           0x0
/*00000001aa7c*/ s_nop           0x0
/*00000001aa80*/ s_nop           0x0
/*00000001aa84*/ s_nop           0x0
/*00000001aa88*/ s_nop           0x0
/*00000001aa8c*/ s_nop           0x0
/*00000001aa90*/ s_nop           0x0
/*00000001aa94*/ s_nop           0x0
/*00000001aa98*/ s_nop           0x0
/*00000001aa9c*/ s_nop           0x0
/*00000001aaa0*/ s_nop           0x0
/*00000001aaa4*/ s_nop           0x0
/*00000001aaa8*/ s_nop           0x0
/*00000001aaac*/ s_nop           0x0
/*00000001aab0*/ s_nop           0x0
/*00000001aab4*/ s_nop           0x0
/*00000001aab8*/ s_nop           0x0
/*00000001aabc*/ s_nop           0x0
/*00000001aac0*/ s_nop           0x0
/*00000001aac4*/ s_nop           0x0
/*00000001aac8*/ s_nop           0x0
/*00000001aacc*/ s_nop           0x0
/*00000001aad0*/ s_nop           0x0
/*00000001aad4*/ s_nop           0x0
/*00000001aad8*/ s_nop           0x0
/*00000001aadc*/ s_nop           0x0
/*00000001aae0*/ s_nop           0x0
/*00000001aae4*/ s_nop           0x0
/*00000001aae8*/ s_nop           0x0
/*00000001aaec*/ s_nop           0x0
/*00000001aaf0*/ s_nop           0x0
/*00000001aaf4*/ s_nop           0x0
/*00000001aaf8*/ s_nop           0x0
/*00000001aafc*/ s_nop           0x0
mul_long_get_local_id_8_8:
.skip 256
/*00000001ac00*/ s_clause        0x1
/*00000001ac04*/ s_load_dword    s2, s[4:5], 0x10
/*00000001ac0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001ac14*/ v_mov_b32       v2, 0
/*00000001ac18*/ s_lshl_b32      s3, s6, 3
/*00000001ac1c*/ v_mul_u32_u24   v1, v1, v0
/*00000001ac20*/ v_mov_b32       v4, v2
/*00000001ac24*/ s_waitcnt       lgkmcnt(0)
/*00000001ac28*/ v_add3_u32      v3, s2, s3, v0
/*00000001ac30*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001ac38*/ v_add_co_u32    v3, vcc, s0, v3
/*00000001ac40*/ v_add_co_ci_u32 v4, vcc, s1, v4, vcc
/*00000001ac44*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001ac4c*/ s_endpgm
/*00000001ac50*/ s_nop           0x0
/*00000001ac54*/ s_nop           0x0
/*00000001ac58*/ s_nop           0x0
/*00000001ac5c*/ s_nop           0x0
/*00000001ac60*/ s_nop           0x0
/*00000001ac64*/ s_nop           0x0
/*00000001ac68*/ s_nop           0x0
/*00000001ac6c*/ s_nop           0x0
/*00000001ac70*/ s_nop           0x0
/*00000001ac74*/ s_nop           0x0
/*00000001ac78*/ s_nop           0x0
/*00000001ac7c*/ s_nop           0x0
/*00000001ac80*/ s_nop           0x0
/*00000001ac84*/ s_nop           0x0
/*00000001ac88*/ s_nop           0x0
/*00000001ac8c*/ s_nop           0x0
/*00000001ac90*/ s_nop           0x0
/*00000001ac94*/ s_nop           0x0
/*00000001ac98*/ s_nop           0x0
/*00000001ac9c*/ s_nop           0x0
/*00000001aca0*/ s_nop           0x0
/*00000001aca4*/ s_nop           0x0
/*00000001aca8*/ s_nop           0x0
/*00000001acac*/ s_nop           0x0
/*00000001acb0*/ s_nop           0x0
/*00000001acb4*/ s_nop           0x0
/*00000001acb8*/ s_nop           0x0
/*00000001acbc*/ s_nop           0x0
/*00000001acc0*/ s_nop           0x0
/*00000001acc4*/ s_nop           0x0
/*00000001acc8*/ s_nop           0x0
/*00000001accc*/ s_nop           0x0
/*00000001acd0*/ s_nop           0x0
/*00000001acd4*/ s_nop           0x0
/*00000001acd8*/ s_nop           0x0
/*00000001acdc*/ s_nop           0x0
/*00000001ace0*/ s_nop           0x0
/*00000001ace4*/ s_nop           0x0
/*00000001ace8*/ s_nop           0x0
/*00000001acec*/ s_nop           0x0
/*00000001acf0*/ s_nop           0x0
/*00000001acf4*/ s_nop           0x0
/*00000001acf8*/ s_nop           0x0
/*00000001acfc*/ s_nop           0x0
mul_long_get_group_id_8_8:
.skip 256
/*00000001ae00*/ s_clause        0x1
/*00000001ae04*/ s_load_dword    s2, s[4:5], 0x10
/*00000001ae0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001ae14*/ v_mov_b32       v1, 0
/*00000001ae18*/ s_lshl_b32      s3, s6, 3
/*00000001ae1c*/ s_mul_i32       s7, s7, s6
/*00000001ae20*/ v_mov_b32       v3, v1
/*00000001ae24*/ s_waitcnt       lgkmcnt(0)
/*00000001ae28*/ v_add3_u32      v2, s2, s3, v0
/*00000001ae30*/ v_mov_b32       v0, s7
/*00000001ae34*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001ae3c*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001ae44*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001ae48*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001ae50*/ s_endpgm
/*00000001ae54*/ s_nop           0x0
/*00000001ae58*/ s_nop           0x0
/*00000001ae5c*/ s_nop           0x0
/*00000001ae60*/ s_nop           0x0
/*00000001ae64*/ s_nop           0x0
/*00000001ae68*/ s_nop           0x0
/*00000001ae6c*/ s_nop           0x0
/*00000001ae70*/ s_nop           0x0
/*00000001ae74*/ s_nop           0x0
/*00000001ae78*/ s_nop           0x0
/*00000001ae7c*/ s_nop           0x0
/*00000001ae80*/ s_nop           0x0
/*00000001ae84*/ s_nop           0x0
/*00000001ae88*/ s_nop           0x0
/*00000001ae8c*/ s_nop           0x0
/*00000001ae90*/ s_nop           0x0
/*00000001ae94*/ s_nop           0x0
/*00000001ae98*/ s_nop           0x0
/*00000001ae9c*/ s_nop           0x0
/*00000001aea0*/ s_nop           0x0
/*00000001aea4*/ s_nop           0x0
/*00000001aea8*/ s_nop           0x0
/*00000001aeac*/ s_nop           0x0
/*00000001aeb0*/ s_nop           0x0
/*00000001aeb4*/ s_nop           0x0
/*00000001aeb8*/ s_nop           0x0
/*00000001aebc*/ s_nop           0x0
/*00000001aec0*/ s_nop           0x0
/*00000001aec4*/ s_nop           0x0
/*00000001aec8*/ s_nop           0x0
/*00000001aecc*/ s_nop           0x0
/*00000001aed0*/ s_nop           0x0
/*00000001aed4*/ s_nop           0x0
/*00000001aed8*/ s_nop           0x0
/*00000001aedc*/ s_nop           0x0
/*00000001aee0*/ s_nop           0x0
/*00000001aee4*/ s_nop           0x0
/*00000001aee8*/ s_nop           0x0
/*00000001aeec*/ s_nop           0x0
/*00000001aef0*/ s_nop           0x0
/*00000001aef4*/ s_nop           0x0
/*00000001aef8*/ s_nop           0x0
/*00000001aefc*/ s_nop           0x0
mul_long_get_local_size_8_8:
.skip 256
/*00000001b000*/ s_clause        0x1
/*00000001b004*/ s_load_dword    s2, s[4:5], 0x10
/*00000001b00c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000001b014*/ s_lshl_b32      s3, s6, 3
/*00000001b018*/ v_mov_b32       v1, 0
/*00000001b01c*/ s_waitcnt       lgkmcnt(0)
/*00000001b020*/ v_add3_u32      v0, s2, s3, v0
/*00000001b028*/ v_lshlrev_b64   v[2:3], 3, v[0:1]
/*00000001b030*/ v_mov_b32       v0, 64
/*00000001b034*/ v_add_co_u32    v2, vcc, s0, v2
/*00000001b03c*/ v_add_co_ci_u32 v3, vcc, s1, v3, vcc
/*00000001b040*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001b048*/ s_endpgm
/*00000001b04c*/ s_nop           0x0
/*00000001b050*/ s_nop           0x0
/*00000001b054*/ s_nop           0x0
/*00000001b058*/ s_nop           0x0
/*00000001b05c*/ s_nop           0x0
/*00000001b060*/ s_nop           0x0
/*00000001b064*/ s_nop           0x0
/*00000001b068*/ s_nop           0x0
/*00000001b06c*/ s_nop           0x0
/*00000001b070*/ s_nop           0x0
/*00000001b074*/ s_nop           0x0
/*00000001b078*/ s_nop           0x0
/*00000001b07c*/ s_nop           0x0
/*00000001b080*/ s_nop           0x0
/*00000001b084*/ s_nop           0x0
/*00000001b088*/ s_nop           0x0
/*00000001b08c*/ s_nop           0x0
/*00000001b090*/ s_nop           0x0
/*00000001b094*/ s_nop           0x0
/*00000001b098*/ s_nop           0x0
/*00000001b09c*/ s_nop           0x0
/*00000001b0a0*/ s_nop           0x0
/*00000001b0a4*/ s_nop           0x0
/*00000001b0a8*/ s_nop           0x0
/*00000001b0ac*/ s_nop           0x0
/*00000001b0b0*/ s_nop           0x0
/*00000001b0b4*/ s_nop           0x0
/*00000001b0b8*/ s_nop           0x0
/*00000001b0bc*/ s_nop           0x0
/*00000001b0c0*/ s_nop           0x0
/*00000001b0c4*/ s_nop           0x0
/*00000001b0c8*/ s_nop           0x0
/*00000001b0cc*/ s_nop           0x0
/*00000001b0d0*/ s_nop           0x0
/*00000001b0d4*/ s_nop           0x0
/*00000001b0d8*/ s_nop           0x0
/*00000001b0dc*/ s_nop           0x0
/*00000001b0e0*/ s_nop           0x0
/*00000001b0e4*/ s_nop           0x0
/*00000001b0e8*/ s_nop           0x0
/*00000001b0ec*/ s_nop           0x0
/*00000001b0f0*/ s_nop           0x0
/*00000001b0f4*/ s_nop           0x0
/*00000001b0f8*/ s_nop           0x0
/*00000001b0fc*/ s_nop           0x0
mul_long_get_global_id_8_8:
.skip 256
/*00000001b200*/ s_clause        0x1
/*00000001b204*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001b20c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001b214*/ v_mov_b32       v2, 0
/*00000001b218*/ v_lshl_or_b32   v0, s6, 3, v0
/*00000001b220*/ v_mov_b32       v4, v2
/*00000001b224*/ s_waitcnt       lgkmcnt(0)
/*00000001b228*/ v_add_nc_u32    v3, s0, v0
/*00000001b22c*/ s_lshl_b32      s0, s7, 3
/*00000001b230*/ v_add3_u32      v0, s2, s0, v1
/*00000001b238*/ v_lshlrev_b64   v[4:5], 3, v[3:4]
/*00000001b240*/ v_mul_lo_u32    v1, v0, v3
/*00000001b248*/ v_add_co_u32    v3, vcc, s4, v4
/*00000001b250*/ v_add_co_ci_u32 v4, vcc, s5, v5, vcc
/*00000001b254*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001b25c*/ s_endpgm
/*00000001b260*/ s_nop           0x0
/*00000001b264*/ s_nop           0x0
/*00000001b268*/ s_nop           0x0
/*00000001b26c*/ s_nop           0x0
/*00000001b270*/ s_nop           0x0
/*00000001b274*/ s_nop           0x0
/*00000001b278*/ s_nop           0x0
/*00000001b27c*/ s_nop           0x0
/*00000001b280*/ s_nop           0x0
/*00000001b284*/ s_nop           0x0
/*00000001b288*/ s_nop           0x0
/*00000001b28c*/ s_nop           0x0
/*00000001b290*/ s_nop           0x0
/*00000001b294*/ s_nop           0x0
/*00000001b298*/ s_nop           0x0
/*00000001b29c*/ s_nop           0x0
/*00000001b2a0*/ s_nop           0x0
/*00000001b2a4*/ s_nop           0x0
/*00000001b2a8*/ s_nop           0x0
/*00000001b2ac*/ s_nop           0x0
/*00000001b2b0*/ s_nop           0x0
/*00000001b2b4*/ s_nop           0x0
/*00000001b2b8*/ s_nop           0x0
/*00000001b2bc*/ s_nop           0x0
/*00000001b2c0*/ s_nop           0x0
/*00000001b2c4*/ s_nop           0x0
/*00000001b2c8*/ s_nop           0x0
/*00000001b2cc*/ s_nop           0x0
/*00000001b2d0*/ s_nop           0x0
/*00000001b2d4*/ s_nop           0x0
/*00000001b2d8*/ s_nop           0x0
/*00000001b2dc*/ s_nop           0x0
/*00000001b2e0*/ s_nop           0x0
/*00000001b2e4*/ s_nop           0x0
/*00000001b2e8*/ s_nop           0x0
/*00000001b2ec*/ s_nop           0x0
/*00000001b2f0*/ s_nop           0x0
/*00000001b2f4*/ s_nop           0x0
/*00000001b2f8*/ s_nop           0x0
/*00000001b2fc*/ s_nop           0x0
mul_long_get_global_size_8_8:
.skip 256
/*00000001b400*/ s_load_dword    s9, s[6:7], 0x10
/*00000001b408*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000001b410*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000001b418*/ v_mov_b32       v1, 0
/*00000001b41c*/ s_lshl_b32      s4, s8, 3
/*00000001b420*/ v_mov_b32       v3, v1
/*00000001b424*/ s_waitcnt       lgkmcnt(0)
/*00000001b428*/ v_add3_u32      v2, s9, s4, v0
/*00000001b430*/ s_mul_i32       s0, s1, s0
/*00000001b434*/ v_mov_b32       v0, s0
/*00000001b438*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001b440*/ v_add_co_u32    v2, vcc, s2, v2
/*00000001b448*/ v_add_co_ci_u32 v3, vcc, s3, v3, vcc
/*00000001b44c*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001b454*/ s_endpgm
/*00000001b458*/ s_nop           0x0
/*00000001b45c*/ s_nop           0x0
/*00000001b460*/ s_nop           0x0
/*00000001b464*/ s_nop           0x0
/*00000001b468*/ s_nop           0x0
/*00000001b46c*/ s_nop           0x0
/*00000001b470*/ s_nop           0x0
/*00000001b474*/ s_nop           0x0
/*00000001b478*/ s_nop           0x0
/*00000001b47c*/ s_nop           0x0
/*00000001b480*/ s_nop           0x0
/*00000001b484*/ s_nop           0x0
/*00000001b488*/ s_nop           0x0
/*00000001b48c*/ s_nop           0x0
/*00000001b490*/ s_nop           0x0
/*00000001b494*/ s_nop           0x0
/*00000001b498*/ s_nop           0x0
/*00000001b49c*/ s_nop           0x0
/*00000001b4a0*/ s_nop           0x0
/*00000001b4a4*/ s_nop           0x0
/*00000001b4a8*/ s_nop           0x0
/*00000001b4ac*/ s_nop           0x0
/*00000001b4b0*/ s_nop           0x0
/*00000001b4b4*/ s_nop           0x0
/*00000001b4b8*/ s_nop           0x0
/*00000001b4bc*/ s_nop           0x0
/*00000001b4c0*/ s_nop           0x0
/*00000001b4c4*/ s_nop           0x0
/*00000001b4c8*/ s_nop           0x0
/*00000001b4cc*/ s_nop           0x0
/*00000001b4d0*/ s_nop           0x0
/*00000001b4d4*/ s_nop           0x0
/*00000001b4d8*/ s_nop           0x0
/*00000001b4dc*/ s_nop           0x0
/*00000001b4e0*/ s_nop           0x0
/*00000001b4e4*/ s_nop           0x0
/*00000001b4e8*/ s_nop           0x0
/*00000001b4ec*/ s_nop           0x0
/*00000001b4f0*/ s_nop           0x0
/*00000001b4f4*/ s_nop           0x0
/*00000001b4f8*/ s_nop           0x0
/*00000001b4fc*/ s_nop           0x0
mul_long_get_num_groups_8_8:
.skip 256
/*00000001b600*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*00000001b608*/ s_load_dword    s4, s[6:7], 0x10
/*00000001b610*/ v_mov_b32       v1, 0
/*00000001b614*/ v_mov_b32       v3, v1
/*00000001b618*/ s_waitcnt       lgkmcnt(0)
/*00000001b61c*/ s_and_b32       s2, s0, -8
/*00000001b620*/ v_cmp_gt_u32    s[5:6], s0, s2
/*00000001b628*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*00000001b630*/ s_lshl_b32      s6, s8, 3
/*00000001b634*/ s_lshr_b32      s0, s0, 3
/*00000001b638*/ v_add3_u32      v2, s4, s6, v0
/*00000001b640*/ s_cmpk_lg_u32   s5, 0x0
/*00000001b644*/ s_addc_u32      s0, s0, 0
/*00000001b648*/ s_and_b32       s5, s1, -8
/*00000001b64c*/ v_lshlrev_b64   v[2:3], 3, v[2:3]
/*00000001b654*/ v_cmp_gt_u32    s[5:6], s1, s5
/*00000001b65c*/ s_lshr_b32      s1, s1, 3
/*00000001b660*/ s_cmpk_lg_u32   s5, 0x0
/*00000001b664*/ s_addc_u32      s1, s1, 0
/*00000001b668*/ s_mul_i32       s1, s1, s0
/*00000001b66c*/ s_waitcnt       lgkmcnt(0)
/*00000001b670*/ v_add_co_u32    v2, vcc, s2, v2
/*00000001b678*/ v_mov_b32       v0, s1
/*00000001b67c*/ v_add_co_ci_u32 v3, vcc, s3, v3, vcc
/*00000001b680*/ global_store_dwordx2 v[2:3], v[0:1], off
/*00000001b688*/ s_endpgm
/*00000001b68c*/ s_nop           0x0
/*00000001b690*/ s_nop           0x0
/*00000001b694*/ s_nop           0x0
/*00000001b698*/ s_nop           0x0
/*00000001b69c*/ s_nop           0x0
/*00000001b6a0*/ s_nop           0x0
/*00000001b6a4*/ s_nop           0x0
/*00000001b6a8*/ s_nop           0x0
/*00000001b6ac*/ s_nop           0x0
/*00000001b6b0*/ s_nop           0x0
/*00000001b6b4*/ s_nop           0x0
/*00000001b6b8*/ s_nop           0x0
/*00000001b6bc*/ s_nop           0x0
/*00000001b6c0*/ s_nop           0x0
/*00000001b6c4*/ s_nop           0x0
/*00000001b6c8*/ s_nop           0x0
/*00000001b6cc*/ s_nop           0x0
/*00000001b6d0*/ s_nop           0x0
/*00000001b6d4*/ s_nop           0x0
/*00000001b6d8*/ s_nop           0x0
/*00000001b6dc*/ s_nop           0x0
/*00000001b6e0*/ s_nop           0x0
/*00000001b6e4*/ s_nop           0x0
/*00000001b6e8*/ s_nop           0x0
/*00000001b6ec*/ s_nop           0x0
/*00000001b6f0*/ s_nop           0x0
/*00000001b6f4*/ s_nop           0x0
/*00000001b6f8*/ s_nop           0x0
/*00000001b6fc*/ s_nop           0x0
mul_long_get_work_dim_8_8:
.skip 256
/*00000001b800*/ v_mov_b32       v2, s4
/*00000001b804*/ v_mov_b32       v3, s5
/*00000001b808*/ s_clause        0x1
/*00000001b80c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001b814*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001b81c*/ s_waitcnt       lgkmcnt(0)
/*00000001b820*/ s_lshl_b32      s1, s8, 3
/*00000001b824*/ global_load_ushort v5, v[2:3], off inst_offset:2
/*00000001b82c*/ v_mov_b32       v2, 0
/*00000001b830*/ v_mov_b32       v4, v2
/*00000001b834*/ v_add3_u32      v3, s0, s1, v0
/*00000001b83c*/ s_lshl_b32      s0, s9, 3
/*00000001b840*/ v_add3_u32      v0, s2, s0, v1
/*00000001b848*/ v_lshlrev_b64   v[3:4], 3, v[3:4]
/*00000001b850*/ v_add_co_u32    v3, vcc, s4, v3
/*00000001b858*/ v_add_co_ci_u32 v4, vcc, s5, v4, vcc
/*00000001b85c*/ s_waitcnt       vmcnt(0)
/*00000001b860*/ v_mul_lo_u32    v1, v0, v5
/*00000001b868*/ global_store_dwordx2 v[3:4], v[1:2], off
/*00000001b870*/ s_endpgm
/*00000001b874*/ s_nop           0x0
/*00000001b878*/ s_nop           0x0
/*00000001b87c*/ s_nop           0x0
/*00000001b880*/ s_nop           0x0
/*00000001b884*/ s_nop           0x0
/*00000001b888*/ s_nop           0x0
/*00000001b88c*/ s_nop           0x0
/*00000001b890*/ s_nop           0x0
/*00000001b894*/ s_nop           0x0
/*00000001b898*/ s_nop           0x0
/*00000001b89c*/ s_nop           0x0
/*00000001b8a0*/ s_nop           0x0
/*00000001b8a4*/ s_nop           0x0
/*00000001b8a8*/ s_nop           0x0
/*00000001b8ac*/ s_nop           0x0
/*00000001b8b0*/ s_nop           0x0
/*00000001b8b4*/ s_nop           0x0
/*00000001b8b8*/ s_nop           0x0
/*00000001b8bc*/ s_nop           0x0
/*00000001b8c0*/ s_nop           0x0
/*00000001b8c4*/ s_nop           0x0
/*00000001b8c8*/ s_nop           0x0
/*00000001b8cc*/ s_nop           0x0
/*00000001b8d0*/ s_nop           0x0
/*00000001b8d4*/ s_nop           0x0
/*00000001b8d8*/ s_nop           0x0
/*00000001b8dc*/ s_nop           0x0
/*00000001b8e0*/ s_nop           0x0
/*00000001b8e4*/ s_nop           0x0
/*00000001b8e8*/ s_nop           0x0
/*00000001b8ec*/ s_nop           0x0
/*00000001b8f0*/ s_nop           0x0
/*00000001b8f4*/ s_nop           0x0
/*00000001b8f8*/ s_nop           0x0
/*00000001b8fc*/ s_nop           0x0
mul_char_x_x:
.skip 256
/*00000001ba00*/ s_clause        0x2
/*00000001ba04*/ s_load_dword    s2, s[4:5], 0x10
/*00000001ba0c*/ s_load_dword    s3, s[4:5], 0x8
/*00000001ba14*/ s_load_dwordx2  s[0:1], s[4:5], 0x0
/*00000001ba1c*/ s_lshl_b32      s4, s6, 6
/*00000001ba20*/ s_waitcnt       lgkmcnt(0)
/*00000001ba24*/ v_add3_u32      v0, s2, s4, v0
/*00000001ba2c*/ s_mul_i32       s2, s3, s3
/*00000001ba30*/ v_mov_b32       v2, s2
/*00000001ba34*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001ba3c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000001ba44*/ global_store_byte v[0:1], v2, off
/*00000001ba4c*/ s_endpgm
/*00000001ba50*/ s_nop           0x0
/*00000001ba54*/ s_nop           0x0
/*00000001ba58*/ s_nop           0x0
/*00000001ba5c*/ s_nop           0x0
/*00000001ba60*/ s_nop           0x0
/*00000001ba64*/ s_nop           0x0
/*00000001ba68*/ s_nop           0x0
/*00000001ba6c*/ s_nop           0x0
/*00000001ba70*/ s_nop           0x0
/*00000001ba74*/ s_nop           0x0
/*00000001ba78*/ s_nop           0x0
/*00000001ba7c*/ s_nop           0x0
/*00000001ba80*/ s_nop           0x0
/*00000001ba84*/ s_nop           0x0
/*00000001ba88*/ s_nop           0x0
/*00000001ba8c*/ s_nop           0x0
/*00000001ba90*/ s_nop           0x0
/*00000001ba94*/ s_nop           0x0
/*00000001ba98*/ s_nop           0x0
/*00000001ba9c*/ s_nop           0x0
/*00000001baa0*/ s_nop           0x0
/*00000001baa4*/ s_nop           0x0
/*00000001baa8*/ s_nop           0x0
/*00000001baac*/ s_nop           0x0
/*00000001bab0*/ s_nop           0x0
/*00000001bab4*/ s_nop           0x0
/*00000001bab8*/ s_nop           0x0
/*00000001babc*/ s_nop           0x0
/*00000001bac0*/ s_nop           0x0
/*00000001bac4*/ s_nop           0x0
/*00000001bac8*/ s_nop           0x0
/*00000001bacc*/ s_nop           0x0
/*00000001bad0*/ s_nop           0x0
/*00000001bad4*/ s_nop           0x0
/*00000001bad8*/ s_nop           0x0
/*00000001badc*/ s_nop           0x0
/*00000001bae0*/ s_nop           0x0
/*00000001bae4*/ s_nop           0x0
/*00000001bae8*/ s_nop           0x0
/*00000001baec*/ s_nop           0x0
/*00000001baf0*/ s_nop           0x0
/*00000001baf4*/ s_nop           0x0
/*00000001baf8*/ s_nop           0x0
/*00000001bafc*/ s_nop           0x0
mul_char_get_global_offset_x:
.skip 256
/*00000001bc00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001bc08*/ s_waitcnt       lgkmcnt(0)
/*00000001bc0c*/ s_clause        0x2
/*00000001bc10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001bc18*/ s_load_dword    s3, s[4:5], 0x0
/*00000001bc20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001bc28*/ s_lshl_b32      s6, s6, 1
/*00000001bc2c*/ s_lshl_b32      s7, s7, 4
/*00000001bc30*/ s_lshl_b32      s8, s8, 1
/*00000001bc34*/ s_waitcnt       lgkmcnt(0)
/*00000001bc38*/ v_add3_u32      v4, s1, s8, v2
/*00000001bc40*/ v_add3_u32      v0, s0, s6, v0
/*00000001bc48*/ v_add3_u32      v3, s2, s7, v1
/*00000001bc50*/ s_mul_i32       s0, s0, s3
/*00000001bc54*/ s_mul_i32       s2, s2, s3
/*00000001bc58*/ v_mov_b32       v6, s0
/*00000001bc5c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001bc64*/ v_mov_b32       v9, s2
/*00000001bc68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001bc70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001bc78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001bc80*/ s_mul_i32       s0, s1, s3
/*00000001bc84*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001bc8c*/ v_mov_b32       v11, s0
/*00000001bc90*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001bc98*/ global_store_byte v[0:1], v6, off
/*00000001bca0*/ global_store_byte v[2:3], v9, off
/*00000001bca8*/ global_store_byte v[4:5], v11, off
/*00000001bcb0*/ s_endpgm
/*00000001bcb4*/ s_nop           0x0
/*00000001bcb8*/ s_nop           0x0
/*00000001bcbc*/ s_nop           0x0
/*00000001bcc0*/ s_nop           0x0
/*00000001bcc4*/ s_nop           0x0
/*00000001bcc8*/ s_nop           0x0
/*00000001bccc*/ s_nop           0x0
/*00000001bcd0*/ s_nop           0x0
/*00000001bcd4*/ s_nop           0x0
/*00000001bcd8*/ s_nop           0x0
/*00000001bcdc*/ s_nop           0x0
/*00000001bce0*/ s_nop           0x0
/*00000001bce4*/ s_nop           0x0
/*00000001bce8*/ s_nop           0x0
/*00000001bcec*/ s_nop           0x0
/*00000001bcf0*/ s_nop           0x0
/*00000001bcf4*/ s_nop           0x0
/*00000001bcf8*/ s_nop           0x0
/*00000001bcfc*/ s_nop           0x0
mul_char_get_local_id_x:
.skip 256
/*00000001be00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001be08*/ s_waitcnt       lgkmcnt(0)
/*00000001be0c*/ s_clause        0x2
/*00000001be10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001be18*/ s_load_dword    s3, s[4:5], 0x0
/*00000001be20*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001be28*/ s_lshl_b32      s6, s6, 3
/*00000001be2c*/ s_lshl_b32      s7, s7, 2
/*00000001be30*/ s_lshl_b32      s8, s8, 1
/*00000001be34*/ s_waitcnt       lgkmcnt(0)
/*00000001be38*/ v_add3_u32      v5, s1, s8, v2
/*00000001be40*/ v_add3_u32      v3, s0, s6, v0
/*00000001be48*/ v_add3_u32      v4, s2, s7, v1
/*00000001be50*/ v_mul_lo_u32    v6, v0, s3
/*00000001be58*/ v_mul_lo_u32    v9, v1, s3
/*00000001be60*/ v_mul_lo_u32    v11, v2, s3
/*00000001be68*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001be70*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001be78*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001be80*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001be88*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001be90*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001be98*/ global_store_byte v[0:1], v6, off
/*00000001bea0*/ global_store_byte v[2:3], v9, off
/*00000001bea8*/ global_store_byte v[4:5], v11, off
/*00000001beb0*/ s_endpgm
/*00000001beb4*/ s_nop           0x0
/*00000001beb8*/ s_nop           0x0
/*00000001bebc*/ s_nop           0x0
/*00000001bec0*/ s_nop           0x0
/*00000001bec4*/ s_nop           0x0
/*00000001bec8*/ s_nop           0x0
/*00000001becc*/ s_nop           0x0
/*00000001bed0*/ s_nop           0x0
/*00000001bed4*/ s_nop           0x0
/*00000001bed8*/ s_nop           0x0
/*00000001bedc*/ s_nop           0x0
/*00000001bee0*/ s_nop           0x0
/*00000001bee4*/ s_nop           0x0
/*00000001bee8*/ s_nop           0x0
/*00000001beec*/ s_nop           0x0
/*00000001bef0*/ s_nop           0x0
/*00000001bef4*/ s_nop           0x0
/*00000001bef8*/ s_nop           0x0
/*00000001befc*/ s_nop           0x0
mul_char_get_group_id_x:
.skip 256
/*00000001c000*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c008*/ s_waitcnt       lgkmcnt(0)
/*00000001c00c*/ s_clause        0x2
/*00000001c010*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c018*/ s_load_dword    s3, s[4:5], 0x0
/*00000001c020*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c028*/ s_lshl_b32      s9, s6, 1
/*00000001c02c*/ s_lshl_b32      s10, s7, 4
/*00000001c030*/ s_lshl_b32      s11, s8, 1
/*00000001c034*/ s_waitcnt       lgkmcnt(0)
/*00000001c038*/ v_add3_u32      v4, s1, s11, v2
/*00000001c040*/ v_add3_u32      v0, s0, s9, v0
/*00000001c048*/ s_mul_i32       s0, s6, s3
/*00000001c04c*/ v_add3_u32      v3, s2, s10, v1
/*00000001c054*/ v_mov_b32       v6, s0
/*00000001c058*/ s_mul_i32       s1, s7, s3
/*00000001c05c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c064*/ v_mov_b32       v9, s1
/*00000001c068*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c070*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c078*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c080*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c088*/ s_mul_i32       s0, s8, s3
/*00000001c08c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c094*/ v_mov_b32       v11, s0
/*00000001c098*/ global_store_byte v[0:1], v6, off
/*00000001c0a0*/ global_store_byte v[2:3], v9, off
/*00000001c0a8*/ global_store_byte v[4:5], v11, off
/*00000001c0b0*/ s_endpgm
/*00000001c0b4*/ s_nop           0x0
/*00000001c0b8*/ s_nop           0x0
/*00000001c0bc*/ s_nop           0x0
/*00000001c0c0*/ s_nop           0x0
/*00000001c0c4*/ s_nop           0x0
/*00000001c0c8*/ s_nop           0x0
/*00000001c0cc*/ s_nop           0x0
/*00000001c0d0*/ s_nop           0x0
/*00000001c0d4*/ s_nop           0x0
/*00000001c0d8*/ s_nop           0x0
/*00000001c0dc*/ s_nop           0x0
/*00000001c0e0*/ s_nop           0x0
/*00000001c0e4*/ s_nop           0x0
/*00000001c0e8*/ s_nop           0x0
/*00000001c0ec*/ s_nop           0x0
/*00000001c0f0*/ s_nop           0x0
/*00000001c0f4*/ s_nop           0x0
/*00000001c0f8*/ s_nop           0x0
/*00000001c0fc*/ s_nop           0x0
mul_char_get_local_size_x:
.skip 256
/*00000001c200*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c208*/ s_waitcnt       lgkmcnt(0)
/*00000001c20c*/ s_clause        0x2
/*00000001c210*/ s_load_dword    s1, s[4:5], 0x0
/*00000001c218*/ s_load_dword    s3, s[4:5], 0x20
/*00000001c220*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001c228*/ s_lshl_b32      s6, s6, 1
/*00000001c22c*/ s_lshl_b32      s7, s7, 1
/*00000001c230*/ s_lshl_b32      s8, s8, 2
/*00000001c234*/ v_add3_u32      v0, s0, s6, v0
/*00000001c23c*/ s_waitcnt       lgkmcnt(0)
/*00000001c240*/ s_and_b32       s0, s1, 0xff
/*00000001c248*/ v_add3_u32      v3, s2, s7, v1
/*00000001c250*/ s_lshl_b32      s1, s0, 1
/*00000001c254*/ v_add3_u32      v4, s3, s8, v2
/*00000001c25c*/ v_mov_b32       v6, s1
/*00000001c260*/ v_add_co_u32    v0, s[1:2], s4, v0
/*00000001c268*/ s_lshl_b32      s0, s0, 2
/*00000001c26c*/ v_add_co_ci_u32 v1, s[1:2], s5, 0, s[1:2]
/*00000001c274*/ v_add_co_u32    v11, s[1:2], s4, v3
/*00000001c27c*/ v_mov_b32       v7, s0
/*00000001c280*/ v_add_co_ci_u32 v12, s[1:2], s5, 0, s[1:2]
/*00000001c288*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c290*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c298*/ global_store_byte v[0:1], v6, off
/*00000001c2a0*/ global_store_byte v[11:12], v6, off
/*00000001c2a8*/ global_store_byte v[4:5], v7, off
/*00000001c2b0*/ s_endpgm
/*00000001c2b4*/ s_nop           0x0
/*00000001c2b8*/ s_nop           0x0
/*00000001c2bc*/ s_nop           0x0
/*00000001c2c0*/ s_nop           0x0
/*00000001c2c4*/ s_nop           0x0
/*00000001c2c8*/ s_nop           0x0
/*00000001c2cc*/ s_nop           0x0
/*00000001c2d0*/ s_nop           0x0
/*00000001c2d4*/ s_nop           0x0
/*00000001c2d8*/ s_nop           0x0
/*00000001c2dc*/ s_nop           0x0
/*00000001c2e0*/ s_nop           0x0
/*00000001c2e4*/ s_nop           0x0
/*00000001c2e8*/ s_nop           0x0
/*00000001c2ec*/ s_nop           0x0
/*00000001c2f0*/ s_nop           0x0
/*00000001c2f4*/ s_nop           0x0
/*00000001c2f8*/ s_nop           0x0
/*00000001c2fc*/ s_nop           0x0
mul_char_get_global_id_x:
.skip 256
/*00000001c400*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001c408*/ s_waitcnt       lgkmcnt(0)
/*00000001c40c*/ s_clause        0x2
/*00000001c410*/ s_load_dword    s1, s[4:5], 0x20
/*00000001c418*/ s_load_dwordx2  s[10:11], s[4:5], 0x8
/*00000001c420*/ s_load_dword    s3, s[4:5], 0x0
/*00000001c428*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001c430*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001c438*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001c440*/ s_waitcnt       lgkmcnt(0)
/*00000001c444*/ v_add_nc_u32    v5, s1, v2
/*00000001c448*/ v_add_nc_u32    v3, s0, v0
/*00000001c44c*/ v_add_nc_u32    v4, s2, v1
/*00000001c450*/ v_add_co_u32    v0, s[0:1], s10, v0
/*00000001c458*/ v_add_co_ci_u32 v1, s[0:1], s11, 0, s[0:1]
/*00000001c460*/ v_mul_lo_u32    v6, v3, s3
/*00000001c468*/ v_add_co_u32    v2, s[0:1], s10, v4
/*00000001c470*/ v_mul_lo_u32    v9, v4, s3
/*00000001c478*/ v_add_co_ci_u32 v3, s[0:1], s11, 0, s[0:1]
/*00000001c480*/ v_mul_lo_u32    v11, v5, s3
/*00000001c488*/ v_add_co_u32    v4, s[0:1], s10, v5
/*00000001c490*/ v_add_co_ci_u32 v5, s[0:1], s11, 0, s[0:1]
/*00000001c498*/ global_store_byte v[0:1], v6, off
/*00000001c4a0*/ global_store_byte v[2:3], v9, off
/*00000001c4a8*/ global_store_byte v[4:5], v11, off
/*00000001c4b0*/ s_endpgm
/*00000001c4b4*/ s_nop           0x0
/*00000001c4b8*/ s_nop           0x0
/*00000001c4bc*/ s_nop           0x0
/*00000001c4c0*/ s_nop           0x0
/*00000001c4c4*/ s_nop           0x0
/*00000001c4c8*/ s_nop           0x0
/*00000001c4cc*/ s_nop           0x0
/*00000001c4d0*/ s_nop           0x0
/*00000001c4d4*/ s_nop           0x0
/*00000001c4d8*/ s_nop           0x0
/*00000001c4dc*/ s_nop           0x0
/*00000001c4e0*/ s_nop           0x0
/*00000001c4e4*/ s_nop           0x0
/*00000001c4e8*/ s_nop           0x0
/*00000001c4ec*/ s_nop           0x0
/*00000001c4f0*/ s_nop           0x0
/*00000001c4f4*/ s_nop           0x0
/*00000001c4f8*/ s_nop           0x0
/*00000001c4fc*/ s_nop           0x0
mul_char_get_global_size_x:
.skip 256
/*00000001c600*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001c608*/ s_waitcnt       lgkmcnt(0)
/*00000001c60c*/ s_clause        0x1
/*00000001c610*/ s_load_dword    s1, s[6:7], 0x8
/*00000001c618*/ s_load_dword    s3, s[6:7], 0x20
/*00000001c620*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001c628*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001c630*/ s_lshl_b32      s6, s8, 4
/*00000001c634*/ s_lshl_b32      s7, s9, 1
/*00000001c638*/ s_lshl_b32      s8, s10, 1
/*00000001c63c*/ s_waitcnt       lgkmcnt(0)
/*00000001c640*/ v_add3_u32      v4, s3, s8, v2
/*00000001c648*/ v_add3_u32      v0, s0, s6, v0
/*00000001c650*/ v_add3_u32      v3, s2, s7, v1
/*00000001c658*/ s_mul_i32       s0, s12, s1
/*00000001c65c*/ s_mul_i32       s2, s13, s1
/*00000001c660*/ v_mov_b32       v6, s0
/*00000001c664*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001c66c*/ v_mov_b32       v9, s2
/*00000001c670*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001c678*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001c680*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001c688*/ s_mul_i32       s0, s14, s1
/*00000001c68c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c694*/ v_mov_b32       v11, s0
/*00000001c698*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c6a0*/ global_store_byte v[0:1], v6, off
/*00000001c6a8*/ global_store_byte v[2:3], v9, off
/*00000001c6b0*/ global_store_byte v[4:5], v11, off
/*00000001c6b8*/ s_endpgm
/*00000001c6bc*/ s_nop           0x0
/*00000001c6c0*/ s_nop           0x0
/*00000001c6c4*/ s_nop           0x0
/*00000001c6c8*/ s_nop           0x0
/*00000001c6cc*/ s_nop           0x0
/*00000001c6d0*/ s_nop           0x0
/*00000001c6d4*/ s_nop           0x0
/*00000001c6d8*/ s_nop           0x0
/*00000001c6dc*/ s_nop           0x0
/*00000001c6e0*/ s_nop           0x0
/*00000001c6e4*/ s_nop           0x0
/*00000001c6e8*/ s_nop           0x0
/*00000001c6ec*/ s_nop           0x0
/*00000001c6f0*/ s_nop           0x0
/*00000001c6f4*/ s_nop           0x0
/*00000001c6f8*/ s_nop           0x0
/*00000001c6fc*/ s_nop           0x0
mul_char_get_num_groups_x:
.skip 256
/*00000001c800*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001c808*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001c810*/ s_waitcnt       lgkmcnt(0)
/*00000001c814*/ s_clause        0x2
/*00000001c818*/ s_load_dword    s3, s[6:7], 0x20
/*00000001c820*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001c828*/ s_load_dword    s6, s[6:7], 0x0
/*00000001c830*/ s_lshl_b32      s8, s8, 1
/*00000001c834*/ s_lshl_b32      s9, s9, 1
/*00000001c838*/ s_lshl_b32      s10, s10, 2
/*00000001c83c*/ s_and_b32       s11, s0, -2
/*00000001c840*/ v_add3_u32      v0, s12, s8, v0
/*00000001c848*/ v_cmp_gt_u32    s[7:8], s0, s11
/*00000001c850*/ s_lshr_b32      s0, s0, 1
/*00000001c854*/ s_waitcnt       lgkmcnt(0)
/*00000001c858*/ v_add3_u32      v4, s3, s10, v2
/*00000001c860*/ v_add3_u32      v3, s14, s9, v1
/*00000001c868*/ v_add_co_u32    v0, s[3:4], s4, v0
/*00000001c870*/ s_cmpk_lg_u32   s7, 0x0
/*00000001c874*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*00000001c87c*/ s_addc_u32      s0, s0, 0
/*00000001c880*/ s_and_b32       s7, s1, -2
/*00000001c884*/ s_mul_i32       s0, s0, s6
/*00000001c888*/ v_cmp_gt_u32    s[7:8], s1, s7
/*00000001c890*/ s_lshr_b32      s1, s1, 1
/*00000001c894*/ v_mov_b32       v6, s0
/*00000001c898*/ s_cmpk_lg_u32   s7, 0x0
/*00000001c89c*/ v_add_co_u32    v2, s[7:8], s4, v3
/*00000001c8a4*/ s_addc_u32      s1, s1, 0
/*00000001c8a8*/ s_and_b32       s3, s2, -4
/*00000001c8ac*/ s_lshr_b32      s0, s2, 2
/*00000001c8b0*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000001c8b8*/ s_mul_i32       s1, s1, s6
/*00000001c8bc*/ v_add_co_ci_u32 v3, s[7:8], s5, 0, s[7:8]
/*00000001c8c4*/ v_mov_b32       v9, s1
/*00000001c8c8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001c8d0*/ s_cmpk_lg_u32   s3, 0x0
/*00000001c8d4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001c8dc*/ s_addc_u32      s0, s0, 0
/*00000001c8e0*/ s_mul_i32       s0, s0, s6
/*00000001c8e4*/ v_mov_b32       v11, s0
/*00000001c8e8*/ global_store_byte v[0:1], v6, off
/*00000001c8f0*/ global_store_byte v[2:3], v9, off
/*00000001c8f8*/ global_store_byte v[4:5], v11, off
/*00000001c900*/ s_endpgm
/*00000001c904*/ s_nop           0x0
/*00000001c908*/ s_nop           0x0
/*00000001c90c*/ s_nop           0x0
/*00000001c910*/ s_nop           0x0
/*00000001c914*/ s_nop           0x0
/*00000001c918*/ s_nop           0x0
/*00000001c91c*/ s_nop           0x0
/*00000001c920*/ s_nop           0x0
/*00000001c924*/ s_nop           0x0
/*00000001c928*/ s_nop           0x0
/*00000001c92c*/ s_nop           0x0
/*00000001c930*/ s_nop           0x0
/*00000001c934*/ s_nop           0x0
/*00000001c938*/ s_nop           0x0
/*00000001c93c*/ s_nop           0x0
/*00000001c940*/ s_nop           0x0
/*00000001c944*/ s_nop           0x0
/*00000001c948*/ s_nop           0x0
/*00000001c94c*/ s_nop           0x0
/*00000001c950*/ s_nop           0x0
/*00000001c954*/ s_nop           0x0
/*00000001c958*/ s_nop           0x0
/*00000001c95c*/ s_nop           0x0
/*00000001c960*/ s_nop           0x0
/*00000001c964*/ s_nop           0x0
/*00000001c968*/ s_nop           0x0
/*00000001c96c*/ s_nop           0x0
/*00000001c970*/ s_nop           0x0
/*00000001c974*/ s_nop           0x0
/*00000001c978*/ s_nop           0x0
/*00000001c97c*/ s_nop           0x0
/*00000001c980*/ s_nop           0x0
/*00000001c984*/ s_nop           0x0
/*00000001c988*/ s_nop           0x0
/*00000001c98c*/ s_nop           0x0
/*00000001c990*/ s_nop           0x0
/*00000001c994*/ s_nop           0x0
/*00000001c998*/ s_nop           0x0
/*00000001c99c*/ s_nop           0x0
/*00000001c9a0*/ s_nop           0x0
/*00000001c9a4*/ s_nop           0x0
/*00000001c9a8*/ s_nop           0x0
/*00000001c9ac*/ s_nop           0x0
/*00000001c9b0*/ s_nop           0x0
/*00000001c9b4*/ s_nop           0x0
/*00000001c9b8*/ s_nop           0x0
/*00000001c9bc*/ s_nop           0x0
/*00000001c9c0*/ s_nop           0x0
/*00000001c9c4*/ s_nop           0x0
/*00000001c9c8*/ s_nop           0x0
/*00000001c9cc*/ s_nop           0x0
/*00000001c9d0*/ s_nop           0x0
/*00000001c9d4*/ s_nop           0x0
/*00000001c9d8*/ s_nop           0x0
/*00000001c9dc*/ s_nop           0x0
/*00000001c9e0*/ s_nop           0x0
/*00000001c9e4*/ s_nop           0x0
/*00000001c9e8*/ s_nop           0x0
/*00000001c9ec*/ s_nop           0x0
/*00000001c9f0*/ s_nop           0x0
/*00000001c9f4*/ s_nop           0x0
/*00000001c9f8*/ s_nop           0x0
/*00000001c9fc*/ s_nop           0x0
mul_char_get_work_dim_x:
.skip 256
/*00000001cb00*/ v_mov_b32       v1, s4
/*00000001cb04*/ v_mov_b32       v2, s5
/*00000001cb08*/ s_clause        0x2
/*00000001cb0c*/ s_load_dword    s2, s[6:7], 0x10
/*00000001cb14*/ s_load_dword    s3, s[6:7], 0x0
/*00000001cb1c*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000001cb24*/ s_lshl_b32      s4, s8, 1
/*00000001cb28*/ global_load_ushort v1, v[1:2], off inst_offset:2
/*00000001cb30*/ s_waitcnt       lgkmcnt(0)
/*00000001cb34*/ v_add3_u32      v0, s2, s4, v0
/*00000001cb3c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000001cb44*/ s_waitcnt       vmcnt(0)
/*00000001cb48*/ v_mul_lo_u32    v2, v1, s3
/*00000001cb50*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000001cb58*/ global_store_byte v[0:1], v2, off
/*00000001cb60*/ s_endpgm
/*00000001cb64*/ s_nop           0x0
/*00000001cb68*/ s_nop           0x0
/*00000001cb6c*/ s_nop           0x0
/*00000001cb70*/ s_nop           0x0
/*00000001cb74*/ s_nop           0x0
/*00000001cb78*/ s_nop           0x0
/*00000001cb7c*/ s_nop           0x0
/*00000001cb80*/ s_nop           0x0
/*00000001cb84*/ s_nop           0x0
/*00000001cb88*/ s_nop           0x0
/*00000001cb8c*/ s_nop           0x0
/*00000001cb90*/ s_nop           0x0
/*00000001cb94*/ s_nop           0x0
/*00000001cb98*/ s_nop           0x0
/*00000001cb9c*/ s_nop           0x0
/*00000001cba0*/ s_nop           0x0
/*00000001cba4*/ s_nop           0x0
/*00000001cba8*/ s_nop           0x0
/*00000001cbac*/ s_nop           0x0
/*00000001cbb0*/ s_nop           0x0
/*00000001cbb4*/ s_nop           0x0
/*00000001cbb8*/ s_nop           0x0
/*00000001cbbc*/ s_nop           0x0
/*00000001cbc0*/ s_nop           0x0
/*00000001cbc4*/ s_nop           0x0
/*00000001cbc8*/ s_nop           0x0
/*00000001cbcc*/ s_nop           0x0
/*00000001cbd0*/ s_nop           0x0
/*00000001cbd4*/ s_nop           0x0
/*00000001cbd8*/ s_nop           0x0
/*00000001cbdc*/ s_nop           0x0
/*00000001cbe0*/ s_nop           0x0
/*00000001cbe4*/ s_nop           0x0
/*00000001cbe8*/ s_nop           0x0
/*00000001cbec*/ s_nop           0x0
/*00000001cbf0*/ s_nop           0x0
/*00000001cbf4*/ s_nop           0x0
/*00000001cbf8*/ s_nop           0x0
/*00000001cbfc*/ s_nop           0x0
mul_char_x_get_global_offset:
.skip 256
/*00000001cd00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001cd08*/ s_waitcnt       lgkmcnt(0)
/*00000001cd0c*/ s_clause        0x2
/*00000001cd10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001cd18*/ s_load_dword    s3, s[4:5], 0x8
/*00000001cd20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001cd28*/ s_lshl_b32      s6, s6, 4
/*00000001cd2c*/ s_lshl_b32      s7, s7, 1
/*00000001cd30*/ s_lshl_b32      s8, s8, 1
/*00000001cd34*/ s_waitcnt       lgkmcnt(0)
/*00000001cd38*/ v_add3_u32      v4, s1, s8, v2
/*00000001cd40*/ v_add3_u32      v0, s0, s6, v0
/*00000001cd48*/ v_add3_u32      v3, s2, s7, v1
/*00000001cd50*/ s_mul_i32       s0, s0, s3
/*00000001cd54*/ s_mul_i32       s2, s2, s3
/*00000001cd58*/ v_mov_b32       v6, s0
/*00000001cd5c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001cd64*/ v_mov_b32       v9, s2
/*00000001cd68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001cd70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001cd78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001cd80*/ s_mul_i32       s0, s1, s3
/*00000001cd84*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001cd8c*/ v_mov_b32       v11, s0
/*00000001cd90*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001cd98*/ global_store_byte v[0:1], v6, off
/*00000001cda0*/ global_store_byte v[2:3], v9, off
/*00000001cda8*/ global_store_byte v[4:5], v11, off
/*00000001cdb0*/ s_endpgm
/*00000001cdb4*/ s_nop           0x0
/*00000001cdb8*/ s_nop           0x0
/*00000001cdbc*/ s_nop           0x0
/*00000001cdc0*/ s_nop           0x0
/*00000001cdc4*/ s_nop           0x0
/*00000001cdc8*/ s_nop           0x0
/*00000001cdcc*/ s_nop           0x0
/*00000001cdd0*/ s_nop           0x0
/*00000001cdd4*/ s_nop           0x0
/*00000001cdd8*/ s_nop           0x0
/*00000001cddc*/ s_nop           0x0
/*00000001cde0*/ s_nop           0x0
/*00000001cde4*/ s_nop           0x0
/*00000001cde8*/ s_nop           0x0
/*00000001cdec*/ s_nop           0x0
/*00000001cdf0*/ s_nop           0x0
/*00000001cdf4*/ s_nop           0x0
/*00000001cdf8*/ s_nop           0x0
/*00000001cdfc*/ s_nop           0x0
mul_char_get_global_offset_get_global_offset:
.skip 256
/*00000001cf00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001cf08*/ s_waitcnt       lgkmcnt(0)
/*00000001cf0c*/ s_clause        0x1
/*00000001cf10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001cf18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001cf20*/ s_lshl_b32      s3, s6, 1
/*00000001cf24*/ s_lshl_b32      s6, s7, 4
/*00000001cf28*/ s_lshl_b32      s7, s8, 1
/*00000001cf2c*/ v_add3_u32      v0, s0, s3, v0
/*00000001cf34*/ v_add3_u32      v3, s2, s6, v1
/*00000001cf3c*/ s_mul_i32       s0, s0, s0
/*00000001cf40*/ s_waitcnt       lgkmcnt(0)
/*00000001cf44*/ v_add3_u32      v4, s1, s7, v2
/*00000001cf4c*/ v_mov_b32       v6, s0
/*00000001cf50*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001cf58*/ s_mul_i32       s2, s2, s2
/*00000001cf5c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001cf64*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001cf6c*/ v_mov_b32       v9, s2
/*00000001cf70*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001cf78*/ s_mul_i32       s0, s1, s1
/*00000001cf7c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001cf84*/ v_mov_b32       v11, s0
/*00000001cf88*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001cf90*/ global_store_byte v[0:1], v6, off
/*00000001cf98*/ global_store_byte v[2:3], v9, off
/*00000001cfa0*/ global_store_byte v[4:5], v11, off
/*00000001cfa8*/ s_endpgm
/*00000001cfac*/ s_nop           0x0
/*00000001cfb0*/ s_nop           0x0
/*00000001cfb4*/ s_nop           0x0
/*00000001cfb8*/ s_nop           0x0
/*00000001cfbc*/ s_nop           0x0
/*00000001cfc0*/ s_nop           0x0
/*00000001cfc4*/ s_nop           0x0
/*00000001cfc8*/ s_nop           0x0
/*00000001cfcc*/ s_nop           0x0
/*00000001cfd0*/ s_nop           0x0
/*00000001cfd4*/ s_nop           0x0
/*00000001cfd8*/ s_nop           0x0
/*00000001cfdc*/ s_nop           0x0
/*00000001cfe0*/ s_nop           0x0
/*00000001cfe4*/ s_nop           0x0
/*00000001cfe8*/ s_nop           0x0
/*00000001cfec*/ s_nop           0x0
/*00000001cff0*/ s_nop           0x0
/*00000001cff4*/ s_nop           0x0
/*00000001cff8*/ s_nop           0x0
/*00000001cffc*/ s_nop           0x0
mul_char_get_local_id_get_global_offset:
.skip 256
/*00000001d100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d108*/ s_waitcnt       lgkmcnt(0)
/*00000001d10c*/ s_clause        0x1
/*00000001d110*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d120*/ s_lshl_b32      s3, s6, 3
/*00000001d124*/ s_lshl_b32      s6, s7, 2
/*00000001d128*/ s_lshl_b32      s7, s8, 1
/*00000001d12c*/ v_add3_u32      v3, s0, s3, v0
/*00000001d134*/ v_add3_u32      v4, s2, s6, v1
/*00000001d13c*/ v_mul_lo_u32    v6, s0, v0
/*00000001d144*/ s_waitcnt       lgkmcnt(0)
/*00000001d148*/ v_add3_u32      v5, s1, s7, v2
/*00000001d150*/ v_mul_lo_u32    v9, s2, v1
/*00000001d158*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001d160*/ v_mul_lo_u32    v11, s1, v2
/*00000001d168*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d170*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001d178*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d180*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001d188*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d190*/ global_store_byte v[0:1], v6, off
/*00000001d198*/ global_store_byte v[2:3], v9, off
/*00000001d1a0*/ global_store_byte v[4:5], v11, off
/*00000001d1a8*/ s_endpgm
/*00000001d1ac*/ s_nop           0x0
/*00000001d1b0*/ s_nop           0x0
/*00000001d1b4*/ s_nop           0x0
/*00000001d1b8*/ s_nop           0x0
/*00000001d1bc*/ s_nop           0x0
/*00000001d1c0*/ s_nop           0x0
/*00000001d1c4*/ s_nop           0x0
/*00000001d1c8*/ s_nop           0x0
/*00000001d1cc*/ s_nop           0x0
/*00000001d1d0*/ s_nop           0x0
/*00000001d1d4*/ s_nop           0x0
/*00000001d1d8*/ s_nop           0x0
/*00000001d1dc*/ s_nop           0x0
/*00000001d1e0*/ s_nop           0x0
/*00000001d1e4*/ s_nop           0x0
/*00000001d1e8*/ s_nop           0x0
/*00000001d1ec*/ s_nop           0x0
/*00000001d1f0*/ s_nop           0x0
/*00000001d1f4*/ s_nop           0x0
/*00000001d1f8*/ s_nop           0x0
/*00000001d1fc*/ s_nop           0x0
mul_char_get_group_id_get_global_offset:
.skip 256
/*00000001d300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d308*/ s_waitcnt       lgkmcnt(0)
/*00000001d30c*/ s_clause        0x1
/*00000001d310*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d320*/ s_lshl_b32      s3, s6, 1
/*00000001d324*/ s_lshl_b32      s9, s7, 4
/*00000001d328*/ s_lshl_b32      s10, s8, 1
/*00000001d32c*/ v_add3_u32      v0, s0, s3, v0
/*00000001d334*/ v_add3_u32      v3, s2, s9, v1
/*00000001d33c*/ s_mul_i32       s0, s0, s6
/*00000001d340*/ s_waitcnt       lgkmcnt(0)
/*00000001d344*/ v_add3_u32      v4, s1, s10, v2
/*00000001d34c*/ v_mov_b32       v6, s0
/*00000001d350*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d358*/ s_mul_i32       s2, s2, s7
/*00000001d35c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d364*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d36c*/ v_mov_b32       v9, s2
/*00000001d370*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d378*/ s_mul_i32       s0, s1, s8
/*00000001d37c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001d384*/ v_mov_b32       v11, s0
/*00000001d388*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001d390*/ global_store_byte v[0:1], v6, off
/*00000001d398*/ global_store_byte v[2:3], v9, off
/*00000001d3a0*/ global_store_byte v[4:5], v11, off
/*00000001d3a8*/ s_endpgm
/*00000001d3ac*/ s_nop           0x0
/*00000001d3b0*/ s_nop           0x0
/*00000001d3b4*/ s_nop           0x0
/*00000001d3b8*/ s_nop           0x0
/*00000001d3bc*/ s_nop           0x0
/*00000001d3c0*/ s_nop           0x0
/*00000001d3c4*/ s_nop           0x0
/*00000001d3c8*/ s_nop           0x0
/*00000001d3cc*/ s_nop           0x0
/*00000001d3d0*/ s_nop           0x0
/*00000001d3d4*/ s_nop           0x0
/*00000001d3d8*/ s_nop           0x0
/*00000001d3dc*/ s_nop           0x0
/*00000001d3e0*/ s_nop           0x0
/*00000001d3e4*/ s_nop           0x0
/*00000001d3e8*/ s_nop           0x0
/*00000001d3ec*/ s_nop           0x0
/*00000001d3f0*/ s_nop           0x0
/*00000001d3f4*/ s_nop           0x0
/*00000001d3f8*/ s_nop           0x0
/*00000001d3fc*/ s_nop           0x0
mul_char_get_local_size_get_global_offset:
.skip 256
/*00000001d500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d508*/ s_waitcnt       lgkmcnt(0)
/*00000001d50c*/ s_clause        0x1
/*00000001d510*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d520*/ s_lshl_b32      s3, s6, 1
/*00000001d524*/ s_lshl_b32      s6, s7, 1
/*00000001d528*/ s_lshl_b32      s7, s8, 2
/*00000001d52c*/ v_add3_u32      v0, s0, s3, v0
/*00000001d534*/ v_add3_u32      v3, s2, s6, v1
/*00000001d53c*/ s_lshl_b32      s0, s0, 1
/*00000001d540*/ s_waitcnt       lgkmcnt(0)
/*00000001d544*/ v_add3_u32      v4, s1, s7, v2
/*00000001d54c*/ v_mov_b32       v6, s0
/*00000001d550*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d558*/ s_lshl_b32      s2, s2, 1
/*00000001d55c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d564*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d56c*/ v_mov_b32       v9, s2
/*00000001d570*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d578*/ s_lshl_b32      s0, s1, 2
/*00000001d57c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001d584*/ v_mov_b32       v11, s0
/*00000001d588*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001d590*/ global_store_byte v[0:1], v6, off
/*00000001d598*/ global_store_byte v[2:3], v9, off
/*00000001d5a0*/ global_store_byte v[4:5], v11, off
/*00000001d5a8*/ s_endpgm
/*00000001d5ac*/ s_nop           0x0
/*00000001d5b0*/ s_nop           0x0
/*00000001d5b4*/ s_nop           0x0
/*00000001d5b8*/ s_nop           0x0
/*00000001d5bc*/ s_nop           0x0
/*00000001d5c0*/ s_nop           0x0
/*00000001d5c4*/ s_nop           0x0
/*00000001d5c8*/ s_nop           0x0
/*00000001d5cc*/ s_nop           0x0
/*00000001d5d0*/ s_nop           0x0
/*00000001d5d4*/ s_nop           0x0
/*00000001d5d8*/ s_nop           0x0
/*00000001d5dc*/ s_nop           0x0
/*00000001d5e0*/ s_nop           0x0
/*00000001d5e4*/ s_nop           0x0
/*00000001d5e8*/ s_nop           0x0
/*00000001d5ec*/ s_nop           0x0
/*00000001d5f0*/ s_nop           0x0
/*00000001d5f4*/ s_nop           0x0
/*00000001d5f8*/ s_nop           0x0
/*00000001d5fc*/ s_nop           0x0
mul_char_get_global_id_get_global_offset:
.skip 256
/*00000001d700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001d708*/ s_waitcnt       lgkmcnt(0)
/*00000001d70c*/ s_clause        0x1
/*00000001d710*/ s_load_dword    s1, s[4:5], 0x20
/*00000001d718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001d720*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001d728*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001d730*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001d738*/ v_add_nc_u32    v3, s0, v0
/*00000001d73c*/ v_add_nc_u32    v4, s2, v1
/*00000001d740*/ s_waitcnt       lgkmcnt(0)
/*00000001d744*/ v_add_nc_u32    v5, s1, v2
/*00000001d748*/ v_add_co_u32    v0, s[3:4], s4, v0
/*00000001d750*/ v_mul_lo_u32    v6, v3, s0
/*00000001d758*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001d760*/ v_mul_lo_u32    v9, v4, s2
/*00000001d768*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d770*/ v_mul_lo_u32    v11, v5, s1
/*00000001d778*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001d780*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*00000001d788*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001d790*/ global_store_byte v[0:1], v6, off
/*00000001d798*/ global_store_byte v[2:3], v9, off
/*00000001d7a0*/ global_store_byte v[4:5], v11, off
/*00000001d7a8*/ s_endpgm
/*00000001d7ac*/ s_nop           0x0
/*00000001d7b0*/ s_nop           0x0
/*00000001d7b4*/ s_nop           0x0
/*00000001d7b8*/ s_nop           0x0
/*00000001d7bc*/ s_nop           0x0
/*00000001d7c0*/ s_nop           0x0
/*00000001d7c4*/ s_nop           0x0
/*00000001d7c8*/ s_nop           0x0
/*00000001d7cc*/ s_nop           0x0
/*00000001d7d0*/ s_nop           0x0
/*00000001d7d4*/ s_nop           0x0
/*00000001d7d8*/ s_nop           0x0
/*00000001d7dc*/ s_nop           0x0
/*00000001d7e0*/ s_nop           0x0
/*00000001d7e4*/ s_nop           0x0
/*00000001d7e8*/ s_nop           0x0
/*00000001d7ec*/ s_nop           0x0
/*00000001d7f0*/ s_nop           0x0
/*00000001d7f4*/ s_nop           0x0
/*00000001d7f8*/ s_nop           0x0
/*00000001d7fc*/ s_nop           0x0
mul_char_get_global_size_get_global_offset:
.skip 256
/*00000001d900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001d908*/ s_waitcnt       lgkmcnt(0)
/*00000001d90c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001d914*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001d91c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001d924*/ s_lshl_b32      s3, s8, 4
/*00000001d928*/ s_lshl_b32      s6, s9, 1
/*00000001d92c*/ s_lshl_b32      s7, s10, 1
/*00000001d930*/ s_waitcnt       lgkmcnt(0)
/*00000001d934*/ v_add3_u32      v4, s1, s7, v2
/*00000001d93c*/ v_add3_u32      v0, s0, s3, v0
/*00000001d944*/ v_add3_u32      v3, s2, s6, v1
/*00000001d94c*/ s_mul_i32       s0, s0, s12
/*00000001d950*/ s_mul_i32       s2, s2, s13
/*00000001d954*/ v_mov_b32       v6, s0
/*00000001d958*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001d960*/ v_mov_b32       v9, s2
/*00000001d964*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001d96c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001d974*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001d97c*/ s_mul_i32       s0, s1, s14
/*00000001d980*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001d988*/ v_mov_b32       v11, s0
/*00000001d98c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001d994*/ global_store_byte v[0:1], v6, off
/*00000001d99c*/ global_store_byte v[2:3], v9, off
/*00000001d9a4*/ global_store_byte v[4:5], v11, off
/*00000001d9ac*/ s_endpgm
/*00000001d9b0*/ s_nop           0x0
/*00000001d9b4*/ s_nop           0x0
/*00000001d9b8*/ s_nop           0x0
/*00000001d9bc*/ s_nop           0x0
/*00000001d9c0*/ s_nop           0x0
/*00000001d9c4*/ s_nop           0x0
/*00000001d9c8*/ s_nop           0x0
/*00000001d9cc*/ s_nop           0x0
/*00000001d9d0*/ s_nop           0x0
/*00000001d9d4*/ s_nop           0x0
/*00000001d9d8*/ s_nop           0x0
/*00000001d9dc*/ s_nop           0x0
/*00000001d9e0*/ s_nop           0x0
/*00000001d9e4*/ s_nop           0x0
/*00000001d9e8*/ s_nop           0x0
/*00000001d9ec*/ s_nop           0x0
/*00000001d9f0*/ s_nop           0x0
/*00000001d9f4*/ s_nop           0x0
/*00000001d9f8*/ s_nop           0x0
/*00000001d9fc*/ s_nop           0x0
mul_char_get_num_groups_get_global_offset:
.skip 256
/*00000001db00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001db08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001db10*/ s_waitcnt       lgkmcnt(0)
/*00000001db14*/ s_clause        0x1
/*00000001db18*/ s_load_dword    s3, s[6:7], 0x20
/*00000001db20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001db28*/ s_lshl_b32      s7, s8, 1
/*00000001db2c*/ s_lshl_b32      s8, s9, 1
/*00000001db30*/ s_lshl_b32      s9, s10, 2
/*00000001db34*/ s_and_b32       s6, s0, -2
/*00000001db38*/ v_add3_u32      v0, s12, s7, v0
/*00000001db40*/ v_cmp_gt_u32    s[6:7], s0, s6
/*00000001db48*/ s_lshr_b32      s0, s0, 1
/*00000001db4c*/ v_add3_u32      v3, s14, s8, v1
/*00000001db54*/ s_waitcnt       lgkmcnt(0)
/*00000001db58*/ v_add3_u32      v4, s3, s9, v2
/*00000001db60*/ s_cmpk_lg_u32   s6, 0x0
/*00000001db64*/ s_addc_u32      s0, s0, 0
/*00000001db68*/ s_and_b32       s6, s1, -2
/*00000001db6c*/ s_mul_i32       s0, s12, s0
/*00000001db70*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000001db78*/ s_lshr_b32      s1, s1, 1
/*00000001db7c*/ v_mov_b32       v6, s0
/*00000001db80*/ v_add_co_u32    v2, s[7:8], s4, v3
/*00000001db88*/ s_cmpk_lg_u32   s6, 0x0
/*00000001db8c*/ v_add_co_u32    v0, s[6:7], s4, v0
/*00000001db94*/ s_addc_u32      s1, s1, 0
/*00000001db98*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*00000001dba0*/ s_and_b32       s6, s2, -4
/*00000001dba4*/ s_lshr_b32      s0, s2, 2
/*00000001dba8*/ v_cmp_gt_u32    s[6:7], s2, s6
/*00000001dbb0*/ s_mul_i32       s1, s14, s1
/*00000001dbb4*/ v_add_co_ci_u32 v3, s[7:8], s5, 0, s[7:8]
/*00000001dbbc*/ v_mov_b32       v9, s1
/*00000001dbc0*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001dbc8*/ s_cmpk_lg_u32   s6, 0x0
/*00000001dbcc*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001dbd4*/ s_addc_u32      s0, s0, 0
/*00000001dbd8*/ s_mul_i32       s0, s3, s0
/*00000001dbdc*/ v_mov_b32       v11, s0
/*00000001dbe0*/ global_store_byte v[0:1], v6, off
/*00000001dbe8*/ global_store_byte v[2:3], v9, off
/*00000001dbf0*/ global_store_byte v[4:5], v11, off
/*00000001dbf8*/ s_endpgm
/*00000001dbfc*/ s_nop           0x0
mul_char_get_work_dim_get_global_offset:
.skip 256
/*00000001dd00*/ v_mov_b32       v3, s4
/*00000001dd04*/ v_mov_b32       v4, s5
/*00000001dd08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001dd10*/ s_waitcnt       lgkmcnt(0)
/*00000001dd14*/ s_clause        0x1
/*00000001dd18*/ s_load_dword    s1, s[6:7], 0x20
/*00000001dd20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001dd28*/ s_lshl_b32      s3, s8, 1
/*00000001dd2c*/ s_lshl_b32      s6, s9, 1
/*00000001dd30*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*00000001dd38*/ v_add3_u32      v0, s0, s3, v0
/*00000001dd40*/ s_lshl_b32      s3, s10, 2
/*00000001dd44*/ v_add3_u32      v3, s2, s6, v1
/*00000001dd4c*/ s_waitcnt       lgkmcnt(0)
/*00000001dd50*/ v_add3_u32      v5, s1, s3, v2
/*00000001dd58*/ v_add_co_u32    v0, s[3:4], s4, v0
/*00000001dd60*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*00000001dd68*/ v_add_co_u32    v2, s[3:4], s4, v3
/*00000001dd70*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*00000001dd78*/ s_waitcnt       vmcnt(0)
/*00000001dd7c*/ v_mul_lo_u32    v6, s0, v4
/*00000001dd84*/ v_mul_lo_u32    v9, s2, v4
/*00000001dd8c*/ v_mul_lo_u32    v11, s1, v4
/*00000001dd94*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001dd9c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001dda4*/ global_store_byte v[0:1], v6, off
/*00000001ddac*/ global_store_byte v[2:3], v9, off
/*00000001ddb4*/ global_store_byte v[4:5], v11, off
/*00000001ddbc*/ s_endpgm
/*00000001ddc0*/ s_nop           0x0
/*00000001ddc4*/ s_nop           0x0
/*00000001ddc8*/ s_nop           0x0
/*00000001ddcc*/ s_nop           0x0
/*00000001ddd0*/ s_nop           0x0
/*00000001ddd4*/ s_nop           0x0
/*00000001ddd8*/ s_nop           0x0
/*00000001dddc*/ s_nop           0x0
/*00000001dde0*/ s_nop           0x0
/*00000001dde4*/ s_nop           0x0
/*00000001dde8*/ s_nop           0x0
/*00000001ddec*/ s_nop           0x0
/*00000001ddf0*/ s_nop           0x0
/*00000001ddf4*/ s_nop           0x0
/*00000001ddf8*/ s_nop           0x0
/*00000001ddfc*/ s_nop           0x0
mul_char_x_get_local_id:
.skip 256
/*00000001df00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001df08*/ s_waitcnt       lgkmcnt(0)
/*00000001df0c*/ s_clause        0x2
/*00000001df10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001df18*/ s_load_dword    s3, s[4:5], 0x8
/*00000001df20*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001df28*/ s_lshl_b32      s6, s6, 4
/*00000001df2c*/ s_lshl_b32      s7, s7, 1
/*00000001df30*/ s_lshl_b32      s8, s8, 1
/*00000001df34*/ s_waitcnt       lgkmcnt(0)
/*00000001df38*/ v_add3_u32      v5, s1, s8, v2
/*00000001df40*/ v_add3_u32      v3, s0, s6, v0
/*00000001df48*/ v_add3_u32      v4, s2, s7, v1
/*00000001df50*/ v_mul_lo_u32    v6, s3, v0
/*00000001df58*/ v_mul_lo_u32    v9, s3, v1
/*00000001df60*/ v_mul_lo_u32    v11, s3, v2
/*00000001df68*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001df70*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001df78*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001df80*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001df88*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001df90*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001df98*/ global_store_byte v[0:1], v6, off
/*00000001dfa0*/ global_store_byte v[2:3], v9, off
/*00000001dfa8*/ global_store_byte v[4:5], v11, off
/*00000001dfb0*/ s_endpgm
/*00000001dfb4*/ s_nop           0x0
/*00000001dfb8*/ s_nop           0x0
/*00000001dfbc*/ s_nop           0x0
/*00000001dfc0*/ s_nop           0x0
/*00000001dfc4*/ s_nop           0x0
/*00000001dfc8*/ s_nop           0x0
/*00000001dfcc*/ s_nop           0x0
/*00000001dfd0*/ s_nop           0x0
/*00000001dfd4*/ s_nop           0x0
/*00000001dfd8*/ s_nop           0x0
/*00000001dfdc*/ s_nop           0x0
/*00000001dfe0*/ s_nop           0x0
/*00000001dfe4*/ s_nop           0x0
/*00000001dfe8*/ s_nop           0x0
/*00000001dfec*/ s_nop           0x0
/*00000001dff0*/ s_nop           0x0
/*00000001dff4*/ s_nop           0x0
/*00000001dff8*/ s_nop           0x0
/*00000001dffc*/ s_nop           0x0
mul_char_get_global_offset_get_local_id:
.skip 256
/*00000001e100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e108*/ s_waitcnt       lgkmcnt(0)
/*00000001e10c*/ s_clause        0x1
/*00000001e110*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e118*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e120*/ s_lshl_b32      s3, s6, 1
/*00000001e124*/ s_lshl_b32      s6, s7, 4
/*00000001e128*/ s_lshl_b32      s7, s8, 1
/*00000001e12c*/ v_add3_u32      v3, s0, s3, v0
/*00000001e134*/ v_add3_u32      v4, s2, s6, v1
/*00000001e13c*/ v_mul_lo_u32    v6, s0, v0
/*00000001e144*/ s_waitcnt       lgkmcnt(0)
/*00000001e148*/ v_add3_u32      v5, s1, s7, v2
/*00000001e150*/ v_mul_lo_u32    v9, s2, v1
/*00000001e158*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001e160*/ v_mul_lo_u32    v11, s1, v2
/*00000001e168*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e170*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001e178*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e180*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001e188*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e190*/ global_store_byte v[0:1], v6, off
/*00000001e198*/ global_store_byte v[2:3], v9, off
/*00000001e1a0*/ global_store_byte v[4:5], v11, off
/*00000001e1a8*/ s_endpgm
/*00000001e1ac*/ s_nop           0x0
/*00000001e1b0*/ s_nop           0x0
/*00000001e1b4*/ s_nop           0x0
/*00000001e1b8*/ s_nop           0x0
/*00000001e1bc*/ s_nop           0x0
/*00000001e1c0*/ s_nop           0x0
/*00000001e1c4*/ s_nop           0x0
/*00000001e1c8*/ s_nop           0x0
/*00000001e1cc*/ s_nop           0x0
/*00000001e1d0*/ s_nop           0x0
/*00000001e1d4*/ s_nop           0x0
/*00000001e1d8*/ s_nop           0x0
/*00000001e1dc*/ s_nop           0x0
/*00000001e1e0*/ s_nop           0x0
/*00000001e1e4*/ s_nop           0x0
/*00000001e1e8*/ s_nop           0x0
/*00000001e1ec*/ s_nop           0x0
/*00000001e1f0*/ s_nop           0x0
/*00000001e1f4*/ s_nop           0x0
/*00000001e1f8*/ s_nop           0x0
/*00000001e1fc*/ s_nop           0x0
mul_char_get_local_id_get_local_id:
.skip 256
/*00000001e300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e308*/ s_waitcnt       lgkmcnt(0)
/*00000001e30c*/ s_clause        0x1
/*00000001e310*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e320*/ s_lshl_b32      s3, s6, 3
/*00000001e324*/ v_mul_u32_u24   v6, v0, v0
/*00000001e328*/ s_lshl_b32      s6, s7, 2
/*00000001e32c*/ s_lshl_b32      s7, s8, 1
/*00000001e330*/ v_mul_u32_u24   v9, v1, v1
/*00000001e334*/ v_mul_u32_u24   v11, v2, v2
/*00000001e338*/ v_add3_u32      v0, s0, s3, v0
/*00000001e340*/ v_add3_u32      v3, s2, s6, v1
/*00000001e348*/ s_waitcnt       lgkmcnt(0)
/*00000001e34c*/ v_add3_u32      v4, s1, s7, v2
/*00000001e354*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e35c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e364*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e36c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e374*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001e37c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e384*/ global_store_byte v[0:1], v6, off
/*00000001e38c*/ global_store_byte v[2:3], v9, off
/*00000001e394*/ global_store_byte v[4:5], v11, off
/*00000001e39c*/ s_endpgm
/*00000001e3a0*/ s_nop           0x0
/*00000001e3a4*/ s_nop           0x0
/*00000001e3a8*/ s_nop           0x0
/*00000001e3ac*/ s_nop           0x0
/*00000001e3b0*/ s_nop           0x0
/*00000001e3b4*/ s_nop           0x0
/*00000001e3b8*/ s_nop           0x0
/*00000001e3bc*/ s_nop           0x0
/*00000001e3c0*/ s_nop           0x0
/*00000001e3c4*/ s_nop           0x0
/*00000001e3c8*/ s_nop           0x0
/*00000001e3cc*/ s_nop           0x0
/*00000001e3d0*/ s_nop           0x0
/*00000001e3d4*/ s_nop           0x0
/*00000001e3d8*/ s_nop           0x0
/*00000001e3dc*/ s_nop           0x0
/*00000001e3e0*/ s_nop           0x0
/*00000001e3e4*/ s_nop           0x0
/*00000001e3e8*/ s_nop           0x0
/*00000001e3ec*/ s_nop           0x0
/*00000001e3f0*/ s_nop           0x0
/*00000001e3f4*/ s_nop           0x0
/*00000001e3f8*/ s_nop           0x0
/*00000001e3fc*/ s_nop           0x0
mul_char_get_group_id_get_local_id:
.skip 256
/*00000001e500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e508*/ s_waitcnt       lgkmcnt(0)
/*00000001e50c*/ s_clause        0x1
/*00000001e510*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e520*/ s_lshl_b32      s3, s6, 1
/*00000001e524*/ v_mul_lo_u16    v6, v0, s6
/*00000001e52c*/ s_lshl_b32      s9, s7, 4
/*00000001e530*/ s_lshl_b32      s10, s8, 1
/*00000001e534*/ v_mul_lo_u16    v9, v1, s7
/*00000001e53c*/ v_mul_lo_u16    v11, v2, s8
/*00000001e544*/ v_add3_u32      v0, s0, s3, v0
/*00000001e54c*/ v_add3_u32      v3, s2, s9, v1
/*00000001e554*/ s_waitcnt       lgkmcnt(0)
/*00000001e558*/ v_add3_u32      v4, s1, s10, v2
/*00000001e560*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e568*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e570*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e578*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e580*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001e588*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e590*/ global_store_byte v[0:1], v6, off
/*00000001e598*/ global_store_byte v[2:3], v9, off
/*00000001e5a0*/ global_store_byte v[4:5], v11, off
/*00000001e5a8*/ s_endpgm
/*00000001e5ac*/ s_nop           0x0
/*00000001e5b0*/ s_nop           0x0
/*00000001e5b4*/ s_nop           0x0
/*00000001e5b8*/ s_nop           0x0
/*00000001e5bc*/ s_nop           0x0
/*00000001e5c0*/ s_nop           0x0
/*00000001e5c4*/ s_nop           0x0
/*00000001e5c8*/ s_nop           0x0
/*00000001e5cc*/ s_nop           0x0
/*00000001e5d0*/ s_nop           0x0
/*00000001e5d4*/ s_nop           0x0
/*00000001e5d8*/ s_nop           0x0
/*00000001e5dc*/ s_nop           0x0
/*00000001e5e0*/ s_nop           0x0
/*00000001e5e4*/ s_nop           0x0
/*00000001e5e8*/ s_nop           0x0
/*00000001e5ec*/ s_nop           0x0
/*00000001e5f0*/ s_nop           0x0
/*00000001e5f4*/ s_nop           0x0
/*00000001e5f8*/ s_nop           0x0
/*00000001e5fc*/ s_nop           0x0
mul_char_get_local_size_get_local_id:
.skip 256
/*00000001e700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e708*/ s_waitcnt       lgkmcnt(0)
/*00000001e70c*/ s_clause        0x1
/*00000001e710*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e720*/ s_lshl_b32      s3, s6, 1
/*00000001e724*/ v_lshlrev_b16   v6, 1, v0
/*00000001e72c*/ s_lshl_b32      s6, s7, 1
/*00000001e730*/ s_lshl_b32      s7, s8, 2
/*00000001e734*/ v_lshlrev_b16   v9, 1, v1
/*00000001e73c*/ v_lshlrev_b16   v11, 2, v2
/*00000001e744*/ v_add3_u32      v0, s0, s3, v0
/*00000001e74c*/ v_add3_u32      v3, s2, s6, v1
/*00000001e754*/ s_waitcnt       lgkmcnt(0)
/*00000001e758*/ v_add3_u32      v4, s1, s7, v2
/*00000001e760*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001e768*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e770*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001e778*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001e780*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001e788*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001e790*/ global_store_byte v[0:1], v6, off
/*00000001e798*/ global_store_byte v[2:3], v9, off
/*00000001e7a0*/ global_store_byte v[4:5], v11, off
/*00000001e7a8*/ s_endpgm
/*00000001e7ac*/ s_nop           0x0
/*00000001e7b0*/ s_nop           0x0
/*00000001e7b4*/ s_nop           0x0
/*00000001e7b8*/ s_nop           0x0
/*00000001e7bc*/ s_nop           0x0
/*00000001e7c0*/ s_nop           0x0
/*00000001e7c4*/ s_nop           0x0
/*00000001e7c8*/ s_nop           0x0
/*00000001e7cc*/ s_nop           0x0
/*00000001e7d0*/ s_nop           0x0
/*00000001e7d4*/ s_nop           0x0
/*00000001e7d8*/ s_nop           0x0
/*00000001e7dc*/ s_nop           0x0
/*00000001e7e0*/ s_nop           0x0
/*00000001e7e4*/ s_nop           0x0
/*00000001e7e8*/ s_nop           0x0
/*00000001e7ec*/ s_nop           0x0
/*00000001e7f0*/ s_nop           0x0
/*00000001e7f4*/ s_nop           0x0
/*00000001e7f8*/ s_nop           0x0
/*00000001e7fc*/ s_nop           0x0
mul_char_get_global_id_get_local_id:
.skip 256
/*00000001e900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001e908*/ s_waitcnt       lgkmcnt(0)
/*00000001e90c*/ s_clause        0x1
/*00000001e910*/ s_load_dword    s1, s[4:5], 0x20
/*00000001e918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001e920*/ v_lshl_or_b32   v3, s6, 1, v0
/*00000001e928*/ v_lshl_or_b32   v4, s7, 1, v1
/*00000001e930*/ v_lshl_or_b32   v5, s8, 2, v2
/*00000001e938*/ v_add_nc_u32    v6, s0, v3
/*00000001e93c*/ v_add_nc_u32    v7, s2, v4
/*00000001e940*/ s_waitcnt       lgkmcnt(0)
/*00000001e944*/ v_add_co_u32    v3, s[0:1], s4, v3
/*00000001e94c*/ v_add_nc_u32    v5, s1, v5
/*00000001e950*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001e958*/ v_mul_lo_u32    v10, v6, v0
/*00000001e960*/ v_add_co_u32    v0, s[0:1], s4, v7
/*00000001e968*/ v_mul_lo_u32    v11, v7, v1
/*00000001e970*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001e978*/ v_mul_lo_u32    v7, v5, v2
/*00000001e980*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000001e988*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001e990*/ global_store_byte v[3:4], v10, off
/*00000001e998*/ global_store_byte v[0:1], v11, off
/*00000001e9a0*/ global_store_byte v[5:6], v7, off
/*00000001e9a8*/ s_endpgm
/*00000001e9ac*/ s_nop           0x0
/*00000001e9b0*/ s_nop           0x0
/*00000001e9b4*/ s_nop           0x0
/*00000001e9b8*/ s_nop           0x0
/*00000001e9bc*/ s_nop           0x0
/*00000001e9c0*/ s_nop           0x0
/*00000001e9c4*/ s_nop           0x0
/*00000001e9c8*/ s_nop           0x0
/*00000001e9cc*/ s_nop           0x0
/*00000001e9d0*/ s_nop           0x0
/*00000001e9d4*/ s_nop           0x0
/*00000001e9d8*/ s_nop           0x0
/*00000001e9dc*/ s_nop           0x0
/*00000001e9e0*/ s_nop           0x0
/*00000001e9e4*/ s_nop           0x0
/*00000001e9e8*/ s_nop           0x0
/*00000001e9ec*/ s_nop           0x0
/*00000001e9f0*/ s_nop           0x0
/*00000001e9f4*/ s_nop           0x0
/*00000001e9f8*/ s_nop           0x0
/*00000001e9fc*/ s_nop           0x0
mul_char_get_global_size_get_local_id:
.skip 256
/*00000001eb00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001eb08*/ s_waitcnt       lgkmcnt(0)
/*00000001eb0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001eb14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001eb1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001eb24*/ s_lshl_b32      s3, s8, 4
/*00000001eb28*/ s_lshl_b32      s6, s9, 1
/*00000001eb2c*/ s_lshl_b32      s7, s10, 1
/*00000001eb30*/ s_waitcnt       lgkmcnt(0)
/*00000001eb34*/ v_add3_u32      v5, s1, s7, v2
/*00000001eb3c*/ v_add3_u32      v3, s0, s3, v0
/*00000001eb44*/ v_add3_u32      v4, s2, s6, v1
/*00000001eb4c*/ v_mul_lo_u16    v7, s12, v0
/*00000001eb54*/ v_mul_lo_u16    v10, s13, v1
/*00000001eb5c*/ v_mul_lo_u16    v11, s14, v2
/*00000001eb64*/ v_add_co_u32    v0, s[0:1], s4, v3
/*00000001eb6c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001eb74*/ v_add_co_u32    v3, s[0:1], s4, v4
/*00000001eb7c*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001eb84*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000001eb8c*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001eb94*/ global_store_byte v[0:1], v7, off
/*00000001eb9c*/ global_store_byte v[3:4], v10, off
/*00000001eba4*/ global_store_byte v[5:6], v11, off
/*00000001ebac*/ s_endpgm
/*00000001ebb0*/ s_nop           0x0
/*00000001ebb4*/ s_nop           0x0
/*00000001ebb8*/ s_nop           0x0
/*00000001ebbc*/ s_nop           0x0
/*00000001ebc0*/ s_nop           0x0
/*00000001ebc4*/ s_nop           0x0
/*00000001ebc8*/ s_nop           0x0
/*00000001ebcc*/ s_nop           0x0
/*00000001ebd0*/ s_nop           0x0
/*00000001ebd4*/ s_nop           0x0
/*00000001ebd8*/ s_nop           0x0
/*00000001ebdc*/ s_nop           0x0
/*00000001ebe0*/ s_nop           0x0
/*00000001ebe4*/ s_nop           0x0
/*00000001ebe8*/ s_nop           0x0
/*00000001ebec*/ s_nop           0x0
/*00000001ebf0*/ s_nop           0x0
/*00000001ebf4*/ s_nop           0x0
/*00000001ebf8*/ s_nop           0x0
/*00000001ebfc*/ s_nop           0x0
mul_char_get_num_groups_get_local_id:
.skip 256
/*00000001ed00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001ed08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001ed10*/ s_waitcnt       lgkmcnt(0)
/*00000001ed14*/ s_clause        0x1
/*00000001ed18*/ s_load_dword    s3, s[6:7], 0x20
/*00000001ed20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001ed28*/ s_lshl_b32      s7, s8, 1
/*00000001ed2c*/ s_lshl_b32      s8, s9, 1
/*00000001ed30*/ s_lshl_b32      s9, s10, 2
/*00000001ed34*/ s_and_b32       s11, s0, -2
/*00000001ed38*/ v_add3_u32      v3, s12, s7, v0
/*00000001ed40*/ v_cmp_gt_u32    s[6:7], s0, s11
/*00000001ed48*/ s_lshr_b32      s0, s0, 1
/*00000001ed4c*/ s_waitcnt       lgkmcnt(0)
/*00000001ed50*/ v_add3_u32      v7, s3, s9, v2
/*00000001ed58*/ v_add3_u32      v5, s14, s8, v1
/*00000001ed60*/ s_cmpk_lg_u32   s6, 0x0
/*00000001ed64*/ s_addc_u32      s0, s0, 0
/*00000001ed68*/ s_and_b32       s6, s1, -2
/*00000001ed6c*/ v_mul_lo_u16    v10, s0, v0
/*00000001ed74*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000001ed7c*/ s_lshr_b32      s1, s1, 1
/*00000001ed80*/ s_cmpk_lg_u32   s6, 0x0
/*00000001ed84*/ v_add_co_u32    v3, s[6:7], s4, v3
/*00000001ed8c*/ s_addc_u32      s1, s1, 0
/*00000001ed90*/ s_and_b32       s3, s2, -4
/*00000001ed94*/ v_add_co_ci_u32 v4, s[6:7], s5, 0, s[6:7]
/*00000001ed9c*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000001eda4*/ s_lshr_b32      s2, s2, 2
/*00000001eda8*/ v_add_co_u32    v5, s[6:7], s4, v5
/*00000001edb0*/ v_mul_lo_u16    v11, s1, v1
/*00000001edb8*/ v_add_co_ci_u32 v6, s[6:7], s5, 0, s[6:7]
/*00000001edc0*/ s_cmpk_lg_u32   s3, 0x0
/*00000001edc4*/ s_addc_u32      s0, s2, 0
/*00000001edc8*/ v_mul_lo_u16    v2, s0, v2
/*00000001edd0*/ v_add_co_u32    v0, s[0:1], s4, v7
/*00000001edd8*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001ede0*/ global_store_byte v[3:4], v10, off
/*00000001ede8*/ global_store_byte v[5:6], v11, off
/*00000001edf0*/ global_store_byte v[0:1], v2, off
/*00000001edf8*/ s_endpgm
/*00000001edfc*/ s_nop           0x0
mul_char_get_work_dim_get_local_id:
.skip 256
/*00000001ef00*/ v_mov_b32       v3, s4
/*00000001ef04*/ v_mov_b32       v4, s5
/*00000001ef08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001ef10*/ s_waitcnt       lgkmcnt(0)
/*00000001ef14*/ s_clause        0x1
/*00000001ef18*/ s_load_dword    s1, s[6:7], 0x20
/*00000001ef20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001ef28*/ s_lshl_b32      s3, s8, 1
/*00000001ef2c*/ s_lshl_b32      s6, s9, 1
/*00000001ef30*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*00000001ef38*/ v_add3_u32      v3, s0, s3, v0
/*00000001ef40*/ s_lshl_b32      s0, s10, 2
/*00000001ef44*/ v_add3_u32      v5, s2, s6, v1
/*00000001ef4c*/ s_waitcnt       lgkmcnt(0)
/*00000001ef50*/ v_add3_u32      v7, s1, s0, v2
/*00000001ef58*/ v_add_co_u32    v3, s[0:1], s4, v3
/*00000001ef60*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*00000001ef68*/ v_add_co_u32    v5, s[0:1], s4, v5
/*00000001ef70*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*00000001ef78*/ v_add_co_u32    v7, s[0:1], s4, v7
/*00000001ef80*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*00000001ef88*/ s_waitcnt       vmcnt(0)
/*00000001ef8c*/ v_mul_lo_u16    v10, v15, v0
/*00000001ef94*/ v_mul_lo_u16    v11, v15, v1
/*00000001ef9c*/ v_mul_lo_u16    v2, v15, v2
/*00000001efa4*/ global_store_byte v[3:4], v10, off
/*00000001efac*/ global_store_byte v[5:6], v11, off
/*00000001efb4*/ global_store_byte v[7:8], v2, off
/*00000001efbc*/ s_endpgm
/*00000001efc0*/ s_nop           0x0
/*00000001efc4*/ s_nop           0x0
/*00000001efc8*/ s_nop           0x0
/*00000001efcc*/ s_nop           0x0
/*00000001efd0*/ s_nop           0x0
/*00000001efd4*/ s_nop           0x0
/*00000001efd8*/ s_nop           0x0
/*00000001efdc*/ s_nop           0x0
/*00000001efe0*/ s_nop           0x0
/*00000001efe4*/ s_nop           0x0
/*00000001efe8*/ s_nop           0x0
/*00000001efec*/ s_nop           0x0
/*00000001eff0*/ s_nop           0x0
/*00000001eff4*/ s_nop           0x0
/*00000001eff8*/ s_nop           0x0
/*00000001effc*/ s_nop           0x0
mul_char_x_get_group_id:
.skip 256
/*00000001f100*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f108*/ s_waitcnt       lgkmcnt(0)
/*00000001f10c*/ s_clause        0x2
/*00000001f110*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f118*/ s_load_dword    s3, s[4:5], 0x8
/*00000001f120*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*00000001f128*/ s_lshl_b32      s9, s6, 4
/*00000001f12c*/ s_lshl_b32      s10, s7, 1
/*00000001f130*/ s_lshl_b32      s11, s8, 1
/*00000001f134*/ s_waitcnt       lgkmcnt(0)
/*00000001f138*/ v_add3_u32      v4, s1, s11, v2
/*00000001f140*/ v_add3_u32      v0, s0, s9, v0
/*00000001f148*/ s_mul_i32       s0, s3, s6
/*00000001f14c*/ v_add3_u32      v3, s2, s10, v1
/*00000001f154*/ v_mov_b32       v6, s0
/*00000001f158*/ s_mul_i32       s1, s3, s7
/*00000001f15c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f164*/ v_mov_b32       v9, s1
/*00000001f168*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f170*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f178*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001f180*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f188*/ s_mul_i32       s0, s3, s8
/*00000001f18c*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001f194*/ v_mov_b32       v11, s0
/*00000001f198*/ global_store_byte v[0:1], v6, off
/*00000001f1a0*/ global_store_byte v[2:3], v9, off
/*00000001f1a8*/ global_store_byte v[4:5], v11, off
/*00000001f1b0*/ s_endpgm
/*00000001f1b4*/ s_nop           0x0
/*00000001f1b8*/ s_nop           0x0
/*00000001f1bc*/ s_nop           0x0
/*00000001f1c0*/ s_nop           0x0
/*00000001f1c4*/ s_nop           0x0
/*00000001f1c8*/ s_nop           0x0
/*00000001f1cc*/ s_nop           0x0
/*00000001f1d0*/ s_nop           0x0
/*00000001f1d4*/ s_nop           0x0
/*00000001f1d8*/ s_nop           0x0
/*00000001f1dc*/ s_nop           0x0
/*00000001f1e0*/ s_nop           0x0
/*00000001f1e4*/ s_nop           0x0
/*00000001f1e8*/ s_nop           0x0
/*00000001f1ec*/ s_nop           0x0
/*00000001f1f0*/ s_nop           0x0
/*00000001f1f4*/ s_nop           0x0
/*00000001f1f8*/ s_nop           0x0
/*00000001f1fc*/ s_nop           0x0
mul_char_get_global_offset_get_group_id:
.skip 256
/*00000001f300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f308*/ s_waitcnt       lgkmcnt(0)
/*00000001f30c*/ s_clause        0x1
/*00000001f310*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f318*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f320*/ s_lshl_b32      s3, s6, 1
/*00000001f324*/ s_lshl_b32      s9, s7, 4
/*00000001f328*/ s_lshl_b32      s10, s8, 1
/*00000001f32c*/ v_add3_u32      v0, s0, s3, v0
/*00000001f334*/ v_add3_u32      v3, s2, s9, v1
/*00000001f33c*/ s_mul_i32       s0, s0, s6
/*00000001f340*/ s_waitcnt       lgkmcnt(0)
/*00000001f344*/ v_add3_u32      v4, s1, s10, v2
/*00000001f34c*/ v_mov_b32       v6, s0
/*00000001f350*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f358*/ s_mul_i32       s2, s2, s7
/*00000001f35c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f364*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f36c*/ v_mov_b32       v9, s2
/*00000001f370*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f378*/ s_mul_i32       s0, s1, s8
/*00000001f37c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001f384*/ v_mov_b32       v11, s0
/*00000001f388*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001f390*/ global_store_byte v[0:1], v6, off
/*00000001f398*/ global_store_byte v[2:3], v9, off
/*00000001f3a0*/ global_store_byte v[4:5], v11, off
/*00000001f3a8*/ s_endpgm
/*00000001f3ac*/ s_nop           0x0
/*00000001f3b0*/ s_nop           0x0
/*00000001f3b4*/ s_nop           0x0
/*00000001f3b8*/ s_nop           0x0
/*00000001f3bc*/ s_nop           0x0
/*00000001f3c0*/ s_nop           0x0
/*00000001f3c4*/ s_nop           0x0
/*00000001f3c8*/ s_nop           0x0
/*00000001f3cc*/ s_nop           0x0
/*00000001f3d0*/ s_nop           0x0
/*00000001f3d4*/ s_nop           0x0
/*00000001f3d8*/ s_nop           0x0
/*00000001f3dc*/ s_nop           0x0
/*00000001f3e0*/ s_nop           0x0
/*00000001f3e4*/ s_nop           0x0
/*00000001f3e8*/ s_nop           0x0
/*00000001f3ec*/ s_nop           0x0
/*00000001f3f0*/ s_nop           0x0
/*00000001f3f4*/ s_nop           0x0
/*00000001f3f8*/ s_nop           0x0
/*00000001f3fc*/ s_nop           0x0
mul_char_get_local_id_get_group_id:
.skip 256
/*00000001f500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f508*/ s_waitcnt       lgkmcnt(0)
/*00000001f50c*/ s_clause        0x1
/*00000001f510*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f520*/ s_lshl_b32      s3, s6, 3
/*00000001f524*/ v_mul_lo_u16    v6, s6, v0
/*00000001f52c*/ s_lshl_b32      s9, s7, 2
/*00000001f530*/ s_lshl_b32      s10, s8, 1
/*00000001f534*/ v_mul_lo_u16    v9, s7, v1
/*00000001f53c*/ v_mul_lo_u16    v11, s8, v2
/*00000001f544*/ v_add3_u32      v0, s0, s3, v0
/*00000001f54c*/ v_add3_u32      v3, s2, s9, v1
/*00000001f554*/ s_waitcnt       lgkmcnt(0)
/*00000001f558*/ v_add3_u32      v4, s1, s10, v2
/*00000001f560*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f568*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f570*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f578*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f580*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f588*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f590*/ global_store_byte v[0:1], v6, off
/*00000001f598*/ global_store_byte v[2:3], v9, off
/*00000001f5a0*/ global_store_byte v[4:5], v11, off
/*00000001f5a8*/ s_endpgm
/*00000001f5ac*/ s_nop           0x0
/*00000001f5b0*/ s_nop           0x0
/*00000001f5b4*/ s_nop           0x0
/*00000001f5b8*/ s_nop           0x0
/*00000001f5bc*/ s_nop           0x0
/*00000001f5c0*/ s_nop           0x0
/*00000001f5c4*/ s_nop           0x0
/*00000001f5c8*/ s_nop           0x0
/*00000001f5cc*/ s_nop           0x0
/*00000001f5d0*/ s_nop           0x0
/*00000001f5d4*/ s_nop           0x0
/*00000001f5d8*/ s_nop           0x0
/*00000001f5dc*/ s_nop           0x0
/*00000001f5e0*/ s_nop           0x0
/*00000001f5e4*/ s_nop           0x0
/*00000001f5e8*/ s_nop           0x0
/*00000001f5ec*/ s_nop           0x0
/*00000001f5f0*/ s_nop           0x0
/*00000001f5f4*/ s_nop           0x0
/*00000001f5f8*/ s_nop           0x0
/*00000001f5fc*/ s_nop           0x0
mul_char_get_group_id_get_group_id:
.skip 256
/*00000001f700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f708*/ s_waitcnt       lgkmcnt(0)
/*00000001f70c*/ s_clause        0x1
/*00000001f710*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f720*/ s_lshl_b32      s3, s6, 1
/*00000001f724*/ s_lshl_b32      s9, s7, 4
/*00000001f728*/ s_lshl_b32      s10, s8, 1
/*00000001f72c*/ s_mul_i32       s6, s6, s6
/*00000001f730*/ s_mul_i32       s7, s7, s7
/*00000001f734*/ v_mov_b32       v6, s6
/*00000001f738*/ v_mov_b32       v9, s7
/*00000001f73c*/ v_add3_u32      v0, s0, s3, v0
/*00000001f744*/ v_add3_u32      v3, s2, s9, v1
/*00000001f74c*/ s_waitcnt       lgkmcnt(0)
/*00000001f750*/ v_add3_u32      v4, s1, s10, v2
/*00000001f758*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f760*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f768*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f770*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001f778*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f780*/ s_mul_i32       s0, s8, s8
/*00000001f784*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001f78c*/ v_mov_b32       v11, s0
/*00000001f790*/ global_store_byte v[0:1], v6, off
/*00000001f798*/ global_store_byte v[2:3], v9, off
/*00000001f7a0*/ global_store_byte v[4:5], v11, off
/*00000001f7a8*/ s_endpgm
/*00000001f7ac*/ s_nop           0x0
/*00000001f7b0*/ s_nop           0x0
/*00000001f7b4*/ s_nop           0x0
/*00000001f7b8*/ s_nop           0x0
/*00000001f7bc*/ s_nop           0x0
/*00000001f7c0*/ s_nop           0x0
/*00000001f7c4*/ s_nop           0x0
/*00000001f7c8*/ s_nop           0x0
/*00000001f7cc*/ s_nop           0x0
/*00000001f7d0*/ s_nop           0x0
/*00000001f7d4*/ s_nop           0x0
/*00000001f7d8*/ s_nop           0x0
/*00000001f7dc*/ s_nop           0x0
/*00000001f7e0*/ s_nop           0x0
/*00000001f7e4*/ s_nop           0x0
/*00000001f7e8*/ s_nop           0x0
/*00000001f7ec*/ s_nop           0x0
/*00000001f7f0*/ s_nop           0x0
/*00000001f7f4*/ s_nop           0x0
/*00000001f7f8*/ s_nop           0x0
/*00000001f7fc*/ s_nop           0x0
mul_char_get_local_size_get_group_id:
.skip 256
/*00000001f900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001f908*/ s_waitcnt       lgkmcnt(0)
/*00000001f90c*/ s_clause        0x1
/*00000001f910*/ s_load_dword    s1, s[4:5], 0x20
/*00000001f918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001f920*/ s_lshl_b32      s3, s6, 1
/*00000001f924*/ s_lshl_b32      s6, s7, 1
/*00000001f928*/ s_lshl_b32      s7, s8, 2
/*00000001f92c*/ v_mov_b32       v6, s3
/*00000001f930*/ v_mov_b32       v9, s6
/*00000001f934*/ v_mov_b32       v11, s7
/*00000001f938*/ v_add3_u32      v0, s0, s3, v0
/*00000001f940*/ v_add3_u32      v3, s2, s6, v1
/*00000001f948*/ s_waitcnt       lgkmcnt(0)
/*00000001f94c*/ v_add3_u32      v4, s1, s7, v2
/*00000001f954*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001f95c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001f964*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001f96c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001f974*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000001f97c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001f984*/ global_store_byte v[0:1], v6, off
/*00000001f98c*/ global_store_byte v[2:3], v9, off
/*00000001f994*/ global_store_byte v[4:5], v11, off
/*00000001f99c*/ s_endpgm
/*00000001f9a0*/ s_nop           0x0
/*00000001f9a4*/ s_nop           0x0
/*00000001f9a8*/ s_nop           0x0
/*00000001f9ac*/ s_nop           0x0
/*00000001f9b0*/ s_nop           0x0
/*00000001f9b4*/ s_nop           0x0
/*00000001f9b8*/ s_nop           0x0
/*00000001f9bc*/ s_nop           0x0
/*00000001f9c0*/ s_nop           0x0
/*00000001f9c4*/ s_nop           0x0
/*00000001f9c8*/ s_nop           0x0
/*00000001f9cc*/ s_nop           0x0
/*00000001f9d0*/ s_nop           0x0
/*00000001f9d4*/ s_nop           0x0
/*00000001f9d8*/ s_nop           0x0
/*00000001f9dc*/ s_nop           0x0
/*00000001f9e0*/ s_nop           0x0
/*00000001f9e4*/ s_nop           0x0
/*00000001f9e8*/ s_nop           0x0
/*00000001f9ec*/ s_nop           0x0
/*00000001f9f0*/ s_nop           0x0
/*00000001f9f4*/ s_nop           0x0
/*00000001f9f8*/ s_nop           0x0
/*00000001f9fc*/ s_nop           0x0
mul_char_get_global_id_get_group_id:
.skip 256
/*00000001fb00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000001fb08*/ s_waitcnt       lgkmcnt(0)
/*00000001fb0c*/ s_clause        0x1
/*00000001fb10*/ s_load_dword    s1, s[4:5], 0x20
/*00000001fb18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*00000001fb20*/ v_lshl_or_b32   v0, s6, 1, v0
/*00000001fb28*/ v_lshl_or_b32   v1, s7, 1, v1
/*00000001fb30*/ v_lshl_or_b32   v2, s8, 2, v2
/*00000001fb38*/ v_add_nc_u32    v3, s0, v0
/*00000001fb3c*/ v_add_nc_u32    v4, s2, v1
/*00000001fb40*/ s_waitcnt       lgkmcnt(0)
/*00000001fb44*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001fb4c*/ v_add_nc_u32    v5, s1, v2
/*00000001fb50*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001fb58*/ v_mul_lo_u32    v6, v3, s6
/*00000001fb60*/ v_add_co_u32    v2, s[0:1], s4, v4
/*00000001fb68*/ v_mul_lo_u32    v9, v4, s7
/*00000001fb70*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001fb78*/ v_mul_lo_u32    v11, v5, s8
/*00000001fb80*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000001fb88*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000001fb90*/ global_store_byte v[0:1], v6, off
/*00000001fb98*/ global_store_byte v[2:3], v9, off
/*00000001fba0*/ global_store_byte v[4:5], v11, off
/*00000001fba8*/ s_endpgm
/*00000001fbac*/ s_nop           0x0
/*00000001fbb0*/ s_nop           0x0
/*00000001fbb4*/ s_nop           0x0
/*00000001fbb8*/ s_nop           0x0
/*00000001fbbc*/ s_nop           0x0
/*00000001fbc0*/ s_nop           0x0
/*00000001fbc4*/ s_nop           0x0
/*00000001fbc8*/ s_nop           0x0
/*00000001fbcc*/ s_nop           0x0
/*00000001fbd0*/ s_nop           0x0
/*00000001fbd4*/ s_nop           0x0
/*00000001fbd8*/ s_nop           0x0
/*00000001fbdc*/ s_nop           0x0
/*00000001fbe0*/ s_nop           0x0
/*00000001fbe4*/ s_nop           0x0
/*00000001fbe8*/ s_nop           0x0
/*00000001fbec*/ s_nop           0x0
/*00000001fbf0*/ s_nop           0x0
/*00000001fbf4*/ s_nop           0x0
/*00000001fbf8*/ s_nop           0x0
/*00000001fbfc*/ s_nop           0x0
mul_char_get_global_size_get_group_id:
.skip 256
/*00000001fd00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000001fd08*/ s_waitcnt       lgkmcnt(0)
/*00000001fd0c*/ s_load_dword    s1, s[6:7], 0x20
/*00000001fd14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000001fd1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000001fd24*/ s_lshl_b32      s3, s8, 4
/*00000001fd28*/ s_lshl_b32      s6, s9, 1
/*00000001fd2c*/ s_lshl_b32      s7, s10, 1
/*00000001fd30*/ s_waitcnt       lgkmcnt(0)
/*00000001fd34*/ v_add3_u32      v4, s1, s7, v2
/*00000001fd3c*/ v_add3_u32      v0, s0, s3, v0
/*00000001fd44*/ s_mul_i32       s0, s12, s8
/*00000001fd48*/ v_add3_u32      v3, s2, s6, v1
/*00000001fd50*/ v_mov_b32       v6, s0
/*00000001fd54*/ s_mul_i32       s1, s13, s9
/*00000001fd58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000001fd60*/ v_mov_b32       v9, s1
/*00000001fd64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000001fd6c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000001fd74*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001fd7c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*00000001fd84*/ s_mul_i32       s0, s14, s10
/*00000001fd88*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001fd90*/ v_mov_b32       v11, s0
/*00000001fd94*/ global_store_byte v[0:1], v6, off
/*00000001fd9c*/ global_store_byte v[2:3], v9, off
/*00000001fda4*/ global_store_byte v[4:5], v11, off
/*00000001fdac*/ s_endpgm
/*00000001fdb0*/ s_nop           0x0
/*00000001fdb4*/ s_nop           0x0
/*00000001fdb8*/ s_nop           0x0
/*00000001fdbc*/ s_nop           0x0
/*00000001fdc0*/ s_nop           0x0
/*00000001fdc4*/ s_nop           0x0
/*00000001fdc8*/ s_nop           0x0
/*00000001fdcc*/ s_nop           0x0
/*00000001fdd0*/ s_nop           0x0
/*00000001fdd4*/ s_nop           0x0
/*00000001fdd8*/ s_nop           0x0
/*00000001fddc*/ s_nop           0x0
/*00000001fde0*/ s_nop           0x0
/*00000001fde4*/ s_nop           0x0
/*00000001fde8*/ s_nop           0x0
/*00000001fdec*/ s_nop           0x0
/*00000001fdf0*/ s_nop           0x0
/*00000001fdf4*/ s_nop           0x0
/*00000001fdf8*/ s_nop           0x0
/*00000001fdfc*/ s_nop           0x0
mul_char_get_num_groups_get_group_id:
.skip 256
/*00000001ff00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*00000001ff08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*00000001ff10*/ s_waitcnt       lgkmcnt(0)
/*00000001ff14*/ s_clause        0x1
/*00000001ff18*/ s_load_dword    s3, s[6:7], 0x20
/*00000001ff20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000001ff28*/ s_lshl_b32      s7, s8, 1
/*00000001ff2c*/ s_lshl_b32      s11, s9, 1
/*00000001ff30*/ s_lshl_b32      s13, s10, 2
/*00000001ff34*/ s_and_b32       s6, s0, -2
/*00000001ff38*/ v_add3_u32      v0, s12, s7, v0
/*00000001ff40*/ v_cmp_gt_u32    s[6:7], s0, s6
/*00000001ff48*/ s_lshr_b32      s0, s0, 1
/*00000001ff4c*/ s_waitcnt       lgkmcnt(0)
/*00000001ff50*/ v_add3_u32      v4, s3, s13, v2
/*00000001ff58*/ v_add3_u32      v3, s14, s11, v1
/*00000001ff60*/ v_add_co_u32    v0, s[3:4], s4, v0
/*00000001ff68*/ s_cmpk_lg_u32   s6, 0x0
/*00000001ff6c*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*00000001ff74*/ s_addc_u32      s0, s0, 0
/*00000001ff78*/ s_and_b32       s6, s1, -2
/*00000001ff7c*/ s_mul_i32       s0, s0, s8
/*00000001ff80*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000001ff88*/ s_lshr_b32      s1, s1, 1
/*00000001ff8c*/ v_mov_b32       v6, s0
/*00000001ff90*/ s_cmpk_lg_u32   s6, 0x0
/*00000001ff94*/ v_add_co_u32    v2, s[6:7], s4, v3
/*00000001ff9c*/ s_addc_u32      s1, s1, 0
/*00000001ffa0*/ s_and_b32       s3, s2, -4
/*00000001ffa4*/ s_lshr_b32      s0, s2, 2
/*00000001ffa8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*00000001ffb0*/ s_mul_i32       s1, s1, s9
/*00000001ffb4*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*00000001ffbc*/ v_mov_b32       v9, s1
/*00000001ffc0*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000001ffc8*/ s_cmpk_lg_u32   s3, 0x0
/*00000001ffcc*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*00000001ffd4*/ s_addc_u32      s0, s0, 0
/*00000001ffd8*/ s_mul_i32       s0, s0, s10
/*00000001ffdc*/ v_mov_b32       v11, s0
/*00000001ffe0*/ global_store_byte v[0:1], v6, off
/*00000001ffe8*/ global_store_byte v[2:3], v9, off
/*00000001fff0*/ global_store_byte v[4:5], v11, off
/*00000001fff8*/ s_endpgm
/*00000001fffc*/ s_nop           0x0
mul_char_get_work_dim_get_group_id:
.skip 256
/*000000020100*/ v_mov_b32       v3, s4
/*000000020104*/ v_mov_b32       v4, s5
/*000000020108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000020110*/ s_waitcnt       lgkmcnt(0)
/*000000020114*/ s_clause        0x1
/*000000020118*/ s_load_dword    s1, s[6:7], 0x20
/*000000020120*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000020128*/ s_lshl_b32      s3, s8, 1
/*00000002012c*/ s_lshl_b32      s6, s9, 1
/*000000020130*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000020138*/ v_add3_u32      v0, s0, s3, v0
/*000000020140*/ s_lshl_b32      s0, s10, 2
/*000000020144*/ v_add3_u32      v3, s2, s6, v1
/*00000002014c*/ s_waitcnt       lgkmcnt(0)
/*000000020150*/ v_add3_u32      v5, s1, s0, v2
/*000000020158*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020160*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020168*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020170*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020178*/ s_waitcnt       vmcnt(0)
/*00000002017c*/ v_and_b32       v6, 0xffff, v4
/*000000020184*/ v_mul_lo_u32    v7, v4, s10
/*00000002018c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000020194*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*00000002019c*/ v_mul_lo_u32    v11, v6, s8
/*0000000201a4*/ v_mul_lo_u32    v9, v6, s9
/*0000000201ac*/ global_store_byte v[0:1], v11, off
/*0000000201b4*/ global_store_byte v[2:3], v9, off
/*0000000201bc*/ global_store_byte v[4:5], v7, off
/*0000000201c4*/ s_endpgm
/*0000000201c8*/ s_nop           0x0
/*0000000201cc*/ s_nop           0x0
/*0000000201d0*/ s_nop           0x0
/*0000000201d4*/ s_nop           0x0
/*0000000201d8*/ s_nop           0x0
/*0000000201dc*/ s_nop           0x0
/*0000000201e0*/ s_nop           0x0
/*0000000201e4*/ s_nop           0x0
/*0000000201e8*/ s_nop           0x0
/*0000000201ec*/ s_nop           0x0
/*0000000201f0*/ s_nop           0x0
/*0000000201f4*/ s_nop           0x0
/*0000000201f8*/ s_nop           0x0
/*0000000201fc*/ s_nop           0x0
mul_char_x_get_local_size:
.skip 256
/*000000020300*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020308*/ s_waitcnt       lgkmcnt(0)
/*00000002030c*/ s_clause        0x2
/*000000020310*/ s_load_dword    s1, s[4:5], 0x8
/*000000020318*/ s_load_dword    s3, s[4:5], 0x20
/*000000020320*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000020328*/ s_lshl_b32      s6, s6, 4
/*00000002032c*/ s_lshl_b32      s7, s7, 1
/*000000020330*/ s_lshl_b32      s8, s8, 1
/*000000020334*/ v_add3_u32      v0, s0, s6, v0
/*00000002033c*/ s_waitcnt       lgkmcnt(0)
/*000000020340*/ s_and_b32       s0, s1, 0xff
/*000000020348*/ v_add3_u32      v3, s2, s7, v1
/*000000020350*/ s_lshl_b32      s1, s0, 4
/*000000020354*/ v_add3_u32      v4, s3, s8, v2
/*00000002035c*/ v_mov_b32       v6, s1
/*000000020360*/ v_add_co_u32    v0, s[1:2], s4, v0
/*000000020368*/ s_lshl_b32      s0, s0, 1
/*00000002036c*/ v_add_co_ci_u32 v1, s[1:2], s5, 0, s[1:2]
/*000000020374*/ v_add_co_u32    v9, s[1:2], s4, v3
/*00000002037c*/ v_mov_b32       v7, s0
/*000000020380*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020388*/ v_add_co_ci_u32 v10, s[1:2], s5, 0, s[1:2]
/*000000020390*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020398*/ global_store_byte v[0:1], v6, off
/*0000000203a0*/ global_store_byte v[9:10], v7, off
/*0000000203a8*/ global_store_byte v[4:5], v7, off
/*0000000203b0*/ s_endpgm
/*0000000203b4*/ s_nop           0x0
/*0000000203b8*/ s_nop           0x0
/*0000000203bc*/ s_nop           0x0
/*0000000203c0*/ s_nop           0x0
/*0000000203c4*/ s_nop           0x0
/*0000000203c8*/ s_nop           0x0
/*0000000203cc*/ s_nop           0x0
/*0000000203d0*/ s_nop           0x0
/*0000000203d4*/ s_nop           0x0
/*0000000203d8*/ s_nop           0x0
/*0000000203dc*/ s_nop           0x0
/*0000000203e0*/ s_nop           0x0
/*0000000203e4*/ s_nop           0x0
/*0000000203e8*/ s_nop           0x0
/*0000000203ec*/ s_nop           0x0
/*0000000203f0*/ s_nop           0x0
/*0000000203f4*/ s_nop           0x0
/*0000000203f8*/ s_nop           0x0
/*0000000203fc*/ s_nop           0x0
mul_char_get_global_offset_get_local_size:
.skip 256
/*000000020500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020508*/ s_waitcnt       lgkmcnt(0)
/*00000002050c*/ s_clause        0x1
/*000000020510*/ s_load_dword    s1, s[4:5], 0x20
/*000000020518*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020520*/ s_lshl_b32      s3, s6, 1
/*000000020524*/ s_lshl_b32      s6, s7, 4
/*000000020528*/ s_lshl_b32      s7, s8, 1
/*00000002052c*/ v_add3_u32      v0, s0, s3, v0
/*000000020534*/ v_add3_u32      v3, s2, s6, v1
/*00000002053c*/ s_lshl_b32      s0, s0, 1
/*000000020540*/ s_waitcnt       lgkmcnt(0)
/*000000020544*/ v_add3_u32      v4, s1, s7, v2
/*00000002054c*/ v_mov_b32       v6, s0
/*000000020550*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020558*/ s_lshl_b32      s2, s2, 4
/*00000002055c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020564*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000002056c*/ v_mov_b32       v9, s2
/*000000020570*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020578*/ s_lshl_b32      s0, s1, 1
/*00000002057c*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000020584*/ v_mov_b32       v11, s0
/*000000020588*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000020590*/ global_store_byte v[0:1], v6, off
/*000000020598*/ global_store_byte v[2:3], v9, off
/*0000000205a0*/ global_store_byte v[4:5], v11, off
/*0000000205a8*/ s_endpgm
/*0000000205ac*/ s_nop           0x0
/*0000000205b0*/ s_nop           0x0
/*0000000205b4*/ s_nop           0x0
/*0000000205b8*/ s_nop           0x0
/*0000000205bc*/ s_nop           0x0
/*0000000205c0*/ s_nop           0x0
/*0000000205c4*/ s_nop           0x0
/*0000000205c8*/ s_nop           0x0
/*0000000205cc*/ s_nop           0x0
/*0000000205d0*/ s_nop           0x0
/*0000000205d4*/ s_nop           0x0
/*0000000205d8*/ s_nop           0x0
/*0000000205dc*/ s_nop           0x0
/*0000000205e0*/ s_nop           0x0
/*0000000205e4*/ s_nop           0x0
/*0000000205e8*/ s_nop           0x0
/*0000000205ec*/ s_nop           0x0
/*0000000205f0*/ s_nop           0x0
/*0000000205f4*/ s_nop           0x0
/*0000000205f8*/ s_nop           0x0
/*0000000205fc*/ s_nop           0x0
mul_char_get_local_id_get_local_size:
.skip 256
/*000000020700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020708*/ s_waitcnt       lgkmcnt(0)
/*00000002070c*/ s_clause        0x1
/*000000020710*/ s_load_dword    s1, s[4:5], 0x20
/*000000020718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020720*/ s_lshl_b32      s3, s6, 3
/*000000020724*/ v_lshlrev_b16   v6, 3, v0
/*00000002072c*/ s_lshl_b32      s6, s7, 2
/*000000020730*/ s_lshl_b32      s7, s8, 1
/*000000020734*/ v_lshlrev_b16   v9, 2, v1
/*00000002073c*/ v_lshlrev_b16   v11, 1, v2
/*000000020744*/ v_add3_u32      v0, s0, s3, v0
/*00000002074c*/ v_add3_u32      v3, s2, s6, v1
/*000000020754*/ s_waitcnt       lgkmcnt(0)
/*000000020758*/ v_add3_u32      v4, s1, s7, v2
/*000000020760*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020768*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020770*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020778*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020780*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020788*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020790*/ global_store_byte v[0:1], v6, off
/*000000020798*/ global_store_byte v[2:3], v9, off
/*0000000207a0*/ global_store_byte v[4:5], v11, off
/*0000000207a8*/ s_endpgm
/*0000000207ac*/ s_nop           0x0
/*0000000207b0*/ s_nop           0x0
/*0000000207b4*/ s_nop           0x0
/*0000000207b8*/ s_nop           0x0
/*0000000207bc*/ s_nop           0x0
/*0000000207c0*/ s_nop           0x0
/*0000000207c4*/ s_nop           0x0
/*0000000207c8*/ s_nop           0x0
/*0000000207cc*/ s_nop           0x0
/*0000000207d0*/ s_nop           0x0
/*0000000207d4*/ s_nop           0x0
/*0000000207d8*/ s_nop           0x0
/*0000000207dc*/ s_nop           0x0
/*0000000207e0*/ s_nop           0x0
/*0000000207e4*/ s_nop           0x0
/*0000000207e8*/ s_nop           0x0
/*0000000207ec*/ s_nop           0x0
/*0000000207f0*/ s_nop           0x0
/*0000000207f4*/ s_nop           0x0
/*0000000207f8*/ s_nop           0x0
/*0000000207fc*/ s_nop           0x0
mul_char_get_group_id_get_local_size:
.skip 256
/*000000020900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020908*/ s_waitcnt       lgkmcnt(0)
/*00000002090c*/ s_clause        0x1
/*000000020910*/ s_load_dword    s1, s[4:5], 0x20
/*000000020918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020920*/ s_lshl_b32      s3, s6, 1
/*000000020924*/ s_lshl_b32      s6, s7, 4
/*000000020928*/ s_lshl_b32      s7, s8, 1
/*00000002092c*/ v_mov_b32       v6, s3
/*000000020930*/ v_mov_b32       v9, s6
/*000000020934*/ v_mov_b32       v11, s7
/*000000020938*/ v_add3_u32      v0, s0, s3, v0
/*000000020940*/ v_add3_u32      v3, s2, s6, v1
/*000000020948*/ s_waitcnt       lgkmcnt(0)
/*00000002094c*/ v_add3_u32      v4, s1, s7, v2
/*000000020954*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000002095c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020964*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000002096c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020974*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000002097c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020984*/ global_store_byte v[0:1], v6, off
/*00000002098c*/ global_store_byte v[2:3], v9, off
/*000000020994*/ global_store_byte v[4:5], v11, off
/*00000002099c*/ s_endpgm
/*0000000209a0*/ s_nop           0x0
/*0000000209a4*/ s_nop           0x0
/*0000000209a8*/ s_nop           0x0
/*0000000209ac*/ s_nop           0x0
/*0000000209b0*/ s_nop           0x0
/*0000000209b4*/ s_nop           0x0
/*0000000209b8*/ s_nop           0x0
/*0000000209bc*/ s_nop           0x0
/*0000000209c0*/ s_nop           0x0
/*0000000209c4*/ s_nop           0x0
/*0000000209c8*/ s_nop           0x0
/*0000000209cc*/ s_nop           0x0
/*0000000209d0*/ s_nop           0x0
/*0000000209d4*/ s_nop           0x0
/*0000000209d8*/ s_nop           0x0
/*0000000209dc*/ s_nop           0x0
/*0000000209e0*/ s_nop           0x0
/*0000000209e4*/ s_nop           0x0
/*0000000209e8*/ s_nop           0x0
/*0000000209ec*/ s_nop           0x0
/*0000000209f0*/ s_nop           0x0
/*0000000209f4*/ s_nop           0x0
/*0000000209f8*/ s_nop           0x0
/*0000000209fc*/ s_nop           0x0
mul_char_get_local_size_get_local_size:
.skip 256
/*000000020b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020b08*/ s_waitcnt       lgkmcnt(0)
/*000000020b0c*/ s_clause        0x1
/*000000020b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000020b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020b20*/ s_lshl_b32      s3, s6, 1
/*000000020b24*/ s_lshl_b32      s6, s7, 1
/*000000020b28*/ v_mov_b32       v6, 4
/*000000020b2c*/ v_mov_b32       v7, 16
/*000000020b30*/ v_add3_u32      v0, s0, s3, v0
/*000000020b38*/ s_lshl_b32      s0, s8, 2
/*000000020b3c*/ v_add3_u32      v3, s2, s6, v1
/*000000020b44*/ s_waitcnt       lgkmcnt(0)
/*000000020b48*/ v_add3_u32      v4, s1, s0, v2
/*000000020b50*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020b58*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020b60*/ v_add_co_u32    v11, s[0:1], s4, v3
/*000000020b68*/ v_add_co_ci_u32 v12, s[0:1], s5, 0, s[0:1]
/*000000020b70*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000020b78*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020b80*/ global_store_byte v[0:1], v6, off
/*000000020b88*/ global_store_byte v[11:12], v6, off
/*000000020b90*/ global_store_byte v[4:5], v7, off
/*000000020b98*/ s_endpgm
/*000000020b9c*/ s_nop           0x0
/*000000020ba0*/ s_nop           0x0
/*000000020ba4*/ s_nop           0x0
/*000000020ba8*/ s_nop           0x0
/*000000020bac*/ s_nop           0x0
/*000000020bb0*/ s_nop           0x0
/*000000020bb4*/ s_nop           0x0
/*000000020bb8*/ s_nop           0x0
/*000000020bbc*/ s_nop           0x0
/*000000020bc0*/ s_nop           0x0
/*000000020bc4*/ s_nop           0x0
/*000000020bc8*/ s_nop           0x0
/*000000020bcc*/ s_nop           0x0
/*000000020bd0*/ s_nop           0x0
/*000000020bd4*/ s_nop           0x0
/*000000020bd8*/ s_nop           0x0
/*000000020bdc*/ s_nop           0x0
/*000000020be0*/ s_nop           0x0
/*000000020be4*/ s_nop           0x0
/*000000020be8*/ s_nop           0x0
/*000000020bec*/ s_nop           0x0
/*000000020bf0*/ s_nop           0x0
/*000000020bf4*/ s_nop           0x0
/*000000020bf8*/ s_nop           0x0
/*000000020bfc*/ s_nop           0x0
mul_char_get_global_id_get_local_size:
.skip 256
/*000000020d00*/ s_clause        0x2
/*000000020d04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000020d0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000020d14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000020d1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000020d24*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000020d2c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000020d34*/ s_waitcnt       lgkmcnt(0)
/*000000020d38*/ v_add_nc_u32    v3, s0, v0
/*000000020d3c*/ v_add_co_u32    v4, s[0:1], s2, v1
/*000000020d44*/ v_add_co_u32    v5, s[0:1], s10, v2
/*000000020d4c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020d54*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020d5c*/ v_add_co_u32    v2, s[0:1], s4, v4
/*000000020d64*/ v_lshlrev_b16   v6, 1, v3
/*000000020d6c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020d74*/ v_lshlrev_b16   v9, 1, v4
/*000000020d7c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000020d84*/ v_lshlrev_b16   v11, 2, v5
/*000000020d8c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000020d94*/ global_store_byte v[0:1], v6, off
/*000000020d9c*/ global_store_byte v[2:3], v9, off
/*000000020da4*/ global_store_byte v[4:5], v11, off
/*000000020dac*/ s_endpgm
/*000000020db0*/ s_nop           0x0
/*000000020db4*/ s_nop           0x0
/*000000020db8*/ s_nop           0x0
/*000000020dbc*/ s_nop           0x0
/*000000020dc0*/ s_nop           0x0
/*000000020dc4*/ s_nop           0x0
/*000000020dc8*/ s_nop           0x0
/*000000020dcc*/ s_nop           0x0
/*000000020dd0*/ s_nop           0x0
/*000000020dd4*/ s_nop           0x0
/*000000020dd8*/ s_nop           0x0
/*000000020ddc*/ s_nop           0x0
/*000000020de0*/ s_nop           0x0
/*000000020de4*/ s_nop           0x0
/*000000020de8*/ s_nop           0x0
/*000000020dec*/ s_nop           0x0
/*000000020df0*/ s_nop           0x0
/*000000020df4*/ s_nop           0x0
/*000000020df8*/ s_nop           0x0
/*000000020dfc*/ s_nop           0x0
mul_char_get_global_size_get_local_size:
.skip 256
/*000000020f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000020f08*/ s_waitcnt       lgkmcnt(0)
/*000000020f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000020f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000020f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000020f24*/ s_lshl_b32      s3, s8, 4
/*000000020f28*/ s_lshl_b32      s6, s9, 1
/*000000020f2c*/ s_lshl_b32      s7, s10, 1
/*000000020f30*/ s_waitcnt       lgkmcnt(0)
/*000000020f34*/ v_add3_u32      v4, s1, s7, v2
/*000000020f3c*/ v_add3_u32      v0, s0, s3, v0
/*000000020f44*/ s_lshl_b32      s0, s12, 4
/*000000020f48*/ v_add3_u32      v3, s2, s6, v1
/*000000020f50*/ v_mov_b32       v6, s0
/*000000020f54*/ s_lshl_b32      s1, s13, 1
/*000000020f58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000020f60*/ v_mov_b32       v9, s1
/*000000020f64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000020f6c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000020f74*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000020f7c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000020f84*/ s_lshl_b32      s0, s14, 1
/*000000020f88*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000020f90*/ v_mov_b32       v11, s0
/*000000020f94*/ global_store_byte v[0:1], v6, off
/*000000020f9c*/ global_store_byte v[2:3], v9, off
/*000000020fa4*/ global_store_byte v[4:5], v11, off
/*000000020fac*/ s_endpgm
/*000000020fb0*/ s_nop           0x0
/*000000020fb4*/ s_nop           0x0
/*000000020fb8*/ s_nop           0x0
/*000000020fbc*/ s_nop           0x0
/*000000020fc0*/ s_nop           0x0
/*000000020fc4*/ s_nop           0x0
/*000000020fc8*/ s_nop           0x0
/*000000020fcc*/ s_nop           0x0
/*000000020fd0*/ s_nop           0x0
/*000000020fd4*/ s_nop           0x0
/*000000020fd8*/ s_nop           0x0
/*000000020fdc*/ s_nop           0x0
/*000000020fe0*/ s_nop           0x0
/*000000020fe4*/ s_nop           0x0
/*000000020fe8*/ s_nop           0x0
/*000000020fec*/ s_nop           0x0
/*000000020ff0*/ s_nop           0x0
/*000000020ff4*/ s_nop           0x0
/*000000020ff8*/ s_nop           0x0
/*000000020ffc*/ s_nop           0x0
mul_char_get_num_groups_get_local_size:
.skip 256
/*000000021100*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000021108*/ s_clause        0x2
/*00000002110c*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000021114*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000002111c*/ s_load_dword    s6, s[6:7], 0x20
/*000000021124*/ s_lshl_b32      s7, s8, 1
/*000000021128*/ s_lshl_b32      s8, s9, 1
/*00000002112c*/ s_lshl_b32      s9, s10, 2
/*000000021130*/ s_waitcnt       lgkmcnt(0)
/*000000021134*/ s_and_b32       s3, s0, -2
/*000000021138*/ v_add3_u32      v0, s12, s7, v0
/*000000021140*/ v_cmp_gt_u32    s[3:4], s0, s3
/*000000021148*/ s_lshr_b32      s0, s0, 1
/*00000002114c*/ v_add3_u32      v3, s14, s8, v1
/*000000021154*/ v_add3_u32      v4, s6, s9, v2
/*00000002115c*/ v_add_co_u32    v0, s[6:7], s4, v0
/*000000021164*/ s_cmpk_lg_u32   s3, 0x0
/*000000021168*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*000000021170*/ s_addc_u32      s0, s0, 0
/*000000021174*/ s_and_b32       s3, s1, -2
/*000000021178*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000021180*/ s_lshr_b32      s1, s1, 1
/*000000021184*/ s_cmpk_lg_u32   s3, 0x0
/*000000021188*/ s_addc_u32      s1, s1, 0
/*00000002118c*/ s_and_b32       s3, s2, -4
/*000000021190*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000021198*/ s_lshr_b32      s2, s2, 2
/*00000002119c*/ s_cmpk_lg_u32   s3, 0x0
/*0000000211a0*/ v_add_co_u32    v2, s[3:4], s4, v3
/*0000000211a8*/ s_addc_u32      s2, s2, 0
/*0000000211ac*/ s_lshl_b32      s0, s0, 1
/*0000000211b0*/ s_lshl_b32      s1, s1, 1
/*0000000211b4*/ v_mov_b32       v6, s0
/*0000000211b8*/ v_mov_b32       v9, s1
/*0000000211bc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000211c4*/ s_lshl_b32      s0, s2, 2
/*0000000211c8*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*0000000211d0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000211d8*/ v_mov_b32       v11, s0
/*0000000211dc*/ global_store_byte v[0:1], v6, off
/*0000000211e4*/ global_store_byte v[2:3], v9, off
/*0000000211ec*/ global_store_byte v[4:5], v11, off
/*0000000211f4*/ s_endpgm
/*0000000211f8*/ s_nop           0x0
/*0000000211fc*/ s_nop           0x0
mul_char_get_work_dim_get_local_size:
.skip 256
/*000000021300*/ v_mov_b32       v3, s4
/*000000021304*/ v_mov_b32       v4, s5
/*000000021308*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000021310*/ s_waitcnt       lgkmcnt(0)
/*000000021314*/ s_clause        0x1
/*000000021318*/ s_load_dword    s1, s[6:7], 0x20
/*000000021320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000021328*/ s_lshl_b32      s3, s8, 1
/*00000002132c*/ s_lshl_b32      s6, s9, 1
/*000000021330*/ global_load_ubyte v6, v[3:4], off inst_offset:2
/*000000021338*/ v_add3_u32      v0, s0, s3, v0
/*000000021340*/ s_lshl_b32      s0, s10, 2
/*000000021344*/ v_add3_u32      v3, s2, s6, v1
/*00000002134c*/ s_waitcnt       lgkmcnt(0)
/*000000021350*/ v_add3_u32      v4, s1, s0, v2
/*000000021358*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021360*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021368*/ v_add_co_u32    v9, s[0:1], s4, v3
/*000000021370*/ v_add_co_ci_u32 v10, s[0:1], s5, 0, s[0:1]
/*000000021378*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000021380*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021388*/ s_waitcnt       vmcnt(0)
/*00000002138c*/ v_lshlrev_b32   v7, 1, v6
/*000000021390*/ v_lshlrev_b32   v6, 2, v6
/*000000021394*/ global_store_byte v[0:1], v7, off
/*00000002139c*/ global_store_byte v[9:10], v7, off
/*0000000213a4*/ global_store_byte v[4:5], v6, off
/*0000000213ac*/ s_endpgm
/*0000000213b0*/ s_nop           0x0
/*0000000213b4*/ s_nop           0x0
/*0000000213b8*/ s_nop           0x0
/*0000000213bc*/ s_nop           0x0
/*0000000213c0*/ s_nop           0x0
/*0000000213c4*/ s_nop           0x0
/*0000000213c8*/ s_nop           0x0
/*0000000213cc*/ s_nop           0x0
/*0000000213d0*/ s_nop           0x0
/*0000000213d4*/ s_nop           0x0
/*0000000213d8*/ s_nop           0x0
/*0000000213dc*/ s_nop           0x0
/*0000000213e0*/ s_nop           0x0
/*0000000213e4*/ s_nop           0x0
/*0000000213e8*/ s_nop           0x0
/*0000000213ec*/ s_nop           0x0
/*0000000213f0*/ s_nop           0x0
/*0000000213f4*/ s_nop           0x0
/*0000000213f8*/ s_nop           0x0
/*0000000213fc*/ s_nop           0x0
mul_char_x_get_global_id:
.skip 256
/*000000021500*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000021508*/ s_waitcnt       lgkmcnt(0)
/*00000002150c*/ s_clause        0x2
/*000000021510*/ s_load_dword    s1, s[4:5], 0x20
/*000000021518*/ s_load_dword    s3, s[4:5], 0x8
/*000000021520*/ s_load_dwordx2  s[4:5], s[4:5], 0x0
/*000000021528*/ v_lshl_or_b32   v0, s6, 4, v0
/*000000021530*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000021538*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000021540*/ s_waitcnt       lgkmcnt(0)
/*000000021544*/ v_add_nc_u32    v4, s1, v2
/*000000021548*/ v_add_nc_u32    v0, s0, v0
/*00000002154c*/ v_add_nc_u32    v3, s2, v1
/*000000021550*/ v_mul_lo_u32    v11, v4, s3
/*000000021558*/ v_mul_lo_u32    v6, v0, s3
/*000000021560*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021568*/ v_mul_lo_u32    v9, v3, s3
/*000000021570*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021578*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000021580*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021588*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000021590*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021598*/ global_store_byte v[0:1], v6, off
/*0000000215a0*/ global_store_byte v[2:3], v9, off
/*0000000215a8*/ global_store_byte v[4:5], v11, off
/*0000000215b0*/ s_endpgm
/*0000000215b4*/ s_nop           0x0
/*0000000215b8*/ s_nop           0x0
/*0000000215bc*/ s_nop           0x0
/*0000000215c0*/ s_nop           0x0
/*0000000215c4*/ s_nop           0x0
/*0000000215c8*/ s_nop           0x0
/*0000000215cc*/ s_nop           0x0
/*0000000215d0*/ s_nop           0x0
/*0000000215d4*/ s_nop           0x0
/*0000000215d8*/ s_nop           0x0
/*0000000215dc*/ s_nop           0x0
/*0000000215e0*/ s_nop           0x0
/*0000000215e4*/ s_nop           0x0
/*0000000215e8*/ s_nop           0x0
/*0000000215ec*/ s_nop           0x0
/*0000000215f0*/ s_nop           0x0
/*0000000215f4*/ s_nop           0x0
/*0000000215f8*/ s_nop           0x0
/*0000000215fc*/ s_nop           0x0
mul_char_get_global_offset_get_global_id:
.skip 256
/*000000021700*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000021708*/ s_waitcnt       lgkmcnt(0)
/*00000002170c*/ s_clause        0x1
/*000000021710*/ s_load_dword    s1, s[4:5], 0x20
/*000000021718*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000021720*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000021728*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000021730*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000021738*/ v_add_nc_u32    v0, s0, v0
/*00000002173c*/ v_add_nc_u32    v3, s2, v1
/*000000021740*/ s_waitcnt       lgkmcnt(0)
/*000000021744*/ v_add_nc_u32    v4, s1, v2
/*000000021748*/ v_mul_lo_u32    v6, s0, v0
/*000000021750*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021758*/ v_mul_lo_u32    v9, s2, v3
/*000000021760*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021768*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000021770*/ v_mul_lo_u32    v11, s1, v4
/*000000021778*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021780*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000021788*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021790*/ global_store_byte v[0:1], v6, off
/*000000021798*/ global_store_byte v[2:3], v9, off
/*0000000217a0*/ global_store_byte v[4:5], v11, off
/*0000000217a8*/ s_endpgm
/*0000000217ac*/ s_nop           0x0
/*0000000217b0*/ s_nop           0x0
/*0000000217b4*/ s_nop           0x0
/*0000000217b8*/ s_nop           0x0
/*0000000217bc*/ s_nop           0x0
/*0000000217c0*/ s_nop           0x0
/*0000000217c4*/ s_nop           0x0
/*0000000217c8*/ s_nop           0x0
/*0000000217cc*/ s_nop           0x0
/*0000000217d0*/ s_nop           0x0
/*0000000217d4*/ s_nop           0x0
/*0000000217d8*/ s_nop           0x0
/*0000000217dc*/ s_nop           0x0
/*0000000217e0*/ s_nop           0x0
/*0000000217e4*/ s_nop           0x0
/*0000000217e8*/ s_nop           0x0
/*0000000217ec*/ s_nop           0x0
/*0000000217f0*/ s_nop           0x0
/*0000000217f4*/ s_nop           0x0
/*0000000217f8*/ s_nop           0x0
/*0000000217fc*/ s_nop           0x0
mul_char_get_local_id_get_global_id:
.skip 256
/*000000021900*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000021908*/ s_waitcnt       lgkmcnt(0)
/*00000002190c*/ s_clause        0x1
/*000000021910*/ s_load_dword    s1, s[4:5], 0x20
/*000000021918*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000021920*/ v_lshl_or_b32   v3, s6, 3, v0
/*000000021928*/ v_lshl_or_b32   v4, s7, 2, v1
/*000000021930*/ v_lshl_or_b32   v5, s8, 1, v2
/*000000021938*/ v_add_nc_u32    v3, s0, v3
/*00000002193c*/ v_add_nc_u32    v6, s2, v4
/*000000021940*/ s_waitcnt       lgkmcnt(0)
/*000000021944*/ v_add_nc_u32    v5, s1, v5
/*000000021948*/ v_mul_lo_u32    v10, v3, v0
/*000000021950*/ v_add_co_u32    v3, s[0:1], s4, v3
/*000000021958*/ v_mul_lo_u32    v15, v6, v1
/*000000021960*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*000000021968*/ v_add_co_u32    v0, s[0:1], s4, v6
/*000000021970*/ v_mul_lo_u32    v11, v5, v2
/*000000021978*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021980*/ v_add_co_u32    v5, s[0:1], s4, v5
/*000000021988*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*000000021990*/ global_store_byte v[3:4], v10, off
/*000000021998*/ global_store_byte v[0:1], v15, off
/*0000000219a0*/ global_store_byte v[5:6], v11, off
/*0000000219a8*/ s_endpgm
/*0000000219ac*/ s_nop           0x0
/*0000000219b0*/ s_nop           0x0
/*0000000219b4*/ s_nop           0x0
/*0000000219b8*/ s_nop           0x0
/*0000000219bc*/ s_nop           0x0
/*0000000219c0*/ s_nop           0x0
/*0000000219c4*/ s_nop           0x0
/*0000000219c8*/ s_nop           0x0
/*0000000219cc*/ s_nop           0x0
/*0000000219d0*/ s_nop           0x0
/*0000000219d4*/ s_nop           0x0
/*0000000219d8*/ s_nop           0x0
/*0000000219dc*/ s_nop           0x0
/*0000000219e0*/ s_nop           0x0
/*0000000219e4*/ s_nop           0x0
/*0000000219e8*/ s_nop           0x0
/*0000000219ec*/ s_nop           0x0
/*0000000219f0*/ s_nop           0x0
/*0000000219f4*/ s_nop           0x0
/*0000000219f8*/ s_nop           0x0
/*0000000219fc*/ s_nop           0x0
mul_char_get_group_id_get_global_id:
.skip 256
/*000000021b00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000021b08*/ s_waitcnt       lgkmcnt(0)
/*000000021b0c*/ s_clause        0x1
/*000000021b10*/ s_load_dword    s1, s[4:5], 0x20
/*000000021b18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000021b20*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000021b28*/ v_lshl_or_b32   v1, s7, 4, v1
/*000000021b30*/ v_lshl_or_b32   v2, s8, 1, v2
/*000000021b38*/ v_add_nc_u32    v0, s0, v0
/*000000021b3c*/ v_add_nc_u32    v3, s2, v1
/*000000021b40*/ s_waitcnt       lgkmcnt(0)
/*000000021b44*/ v_add_nc_u32    v4, s1, v2
/*000000021b48*/ v_mul_lo_u32    v6, v0, s6
/*000000021b50*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021b58*/ v_mul_lo_u32    v9, v3, s7
/*000000021b60*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021b68*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000021b70*/ v_mul_lo_u32    v11, v4, s8
/*000000021b78*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021b80*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000021b88*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021b90*/ global_store_byte v[0:1], v6, off
/*000000021b98*/ global_store_byte v[2:3], v9, off
/*000000021ba0*/ global_store_byte v[4:5], v11, off
/*000000021ba8*/ s_endpgm
/*000000021bac*/ s_nop           0x0
/*000000021bb0*/ s_nop           0x0
/*000000021bb4*/ s_nop           0x0
/*000000021bb8*/ s_nop           0x0
/*000000021bbc*/ s_nop           0x0
/*000000021bc0*/ s_nop           0x0
/*000000021bc4*/ s_nop           0x0
/*000000021bc8*/ s_nop           0x0
/*000000021bcc*/ s_nop           0x0
/*000000021bd0*/ s_nop           0x0
/*000000021bd4*/ s_nop           0x0
/*000000021bd8*/ s_nop           0x0
/*000000021bdc*/ s_nop           0x0
/*000000021be0*/ s_nop           0x0
/*000000021be4*/ s_nop           0x0
/*000000021be8*/ s_nop           0x0
/*000000021bec*/ s_nop           0x0
/*000000021bf0*/ s_nop           0x0
/*000000021bf4*/ s_nop           0x0
/*000000021bf8*/ s_nop           0x0
/*000000021bfc*/ s_nop           0x0
mul_char_get_local_size_get_global_id:
.skip 256
/*000000021d00*/ s_clause        0x2
/*000000021d04*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000021d0c*/ s_load_dwordx2  s[10:11], s[4:5], 0x20
/*000000021d14*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000021d1c*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000021d24*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000021d2c*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000021d34*/ s_waitcnt       lgkmcnt(0)
/*000000021d38*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000021d40*/ v_add_co_u32    v3, s[0:1], s2, v1
/*000000021d48*/ v_add_co_u32    v4, s[0:1], s10, v2
/*000000021d50*/ v_lshlrev_b16   v6, 1, v0
/*000000021d58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021d60*/ v_lshlrev_b16   v9, 1, v3
/*000000021d68*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021d70*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000021d78*/ v_lshlrev_b16   v11, 2, v4
/*000000021d80*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021d88*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000021d90*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021d98*/ global_store_byte v[0:1], v6, off
/*000000021da0*/ global_store_byte v[2:3], v9, off
/*000000021da8*/ global_store_byte v[4:5], v11, off
/*000000021db0*/ s_endpgm
/*000000021db4*/ s_nop           0x0
/*000000021db8*/ s_nop           0x0
/*000000021dbc*/ s_nop           0x0
/*000000021dc0*/ s_nop           0x0
/*000000021dc4*/ s_nop           0x0
/*000000021dc8*/ s_nop           0x0
/*000000021dcc*/ s_nop           0x0
/*000000021dd0*/ s_nop           0x0
/*000000021dd4*/ s_nop           0x0
/*000000021dd8*/ s_nop           0x0
/*000000021ddc*/ s_nop           0x0
/*000000021de0*/ s_nop           0x0
/*000000021de4*/ s_nop           0x0
/*000000021de8*/ s_nop           0x0
/*000000021dec*/ s_nop           0x0
/*000000021df0*/ s_nop           0x0
/*000000021df4*/ s_nop           0x0
/*000000021df8*/ s_nop           0x0
/*000000021dfc*/ s_nop           0x0
mul_char_get_global_id_get_global_id:
.skip 256
/*000000021f00*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000021f08*/ s_waitcnt       lgkmcnt(0)
/*000000021f0c*/ s_clause        0x1
/*000000021f10*/ s_load_dword    s1, s[4:5], 0x20
/*000000021f18*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000021f20*/ v_lshl_or_b32   v0, s6, 1, v0
/*000000021f28*/ v_lshl_or_b32   v1, s7, 1, v1
/*000000021f30*/ v_lshl_or_b32   v2, s8, 2, v2
/*000000021f38*/ v_add_nc_u32    v3, s0, v0
/*000000021f3c*/ v_add_nc_u32    v4, s2, v1
/*000000021f40*/ s_waitcnt       lgkmcnt(0)
/*000000021f44*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000021f4c*/ v_add_nc_u32    v5, s1, v2
/*000000021f50*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000021f58*/ v_mul_lo_u32    v6, v3, v3
/*000000021f60*/ v_add_co_u32    v2, s[0:1], s4, v4
/*000000021f68*/ v_mul_lo_u32    v9, v4, v4
/*000000021f70*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000021f78*/ v_mul_lo_u32    v11, v5, v5
/*000000021f80*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000021f88*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000021f90*/ global_store_byte v[0:1], v6, off
/*000000021f98*/ global_store_byte v[2:3], v9, off
/*000000021fa0*/ global_store_byte v[4:5], v11, off
/*000000021fa8*/ s_endpgm
/*000000021fac*/ s_nop           0x0
/*000000021fb0*/ s_nop           0x0
/*000000021fb4*/ s_nop           0x0
/*000000021fb8*/ s_nop           0x0
/*000000021fbc*/ s_nop           0x0
/*000000021fc0*/ s_nop           0x0
/*000000021fc4*/ s_nop           0x0
/*000000021fc8*/ s_nop           0x0
/*000000021fcc*/ s_nop           0x0
/*000000021fd0*/ s_nop           0x0
/*000000021fd4*/ s_nop           0x0
/*000000021fd8*/ s_nop           0x0
/*000000021fdc*/ s_nop           0x0
/*000000021fe0*/ s_nop           0x0
/*000000021fe4*/ s_nop           0x0
/*000000021fe8*/ s_nop           0x0
/*000000021fec*/ s_nop           0x0
/*000000021ff0*/ s_nop           0x0
/*000000021ff4*/ s_nop           0x0
/*000000021ff8*/ s_nop           0x0
/*000000021ffc*/ s_nop           0x0
mul_char_get_global_size_get_global_id:
.skip 256
/*000000022100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022108*/ s_waitcnt       lgkmcnt(0)
/*00000002210c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022114*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002211c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000022124*/ v_lshl_or_b32   v0, s8, 4, v0
/*00000002212c*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000022134*/ v_lshl_or_b32   v2, s10, 1, v2
/*00000002213c*/ s_waitcnt       lgkmcnt(0)
/*000000022140*/ v_add_nc_u32    v4, s1, v2
/*000000022144*/ v_add_nc_u32    v0, s0, v0
/*000000022148*/ v_add_nc_u32    v3, s2, v1
/*00000002214c*/ v_mul_lo_u32    v11, v4, s14
/*000000022154*/ v_mul_lo_u32    v6, v0, s12
/*00000002215c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000022164*/ v_mul_lo_u32    v9, v3, s13
/*00000002216c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000022174*/ v_add_co_u32    v2, s[0:1], s4, v3
/*00000002217c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000022184*/ v_add_co_u32    v4, s[0:1], s4, v4
/*00000002218c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000022194*/ global_store_byte v[0:1], v6, off
/*00000002219c*/ global_store_byte v[2:3], v9, off
/*0000000221a4*/ global_store_byte v[4:5], v11, off
/*0000000221ac*/ s_endpgm
/*0000000221b0*/ s_nop           0x0
/*0000000221b4*/ s_nop           0x0
/*0000000221b8*/ s_nop           0x0
/*0000000221bc*/ s_nop           0x0
/*0000000221c0*/ s_nop           0x0
/*0000000221c4*/ s_nop           0x0
/*0000000221c8*/ s_nop           0x0
/*0000000221cc*/ s_nop           0x0
/*0000000221d0*/ s_nop           0x0
/*0000000221d4*/ s_nop           0x0
/*0000000221d8*/ s_nop           0x0
/*0000000221dc*/ s_nop           0x0
/*0000000221e0*/ s_nop           0x0
/*0000000221e4*/ s_nop           0x0
/*0000000221e8*/ s_nop           0x0
/*0000000221ec*/ s_nop           0x0
/*0000000221f0*/ s_nop           0x0
/*0000000221f4*/ s_nop           0x0
/*0000000221f8*/ s_nop           0x0
/*0000000221fc*/ s_nop           0x0
mul_char_get_num_groups_get_global_id:
.skip 256
/*000000022300*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000022308*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000022310*/ s_waitcnt       lgkmcnt(0)
/*000000022314*/ s_clause        0x1
/*000000022318*/ s_load_dword    s3, s[6:7], 0x20
/*000000022320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022328*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000022330*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000022338*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000022340*/ v_mov_b32       v5, 0
/*000000022344*/ s_and_b32       s11, s0, -2
/*000000022348*/ v_add_nc_u32    v4, s12, v0
/*00000002234c*/ v_cmp_gt_u32    s[6:7], s0, s11
/*000000022354*/ s_lshr_b32      s0, s0, 1
/*000000022358*/ s_waitcnt       lgkmcnt(0)
/*00000002235c*/ v_add_nc_u32    v7, s3, v2
/*000000022360*/ v_add_nc_u32    v6, s14, v1
/*000000022364*/ v_add_co_u32    v0, vcc, s4, v4
/*00000002236c*/ s_cmpk_lg_u32   s6, 0x0
/*000000022370*/ v_add_co_ci_u32 v1, vcc, s5, v5, vcc
/*000000022374*/ s_addc_u32      s0, s0, 0
/*000000022378*/ s_and_b32       s6, s1, -2
/*00000002237c*/ v_add_co_u32    v2, vcc, s4, v6
/*000000022384*/ v_cmp_gt_u32    s[6:7], s1, s6
/*00000002238c*/ s_lshr_b32      s1, s1, 1
/*000000022390*/ v_mul_lo_u32    v15, v4, s0
/*000000022398*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*00000002239c*/ v_add_co_u32    v4, vcc, s4, v7
/*0000000223a4*/ s_cmpk_lg_u32   s6, 0x0
/*0000000223a8*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000223ac*/ s_addc_u32      s1, s1, 0
/*0000000223b0*/ s_and_b32       s3, s2, -4
/*0000000223b4*/ v_mul_lo_u32    v9, v6, s1
/*0000000223bc*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000223c4*/ s_lshr_b32      s2, s2, 2
/*0000000223c8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000223cc*/ s_addc_u32      s0, s2, 0
/*0000000223d0*/ v_mul_lo_u32    v11, v7, s0
/*0000000223d8*/ global_store_byte v[0:1], v15, off
/*0000000223e0*/ global_store_byte v[2:3], v9, off
/*0000000223e8*/ global_store_byte v[4:5], v11, off
/*0000000223f0*/ s_endpgm
/*0000000223f4*/ s_nop           0x0
/*0000000223f8*/ s_nop           0x0
/*0000000223fc*/ s_nop           0x0
mul_char_get_work_dim_get_global_id:
.skip 256
/*000000022500*/ v_mov_b32       v3, s4
/*000000022504*/ v_mov_b32       v4, s5
/*000000022508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022510*/ s_waitcnt       lgkmcnt(0)
/*000000022514*/ s_clause        0x1
/*000000022518*/ s_load_dword    s1, s[6:7], 0x20
/*000000022520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022528*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000022530*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000022538*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000022540*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000022548*/ v_add_nc_u32    v5, s0, v0
/*00000002254c*/ v_add_nc_u32    v6, s2, v1
/*000000022550*/ s_waitcnt       lgkmcnt(0)
/*000000022554*/ v_add_nc_u32    v7, s1, v2
/*000000022558*/ v_add_co_u32    v0, s[0:1], s4, v5
/*000000022560*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000022568*/ v_add_co_u32    v2, s[0:1], s4, v6
/*000000022570*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000022578*/ s_waitcnt       vmcnt(0)
/*00000002257c*/ v_mul_lo_u32    v15, v5, v4
/*000000022584*/ v_mul_lo_u32    v9, v6, v4
/*00000002258c*/ v_mul_lo_u32    v11, v7, v4
/*000000022594*/ v_add_co_u32    v4, s[0:1], s4, v7
/*00000002259c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*0000000225a4*/ global_store_byte v[0:1], v15, off
/*0000000225ac*/ global_store_byte v[2:3], v9, off
/*0000000225b4*/ global_store_byte v[4:5], v11, off
/*0000000225bc*/ s_endpgm
/*0000000225c0*/ s_nop           0x0
/*0000000225c4*/ s_nop           0x0
/*0000000225c8*/ s_nop           0x0
/*0000000225cc*/ s_nop           0x0
/*0000000225d0*/ s_nop           0x0
/*0000000225d4*/ s_nop           0x0
/*0000000225d8*/ s_nop           0x0
/*0000000225dc*/ s_nop           0x0
/*0000000225e0*/ s_nop           0x0
/*0000000225e4*/ s_nop           0x0
/*0000000225e8*/ s_nop           0x0
/*0000000225ec*/ s_nop           0x0
/*0000000225f0*/ s_nop           0x0
/*0000000225f4*/ s_nop           0x0
/*0000000225f8*/ s_nop           0x0
/*0000000225fc*/ s_nop           0x0
mul_char_x_get_global_size:
.skip 256
/*000000022700*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022708*/ s_waitcnt       lgkmcnt(0)
/*00000002270c*/ s_clause        0x1
/*000000022710*/ s_load_dword    s1, s[6:7], 0x8
/*000000022718*/ s_load_dword    s3, s[6:7], 0x20
/*000000022720*/ s_clause        0x1
/*000000022724*/ s_load_dword    s11, s[4:5], 0xc
/*00000002272c*/ s_load_dword    s12, s[4:5], 0x10
/*000000022734*/ s_load_dwordx2  s[6:7], s[6:7], 0x0
/*00000002273c*/ s_load_dword    s4, s[4:5], 0x14
/*000000022744*/ s_lshl_b32      s5, s8, 4
/*000000022748*/ s_lshl_b32      s8, s9, 1
/*00000002274c*/ s_lshl_b32      s9, s10, 1
/*000000022750*/ s_waitcnt       lgkmcnt(0)
/*000000022754*/ v_add3_u32      v4, s3, s9, v2
/*00000002275c*/ v_add3_u32      v0, s0, s5, v0
/*000000022764*/ v_add3_u32      v3, s2, s8, v1
/*00000002276c*/ s_mul_i32       s0, s11, s1
/*000000022770*/ s_mul_i32       s2, s12, s1
/*000000022774*/ v_mov_b32       v6, s0
/*000000022778*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000022780*/ v_mov_b32       v9, s2
/*000000022784*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*00000002278c*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000022794*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*00000002279c*/ s_mul_i32       s0, s4, s1
/*0000000227a0*/ v_add_co_u32    v4, s[1:2], s6, v4
/*0000000227a8*/ v_mov_b32       v11, s0
/*0000000227ac*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*0000000227b4*/ global_store_byte v[0:1], v6, off
/*0000000227bc*/ global_store_byte v[2:3], v9, off
/*0000000227c4*/ global_store_byte v[4:5], v11, off
/*0000000227cc*/ s_endpgm
/*0000000227d0*/ s_nop           0x0
/*0000000227d4*/ s_nop           0x0
/*0000000227d8*/ s_nop           0x0
/*0000000227dc*/ s_nop           0x0
/*0000000227e0*/ s_nop           0x0
/*0000000227e4*/ s_nop           0x0
/*0000000227e8*/ s_nop           0x0
/*0000000227ec*/ s_nop           0x0
/*0000000227f0*/ s_nop           0x0
/*0000000227f4*/ s_nop           0x0
/*0000000227f8*/ s_nop           0x0
/*0000000227fc*/ s_nop           0x0
mul_char_get_global_offset_get_global_size:
.skip 256
/*000000022900*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022908*/ s_waitcnt       lgkmcnt(0)
/*00000002290c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022914*/ s_clause        0x1
/*000000022918*/ s_load_dword    s3, s[4:5], 0xc
/*000000022920*/ s_load_dword    s11, s[4:5], 0x10
/*000000022928*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022930*/ s_load_dword    s4, s[4:5], 0x14
/*000000022938*/ s_lshl_b32      s5, s8, 1
/*00000002293c*/ s_lshl_b32      s8, s9, 4
/*000000022940*/ s_lshl_b32      s9, s10, 1
/*000000022944*/ s_waitcnt       lgkmcnt(0)
/*000000022948*/ v_add3_u32      v4, s1, s9, v2
/*000000022950*/ v_add3_u32      v0, s0, s5, v0
/*000000022958*/ v_add3_u32      v3, s2, s8, v1
/*000000022960*/ s_mul_i32       s0, s0, s3
/*000000022964*/ s_mul_i32       s2, s2, s11
/*000000022968*/ v_mov_b32       v6, s0
/*00000002296c*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000022974*/ v_mov_b32       v9, s2
/*000000022978*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000022980*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000022988*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000022990*/ s_mul_i32       s0, s1, s4
/*000000022994*/ v_add_co_u32    v4, s[1:2], s6, v4
/*00000002299c*/ v_mov_b32       v11, s0
/*0000000229a0*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*0000000229a8*/ global_store_byte v[0:1], v6, off
/*0000000229b0*/ global_store_byte v[2:3], v9, off
/*0000000229b8*/ global_store_byte v[4:5], v11, off
/*0000000229c0*/ s_endpgm
/*0000000229c4*/ s_nop           0x0
/*0000000229c8*/ s_nop           0x0
/*0000000229cc*/ s_nop           0x0
/*0000000229d0*/ s_nop           0x0
/*0000000229d4*/ s_nop           0x0
/*0000000229d8*/ s_nop           0x0
/*0000000229dc*/ s_nop           0x0
/*0000000229e0*/ s_nop           0x0
/*0000000229e4*/ s_nop           0x0
/*0000000229e8*/ s_nop           0x0
/*0000000229ec*/ s_nop           0x0
/*0000000229f0*/ s_nop           0x0
/*0000000229f4*/ s_nop           0x0
/*0000000229f8*/ s_nop           0x0
/*0000000229fc*/ s_nop           0x0
mul_char_get_local_id_get_global_size:
.skip 256
/*000000022b00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022b08*/ s_waitcnt       lgkmcnt(0)
/*000000022b0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022b14*/ s_clause        0x1
/*000000022b18*/ s_load_dword    s3, s[4:5], 0xc
/*000000022b20*/ s_load_dword    s11, s[4:5], 0x10
/*000000022b28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022b30*/ s_load_dword    s4, s[4:5], 0x14
/*000000022b38*/ s_lshl_b32      s5, s8, 3
/*000000022b3c*/ s_lshl_b32      s8, s9, 2
/*000000022b40*/ s_lshl_b32      s9, s10, 1
/*000000022b44*/ s_waitcnt       lgkmcnt(0)
/*000000022b48*/ v_add3_u32      v5, s1, s9, v2
/*000000022b50*/ v_mul_lo_u16    v7, s3, v0
/*000000022b58*/ v_mul_lo_u16    v10, s11, v1
/*000000022b60*/ v_add3_u32      v3, s0, s5, v0
/*000000022b68*/ v_add3_u32      v4, s2, s8, v1
/*000000022b70*/ v_mul_lo_u16    v11, s4, v2
/*000000022b78*/ v_add_co_u32    v0, s[0:1], s6, v3
/*000000022b80*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000022b88*/ v_add_co_u32    v3, s[0:1], s6, v4
/*000000022b90*/ v_add_co_ci_u32 v4, s[0:1], s7, 0, s[0:1]
/*000000022b98*/ v_add_co_u32    v5, s[0:1], s6, v5
/*000000022ba0*/ v_add_co_ci_u32 v6, s[0:1], s7, 0, s[0:1]
/*000000022ba8*/ global_store_byte v[0:1], v7, off
/*000000022bb0*/ global_store_byte v[3:4], v10, off
/*000000022bb8*/ global_store_byte v[5:6], v11, off
/*000000022bc0*/ s_endpgm
/*000000022bc4*/ s_nop           0x0
/*000000022bc8*/ s_nop           0x0
/*000000022bcc*/ s_nop           0x0
/*000000022bd0*/ s_nop           0x0
/*000000022bd4*/ s_nop           0x0
/*000000022bd8*/ s_nop           0x0
/*000000022bdc*/ s_nop           0x0
/*000000022be0*/ s_nop           0x0
/*000000022be4*/ s_nop           0x0
/*000000022be8*/ s_nop           0x0
/*000000022bec*/ s_nop           0x0
/*000000022bf0*/ s_nop           0x0
/*000000022bf4*/ s_nop           0x0
/*000000022bf8*/ s_nop           0x0
/*000000022bfc*/ s_nop           0x0
mul_char_get_group_id_get_global_size:
.skip 256
/*000000022d00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022d08*/ s_waitcnt       lgkmcnt(0)
/*000000022d0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022d14*/ s_clause        0x1
/*000000022d18*/ s_load_dword    s3, s[4:5], 0xc
/*000000022d20*/ s_load_dword    s11, s[4:5], 0x10
/*000000022d28*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000022d30*/ s_load_dword    s4, s[4:5], 0x14
/*000000022d38*/ s_lshl_b32      s5, s8, 1
/*000000022d3c*/ s_lshl_b32      s12, s9, 4
/*000000022d40*/ s_lshl_b32      s13, s10, 1
/*000000022d44*/ s_waitcnt       lgkmcnt(0)
/*000000022d48*/ v_add3_u32      v4, s1, s13, v2
/*000000022d50*/ s_mul_i32       s1, s11, s9
/*000000022d54*/ v_add3_u32      v0, s0, s5, v0
/*000000022d5c*/ s_mul_i32       s0, s3, s8
/*000000022d60*/ v_add3_u32      v3, s2, s12, v1
/*000000022d68*/ v_mov_b32       v6, s0
/*000000022d6c*/ v_mov_b32       v9, s1
/*000000022d70*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000022d78*/ v_add_co_u32    v4, s[1:2], s6, v4
/*000000022d80*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000022d88*/ v_add_co_u32    v2, s[0:1], s6, v3
/*000000022d90*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*000000022d98*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000022da0*/ s_mul_i32       s0, s4, s10
/*000000022da4*/ v_mov_b32       v11, s0
/*000000022da8*/ global_store_byte v[0:1], v6, off
/*000000022db0*/ global_store_byte v[2:3], v9, off
/*000000022db8*/ global_store_byte v[4:5], v11, off
/*000000022dc0*/ s_endpgm
/*000000022dc4*/ s_nop           0x0
/*000000022dc8*/ s_nop           0x0
/*000000022dcc*/ s_nop           0x0
/*000000022dd0*/ s_nop           0x0
/*000000022dd4*/ s_nop           0x0
/*000000022dd8*/ s_nop           0x0
/*000000022ddc*/ s_nop           0x0
/*000000022de0*/ s_nop           0x0
/*000000022de4*/ s_nop           0x0
/*000000022de8*/ s_nop           0x0
/*000000022dec*/ s_nop           0x0
/*000000022df0*/ s_nop           0x0
/*000000022df4*/ s_nop           0x0
/*000000022df8*/ s_nop           0x0
/*000000022dfc*/ s_nop           0x0
mul_char_get_local_size_get_global_size:
.skip 256
/*000000022f00*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000022f08*/ s_waitcnt       lgkmcnt(0)
/*000000022f0c*/ s_load_dword    s1, s[6:7], 0x20
/*000000022f14*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*000000022f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000022f24*/ s_lshl_b32      s3, s8, 1
/*000000022f28*/ s_lshl_b32      s6, s9, 1
/*000000022f2c*/ s_lshl_b32      s7, s10, 2
/*000000022f30*/ s_waitcnt       lgkmcnt(0)
/*000000022f34*/ v_add3_u32      v4, s1, s7, v2
/*000000022f3c*/ v_add3_u32      v0, s0, s3, v0
/*000000022f44*/ s_lshl_b32      s0, s12, 1
/*000000022f48*/ v_add3_u32      v3, s2, s6, v1
/*000000022f50*/ v_mov_b32       v6, s0
/*000000022f54*/ s_lshl_b32      s1, s13, 1
/*000000022f58*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000022f60*/ v_mov_b32       v9, s1
/*000000022f64*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000022f6c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000022f74*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000022f7c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000022f84*/ s_lshl_b32      s0, s14, 2
/*000000022f88*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000022f90*/ v_mov_b32       v11, s0
/*000000022f94*/ global_store_byte v[0:1], v6, off
/*000000022f9c*/ global_store_byte v[2:3], v9, off
/*000000022fa4*/ global_store_byte v[4:5], v11, off
/*000000022fac*/ s_endpgm
/*000000022fb0*/ s_nop           0x0
/*000000022fb4*/ s_nop           0x0
/*000000022fb8*/ s_nop           0x0
/*000000022fbc*/ s_nop           0x0
/*000000022fc0*/ s_nop           0x0
/*000000022fc4*/ s_nop           0x0
/*000000022fc8*/ s_nop           0x0
/*000000022fcc*/ s_nop           0x0
/*000000022fd0*/ s_nop           0x0
/*000000022fd4*/ s_nop           0x0
/*000000022fd8*/ s_nop           0x0
/*000000022fdc*/ s_nop           0x0
/*000000022fe0*/ s_nop           0x0
/*000000022fe4*/ s_nop           0x0
/*000000022fe8*/ s_nop           0x0
/*000000022fec*/ s_nop           0x0
/*000000022ff0*/ s_nop           0x0
/*000000022ff4*/ s_nop           0x0
/*000000022ff8*/ s_nop           0x0
/*000000022ffc*/ s_nop           0x0
mul_char_get_global_id_get_global_size:
.skip 256
/*000000023100*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023108*/ s_waitcnt       lgkmcnt(0)
/*00000002310c*/ s_clause        0x1
/*000000023110*/ s_load_dword    s1, s[6:7], 0x20
/*000000023118*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000023120*/ s_clause        0x2
/*000000023124*/ s_load_dword    s3, s[4:5], 0xc
/*00000002312c*/ s_load_dword    s11, s[4:5], 0x10
/*000000023134*/ s_load_dword    s4, s[4:5], 0x14
/*00000002313c*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000023144*/ v_lshl_or_b32   v1, s9, 1, v1
/*00000002314c*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000023154*/ s_waitcnt       lgkmcnt(0)
/*000000023158*/ v_add_nc_u32    v5, s1, v2
/*00000002315c*/ v_add_nc_u32    v3, s0, v0
/*000000023160*/ v_add_nc_u32    v4, s2, v1
/*000000023164*/ v_add_co_u32    v0, s[0:1], s6, v0
/*00000002316c*/ v_mul_lo_u32    v11, v5, s4
/*000000023174*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*00000002317c*/ v_mul_lo_u32    v6, v3, s3
/*000000023184*/ v_add_co_u32    v2, s[0:1], s6, v4
/*00000002318c*/ v_mul_lo_u32    v9, v4, s11
/*000000023194*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*00000002319c*/ v_add_co_u32    v4, s[0:1], s6, v5
/*0000000231a4*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*0000000231ac*/ global_store_byte v[0:1], v6, off
/*0000000231b4*/ global_store_byte v[2:3], v9, off
/*0000000231bc*/ global_store_byte v[4:5], v11, off
/*0000000231c4*/ s_endpgm
/*0000000231c8*/ s_nop           0x0
/*0000000231cc*/ s_nop           0x0
/*0000000231d0*/ s_nop           0x0
/*0000000231d4*/ s_nop           0x0
/*0000000231d8*/ s_nop           0x0
/*0000000231dc*/ s_nop           0x0
/*0000000231e0*/ s_nop           0x0
/*0000000231e4*/ s_nop           0x0
/*0000000231e8*/ s_nop           0x0
/*0000000231ec*/ s_nop           0x0
/*0000000231f0*/ s_nop           0x0
/*0000000231f4*/ s_nop           0x0
/*0000000231f8*/ s_nop           0x0
/*0000000231fc*/ s_nop           0x0
mul_char_get_global_size_get_global_size:
.skip 256
/*000000023300*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023308*/ s_waitcnt       lgkmcnt(0)
/*00000002330c*/ s_load_dword    s1, s[6:7], 0x20
/*000000023314*/ s_load_dwordx4  s[12:15], s[4:5], 0xc
/*00000002331c*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000023324*/ s_lshl_b32      s3, s8, 4
/*000000023328*/ s_lshl_b32      s6, s9, 1
/*00000002332c*/ s_lshl_b32      s7, s10, 1
/*000000023330*/ s_waitcnt       lgkmcnt(0)
/*000000023334*/ v_add3_u32      v4, s1, s7, v2
/*00000002333c*/ v_add3_u32      v0, s0, s3, v0
/*000000023344*/ s_mul_i32       s0, s12, s12
/*000000023348*/ v_add3_u32      v3, s2, s6, v1
/*000000023350*/ v_mov_b32       v6, s0
/*000000023354*/ s_mul_i32       s1, s13, s13
/*000000023358*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000023360*/ v_mov_b32       v9, s1
/*000000023364*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002336c*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000023374*/ v_add_co_u32    v4, s[1:2], s4, v4
/*00000002337c*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000023384*/ s_mul_i32       s0, s14, s14
/*000000023388*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000023390*/ v_mov_b32       v11, s0
/*000000023394*/ global_store_byte v[0:1], v6, off
/*00000002339c*/ global_store_byte v[2:3], v9, off
/*0000000233a4*/ global_store_byte v[4:5], v11, off
/*0000000233ac*/ s_endpgm
/*0000000233b0*/ s_nop           0x0
/*0000000233b4*/ s_nop           0x0
/*0000000233b8*/ s_nop           0x0
/*0000000233bc*/ s_nop           0x0
/*0000000233c0*/ s_nop           0x0
/*0000000233c4*/ s_nop           0x0
/*0000000233c8*/ s_nop           0x0
/*0000000233cc*/ s_nop           0x0
/*0000000233d0*/ s_nop           0x0
/*0000000233d4*/ s_nop           0x0
/*0000000233d8*/ s_nop           0x0
/*0000000233dc*/ s_nop           0x0
/*0000000233e0*/ s_nop           0x0
/*0000000233e4*/ s_nop           0x0
/*0000000233e8*/ s_nop           0x0
/*0000000233ec*/ s_nop           0x0
/*0000000233f0*/ s_nop           0x0
/*0000000233f4*/ s_nop           0x0
/*0000000233f8*/ s_nop           0x0
/*0000000233fc*/ s_nop           0x0
mul_char_get_num_groups_get_global_size:
.skip 256
/*000000023500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000023508*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000023510*/ s_waitcnt       lgkmcnt(0)
/*000000023514*/ s_clause        0x1
/*000000023518*/ s_load_dword    s3, s[6:7], 0x20
/*000000023520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023528*/ s_lshl_b32      s7, s8, 1
/*00000002352c*/ s_lshl_b32      s8, s9, 1
/*000000023530*/ s_lshl_b32      s9, s10, 2
/*000000023534*/ s_and_b32       s6, s0, -2
/*000000023538*/ s_lshr_b32      s10, s0, 1
/*00000002353c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000023544*/ v_add3_u32      v0, s12, s7, v0
/*00000002354c*/ s_waitcnt       lgkmcnt(0)
/*000000023550*/ v_add3_u32      v4, s3, s9, v2
/*000000023558*/ v_add3_u32      v3, s14, s8, v1
/*000000023560*/ s_cmpk_lg_u32   s6, 0x0
/*000000023564*/ v_add_co_u32    v0, s[7:8], s4, v0
/*00000002356c*/ s_addc_u32      s6, s10, 0
/*000000023570*/ s_and_b32       s10, s1, -2
/*000000023574*/ s_lshr_b32      s3, s1, 1
/*000000023578*/ v_cmp_gt_u32    s[10:11], s1, s10
/*000000023580*/ v_add_co_ci_u32 v1, s[7:8], s5, 0, s[7:8]
/*000000023588*/ s_mul_i32       s0, s6, s0
/*00000002358c*/ v_mov_b32       v6, s0
/*000000023590*/ s_cmpk_lg_u32   s10, 0x0
/*000000023594*/ s_addc_u32      s3, s3, 0
/*000000023598*/ s_and_b32       s7, s2, -4
/*00000002359c*/ s_lshr_b32      s0, s2, 2
/*0000000235a0*/ v_cmp_gt_u32    s[6:7], s2, s7
/*0000000235a8*/ s_mul_i32       s1, s3, s1
/*0000000235ac*/ v_add_co_u32    v2, s[7:8], s4, v3
/*0000000235b4*/ v_mov_b32       v9, s1
/*0000000235b8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000235c0*/ s_cmpk_lg_u32   s6, 0x0
/*0000000235c4*/ v_add_co_ci_u32 v3, s[7:8], s5, 0, s[7:8]
/*0000000235cc*/ s_addc_u32      s0, s0, 0
/*0000000235d0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000235d8*/ s_mul_i32       s0, s0, s2
/*0000000235dc*/ v_mov_b32       v11, s0
/*0000000235e0*/ global_store_byte v[0:1], v6, off
/*0000000235e8*/ global_store_byte v[2:3], v9, off
/*0000000235f0*/ global_store_byte v[4:5], v11, off
/*0000000235f8*/ s_endpgm
/*0000000235fc*/ s_nop           0x0
mul_char_get_work_dim_get_global_size:
.skip 256
/*000000023700*/ v_mov_b32       v3, s4
/*000000023704*/ v_mov_b32       v4, s5
/*000000023708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023710*/ s_waitcnt       lgkmcnt(0)
/*000000023714*/ s_clause        0x1
/*000000023718*/ s_load_dword    s1, s[6:7], 0x20
/*000000023720*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000023728*/ s_clause        0x2
/*00000002372c*/ s_load_dword    s3, s[4:5], 0x14
/*000000023734*/ s_load_dword    s11, s[4:5], 0xc
/*00000002373c*/ s_load_dword    s4, s[4:5], 0x10
/*000000023744*/ s_lshl_b32      s5, s8, 1
/*000000023748*/ s_lshl_b32      s8, s9, 1
/*00000002374c*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000023754*/ v_add3_u32      v0, s0, s5, v0
/*00000002375c*/ s_lshl_b32      s0, s10, 2
/*000000023760*/ v_add3_u32      v3, s2, s8, v1
/*000000023768*/ s_waitcnt       lgkmcnt(0)
/*00000002376c*/ v_add3_u32      v5, s1, s0, v2
/*000000023774*/ v_add_co_u32    v0, s[0:1], s6, v0
/*00000002377c*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000023784*/ v_add_co_u32    v2, s[0:1], s6, v3
/*00000002378c*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000023794*/ s_waitcnt       vmcnt(0)
/*000000023798*/ v_and_b32       v6, 0xffff, v4
/*0000000237a0*/ v_mul_lo_u32    v7, s3, v4
/*0000000237a8*/ v_add_co_u32    v4, s[0:1], s6, v5
/*0000000237b0*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*0000000237b8*/ v_mul_lo_u32    v11, v6, s11
/*0000000237c0*/ v_mul_lo_u32    v9, v6, s4
/*0000000237c8*/ global_store_byte v[0:1], v11, off
/*0000000237d0*/ global_store_byte v[2:3], v9, off
/*0000000237d8*/ global_store_byte v[4:5], v7, off
/*0000000237e0*/ s_endpgm
/*0000000237e4*/ s_nop           0x0
/*0000000237e8*/ s_nop           0x0
/*0000000237ec*/ s_nop           0x0
/*0000000237f0*/ s_nop           0x0
/*0000000237f4*/ s_nop           0x0
/*0000000237f8*/ s_nop           0x0
/*0000000237fc*/ s_nop           0x0
mul_char_x_get_num_groups:
.skip 256
/*000000023900*/ s_clause        0x1
/*000000023904*/ s_load_dword    s11, s[4:5], 0xc
/*00000002390c*/ s_load_dword    s12, s[4:5], 0x10
/*000000023914*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000002391c*/ s_waitcnt       lgkmcnt(0)
/*000000023920*/ s_load_dword    s1, s[6:7], 0x20
/*000000023928*/ s_load_dword    s3, s[4:5], 0x14
/*000000023930*/ s_clause        0x1
/*000000023934*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*00000002393c*/ s_load_dword    s6, s[6:7], 0x8
/*000000023944*/ s_lshl_b32      s7, s9, 1
/*000000023948*/ s_lshl_b32      s9, s10, 1
/*00000002394c*/ s_lshl_b32      s8, s8, 4
/*000000023950*/ s_and_b32       s13, s11, -16
/*000000023954*/ s_lshr_b32      s10, s11, 4
/*000000023958*/ v_cmp_gt_u32    s[13:14], s11, s13
/*000000023960*/ v_add3_u32      v0, s0, s8, v0
/*000000023968*/ s_waitcnt       lgkmcnt(0)
/*00000002396c*/ v_add3_u32      v4, s1, s9, v2
/*000000023974*/ v_add3_u32      v3, s2, s7, v1
/*00000002397c*/ s_cmpk_lg_u32   s13, 0x0
/*000000023980*/ v_add_co_u32    v0, s[1:2], s4, v0
/*000000023988*/ s_addc_u32      s10, s10, 0
/*00000002398c*/ s_and_b32       s11, s12, -2
/*000000023990*/ s_lshr_b32      s0, s12, 1
/*000000023994*/ v_cmp_gt_u32    s[11:12], s12, s11
/*00000002399c*/ v_add_co_ci_u32 v1, s[1:2], s5, 0, s[1:2]
/*0000000239a4*/ s_mul_i32       s2, s10, s6
/*0000000239a8*/ v_add_co_u32    v2, s[7:8], s4, v3
/*0000000239b0*/ v_mov_b32       v6, s2
/*0000000239b4*/ s_cmpk_lg_u32   s11, 0x0
/*0000000239b8*/ v_add_co_ci_u32 v3, s[7:8], s5, 0, s[7:8]
/*0000000239c0*/ s_addc_u32      s0, s0, 0
/*0000000239c4*/ s_and_b32       s1, s3, -2
/*0000000239c8*/ s_lshr_b32      s2, s3, 1
/*0000000239cc*/ v_cmp_gt_u32    s[1:2], s3, s1
/*0000000239d4*/ s_mul_i32       s0, s0, s6
/*0000000239d8*/ v_mov_b32       v9, s0
/*0000000239dc*/ s_cmpk_lg_u32   s1, 0x0
/*0000000239e0*/ s_addc_u32      s1, s2, 0
/*0000000239e4*/ s_mul_i32       s0, s1, s6
/*0000000239e8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000239f0*/ v_mov_b32       v11, s0
/*0000000239f4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000239fc*/ global_store_byte v[0:1], v6, off
/*000000023a04*/ global_store_byte v[2:3], v9, off
/*000000023a0c*/ global_store_byte v[4:5], v11, off
/*000000023a14*/ s_endpgm
/*000000023a18*/ s_nop           0x0
/*000000023a1c*/ s_nop           0x0
/*000000023a20*/ s_nop           0x0
/*000000023a24*/ s_nop           0x0
/*000000023a28*/ s_nop           0x0
/*000000023a2c*/ s_nop           0x0
/*000000023a30*/ s_nop           0x0
/*000000023a34*/ s_nop           0x0
/*000000023a38*/ s_nop           0x0
/*000000023a3c*/ s_nop           0x0
/*000000023a40*/ s_nop           0x0
/*000000023a44*/ s_nop           0x0
/*000000023a48*/ s_nop           0x0
/*000000023a4c*/ s_nop           0x0
/*000000023a50*/ s_nop           0x0
/*000000023a54*/ s_nop           0x0
/*000000023a58*/ s_nop           0x0
/*000000023a5c*/ s_nop           0x0
/*000000023a60*/ s_nop           0x0
/*000000023a64*/ s_nop           0x0
/*000000023a68*/ s_nop           0x0
/*000000023a6c*/ s_nop           0x0
/*000000023a70*/ s_nop           0x0
/*000000023a74*/ s_nop           0x0
/*000000023a78*/ s_nop           0x0
/*000000023a7c*/ s_nop           0x0
/*000000023a80*/ s_nop           0x0
/*000000023a84*/ s_nop           0x0
/*000000023a88*/ s_nop           0x0
/*000000023a8c*/ s_nop           0x0
/*000000023a90*/ s_nop           0x0
/*000000023a94*/ s_nop           0x0
/*000000023a98*/ s_nop           0x0
/*000000023a9c*/ s_nop           0x0
/*000000023aa0*/ s_nop           0x0
/*000000023aa4*/ s_nop           0x0
/*000000023aa8*/ s_nop           0x0
/*000000023aac*/ s_nop           0x0
/*000000023ab0*/ s_nop           0x0
/*000000023ab4*/ s_nop           0x0
/*000000023ab8*/ s_nop           0x0
/*000000023abc*/ s_nop           0x0
/*000000023ac0*/ s_nop           0x0
/*000000023ac4*/ s_nop           0x0
/*000000023ac8*/ s_nop           0x0
/*000000023acc*/ s_nop           0x0
/*000000023ad0*/ s_nop           0x0
/*000000023ad4*/ s_nop           0x0
/*000000023ad8*/ s_nop           0x0
/*000000023adc*/ s_nop           0x0
/*000000023ae0*/ s_nop           0x0
/*000000023ae4*/ s_nop           0x0
/*000000023ae8*/ s_nop           0x0
/*000000023aec*/ s_nop           0x0
/*000000023af0*/ s_nop           0x0
/*000000023af4*/ s_nop           0x0
/*000000023af8*/ s_nop           0x0
/*000000023afc*/ s_nop           0x0
mul_char_get_global_offset_get_num_groups:
.skip 256
/*000000023c00*/ s_clause        0x1
/*000000023c04*/ s_load_dword    s11, s[4:5], 0xc
/*000000023c0c*/ s_load_dword    s12, s[4:5], 0x10
/*000000023c14*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023c1c*/ s_waitcnt       lgkmcnt(0)
/*000000023c20*/ s_clause        0x1
/*000000023c24*/ s_load_dword    s1, s[6:7], 0x20
/*000000023c2c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000023c34*/ s_load_dword    s3, s[4:5], 0x14
/*000000023c3c*/ s_lshl_b32      s5, s8, 1
/*000000023c40*/ s_lshl_b32      s8, s9, 4
/*000000023c44*/ s_lshl_b32      s9, s10, 1
/*000000023c48*/ s_and_b32       s4, s11, -2
/*000000023c4c*/ s_lshr_b32      s10, s11, 1
/*000000023c50*/ v_cmp_gt_u32    s[4:5], s11, s4
/*000000023c58*/ v_add3_u32      v0, s0, s5, v0
/*000000023c60*/ v_add3_u32      v3, s2, s8, v1
/*000000023c68*/ s_waitcnt       lgkmcnt(0)
/*000000023c6c*/ v_add3_u32      v4, s1, s9, v2
/*000000023c74*/ s_cmpk_lg_u32   s4, 0x0
/*000000023c78*/ v_add_co_u32    v0, s[8:9], s6, v0
/*000000023c80*/ s_addc_u32      s4, s10, 0
/*000000023c84*/ s_and_b32       s10, s12, -16
/*000000023c88*/ s_lshr_b32      s5, s12, 4
/*000000023c8c*/ v_cmp_gt_u32    s[10:11], s12, s10
/*000000023c94*/ v_add_co_ci_u32 v1, s[8:9], s7, 0, s[8:9]
/*000000023c9c*/ s_mul_i32       s0, s0, s4
/*000000023ca0*/ v_mov_b32       v6, s0
/*000000023ca4*/ s_cmpk_lg_u32   s10, 0x0
/*000000023ca8*/ s_addc_u32      s5, s5, 0
/*000000023cac*/ s_and_b32       s8, s3, -2
/*000000023cb0*/ s_lshr_b32      s0, s3, 1
/*000000023cb4*/ v_cmp_gt_u32    s[4:5], s3, s8
/*000000023cbc*/ v_add_co_u32    v2, s[8:9], s6, v3
/*000000023cc4*/ s_mul_i32       s2, s2, s5
/*000000023cc8*/ v_add_co_ci_u32 v3, s[8:9], s7, 0, s[8:9]
/*000000023cd0*/ v_mov_b32       v9, s2
/*000000023cd4*/ s_cmpk_lg_u32   s4, 0x0
/*000000023cd8*/ s_addc_u32      s0, s0, 0
/*000000023cdc*/ s_mul_i32       s0, s1, s0
/*000000023ce0*/ v_add_co_u32    v4, s[1:2], s6, v4
/*000000023ce8*/ v_mov_b32       v11, s0
/*000000023cec*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*000000023cf4*/ global_store_byte v[0:1], v6, off
/*000000023cfc*/ global_store_byte v[2:3], v9, off
/*000000023d04*/ global_store_byte v[4:5], v11, off
/*000000023d0c*/ s_endpgm
/*000000023d10*/ s_nop           0x0
/*000000023d14*/ s_nop           0x0
/*000000023d18*/ s_nop           0x0
/*000000023d1c*/ s_nop           0x0
/*000000023d20*/ s_nop           0x0
/*000000023d24*/ s_nop           0x0
/*000000023d28*/ s_nop           0x0
/*000000023d2c*/ s_nop           0x0
/*000000023d30*/ s_nop           0x0
/*000000023d34*/ s_nop           0x0
/*000000023d38*/ s_nop           0x0
/*000000023d3c*/ s_nop           0x0
/*000000023d40*/ s_nop           0x0
/*000000023d44*/ s_nop           0x0
/*000000023d48*/ s_nop           0x0
/*000000023d4c*/ s_nop           0x0
/*000000023d50*/ s_nop           0x0
/*000000023d54*/ s_nop           0x0
/*000000023d58*/ s_nop           0x0
/*000000023d5c*/ s_nop           0x0
/*000000023d60*/ s_nop           0x0
/*000000023d64*/ s_nop           0x0
/*000000023d68*/ s_nop           0x0
/*000000023d6c*/ s_nop           0x0
/*000000023d70*/ s_nop           0x0
/*000000023d74*/ s_nop           0x0
/*000000023d78*/ s_nop           0x0
/*000000023d7c*/ s_nop           0x0
/*000000023d80*/ s_nop           0x0
/*000000023d84*/ s_nop           0x0
/*000000023d88*/ s_nop           0x0
/*000000023d8c*/ s_nop           0x0
/*000000023d90*/ s_nop           0x0
/*000000023d94*/ s_nop           0x0
/*000000023d98*/ s_nop           0x0
/*000000023d9c*/ s_nop           0x0
/*000000023da0*/ s_nop           0x0
/*000000023da4*/ s_nop           0x0
/*000000023da8*/ s_nop           0x0
/*000000023dac*/ s_nop           0x0
/*000000023db0*/ s_nop           0x0
/*000000023db4*/ s_nop           0x0
/*000000023db8*/ s_nop           0x0
/*000000023dbc*/ s_nop           0x0
/*000000023dc0*/ s_nop           0x0
/*000000023dc4*/ s_nop           0x0
/*000000023dc8*/ s_nop           0x0
/*000000023dcc*/ s_nop           0x0
/*000000023dd0*/ s_nop           0x0
/*000000023dd4*/ s_nop           0x0
/*000000023dd8*/ s_nop           0x0
/*000000023ddc*/ s_nop           0x0
/*000000023de0*/ s_nop           0x0
/*000000023de4*/ s_nop           0x0
/*000000023de8*/ s_nop           0x0
/*000000023dec*/ s_nop           0x0
/*000000023df0*/ s_nop           0x0
/*000000023df4*/ s_nop           0x0
/*000000023df8*/ s_nop           0x0
/*000000023dfc*/ s_nop           0x0
mul_char_get_local_id_get_num_groups:
.skip 256
/*000000023f00*/ s_clause        0x1
/*000000023f04*/ s_load_dword    s11, s[4:5], 0xc
/*000000023f0c*/ s_load_dword    s12, s[4:5], 0x10
/*000000023f14*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000023f1c*/ s_waitcnt       lgkmcnt(0)
/*000000023f20*/ s_load_dword    s1, s[6:7], 0x20
/*000000023f28*/ s_load_dword    s3, s[4:5], 0x14
/*000000023f30*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000023f38*/ s_lshl_b32      s7, s8, 3
/*000000023f3c*/ s_lshl_b32      s8, s9, 2
/*000000023f40*/ s_lshl_b32      s9, s10, 1
/*000000023f44*/ s_and_b32       s13, s11, -8
/*000000023f48*/ s_lshr_b32      s10, s11, 3
/*000000023f4c*/ v_cmp_gt_u32    s[6:7], s11, s13
/*000000023f54*/ v_add3_u32      v3, s0, s7, v0
/*000000023f5c*/ v_add3_u32      v5, s2, s8, v1
/*000000023f64*/ s_waitcnt       lgkmcnt(0)
/*000000023f68*/ v_add3_u32      v7, s1, s9, v2
/*000000023f70*/ s_cmpk_lg_u32   s6, 0x0
/*000000023f74*/ v_add_co_u32    v3, s[2:3], s4, v3
/*000000023f7c*/ s_addc_u32      s6, s10, 0
/*000000023f80*/ s_and_b32       s10, s12, -4
/*000000023f84*/ s_lshr_b32      s0, s12, 2
/*000000023f88*/ v_cmp_gt_u32    s[10:11], s12, s10
/*000000023f90*/ v_add_co_ci_u32 v4, s[2:3], s5, 0, s[2:3]
/*000000023f98*/ v_add_co_u32    v5, s[2:3], s4, v5
/*000000023fa0*/ v_mul_lo_u16    v10, s6, v0
/*000000023fa8*/ v_add_co_ci_u32 v6, s[2:3], s5, 0, s[2:3]
/*000000023fb0*/ s_cmpk_lg_u32   s10, 0x0
/*000000023fb4*/ s_addc_u32      s0, s0, 0
/*000000023fb8*/ s_and_b32       s1, s3, -2
/*000000023fbc*/ s_lshr_b32      s2, s3, 1
/*000000023fc0*/ v_cmp_gt_u32    s[1:2], s3, s1
/*000000023fc8*/ v_mul_lo_u16    v11, s0, v1
/*000000023fd0*/ v_add_co_u32    v0, s[0:1], s4, v7
/*000000023fd8*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000023fe0*/ s_cmpk_lg_u32   s1, 0x0
/*000000023fe4*/ s_addc_u32      s1, s2, 0
/*000000023fe8*/ v_mul_lo_u16    v2, s1, v2
/*000000023ff0*/ global_store_byte v[3:4], v10, off
/*000000023ff8*/ global_store_byte v[5:6], v11, off
/*000000024000*/ global_store_byte v[0:1], v2, off
/*000000024008*/ s_endpgm
/*00000002400c*/ s_nop           0x0
/*000000024010*/ s_nop           0x0
/*000000024014*/ s_nop           0x0
/*000000024018*/ s_nop           0x0
/*00000002401c*/ s_nop           0x0
/*000000024020*/ s_nop           0x0
/*000000024024*/ s_nop           0x0
/*000000024028*/ s_nop           0x0
/*00000002402c*/ s_nop           0x0
/*000000024030*/ s_nop           0x0
/*000000024034*/ s_nop           0x0
/*000000024038*/ s_nop           0x0
/*00000002403c*/ s_nop           0x0
/*000000024040*/ s_nop           0x0
/*000000024044*/ s_nop           0x0
/*000000024048*/ s_nop           0x0
/*00000002404c*/ s_nop           0x0
/*000000024050*/ s_nop           0x0
/*000000024054*/ s_nop           0x0
/*000000024058*/ s_nop           0x0
/*00000002405c*/ s_nop           0x0
/*000000024060*/ s_nop           0x0
/*000000024064*/ s_nop           0x0
/*000000024068*/ s_nop           0x0
/*00000002406c*/ s_nop           0x0
/*000000024070*/ s_nop           0x0
/*000000024074*/ s_nop           0x0
/*000000024078*/ s_nop           0x0
/*00000002407c*/ s_nop           0x0
/*000000024080*/ s_nop           0x0
/*000000024084*/ s_nop           0x0
/*000000024088*/ s_nop           0x0
/*00000002408c*/ s_nop           0x0
/*000000024090*/ s_nop           0x0
/*000000024094*/ s_nop           0x0
/*000000024098*/ s_nop           0x0
/*00000002409c*/ s_nop           0x0
/*0000000240a0*/ s_nop           0x0
/*0000000240a4*/ s_nop           0x0
/*0000000240a8*/ s_nop           0x0
/*0000000240ac*/ s_nop           0x0
/*0000000240b0*/ s_nop           0x0
/*0000000240b4*/ s_nop           0x0
/*0000000240b8*/ s_nop           0x0
/*0000000240bc*/ s_nop           0x0
/*0000000240c0*/ s_nop           0x0
/*0000000240c4*/ s_nop           0x0
/*0000000240c8*/ s_nop           0x0
/*0000000240cc*/ s_nop           0x0
/*0000000240d0*/ s_nop           0x0
/*0000000240d4*/ s_nop           0x0
/*0000000240d8*/ s_nop           0x0
/*0000000240dc*/ s_nop           0x0
/*0000000240e0*/ s_nop           0x0
/*0000000240e4*/ s_nop           0x0
/*0000000240e8*/ s_nop           0x0
/*0000000240ec*/ s_nop           0x0
/*0000000240f0*/ s_nop           0x0
/*0000000240f4*/ s_nop           0x0
/*0000000240f8*/ s_nop           0x0
/*0000000240fc*/ s_nop           0x0
mul_char_get_group_id_get_num_groups:
.skip 256
/*000000024200*/ s_clause        0x1
/*000000024204*/ s_load_dword    s11, s[4:5], 0xc
/*00000002420c*/ s_load_dword    s12, s[4:5], 0x10
/*000000024214*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000002421c*/ s_waitcnt       lgkmcnt(0)
/*000000024220*/ s_clause        0x1
/*000000024224*/ s_load_dword    s1, s[6:7], 0x20
/*00000002422c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000024234*/ s_load_dword    s3, s[4:5], 0x14
/*00000002423c*/ s_lshl_b32      s5, s8, 1
/*000000024240*/ s_lshl_b32      s13, s9, 4
/*000000024244*/ s_lshl_b32      s14, s10, 1
/*000000024248*/ s_and_b32       s4, s11, -2
/*00000002424c*/ s_waitcnt       lgkmcnt(0)
/*000000024250*/ v_add3_u32      v4, s1, s14, v2
/*000000024258*/ v_cmp_gt_u32    s[4:5], s11, s4
/*000000024260*/ s_lshr_b32      s11, s11, 1
/*000000024264*/ v_add3_u32      v0, s0, s5, v0
/*00000002426c*/ v_add3_u32      v3, s2, s13, v1
/*000000024274*/ s_cmpk_lg_u32   s4, 0x0
/*000000024278*/ s_addc_u32      s4, s11, 0
/*00000002427c*/ s_and_b32       s11, s12, -16
/*000000024280*/ v_add_co_u32    v0, s[1:2], s6, v0
/*000000024288*/ v_cmp_gt_u32    s[11:12], s12, s11
/*000000024290*/ s_lshr_b32      s0, s12, 4
/*000000024294*/ v_add_co_ci_u32 v1, s[1:2], s7, 0, s[1:2]
/*00000002429c*/ s_mul_i32       s2, s4, s8
/*0000000242a0*/ v_add_co_u32    v2, s[4:5], s6, v3
/*0000000242a8*/ s_cmpk_lg_u32   s11, 0x0
/*0000000242ac*/ v_mov_b32       v6, s2
/*0000000242b0*/ s_addc_u32      s0, s0, 0
/*0000000242b4*/ s_and_b32       s1, s3, -2
/*0000000242b8*/ s_lshr_b32      s2, s3, 1
/*0000000242bc*/ v_cmp_gt_u32    s[1:2], s3, s1
/*0000000242c4*/ s_mul_i32       s0, s0, s9
/*0000000242c8*/ v_add_co_ci_u32 v3, s[4:5], s7, 0, s[4:5]
/*0000000242d0*/ v_mov_b32       v9, s0
/*0000000242d4*/ s_cmpk_lg_u32   s1, 0x0
/*0000000242d8*/ s_addc_u32      s1, s2, 0
/*0000000242dc*/ s_mul_i32       s0, s1, s10
/*0000000242e0*/ v_add_co_u32    v4, s[1:2], s6, v4
/*0000000242e8*/ v_mov_b32       v11, s0
/*0000000242ec*/ v_add_co_ci_u32 v5, s[1:2], s7, 0, s[1:2]
/*0000000242f4*/ global_store_byte v[0:1], v6, off
/*0000000242fc*/ global_store_byte v[2:3], v9, off
/*000000024304*/ global_store_byte v[4:5], v11, off
/*00000002430c*/ s_endpgm
/*000000024310*/ s_nop           0x0
/*000000024314*/ s_nop           0x0
/*000000024318*/ s_nop           0x0
/*00000002431c*/ s_nop           0x0
/*000000024320*/ s_nop           0x0
/*000000024324*/ s_nop           0x0
/*000000024328*/ s_nop           0x0
/*00000002432c*/ s_nop           0x0
/*000000024330*/ s_nop           0x0
/*000000024334*/ s_nop           0x0
/*000000024338*/ s_nop           0x0
/*00000002433c*/ s_nop           0x0
/*000000024340*/ s_nop           0x0
/*000000024344*/ s_nop           0x0
/*000000024348*/ s_nop           0x0
/*00000002434c*/ s_nop           0x0
/*000000024350*/ s_nop           0x0
/*000000024354*/ s_nop           0x0
/*000000024358*/ s_nop           0x0
/*00000002435c*/ s_nop           0x0
/*000000024360*/ s_nop           0x0
/*000000024364*/ s_nop           0x0
/*000000024368*/ s_nop           0x0
/*00000002436c*/ s_nop           0x0
/*000000024370*/ s_nop           0x0
/*000000024374*/ s_nop           0x0
/*000000024378*/ s_nop           0x0
/*00000002437c*/ s_nop           0x0
/*000000024380*/ s_nop           0x0
/*000000024384*/ s_nop           0x0
/*000000024388*/ s_nop           0x0
/*00000002438c*/ s_nop           0x0
/*000000024390*/ s_nop           0x0
/*000000024394*/ s_nop           0x0
/*000000024398*/ s_nop           0x0
/*00000002439c*/ s_nop           0x0
/*0000000243a0*/ s_nop           0x0
/*0000000243a4*/ s_nop           0x0
/*0000000243a8*/ s_nop           0x0
/*0000000243ac*/ s_nop           0x0
/*0000000243b0*/ s_nop           0x0
/*0000000243b4*/ s_nop           0x0
/*0000000243b8*/ s_nop           0x0
/*0000000243bc*/ s_nop           0x0
/*0000000243c0*/ s_nop           0x0
/*0000000243c4*/ s_nop           0x0
/*0000000243c8*/ s_nop           0x0
/*0000000243cc*/ s_nop           0x0
/*0000000243d0*/ s_nop           0x0
/*0000000243d4*/ s_nop           0x0
/*0000000243d8*/ s_nop           0x0
/*0000000243dc*/ s_nop           0x0
/*0000000243e0*/ s_nop           0x0
/*0000000243e4*/ s_nop           0x0
/*0000000243e8*/ s_nop           0x0
/*0000000243ec*/ s_nop           0x0
/*0000000243f0*/ s_nop           0x0
/*0000000243f4*/ s_nop           0x0
/*0000000243f8*/ s_nop           0x0
/*0000000243fc*/ s_nop           0x0
mul_char_get_local_size_get_num_groups:
.skip 256
/*000000024500*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000024508*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000024510*/ s_waitcnt       lgkmcnt(0)
/*000000024514*/ s_clause        0x1
/*000000024518*/ s_load_dword    s3, s[6:7], 0x20
/*000000024520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024528*/ s_lshl_b32      s7, s8, 1
/*00000002452c*/ s_lshl_b32      s8, s9, 1
/*000000024530*/ s_lshl_b32      s9, s10, 2
/*000000024534*/ s_and_b32       s11, s0, -2
/*000000024538*/ v_add3_u32      v0, s12, s7, v0
/*000000024540*/ v_cmp_gt_u32    s[6:7], s0, s11
/*000000024548*/ s_lshr_b32      s0, s0, 1
/*00000002454c*/ s_waitcnt       lgkmcnt(0)
/*000000024550*/ v_add3_u32      v4, s3, s9, v2
/*000000024558*/ v_add3_u32      v3, s14, s8, v1
/*000000024560*/ s_cmpk_lg_u32   s6, 0x0
/*000000024564*/ s_addc_u32      s0, s0, 0
/*000000024568*/ s_and_b32       s6, s1, -2
/*00000002456c*/ s_lshl_b32      s0, s0, 1
/*000000024570*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000024578*/ s_lshr_b32      s1, s1, 1
/*00000002457c*/ v_mov_b32       v6, s0
/*000000024580*/ s_cmpk_lg_u32   s6, 0x0
/*000000024584*/ v_add_co_u32    v0, s[6:7], s4, v0
/*00000002458c*/ s_addc_u32      s1, s1, 0
/*000000024590*/ s_and_b32       s3, s2, -4
/*000000024594*/ s_lshl_b32      s1, s1, 1
/*000000024598*/ v_cmp_gt_u32    s[3:4], s2, s3
/*0000000245a0*/ s_lshr_b32      s2, s2, 2
/*0000000245a4*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*0000000245ac*/ v_add_co_u32    v2, s[6:7], s4, v3
/*0000000245b4*/ v_mov_b32       v9, s1
/*0000000245b8*/ s_cmpk_lg_u32   s3, 0x0
/*0000000245bc*/ v_add_co_u32    v4, s[1:2], s4, v4
/*0000000245c4*/ s_addc_u32      s0, s2, 0
/*0000000245c8*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*0000000245d0*/ s_lshl_b32      s0, s0, 2
/*0000000245d4*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*0000000245dc*/ v_mov_b32       v11, s0
/*0000000245e0*/ global_store_byte v[0:1], v6, off
/*0000000245e8*/ global_store_byte v[2:3], v9, off
/*0000000245f0*/ global_store_byte v[4:5], v11, off
/*0000000245f8*/ s_endpgm
/*0000000245fc*/ s_nop           0x0
mul_char_get_global_id_get_num_groups:
.skip 256
/*000000024700*/ s_clause        0x1
/*000000024704*/ s_load_dword    s11, s[4:5], 0xc
/*00000002470c*/ s_load_dword    s12, s[4:5], 0x10
/*000000024714*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*00000002471c*/ s_waitcnt       lgkmcnt(0)
/*000000024720*/ s_load_dword    s1, s[6:7], 0x20
/*000000024728*/ s_load_dword    s3, s[4:5], 0x14
/*000000024730*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024738*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000024740*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000024748*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000024750*/ v_mov_b32       v5, 0
/*000000024754*/ s_and_b32       s13, s11, -2
/*000000024758*/ s_lshr_b32      s7, s11, 1
/*00000002475c*/ v_cmp_gt_u32    s[6:7], s11, s13
/*000000024764*/ v_add_nc_u32    v4, s0, v0
/*000000024768*/ s_waitcnt       lgkmcnt(0)
/*00000002476c*/ v_add_nc_u32    v7, s1, v2
/*000000024770*/ v_add_nc_u32    v6, s2, v1
/*000000024774*/ v_add_co_u32    v0, s[2:3], s4, v0
/*00000002477c*/ s_cmpk_lg_u32   s6, 0x0
/*000000024780*/ v_add_co_ci_u32 v1, s[2:3], s5, 0, s[2:3]
/*000000024788*/ s_addc_u32      s6, s7, 0
/*00000002478c*/ s_and_b32       s7, s12, -2
/*000000024790*/ s_lshr_b32      s0, s12, 1
/*000000024794*/ v_cmp_gt_u32    s[7:8], s12, s7
/*00000002479c*/ v_add_co_u32    v2, vcc, s4, v6
/*0000000247a4*/ v_mul_lo_u32    v15, v4, s6
/*0000000247ac*/ v_add_co_ci_u32 v3, vcc, s5, v5, vcc
/*0000000247b0*/ v_add_co_u32    v4, vcc, s4, v7
/*0000000247b8*/ s_cmpk_lg_u32   s7, 0x0
/*0000000247bc*/ v_add_co_ci_u32 v5, vcc, s5, v5, vcc
/*0000000247c0*/ s_addc_u32      s0, s0, 0
/*0000000247c4*/ s_and_b32       s1, s3, -4
/*0000000247c8*/ s_lshr_b32      s2, s3, 2
/*0000000247cc*/ v_cmp_gt_u32    s[1:2], s3, s1
/*0000000247d4*/ v_mul_lo_u32    v9, v6, s0
/*0000000247dc*/ s_cmpk_lg_u32   s1, 0x0
/*0000000247e0*/ s_addc_u32      s1, s2, 0
/*0000000247e4*/ v_mul_lo_u32    v11, v7, s1
/*0000000247ec*/ global_store_byte v[0:1], v15, off
/*0000000247f4*/ global_store_byte v[2:3], v9, off
/*0000000247fc*/ global_store_byte v[4:5], v11, off
/*000000024804*/ s_endpgm
/*000000024808*/ s_nop           0x0
/*00000002480c*/ s_nop           0x0
/*000000024810*/ s_nop           0x0
/*000000024814*/ s_nop           0x0
/*000000024818*/ s_nop           0x0
/*00000002481c*/ s_nop           0x0
/*000000024820*/ s_nop           0x0
/*000000024824*/ s_nop           0x0
/*000000024828*/ s_nop           0x0
/*00000002482c*/ s_nop           0x0
/*000000024830*/ s_nop           0x0
/*000000024834*/ s_nop           0x0
/*000000024838*/ s_nop           0x0
/*00000002483c*/ s_nop           0x0
/*000000024840*/ s_nop           0x0
/*000000024844*/ s_nop           0x0
/*000000024848*/ s_nop           0x0
/*00000002484c*/ s_nop           0x0
/*000000024850*/ s_nop           0x0
/*000000024854*/ s_nop           0x0
/*000000024858*/ s_nop           0x0
/*00000002485c*/ s_nop           0x0
/*000000024860*/ s_nop           0x0
/*000000024864*/ s_nop           0x0
/*000000024868*/ s_nop           0x0
/*00000002486c*/ s_nop           0x0
/*000000024870*/ s_nop           0x0
/*000000024874*/ s_nop           0x0
/*000000024878*/ s_nop           0x0
/*00000002487c*/ s_nop           0x0
/*000000024880*/ s_nop           0x0
/*000000024884*/ s_nop           0x0
/*000000024888*/ s_nop           0x0
/*00000002488c*/ s_nop           0x0
/*000000024890*/ s_nop           0x0
/*000000024894*/ s_nop           0x0
/*000000024898*/ s_nop           0x0
/*00000002489c*/ s_nop           0x0
/*0000000248a0*/ s_nop           0x0
/*0000000248a4*/ s_nop           0x0
/*0000000248a8*/ s_nop           0x0
/*0000000248ac*/ s_nop           0x0
/*0000000248b0*/ s_nop           0x0
/*0000000248b4*/ s_nop           0x0
/*0000000248b8*/ s_nop           0x0
/*0000000248bc*/ s_nop           0x0
/*0000000248c0*/ s_nop           0x0
/*0000000248c4*/ s_nop           0x0
/*0000000248c8*/ s_nop           0x0
/*0000000248cc*/ s_nop           0x0
/*0000000248d0*/ s_nop           0x0
/*0000000248d4*/ s_nop           0x0
/*0000000248d8*/ s_nop           0x0
/*0000000248dc*/ s_nop           0x0
/*0000000248e0*/ s_nop           0x0
/*0000000248e4*/ s_nop           0x0
/*0000000248e8*/ s_nop           0x0
/*0000000248ec*/ s_nop           0x0
/*0000000248f0*/ s_nop           0x0
/*0000000248f4*/ s_nop           0x0
/*0000000248f8*/ s_nop           0x0
/*0000000248fc*/ s_nop           0x0
mul_char_get_global_size_get_num_groups:
.skip 256
/*000000024a00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000024a08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000024a10*/ s_waitcnt       lgkmcnt(0)
/*000000024a14*/ s_clause        0x1
/*000000024a18*/ s_load_dword    s3, s[6:7], 0x20
/*000000024a20*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000024a28*/ s_lshl_b32      s7, s8, 4
/*000000024a2c*/ s_lshl_b32      s8, s9, 1
/*000000024a30*/ s_lshl_b32      s9, s10, 1
/*000000024a34*/ s_and_b32       s6, s0, -16
/*000000024a38*/ s_lshr_b32      s10, s0, 4
/*000000024a3c*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000024a44*/ v_add3_u32      v0, s12, s7, v0
/*000000024a4c*/ s_waitcnt       lgkmcnt(0)
/*000000024a50*/ v_add3_u32      v4, s3, s9, v2
/*000000024a58*/ v_add3_u32      v3, s14, s8, v1
/*000000024a60*/ s_cmpk_lg_u32   s6, 0x0
/*000000024a64*/ v_add_co_u32    v0, s[7:8], s4, v0
/*000000024a6c*/ s_addc_u32      s6, s10, 0
/*000000024a70*/ s_and_b32       s10, s1, -2
/*000000024a74*/ s_lshr_b32      s3, s1, 1
/*000000024a78*/ v_cmp_gt_u32    s[10:11], s1, s10
/*000000024a80*/ v_add_co_ci_u32 v1, s[7:8], s5, 0, s[7:8]
/*000000024a88*/ s_mul_i32       s0, s6, s0
/*000000024a8c*/ v_mov_b32       v6, s0
/*000000024a90*/ s_cmpk_lg_u32   s10, 0x0
/*000000024a94*/ s_addc_u32      s3, s3, 0
/*000000024a98*/ s_and_b32       s7, s2, -2
/*000000024a9c*/ s_lshr_b32      s0, s2, 1
/*000000024aa0*/ v_cmp_gt_u32    s[6:7], s2, s7
/*000000024aa8*/ s_mul_i32       s1, s3, s1
/*000000024aac*/ v_add_co_u32    v2, s[7:8], s4, v3
/*000000024ab4*/ v_mov_b32       v9, s1
/*000000024ab8*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000024ac0*/ s_cmpk_lg_u32   s6, 0x0
/*000000024ac4*/ v_add_co_ci_u32 v3, s[7:8], s5, 0, s[7:8]
/*000000024acc*/ s_addc_u32      s0, s0, 0
/*000000024ad0*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000024ad8*/ s_mul_i32       s0, s0, s2
/*000000024adc*/ v_mov_b32       v11, s0
/*000000024ae0*/ global_store_byte v[0:1], v6, off
/*000000024ae8*/ global_store_byte v[2:3], v9, off
/*000000024af0*/ global_store_byte v[4:5], v11, off
/*000000024af8*/ s_endpgm
/*000000024afc*/ s_nop           0x0
mul_char_get_num_groups_get_num_groups:
.skip 256
/*000000024c00*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000024c08*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000024c10*/ s_waitcnt       lgkmcnt(0)
/*000000024c14*/ s_clause        0x1
/*000000024c18*/ s_load_dword    s3, s[6:7], 0x20
/*000000024c20*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024c28*/ s_lshl_b32      s7, s8, 1
/*000000024c2c*/ s_lshl_b32      s8, s9, 1
/*000000024c30*/ s_lshl_b32      s9, s10, 2
/*000000024c34*/ s_and_b32       s6, s0, -2
/*000000024c38*/ v_add3_u32      v0, s12, s7, v0
/*000000024c40*/ v_cmp_gt_u32    s[6:7], s0, s6
/*000000024c48*/ s_lshr_b32      s0, s0, 1
/*000000024c4c*/ s_waitcnt       lgkmcnt(0)
/*000000024c50*/ v_add3_u32      v4, s3, s9, v2
/*000000024c58*/ v_add3_u32      v3, s14, s8, v1
/*000000024c60*/ v_add_co_u32    v0, s[3:4], s4, v0
/*000000024c68*/ s_cmpk_lg_u32   s6, 0x0
/*000000024c6c*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*000000024c74*/ s_addc_u32      s0, s0, 0
/*000000024c78*/ s_and_b32       s6, s1, -2
/*000000024c7c*/ s_mul_i32       s0, s0, s0
/*000000024c80*/ v_cmp_gt_u32    s[6:7], s1, s6
/*000000024c88*/ s_lshr_b32      s1, s1, 1
/*000000024c8c*/ v_mov_b32       v6, s0
/*000000024c90*/ s_cmpk_lg_u32   s6, 0x0
/*000000024c94*/ v_add_co_u32    v2, s[6:7], s4, v3
/*000000024c9c*/ s_addc_u32      s1, s1, 0
/*000000024ca0*/ s_and_b32       s3, s2, -4
/*000000024ca4*/ s_lshr_b32      s0, s2, 2
/*000000024ca8*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000024cb0*/ s_mul_i32       s1, s1, s1
/*000000024cb4*/ v_add_co_ci_u32 v3, s[6:7], s5, 0, s[6:7]
/*000000024cbc*/ v_mov_b32       v9, s1
/*000000024cc0*/ v_add_co_u32    v4, s[1:2], s4, v4
/*000000024cc8*/ s_cmpk_lg_u32   s3, 0x0
/*000000024ccc*/ v_add_co_ci_u32 v5, s[1:2], s5, 0, s[1:2]
/*000000024cd4*/ s_addc_u32      s0, s0, 0
/*000000024cd8*/ s_mul_i32       s0, s0, s0
/*000000024cdc*/ v_mov_b32       v11, s0
/*000000024ce0*/ global_store_byte v[0:1], v6, off
/*000000024ce8*/ global_store_byte v[2:3], v9, off
/*000000024cf0*/ global_store_byte v[4:5], v11, off
/*000000024cf8*/ s_endpgm
/*000000024cfc*/ s_nop           0x0
mul_char_get_work_dim_get_num_groups:
.skip 256
/*000000024e00*/ v_mov_b32       v3, s4
/*000000024e04*/ v_mov_b32       v4, s5
/*000000024e08*/ s_clause        0x2
/*000000024e0c*/ s_load_dword    s11, s[4:5], 0xc
/*000000024e14*/ s_load_dword    s12, s[4:5], 0x10
/*000000024e1c*/ s_load_dword    s13, s[4:5], 0x14
/*000000024e24*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000024e2c*/ s_waitcnt       lgkmcnt(0)
/*000000024e30*/ s_load_dword    s3, s[6:7], 0x20
/*000000024e38*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000024e40*/ s_lshl_b32      s8, s8, 1
/*000000024e44*/ s_lshl_b32      s9, s9, 1
/*000000024e48*/ s_lshl_b32      s10, s10, 2
/*000000024e4c*/ s_and_b32       s4, s11, -2
/*000000024e50*/ v_cmp_gt_u32    s[1:2], s11, s4
/*000000024e58*/ s_lshr_b32      s11, s11, 1
/*000000024e5c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000024e64*/ v_add3_u32      v0, s0, s8, v0
/*000000024e6c*/ v_add3_u32      v3, s2, s9, v1
/*000000024e74*/ s_cmpk_lg_u32   s1, 0x0
/*000000024e78*/ s_waitcnt       lgkmcnt(0)
/*000000024e7c*/ v_add3_u32      v5, s3, s10, v2
/*000000024e84*/ s_addc_u32      s1, s11, 0
/*000000024e88*/ s_and_b32       s6, s12, -2
/*000000024e8c*/ s_lshr_b32      s7, s12, 1
/*000000024e90*/ v_cmp_gt_u32    s[6:7], s12, s6
/*000000024e98*/ s_cmpk_lg_u32   s6, 0x0
/*000000024e9c*/ s_addc_u32      s6, s7, 0
/*000000024ea0*/ s_and_b32       s7, s13, -4
/*000000024ea4*/ s_lshr_b32      s0, s13, 2
/*000000024ea8*/ v_cmp_gt_u32    s[7:8], s13, s7
/*000000024eb0*/ v_add_co_u32    v0, s[2:3], s4, v0
/*000000024eb8*/ v_add_co_ci_u32 v1, s[2:3], s5, 0, s[2:3]
/*000000024ec0*/ s_cmpk_lg_u32   s7, 0x0
/*000000024ec4*/ v_add_co_u32    v2, s[2:3], s4, v3
/*000000024ecc*/ s_addc_u32      s0, s0, 0
/*000000024ed0*/ v_add_co_ci_u32 v3, s[2:3], s5, 0, s[2:3]
/*000000024ed8*/ s_waitcnt       vmcnt(0)
/*000000024edc*/ v_and_b32       v6, 0xffff, v4
/*000000024ee4*/ v_mul_lo_u32    v7, s0, v4
/*000000024eec*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000024ef4*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000024efc*/ v_mul_lo_u32    v11, v6, s1
/*000000024f04*/ v_mul_lo_u32    v9, v6, s6
/*000000024f0c*/ global_store_byte v[0:1], v11, off
/*000000024f14*/ global_store_byte v[2:3], v9, off
/*000000024f1c*/ global_store_byte v[4:5], v7, off
/*000000024f24*/ s_endpgm
/*000000024f28*/ s_nop           0x0
/*000000024f2c*/ s_nop           0x0
/*000000024f30*/ s_nop           0x0
/*000000024f34*/ s_nop           0x0
/*000000024f38*/ s_nop           0x0
/*000000024f3c*/ s_nop           0x0
/*000000024f40*/ s_nop           0x0
/*000000024f44*/ s_nop           0x0
/*000000024f48*/ s_nop           0x0
/*000000024f4c*/ s_nop           0x0
/*000000024f50*/ s_nop           0x0
/*000000024f54*/ s_nop           0x0
/*000000024f58*/ s_nop           0x0
/*000000024f5c*/ s_nop           0x0
/*000000024f60*/ s_nop           0x0
/*000000024f64*/ s_nop           0x0
/*000000024f68*/ s_nop           0x0
/*000000024f6c*/ s_nop           0x0
/*000000024f70*/ s_nop           0x0
/*000000024f74*/ s_nop           0x0
/*000000024f78*/ s_nop           0x0
/*000000024f7c*/ s_nop           0x0
/*000000024f80*/ s_nop           0x0
/*000000024f84*/ s_nop           0x0
/*000000024f88*/ s_nop           0x0
/*000000024f8c*/ s_nop           0x0
/*000000024f90*/ s_nop           0x0
/*000000024f94*/ s_nop           0x0
/*000000024f98*/ s_nop           0x0
/*000000024f9c*/ s_nop           0x0
/*000000024fa0*/ s_nop           0x0
/*000000024fa4*/ s_nop           0x0
/*000000024fa8*/ s_nop           0x0
/*000000024fac*/ s_nop           0x0
/*000000024fb0*/ s_nop           0x0
/*000000024fb4*/ s_nop           0x0
/*000000024fb8*/ s_nop           0x0
/*000000024fbc*/ s_nop           0x0
/*000000024fc0*/ s_nop           0x0
/*000000024fc4*/ s_nop           0x0
/*000000024fc8*/ s_nop           0x0
/*000000024fcc*/ s_nop           0x0
/*000000024fd0*/ s_nop           0x0
/*000000024fd4*/ s_nop           0x0
/*000000024fd8*/ s_nop           0x0
/*000000024fdc*/ s_nop           0x0
/*000000024fe0*/ s_nop           0x0
/*000000024fe4*/ s_nop           0x0
/*000000024fe8*/ s_nop           0x0
/*000000024fec*/ s_nop           0x0
/*000000024ff0*/ s_nop           0x0
/*000000024ff4*/ s_nop           0x0
/*000000024ff8*/ s_nop           0x0
/*000000024ffc*/ s_nop           0x0
mul_char_x_get_work_dim:
.skip 256
/*000000025100*/ v_mov_b32       v3, s4
/*000000025104*/ v_mov_b32       v4, s5
/*000000025108*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000025110*/ s_waitcnt       lgkmcnt(0)
/*000000025114*/ s_clause        0x2
/*000000025118*/ s_load_dword    s1, s[6:7], 0x20
/*000000025120*/ s_load_dwordx2  s[4:5], s[6:7], 0x0
/*000000025128*/ s_load_dword    s3, s[6:7], 0x8
/*000000025130*/ s_lshl_b32      s6, s8, 4
/*000000025134*/ s_lshl_b32      s7, s9, 1
/*000000025138*/ global_load_ushort v3, v[3:4], off inst_offset:2
/*000000025140*/ v_add3_u32      v0, s0, s6, v0
/*000000025148*/ s_lshl_b32      s0, s10, 1
/*00000002514c*/ v_add3_u32      v4, s2, s7, v1
/*000000025154*/ s_waitcnt       lgkmcnt(0)
/*000000025158*/ v_add3_u32      v5, s1, s0, v2
/*000000025160*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000025168*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000025170*/ v_add_co_u32    v7, s[0:1], s4, v4
/*000000025178*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000025180*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000025188*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000025190*/ s_waitcnt       vmcnt(0)
/*000000025194*/ v_mul_lo_u32    v6, v3, s3
/*00000002519c*/ global_store_byte v[0:1], v6, off
/*0000000251a4*/ global_store_byte v[7:8], v6, off
/*0000000251ac*/ global_store_byte v[4:5], v6, off
/*0000000251b4*/ s_endpgm
/*0000000251b8*/ s_nop           0x0
/*0000000251bc*/ s_nop           0x0
/*0000000251c0*/ s_nop           0x0
/*0000000251c4*/ s_nop           0x0
/*0000000251c8*/ s_nop           0x0
/*0000000251cc*/ s_nop           0x0
/*0000000251d0*/ s_nop           0x0
/*0000000251d4*/ s_nop           0x0
/*0000000251d8*/ s_nop           0x0
/*0000000251dc*/ s_nop           0x0
/*0000000251e0*/ s_nop           0x0
/*0000000251e4*/ s_nop           0x0
/*0000000251e8*/ s_nop           0x0
/*0000000251ec*/ s_nop           0x0
/*0000000251f0*/ s_nop           0x0
/*0000000251f4*/ s_nop           0x0
/*0000000251f8*/ s_nop           0x0
/*0000000251fc*/ s_nop           0x0
mul_char_get_global_offset_get_work_dim:
.skip 256
/*000000025300*/ v_mov_b32       v3, s4
/*000000025304*/ v_mov_b32       v4, s5
/*000000025308*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000025310*/ s_waitcnt       lgkmcnt(0)
/*000000025314*/ s_clause        0x1
/*000000025318*/ s_load_dword    s1, s[6:7], 0x20
/*000000025320*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000025328*/ s_lshl_b32      s3, s8, 1
/*00000002532c*/ s_lshl_b32      s6, s9, 4
/*000000025330*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000025338*/ v_add3_u32      v0, s0, s3, v0
/*000000025340*/ s_lshl_b32      s3, s10, 1
/*000000025344*/ v_add3_u32      v3, s2, s6, v1
/*00000002534c*/ s_waitcnt       lgkmcnt(0)
/*000000025350*/ v_add3_u32      v5, s1, s3, v2
/*000000025358*/ v_add_co_u32    v0, s[3:4], s4, v0
/*000000025360*/ v_add_co_ci_u32 v1, s[3:4], s5, 0, s[3:4]
/*000000025368*/ v_add_co_u32    v2, s[3:4], s4, v3
/*000000025370*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*000000025378*/ s_waitcnt       vmcnt(0)
/*00000002537c*/ v_and_b32       v6, 0xffff, v4
/*000000025384*/ v_mul_lo_u32    v7, v4, s1
/*00000002538c*/ v_mul_lo_u32    v11, v6, s0
/*000000025394*/ v_mul_lo_u32    v9, v6, s2
/*00000002539c*/ v_add_co_u32    v4, s[0:1], s4, v5
/*0000000253a4*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*0000000253ac*/ global_store_byte v[0:1], v11, off
/*0000000253b4*/ global_store_byte v[2:3], v9, off
/*0000000253bc*/ global_store_byte v[4:5], v7, off
/*0000000253c4*/ s_endpgm
/*0000000253c8*/ s_nop           0x0
/*0000000253cc*/ s_nop           0x0
/*0000000253d0*/ s_nop           0x0
/*0000000253d4*/ s_nop           0x0
/*0000000253d8*/ s_nop           0x0
/*0000000253dc*/ s_nop           0x0
/*0000000253e0*/ s_nop           0x0
/*0000000253e4*/ s_nop           0x0
/*0000000253e8*/ s_nop           0x0
/*0000000253ec*/ s_nop           0x0
/*0000000253f0*/ s_nop           0x0
/*0000000253f4*/ s_nop           0x0
/*0000000253f8*/ s_nop           0x0
/*0000000253fc*/ s_nop           0x0
mul_char_get_local_id_get_work_dim:
.skip 256
/*000000025500*/ v_mov_b32       v3, s4
/*000000025504*/ v_mov_b32       v4, s5
/*000000025508*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000025510*/ s_waitcnt       lgkmcnt(0)
/*000000025514*/ s_clause        0x1
/*000000025518*/ s_load_dword    s1, s[6:7], 0x20
/*000000025520*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000025528*/ s_lshl_b32      s3, s8, 3
/*00000002552c*/ s_lshl_b32      s6, s9, 2
/*000000025530*/ global_load_ushort v15, v[3:4], off inst_offset:2
/*000000025538*/ v_add3_u32      v3, s0, s3, v0
/*000000025540*/ s_lshl_b32      s0, s10, 1
/*000000025544*/ v_add3_u32      v5, s2, s6, v1
/*00000002554c*/ s_waitcnt       lgkmcnt(0)
/*000000025550*/ v_add3_u32      v7, s1, s0, v2
/*000000025558*/ v_add_co_u32    v3, s[0:1], s4, v3
/*000000025560*/ v_add_co_ci_u32 v4, s[0:1], s5, 0, s[0:1]
/*000000025568*/ v_add_co_u32    v5, s[0:1], s4, v5
/*000000025570*/ v_add_co_ci_u32 v6, s[0:1], s5, 0, s[0:1]
/*000000025578*/ v_add_co_u32    v7, s[0:1], s4, v7
/*000000025580*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000025588*/ s_waitcnt       vmcnt(0)
/*00000002558c*/ v_mul_u32_u24   v10, v0, v15
/*000000025590*/ v_mul_u32_u24   v11, v1, v15
/*000000025594*/ v_mul_u32_u24   v2, v2, v15
/*000000025598*/ global_store_byte v[3:4], v10, off
/*0000000255a0*/ global_store_byte v[5:6], v11, off
/*0000000255a8*/ global_store_byte v[7:8], v2, off
/*0000000255b0*/ s_endpgm
/*0000000255b4*/ s_nop           0x0
/*0000000255b8*/ s_nop           0x0
/*0000000255bc*/ s_nop           0x0
/*0000000255c0*/ s_nop           0x0
/*0000000255c4*/ s_nop           0x0
/*0000000255c8*/ s_nop           0x0
/*0000000255cc*/ s_nop           0x0
/*0000000255d0*/ s_nop           0x0
/*0000000255d4*/ s_nop           0x0
/*0000000255d8*/ s_nop           0x0
/*0000000255dc*/ s_nop           0x0
/*0000000255e0*/ s_nop           0x0
/*0000000255e4*/ s_nop           0x0
/*0000000255e8*/ s_nop           0x0
/*0000000255ec*/ s_nop           0x0
/*0000000255f0*/ s_nop           0x0
/*0000000255f4*/ s_nop           0x0
/*0000000255f8*/ s_nop           0x0
/*0000000255fc*/ s_nop           0x0
mul_char_get_group_id_get_work_dim:
.skip 256
/*000000025700*/ v_mov_b32       v3, s4
/*000000025704*/ v_mov_b32       v4, s5
/*000000025708*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000025710*/ s_waitcnt       lgkmcnt(0)
/*000000025714*/ s_clause        0x1
/*000000025718*/ s_load_dword    s1, s[6:7], 0x20
/*000000025720*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000025728*/ s_lshl_b32      s3, s8, 1
/*00000002572c*/ s_lshl_b32      s6, s9, 4
/*000000025730*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000025738*/ v_add3_u32      v0, s0, s3, v0
/*000000025740*/ s_lshl_b32      s0, s10, 1
/*000000025744*/ v_add3_u32      v3, s2, s6, v1
/*00000002574c*/ s_waitcnt       lgkmcnt(0)
/*000000025750*/ v_add3_u32      v5, s1, s0, v2
/*000000025758*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000025760*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000025768*/ v_add_co_u32    v2, s[0:1], s4, v3
/*000000025770*/ v_add_co_ci_u32 v3, s[0:1], s5, 0, s[0:1]
/*000000025778*/ s_waitcnt       vmcnt(0)
/*00000002577c*/ v_mul_lo_u32    v6, s8, v4
/*000000025784*/ v_mul_lo_u32    v9, s9, v4
/*00000002578c*/ v_mul_lo_u32    v11, s10, v4
/*000000025794*/ v_add_co_u32    v4, s[0:1], s4, v5
/*00000002579c*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*0000000257a4*/ global_store_byte v[0:1], v6, off
/*0000000257ac*/ global_store_byte v[2:3], v9, off
/*0000000257b4*/ global_store_byte v[4:5], v11, off
/*0000000257bc*/ s_endpgm
/*0000000257c0*/ s_nop           0x0
/*0000000257c4*/ s_nop           0x0
/*0000000257c8*/ s_nop           0x0
/*0000000257cc*/ s_nop           0x0
/*0000000257d0*/ s_nop           0x0
/*0000000257d4*/ s_nop           0x0
/*0000000257d8*/ s_nop           0x0
/*0000000257dc*/ s_nop           0x0
/*0000000257e0*/ s_nop           0x0
/*0000000257e4*/ s_nop           0x0
/*0000000257e8*/ s_nop           0x0
/*0000000257ec*/ s_nop           0x0
/*0000000257f0*/ s_nop           0x0
/*0000000257f4*/ s_nop           0x0
/*0000000257f8*/ s_nop           0x0
/*0000000257fc*/ s_nop           0x0
mul_char_get_local_size_get_work_dim:
.skip 256
/*000000025900*/ v_mov_b32       v3, s4
/*000000025904*/ v_mov_b32       v4, s5
/*000000025908*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000025910*/ s_waitcnt       lgkmcnt(0)
/*000000025914*/ s_clause        0x1
/*000000025918*/ s_load_dword    s1, s[6:7], 0x20
/*000000025920*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000025928*/ s_lshl_b32      s3, s8, 1
/*00000002592c*/ s_lshl_b32      s6, s9, 1
/*000000025930*/ global_load_ubyte v6, v[3:4], off inst_offset:2
/*000000025938*/ v_add3_u32      v0, s0, s3, v0
/*000000025940*/ s_lshl_b32      s0, s10, 2
/*000000025944*/ v_add3_u32      v3, s2, s6, v1
/*00000002594c*/ s_waitcnt       lgkmcnt(0)
/*000000025950*/ v_add3_u32      v4, s1, s0, v2
/*000000025958*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000025960*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000025968*/ v_add_co_u32    v9, s[0:1], s4, v3
/*000000025970*/ v_add_co_ci_u32 v10, s[0:1], s5, 0, s[0:1]
/*000000025978*/ v_add_co_u32    v4, s[0:1], s4, v4
/*000000025980*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000025988*/ s_waitcnt       vmcnt(0)
/*00000002598c*/ v_lshlrev_b32   v7, 1, v6
/*000000025990*/ v_lshlrev_b32   v6, 2, v6
/*000000025994*/ global_store_byte v[0:1], v7, off
/*00000002599c*/ global_store_byte v[9:10], v7, off
/*0000000259a4*/ global_store_byte v[4:5], v6, off
/*0000000259ac*/ s_endpgm
/*0000000259b0*/ s_nop           0x0
/*0000000259b4*/ s_nop           0x0
/*0000000259b8*/ s_nop           0x0
/*0000000259bc*/ s_nop           0x0
/*0000000259c0*/ s_nop           0x0
/*0000000259c4*/ s_nop           0x0
/*0000000259c8*/ s_nop           0x0
/*0000000259cc*/ s_nop           0x0
/*0000000259d0*/ s_nop           0x0
/*0000000259d4*/ s_nop           0x0
/*0000000259d8*/ s_nop           0x0
/*0000000259dc*/ s_nop           0x0
/*0000000259e0*/ s_nop           0x0
/*0000000259e4*/ s_nop           0x0
/*0000000259e8*/ s_nop           0x0
/*0000000259ec*/ s_nop           0x0
/*0000000259f0*/ s_nop           0x0
/*0000000259f4*/ s_nop           0x0
/*0000000259f8*/ s_nop           0x0
/*0000000259fc*/ s_nop           0x0
mul_char_get_global_id_get_work_dim:
.skip 256
/*000000025b00*/ v_mov_b32       v3, s4
/*000000025b04*/ v_mov_b32       v4, s5
/*000000025b08*/ s_clause        0x2
/*000000025b0c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000025b14*/ s_load_dwordx2  s[4:5], s[6:7], 0x20
/*000000025b1c*/ s_load_dwordx2  s[6:7], s[6:7], 0x8
/*000000025b24*/ v_lshl_or_b32   v0, s8, 1, v0
/*000000025b2c*/ v_lshl_or_b32   v1, s9, 1, v1
/*000000025b34*/ v_lshl_or_b32   v2, s10, 2, v2
/*000000025b3c*/ global_load_ushort v6, v[3:4], off inst_offset:2
/*000000025b44*/ s_waitcnt       lgkmcnt(0)
/*000000025b48*/ v_add_nc_u32    v4, s0, v0
/*000000025b4c*/ v_add_co_u32    v7, s[0:1], s2, v1
/*000000025b54*/ v_add_co_u32    v8, s[0:1], s4, v2
/*000000025b5c*/ v_add_co_u32    v0, s[0:1], s6, v0
/*000000025b64*/ v_add_co_ci_u32 v1, s[0:1], s7, 0, s[0:1]
/*000000025b6c*/ v_add_co_u32    v2, s[0:1], s6, v7
/*000000025b74*/ v_add_co_ci_u32 v3, s[0:1], s7, 0, s[0:1]
/*000000025b7c*/ s_waitcnt       vmcnt(0)
/*000000025b80*/ v_mul_lo_u32    v11, v4, v6
/*000000025b88*/ v_add_co_u32    v4, s[0:1], s6, v8
/*000000025b90*/ v_mul_lo_u16    v13, v6, v7
/*000000025b98*/ v_add_co_ci_u32 v5, s[0:1], s7, 0, s[0:1]
/*000000025ba0*/ v_mul_lo_u16    v6, v6, v8
/*000000025ba8*/ global_store_byte v[0:1], v11, off
/*000000025bb0*/ global_store_byte v[2:3], v13, off
/*000000025bb8*/ global_store_byte v[4:5], v6, off
/*000000025bc0*/ s_endpgm
/*000000025bc4*/ s_nop           0x0
/*000000025bc8*/ s_nop           0x0
/*000000025bcc*/ s_nop           0x0
/*000000025bd0*/ s_nop           0x0
/*000000025bd4*/ s_nop           0x0
/*000000025bd8*/ s_nop           0x0
/*000000025bdc*/ s_nop           0x0
/*000000025be0*/ s_nop           0x0
/*000000025be4*/ s_nop           0x0
/*000000025be8*/ s_nop           0x0
/*000000025bec*/ s_nop           0x0
/*000000025bf0*/ s_nop           0x0
/*000000025bf4*/ s_nop           0x0
/*000000025bf8*/ s_nop           0x0
/*000000025bfc*/ s_nop           0x0
mul_char_get_global_size_get_work_dim:
.skip 256
/*000000025d00*/ v_mov_b32       v3, s4
/*000000025d04*/ v_mov_b32       v4, s5
/*000000025d08*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000025d10*/ s_waitcnt       lgkmcnt(0)
/*000000025d14*/ s_clause        0x1
/*000000025d18*/ s_load_dword    s1, s[6:7], 0x20
/*000000025d20*/ s_load_dwordx2  s[12:13], s[6:7], 0x0
/*000000025d28*/ s_load_dwordx4  s[4:7], s[4:5], 0xc
/*000000025d30*/ s_lshl_b32      s3, s8, 4
/*000000025d34*/ s_waitcnt       lgkmcnt(0)
/*000000025d38*/ s_lshl_b32      s7, s9, 1
/*000000025d3c*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000025d44*/ v_add3_u32      v0, s0, s3, v0
/*000000025d4c*/ s_lshl_b32      s0, s10, 1
/*000000025d50*/ v_add3_u32      v3, s2, s7, v1
/*000000025d58*/ v_add3_u32      v5, s1, s0, v2
/*000000025d60*/ v_add_co_u32    v0, s[0:1], s12, v0
/*000000025d68*/ v_add_co_ci_u32 v1, s[0:1], s13, 0, s[0:1]
/*000000025d70*/ v_add_co_u32    v2, s[0:1], s12, v3
/*000000025d78*/ v_add_co_ci_u32 v3, s[0:1], s13, 0, s[0:1]
/*000000025d80*/ s_waitcnt       vmcnt(0)
/*000000025d84*/ v_mul_lo_u32    v6, s4, v4
/*000000025d8c*/ v_mul_lo_u32    v9, s5, v4
/*000000025d94*/ v_mul_lo_u32    v11, s6, v4
/*000000025d9c*/ v_add_co_u32    v4, s[0:1], s12, v5
/*000000025da4*/ v_add_co_ci_u32 v5, s[0:1], s13, 0, s[0:1]
/*000000025dac*/ global_store_byte v[0:1], v6, off
/*000000025db4*/ global_store_byte v[2:3], v9, off
/*000000025dbc*/ global_store_byte v[4:5], v11, off
/*000000025dc4*/ s_endpgm
/*000000025dc8*/ s_nop           0x0
/*000000025dcc*/ s_nop           0x0
/*000000025dd0*/ s_nop           0x0
/*000000025dd4*/ s_nop           0x0
/*000000025dd8*/ s_nop           0x0
/*000000025ddc*/ s_nop           0x0
/*000000025de0*/ s_nop           0x0
/*000000025de4*/ s_nop           0x0
/*000000025de8*/ s_nop           0x0
/*000000025dec*/ s_nop           0x0
/*000000025df0*/ s_nop           0x0
/*000000025df4*/ s_nop           0x0
/*000000025df8*/ s_nop           0x0
/*000000025dfc*/ s_nop           0x0
mul_char_get_num_groups_get_work_dim:
.skip 256
/*000000025f00*/ v_mov_b32       v3, s4
/*000000025f04*/ v_mov_b32       v4, s5
/*000000025f08*/ s_load_dwordx4  s[0:3], s[4:5], 0xc
/*000000025f10*/ s_clause        0x2
/*000000025f14*/ s_load_dwordx4  s[12:15], s[6:7], 0x10
/*000000025f1c*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000025f24*/ s_load_dword    s6, s[6:7], 0x20
/*000000025f2c*/ s_lshl_b32      s7, s8, 1
/*000000025f30*/ s_lshl_b32      s8, s9, 1
/*000000025f34*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000025f3c*/ s_lshl_b32      s9, s10, 2
/*000000025f40*/ s_waitcnt       lgkmcnt(0)
/*000000025f44*/ s_and_b32       s3, s0, -2
/*000000025f48*/ v_add3_u32      v0, s12, s7, v0
/*000000025f50*/ v_cmp_gt_u32    s[3:4], s0, s3
/*000000025f58*/ s_lshr_b32      s0, s0, 1
/*000000025f5c*/ v_add3_u32      v3, s14, s8, v1
/*000000025f64*/ v_add3_u32      v5, s6, s9, v2
/*000000025f6c*/ v_add_co_u32    v0, s[6:7], s4, v0
/*000000025f74*/ s_cmpk_lg_u32   s3, 0x0
/*000000025f78*/ v_add_co_ci_u32 v1, s[6:7], s5, 0, s[6:7]
/*000000025f80*/ s_addc_u32      s0, s0, 0
/*000000025f84*/ s_and_b32       s3, s1, -2
/*000000025f88*/ v_cmp_gt_u32    s[3:4], s1, s3
/*000000025f90*/ s_lshr_b32      s1, s1, 1
/*000000025f94*/ s_cmpk_lg_u32   s3, 0x0
/*000000025f98*/ s_addc_u32      s1, s1, 0
/*000000025f9c*/ s_and_b32       s3, s2, -4
/*000000025fa0*/ v_cmp_gt_u32    s[3:4], s2, s3
/*000000025fa8*/ s_lshr_b32      s2, s2, 2
/*000000025fac*/ s_cmpk_lg_u32   s3, 0x0
/*000000025fb0*/ v_add_co_u32    v2, s[3:4], s4, v3
/*000000025fb8*/ s_addc_u32      s2, s2, 0
/*000000025fbc*/ v_add_co_ci_u32 v3, s[3:4], s5, 0, s[3:4]
/*000000025fc4*/ s_waitcnt       vmcnt(0)
/*000000025fc8*/ v_mul_lo_u32    v6, s0, v4
/*000000025fd0*/ v_mul_lo_u32    v9, s1, v4
/*000000025fd8*/ v_mul_lo_u32    v11, s2, v4
/*000000025fe0*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000025fe8*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000025ff0*/ global_store_byte v[0:1], v6, off
/*000000025ff8*/ global_store_byte v[2:3], v9, off
/*000000026000*/ global_store_byte v[4:5], v11, off
/*000000026008*/ s_endpgm
/*00000002600c*/ s_nop           0x0
/*000000026010*/ s_nop           0x0
/*000000026014*/ s_nop           0x0
/*000000026018*/ s_nop           0x0
/*00000002601c*/ s_nop           0x0
/*000000026020*/ s_nop           0x0
/*000000026024*/ s_nop           0x0
/*000000026028*/ s_nop           0x0
/*00000002602c*/ s_nop           0x0
/*000000026030*/ s_nop           0x0
/*000000026034*/ s_nop           0x0
/*000000026038*/ s_nop           0x0
/*00000002603c*/ s_nop           0x0
/*000000026040*/ s_nop           0x0
/*000000026044*/ s_nop           0x0
/*000000026048*/ s_nop           0x0
/*00000002604c*/ s_nop           0x0
/*000000026050*/ s_nop           0x0
/*000000026054*/ s_nop           0x0
/*000000026058*/ s_nop           0x0
/*00000002605c*/ s_nop           0x0
/*000000026060*/ s_nop           0x0
/*000000026064*/ s_nop           0x0
/*000000026068*/ s_nop           0x0
/*00000002606c*/ s_nop           0x0
/*000000026070*/ s_nop           0x0
/*000000026074*/ s_nop           0x0
/*000000026078*/ s_nop           0x0
/*00000002607c*/ s_nop           0x0
/*000000026080*/ s_nop           0x0
/*000000026084*/ s_nop           0x0
/*000000026088*/ s_nop           0x0
/*00000002608c*/ s_nop           0x0
/*000000026090*/ s_nop           0x0
/*000000026094*/ s_nop           0x0
/*000000026098*/ s_nop           0x0
/*00000002609c*/ s_nop           0x0
/*0000000260a0*/ s_nop           0x0
/*0000000260a4*/ s_nop           0x0
/*0000000260a8*/ s_nop           0x0
/*0000000260ac*/ s_nop           0x0
/*0000000260b0*/ s_nop           0x0
/*0000000260b4*/ s_nop           0x0
/*0000000260b8*/ s_nop           0x0
/*0000000260bc*/ s_nop           0x0
/*0000000260c0*/ s_nop           0x0
/*0000000260c4*/ s_nop           0x0
/*0000000260c8*/ s_nop           0x0
/*0000000260cc*/ s_nop           0x0
/*0000000260d0*/ s_nop           0x0
/*0000000260d4*/ s_nop           0x0
/*0000000260d8*/ s_nop           0x0
/*0000000260dc*/ s_nop           0x0
/*0000000260e0*/ s_nop           0x0
/*0000000260e4*/ s_nop           0x0
/*0000000260e8*/ s_nop           0x0
/*0000000260ec*/ s_nop           0x0
/*0000000260f0*/ s_nop           0x0
/*0000000260f4*/ s_nop           0x0
/*0000000260f8*/ s_nop           0x0
/*0000000260fc*/ s_nop           0x0
mul_char_get_work_dim_get_work_dim:
.skip 256
/*000000026200*/ v_mov_b32       v3, s4
/*000000026204*/ v_mov_b32       v4, s5
/*000000026208*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000026210*/ s_waitcnt       lgkmcnt(0)
/*000000026214*/ s_clause        0x1
/*000000026218*/ s_load_dword    s1, s[6:7], 0x20
/*000000026220*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*000000026228*/ s_lshl_b32      s3, s8, 1
/*00000002622c*/ s_lshl_b32      s6, s9, 1
/*000000026230*/ global_load_ushort v4, v[3:4], off inst_offset:2
/*000000026238*/ v_add3_u32      v0, s0, s3, v0
/*000000026240*/ s_lshl_b32      s0, s10, 2
/*000000026244*/ v_add3_u32      v3, s2, s6, v1
/*00000002624c*/ s_waitcnt       lgkmcnt(0)
/*000000026250*/ v_add3_u32      v5, s1, s0, v2
/*000000026258*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000026260*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000026268*/ v_add_co_u32    v7, s[0:1], s4, v3
/*000000026270*/ v_add_co_ci_u32 v8, s[0:1], s5, 0, s[0:1]
/*000000026278*/ s_waitcnt       vmcnt(0)
/*00000002627c*/ v_mul_u32_u24   v6, v4, v4
/*000000026280*/ v_add_co_u32    v4, s[0:1], s4, v5
/*000000026288*/ v_add_co_ci_u32 v5, s[0:1], s5, 0, s[0:1]
/*000000026290*/ global_store_byte v[0:1], v6, off
/*000000026298*/ global_store_byte v[7:8], v6, off
/*0000000262a0*/ global_store_byte v[4:5], v6, off
/*0000000262a8*/ s_endpgm
/*0000000262ac*/ s_nop           0x0
/*0000000262b0*/ s_nop           0x0
/*0000000262b4*/ s_nop           0x0
/*0000000262b8*/ s_nop           0x0
/*0000000262bc*/ s_nop           0x0
/*0000000262c0*/ s_nop           0x0
/*0000000262c4*/ s_nop           0x0
/*0000000262c8*/ s_nop           0x0
/*0000000262cc*/ s_nop           0x0
/*0000000262d0*/ s_nop           0x0
/*0000000262d4*/ s_nop           0x0
/*0000000262d8*/ s_nop           0x0
/*0000000262dc*/ s_nop           0x0
/*0000000262e0*/ s_nop           0x0
/*0000000262e4*/ s_nop           0x0
/*0000000262e8*/ s_nop           0x0
/*0000000262ec*/ s_nop           0x0
/*0000000262f0*/ s_nop           0x0
/*0000000262f4*/ s_nop           0x0
/*0000000262f8*/ s_nop           0x0
/*0000000262fc*/ s_nop           0x0
mul_char_x_64:
.skip 256
/*000000026400*/ s_clause        0x2
/*000000026404*/ s_load_dword    s2, s[4:5], 0x10
/*00000002640c*/ s_load_dword    s3, s[4:5], 0x0
/*000000026414*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*00000002641c*/ s_lshl_b32      s4, s6, 6
/*000000026420*/ s_waitcnt       lgkmcnt(0)
/*000000026424*/ v_add3_u32      v0, s2, s4, v0
/*00000002642c*/ s_mul_i32       s2, s3, s3
/*000000026430*/ v_mov_b32       v2, s2
/*000000026434*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000002643c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026444*/ global_store_byte v[0:1], v2, off
/*00000002644c*/ s_endpgm
/*000000026450*/ s_nop           0x0
/*000000026454*/ s_nop           0x0
/*000000026458*/ s_nop           0x0
/*00000002645c*/ s_nop           0x0
/*000000026460*/ s_nop           0x0
/*000000026464*/ s_nop           0x0
/*000000026468*/ s_nop           0x0
/*00000002646c*/ s_nop           0x0
/*000000026470*/ s_nop           0x0
/*000000026474*/ s_nop           0x0
/*000000026478*/ s_nop           0x0
/*00000002647c*/ s_nop           0x0
/*000000026480*/ s_nop           0x0
/*000000026484*/ s_nop           0x0
/*000000026488*/ s_nop           0x0
/*00000002648c*/ s_nop           0x0
/*000000026490*/ s_nop           0x0
/*000000026494*/ s_nop           0x0
/*000000026498*/ s_nop           0x0
/*00000002649c*/ s_nop           0x0
/*0000000264a0*/ s_nop           0x0
/*0000000264a4*/ s_nop           0x0
/*0000000264a8*/ s_nop           0x0
/*0000000264ac*/ s_nop           0x0
/*0000000264b0*/ s_nop           0x0
/*0000000264b4*/ s_nop           0x0
/*0000000264b8*/ s_nop           0x0
/*0000000264bc*/ s_nop           0x0
/*0000000264c0*/ s_nop           0x0
/*0000000264c4*/ s_nop           0x0
/*0000000264c8*/ s_nop           0x0
/*0000000264cc*/ s_nop           0x0
/*0000000264d0*/ s_nop           0x0
/*0000000264d4*/ s_nop           0x0
/*0000000264d8*/ s_nop           0x0
/*0000000264dc*/ s_nop           0x0
/*0000000264e0*/ s_nop           0x0
/*0000000264e4*/ s_nop           0x0
/*0000000264e8*/ s_nop           0x0
/*0000000264ec*/ s_nop           0x0
/*0000000264f0*/ s_nop           0x0
/*0000000264f4*/ s_nop           0x0
/*0000000264f8*/ s_nop           0x0
/*0000000264fc*/ s_nop           0x0
mul_char_get_global_offset_64:
.skip 256
/*000000026600*/ s_clause        0x1
/*000000026604*/ s_load_dword    s2, s[4:5], 0x10
/*00000002660c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026614*/ s_lshl_b32      s3, s6, 6
/*000000026618*/ s_waitcnt       lgkmcnt(0)
/*00000002661c*/ v_add3_u32      v0, s2, s3, v0
/*000000026624*/ s_mul_i32       s2, s2, s2
/*000000026628*/ v_mov_b32       v2, s2
/*00000002662c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026634*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002663c*/ global_store_byte v[0:1], v2, off
/*000000026644*/ s_endpgm
/*000000026648*/ s_nop           0x0
/*00000002664c*/ s_nop           0x0
/*000000026650*/ s_nop           0x0
/*000000026654*/ s_nop           0x0
/*000000026658*/ s_nop           0x0
/*00000002665c*/ s_nop           0x0
/*000000026660*/ s_nop           0x0
/*000000026664*/ s_nop           0x0
/*000000026668*/ s_nop           0x0
/*00000002666c*/ s_nop           0x0
/*000000026670*/ s_nop           0x0
/*000000026674*/ s_nop           0x0
/*000000026678*/ s_nop           0x0
/*00000002667c*/ s_nop           0x0
/*000000026680*/ s_nop           0x0
/*000000026684*/ s_nop           0x0
/*000000026688*/ s_nop           0x0
/*00000002668c*/ s_nop           0x0
/*000000026690*/ s_nop           0x0
/*000000026694*/ s_nop           0x0
/*000000026698*/ s_nop           0x0
/*00000002669c*/ s_nop           0x0
/*0000000266a0*/ s_nop           0x0
/*0000000266a4*/ s_nop           0x0
/*0000000266a8*/ s_nop           0x0
/*0000000266ac*/ s_nop           0x0
/*0000000266b0*/ s_nop           0x0
/*0000000266b4*/ s_nop           0x0
/*0000000266b8*/ s_nop           0x0
/*0000000266bc*/ s_nop           0x0
/*0000000266c0*/ s_nop           0x0
/*0000000266c4*/ s_nop           0x0
/*0000000266c8*/ s_nop           0x0
/*0000000266cc*/ s_nop           0x0
/*0000000266d0*/ s_nop           0x0
/*0000000266d4*/ s_nop           0x0
/*0000000266d8*/ s_nop           0x0
/*0000000266dc*/ s_nop           0x0
/*0000000266e0*/ s_nop           0x0
/*0000000266e4*/ s_nop           0x0
/*0000000266e8*/ s_nop           0x0
/*0000000266ec*/ s_nop           0x0
/*0000000266f0*/ s_nop           0x0
/*0000000266f4*/ s_nop           0x0
/*0000000266f8*/ s_nop           0x0
/*0000000266fc*/ s_nop           0x0
mul_char_get_local_id_64:
.skip 256
/*000000026800*/ s_clause        0x1
/*000000026804*/ s_load_dword    s2, s[4:5], 0x10
/*00000002680c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026814*/ s_lshl_b32      s3, s6, 6
/*000000026818*/ v_mul_u32_u24   v2, v0, v0
/*00000002681c*/ s_waitcnt       lgkmcnt(0)
/*000000026820*/ v_add3_u32      v1, s2, s3, v0
/*000000026828*/ v_add_co_u32    v0, s[0:1], s0, v1
/*000000026830*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026838*/ global_store_byte v[0:1], v2, off
/*000000026840*/ s_endpgm
/*000000026844*/ s_nop           0x0
/*000000026848*/ s_nop           0x0
/*00000002684c*/ s_nop           0x0
/*000000026850*/ s_nop           0x0
/*000000026854*/ s_nop           0x0
/*000000026858*/ s_nop           0x0
/*00000002685c*/ s_nop           0x0
/*000000026860*/ s_nop           0x0
/*000000026864*/ s_nop           0x0
/*000000026868*/ s_nop           0x0
/*00000002686c*/ s_nop           0x0
/*000000026870*/ s_nop           0x0
/*000000026874*/ s_nop           0x0
/*000000026878*/ s_nop           0x0
/*00000002687c*/ s_nop           0x0
/*000000026880*/ s_nop           0x0
/*000000026884*/ s_nop           0x0
/*000000026888*/ s_nop           0x0
/*00000002688c*/ s_nop           0x0
/*000000026890*/ s_nop           0x0
/*000000026894*/ s_nop           0x0
/*000000026898*/ s_nop           0x0
/*00000002689c*/ s_nop           0x0
/*0000000268a0*/ s_nop           0x0
/*0000000268a4*/ s_nop           0x0
/*0000000268a8*/ s_nop           0x0
/*0000000268ac*/ s_nop           0x0
/*0000000268b0*/ s_nop           0x0
/*0000000268b4*/ s_nop           0x0
/*0000000268b8*/ s_nop           0x0
/*0000000268bc*/ s_nop           0x0
/*0000000268c0*/ s_nop           0x0
/*0000000268c4*/ s_nop           0x0
/*0000000268c8*/ s_nop           0x0
/*0000000268cc*/ s_nop           0x0
/*0000000268d0*/ s_nop           0x0
/*0000000268d4*/ s_nop           0x0
/*0000000268d8*/ s_nop           0x0
/*0000000268dc*/ s_nop           0x0
/*0000000268e0*/ s_nop           0x0
/*0000000268e4*/ s_nop           0x0
/*0000000268e8*/ s_nop           0x0
/*0000000268ec*/ s_nop           0x0
/*0000000268f0*/ s_nop           0x0
/*0000000268f4*/ s_nop           0x0
/*0000000268f8*/ s_nop           0x0
/*0000000268fc*/ s_nop           0x0
mul_char_get_group_id_64:
.skip 256
/*000000026a00*/ s_clause        0x1
/*000000026a04*/ s_load_dword    s2, s[4:5], 0x10
/*000000026a0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026a14*/ s_lshl_b32      s3, s6, 6
/*000000026a18*/ s_waitcnt       lgkmcnt(0)
/*000000026a1c*/ v_add3_u32      v0, s2, s3, v0
/*000000026a24*/ s_mul_i32       s2, s6, s6
/*000000026a28*/ v_mov_b32       v2, s2
/*000000026a2c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026a34*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026a3c*/ global_store_byte v[0:1], v2, off
/*000000026a44*/ s_endpgm
/*000000026a48*/ s_nop           0x0
/*000000026a4c*/ s_nop           0x0
/*000000026a50*/ s_nop           0x0
/*000000026a54*/ s_nop           0x0
/*000000026a58*/ s_nop           0x0
/*000000026a5c*/ s_nop           0x0
/*000000026a60*/ s_nop           0x0
/*000000026a64*/ s_nop           0x0
/*000000026a68*/ s_nop           0x0
/*000000026a6c*/ s_nop           0x0
/*000000026a70*/ s_nop           0x0
/*000000026a74*/ s_nop           0x0
/*000000026a78*/ s_nop           0x0
/*000000026a7c*/ s_nop           0x0
/*000000026a80*/ s_nop           0x0
/*000000026a84*/ s_nop           0x0
/*000000026a88*/ s_nop           0x0
/*000000026a8c*/ s_nop           0x0
/*000000026a90*/ s_nop           0x0
/*000000026a94*/ s_nop           0x0
/*000000026a98*/ s_nop           0x0
/*000000026a9c*/ s_nop           0x0
/*000000026aa0*/ s_nop           0x0
/*000000026aa4*/ s_nop           0x0
/*000000026aa8*/ s_nop           0x0
/*000000026aac*/ s_nop           0x0
/*000000026ab0*/ s_nop           0x0
/*000000026ab4*/ s_nop           0x0
/*000000026ab8*/ s_nop           0x0
/*000000026abc*/ s_nop           0x0
/*000000026ac0*/ s_nop           0x0
/*000000026ac4*/ s_nop           0x0
/*000000026ac8*/ s_nop           0x0
/*000000026acc*/ s_nop           0x0
/*000000026ad0*/ s_nop           0x0
/*000000026ad4*/ s_nop           0x0
/*000000026ad8*/ s_nop           0x0
/*000000026adc*/ s_nop           0x0
/*000000026ae0*/ s_nop           0x0
/*000000026ae4*/ s_nop           0x0
/*000000026ae8*/ s_nop           0x0
/*000000026aec*/ s_nop           0x0
/*000000026af0*/ s_nop           0x0
/*000000026af4*/ s_nop           0x0
/*000000026af8*/ s_nop           0x0
/*000000026afc*/ s_nop           0x0
mul_char_get_local_size_64:
.skip 256
/*000000026c00*/ s_clause        0x1
/*000000026c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000026c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026c14*/ s_lshl_b32      s3, s6, 6
/*000000026c18*/ v_mov_b32       v2, 0
/*000000026c1c*/ s_waitcnt       lgkmcnt(0)
/*000000026c20*/ v_add3_u32      v0, s2, s3, v0
/*000000026c28*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026c30*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026c38*/ global_store_byte v[0:1], v2, off
/*000000026c40*/ s_endpgm
/*000000026c44*/ s_nop           0x0
/*000000026c48*/ s_nop           0x0
/*000000026c4c*/ s_nop           0x0
/*000000026c50*/ s_nop           0x0
/*000000026c54*/ s_nop           0x0
/*000000026c58*/ s_nop           0x0
/*000000026c5c*/ s_nop           0x0
/*000000026c60*/ s_nop           0x0
/*000000026c64*/ s_nop           0x0
/*000000026c68*/ s_nop           0x0
/*000000026c6c*/ s_nop           0x0
/*000000026c70*/ s_nop           0x0
/*000000026c74*/ s_nop           0x0
/*000000026c78*/ s_nop           0x0
/*000000026c7c*/ s_nop           0x0
/*000000026c80*/ s_nop           0x0
/*000000026c84*/ s_nop           0x0
/*000000026c88*/ s_nop           0x0
/*000000026c8c*/ s_nop           0x0
/*000000026c90*/ s_nop           0x0
/*000000026c94*/ s_nop           0x0
/*000000026c98*/ s_nop           0x0
/*000000026c9c*/ s_nop           0x0
/*000000026ca0*/ s_nop           0x0
/*000000026ca4*/ s_nop           0x0
/*000000026ca8*/ s_nop           0x0
/*000000026cac*/ s_nop           0x0
/*000000026cb0*/ s_nop           0x0
/*000000026cb4*/ s_nop           0x0
/*000000026cb8*/ s_nop           0x0
/*000000026cbc*/ s_nop           0x0
/*000000026cc0*/ s_nop           0x0
/*000000026cc4*/ s_nop           0x0
/*000000026cc8*/ s_nop           0x0
/*000000026ccc*/ s_nop           0x0
/*000000026cd0*/ s_nop           0x0
/*000000026cd4*/ s_nop           0x0
/*000000026cd8*/ s_nop           0x0
/*000000026cdc*/ s_nop           0x0
/*000000026ce0*/ s_nop           0x0
/*000000026ce4*/ s_nop           0x0
/*000000026ce8*/ s_nop           0x0
/*000000026cec*/ s_nop           0x0
/*000000026cf0*/ s_nop           0x0
/*000000026cf4*/ s_nop           0x0
/*000000026cf8*/ s_nop           0x0
/*000000026cfc*/ s_nop           0x0
mul_char_get_global_id_64:
.skip 256
/*000000026e00*/ s_clause        0x1
/*000000026e04*/ s_load_dword    s2, s[4:5], 0x10
/*000000026e0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000026e14*/ v_lshl_or_b32   v0, s6, 6, v0
/*000000026e1c*/ s_waitcnt       lgkmcnt(0)
/*000000026e20*/ v_add_nc_u32    v0, s2, v0
/*000000026e24*/ v_mul_lo_u32    v2, v0, v0
/*000000026e2c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000026e34*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000026e3c*/ global_store_byte v[0:1], v2, off
/*000000026e44*/ s_endpgm
/*000000026e48*/ s_nop           0x0
/*000000026e4c*/ s_nop           0x0
/*000000026e50*/ s_nop           0x0
/*000000026e54*/ s_nop           0x0
/*000000026e58*/ s_nop           0x0
/*000000026e5c*/ s_nop           0x0
/*000000026e60*/ s_nop           0x0
/*000000026e64*/ s_nop           0x0
/*000000026e68*/ s_nop           0x0
/*000000026e6c*/ s_nop           0x0
/*000000026e70*/ s_nop           0x0
/*000000026e74*/ s_nop           0x0
/*000000026e78*/ s_nop           0x0
/*000000026e7c*/ s_nop           0x0
/*000000026e80*/ s_nop           0x0
/*000000026e84*/ s_nop           0x0
/*000000026e88*/ s_nop           0x0
/*000000026e8c*/ s_nop           0x0
/*000000026e90*/ s_nop           0x0
/*000000026e94*/ s_nop           0x0
/*000000026e98*/ s_nop           0x0
/*000000026e9c*/ s_nop           0x0
/*000000026ea0*/ s_nop           0x0
/*000000026ea4*/ s_nop           0x0
/*000000026ea8*/ s_nop           0x0
/*000000026eac*/ s_nop           0x0
/*000000026eb0*/ s_nop           0x0
/*000000026eb4*/ s_nop           0x0
/*000000026eb8*/ s_nop           0x0
/*000000026ebc*/ s_nop           0x0
/*000000026ec0*/ s_nop           0x0
/*000000026ec4*/ s_nop           0x0
/*000000026ec8*/ s_nop           0x0
/*000000026ecc*/ s_nop           0x0
/*000000026ed0*/ s_nop           0x0
/*000000026ed4*/ s_nop           0x0
/*000000026ed8*/ s_nop           0x0
/*000000026edc*/ s_nop           0x0
/*000000026ee0*/ s_nop           0x0
/*000000026ee4*/ s_nop           0x0
/*000000026ee8*/ s_nop           0x0
/*000000026eec*/ s_nop           0x0
/*000000026ef0*/ s_nop           0x0
/*000000026ef4*/ s_nop           0x0
/*000000026ef8*/ s_nop           0x0
/*000000026efc*/ s_nop           0x0
mul_char_get_global_size_64:
.skip 256
/*000000027000*/ s_load_dword    s2, s[6:7], 0x10
/*000000027008*/ s_load_dword    s3, s[4:5], 0xc
/*000000027010*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*000000027018*/ s_lshl_b32      s4, s8, 6
/*00000002701c*/ s_waitcnt       lgkmcnt(0)
/*000000027020*/ v_add3_u32      v0, s2, s4, v0
/*000000027028*/ s_mul_i32       s2, s3, s3
/*00000002702c*/ v_mov_b32       v2, s2
/*000000027030*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000027038*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000027040*/ global_store_byte v[0:1], v2, off
/*000000027048*/ s_endpgm
/*00000002704c*/ s_nop           0x0
/*000000027050*/ s_nop           0x0
/*000000027054*/ s_nop           0x0
/*000000027058*/ s_nop           0x0
/*00000002705c*/ s_nop           0x0
/*000000027060*/ s_nop           0x0
/*000000027064*/ s_nop           0x0
/*000000027068*/ s_nop           0x0
/*00000002706c*/ s_nop           0x0
/*000000027070*/ s_nop           0x0
/*000000027074*/ s_nop           0x0
/*000000027078*/ s_nop           0x0
/*00000002707c*/ s_nop           0x0
/*000000027080*/ s_nop           0x0
/*000000027084*/ s_nop           0x0
/*000000027088*/ s_nop           0x0
/*00000002708c*/ s_nop           0x0
/*000000027090*/ s_nop           0x0
/*000000027094*/ s_nop           0x0
/*000000027098*/ s_nop           0x0
/*00000002709c*/ s_nop           0x0
/*0000000270a0*/ s_nop           0x0
/*0000000270a4*/ s_nop           0x0
/*0000000270a8*/ s_nop           0x0
/*0000000270ac*/ s_nop           0x0
/*0000000270b0*/ s_nop           0x0
/*0000000270b4*/ s_nop           0x0
/*0000000270b8*/ s_nop           0x0
/*0000000270bc*/ s_nop           0x0
/*0000000270c0*/ s_nop           0x0
/*0000000270c4*/ s_nop           0x0
/*0000000270c8*/ s_nop           0x0
/*0000000270cc*/ s_nop           0x0
/*0000000270d0*/ s_nop           0x0
/*0000000270d4*/ s_nop           0x0
/*0000000270d8*/ s_nop           0x0
/*0000000270dc*/ s_nop           0x0
/*0000000270e0*/ s_nop           0x0
/*0000000270e4*/ s_nop           0x0
/*0000000270e8*/ s_nop           0x0
/*0000000270ec*/ s_nop           0x0
/*0000000270f0*/ s_nop           0x0
/*0000000270f4*/ s_nop           0x0
/*0000000270f8*/ s_nop           0x0
/*0000000270fc*/ s_nop           0x0
mul_char_get_num_groups_64:
.skip 256
/*000000027200*/ s_load_dword    s2, s[4:5], 0xc
/*000000027208*/ s_clause        0x1
/*00000002720c*/ s_load_dword    s3, s[6:7], 0x10
/*000000027214*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000002721c*/ s_lshl_b32      s5, s8, 6
/*000000027220*/ s_waitcnt       lgkmcnt(0)
/*000000027224*/ s_and_b32       s4, s2, 0xffffffc0
/*00000002722c*/ v_add3_u32      v0, s3, s5, v0
/*000000027234*/ v_cmp_gt_u32    s[4:5], s2, s4
/*00000002723c*/ s_lshr_b32      s2, s2, 6
/*000000027240*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000027248*/ s_cmpk_lg_u32   s4, 0x0
/*00000002724c*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000027254*/ s_addc_u32      s2, s2, 0
/*000000027258*/ s_mul_i32       s2, s2, s2
/*00000002725c*/ v_mov_b32       v2, s2
/*000000027260*/ global_store_byte v[0:1], v2, off
/*000000027268*/ s_endpgm
/*00000002726c*/ s_nop           0x0
/*000000027270*/ s_nop           0x0
/*000000027274*/ s_nop           0x0
/*000000027278*/ s_nop           0x0
/*00000002727c*/ s_nop           0x0
/*000000027280*/ s_nop           0x0
/*000000027284*/ s_nop           0x0
/*000000027288*/ s_nop           0x0
/*00000002728c*/ s_nop           0x0
/*000000027290*/ s_nop           0x0
/*000000027294*/ s_nop           0x0
/*000000027298*/ s_nop           0x0
/*00000002729c*/ s_nop           0x0
/*0000000272a0*/ s_nop           0x0
/*0000000272a4*/ s_nop           0x0
/*0000000272a8*/ s_nop           0x0
/*0000000272ac*/ s_nop           0x0
/*0000000272b0*/ s_nop           0x0
/*0000000272b4*/ s_nop           0x0
/*0000000272b8*/ s_nop           0x0
/*0000000272bc*/ s_nop           0x0
/*0000000272c0*/ s_nop           0x0
/*0000000272c4*/ s_nop           0x0
/*0000000272c8*/ s_nop           0x0
/*0000000272cc*/ s_nop           0x0
/*0000000272d0*/ s_nop           0x0
/*0000000272d4*/ s_nop           0x0
/*0000000272d8*/ s_nop           0x0
/*0000000272dc*/ s_nop           0x0
/*0000000272e0*/ s_nop           0x0
/*0000000272e4*/ s_nop           0x0
/*0000000272e8*/ s_nop           0x0
/*0000000272ec*/ s_nop           0x0
/*0000000272f0*/ s_nop           0x0
/*0000000272f4*/ s_nop           0x0
/*0000000272f8*/ s_nop           0x0
/*0000000272fc*/ s_nop           0x0
mul_char_get_work_dim:
.skip 256
/*000000027400*/ v_mov_b32       v1, s4
/*000000027404*/ v_mov_b32       v2, s5
/*000000027408*/ s_clause        0x1
/*00000002740c*/ s_load_dword    s2, s[6:7], 0x10
/*000000027414*/ s_load_dwordx2  s[0:1], s[6:7], 0x8
/*00000002741c*/ s_lshl_b32      s3, s8, 6
/*000000027420*/ global_load_ushort v1, v[1:2], off inst_offset:2
/*000000027428*/ s_waitcnt       lgkmcnt(0)
/*00000002742c*/ v_add3_u32      v0, s2, s3, v0
/*000000027434*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000002743c*/ s_waitcnt       vmcnt(0)
/*000000027440*/ v_mul_u32_u24   v2, v1, v1
/*000000027444*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*00000002744c*/ global_store_byte v[0:1], v2, off
/*000000027454*/ s_endpgm
/*000000027458*/ s_nop           0x0
/*00000002745c*/ s_nop           0x0
/*000000027460*/ s_nop           0x0
/*000000027464*/ s_nop           0x0
/*000000027468*/ s_nop           0x0
/*00000002746c*/ s_nop           0x0
/*000000027470*/ s_nop           0x0
/*000000027474*/ s_nop           0x0
/*000000027478*/ s_nop           0x0
/*00000002747c*/ s_nop           0x0
/*000000027480*/ s_nop           0x0
/*000000027484*/ s_nop           0x0
/*000000027488*/ s_nop           0x0
/*00000002748c*/ s_nop           0x0
/*000000027490*/ s_nop           0x0
/*000000027494*/ s_nop           0x0
/*000000027498*/ s_nop           0x0
/*00000002749c*/ s_nop           0x0
/*0000000274a0*/ s_nop           0x0
/*0000000274a4*/ s_nop           0x0
/*0000000274a8*/ s_nop           0x0
/*0000000274ac*/ s_nop           0x0
/*0000000274b0*/ s_nop           0x0
/*0000000274b4*/ s_nop           0x0
/*0000000274b8*/ s_nop           0x0
/*0000000274bc*/ s_nop           0x0
/*0000000274c0*/ s_nop           0x0
/*0000000274c4*/ s_nop           0x0
/*0000000274c8*/ s_nop           0x0
/*0000000274cc*/ s_nop           0x0
/*0000000274d0*/ s_nop           0x0
/*0000000274d4*/ s_nop           0x0
/*0000000274d8*/ s_nop           0x0
/*0000000274dc*/ s_nop           0x0
/*0000000274e0*/ s_nop           0x0
/*0000000274e4*/ s_nop           0x0
/*0000000274e8*/ s_nop           0x0
/*0000000274ec*/ s_nop           0x0
/*0000000274f0*/ s_nop           0x0
/*0000000274f4*/ s_nop           0x0
/*0000000274f8*/ s_nop           0x0
/*0000000274fc*/ s_nop           0x0
mul_char_x_8_8:
.skip 256
/*000000027600*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*000000027608*/ s_waitcnt       lgkmcnt(0)
/*00000002760c*/ s_clause        0x1
/*000000027610*/ s_load_dword    s1, s[4:5], 0x0
/*000000027618*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000027620*/ s_lshl_b32      s3, s7, 3
/*000000027624*/ s_lshl_b32      s6, s6, 3
/*000000027628*/ v_add3_u32      v1, s2, s3, v1
/*000000027630*/ v_add3_u32      v0, s0, s6, v0
/*000000027638*/ s_waitcnt       lgkmcnt(0)
/*00000002763c*/ v_mul_lo_u32    v2, v1, s1
/*000000027644*/ v_add_co_u32    v0, s[0:1], s4, v0
/*00000002764c*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*000000027654*/ global_store_byte v[0:1], v2, off
/*00000002765c*/ s_endpgm
/*000000027660*/ s_nop           0x0
/*000000027664*/ s_nop           0x0
/*000000027668*/ s_nop           0x0
/*00000002766c*/ s_nop           0x0
/*000000027670*/ s_nop           0x0
/*000000027674*/ s_nop           0x0
/*000000027678*/ s_nop           0x0
/*00000002767c*/ s_nop           0x0
/*000000027680*/ s_nop           0x0
/*000000027684*/ s_nop           0x0
/*000000027688*/ s_nop           0x0
/*00000002768c*/ s_nop           0x0
/*000000027690*/ s_nop           0x0
/*000000027694*/ s_nop           0x0
/*000000027698*/ s_nop           0x0
/*00000002769c*/ s_nop           0x0
/*0000000276a0*/ s_nop           0x0
/*0000000276a4*/ s_nop           0x0
/*0000000276a8*/ s_nop           0x0
/*0000000276ac*/ s_nop           0x0
/*0000000276b0*/ s_nop           0x0
/*0000000276b4*/ s_nop           0x0
/*0000000276b8*/ s_nop           0x0
/*0000000276bc*/ s_nop           0x0
/*0000000276c0*/ s_nop           0x0
/*0000000276c4*/ s_nop           0x0
/*0000000276c8*/ s_nop           0x0
/*0000000276cc*/ s_nop           0x0
/*0000000276d0*/ s_nop           0x0
/*0000000276d4*/ s_nop           0x0
/*0000000276d8*/ s_nop           0x0
/*0000000276dc*/ s_nop           0x0
/*0000000276e0*/ s_nop           0x0
/*0000000276e4*/ s_nop           0x0
/*0000000276e8*/ s_nop           0x0
/*0000000276ec*/ s_nop           0x0
/*0000000276f0*/ s_nop           0x0
/*0000000276f4*/ s_nop           0x0
/*0000000276f8*/ s_nop           0x0
/*0000000276fc*/ s_nop           0x0
mul_char_get_global_offset_8_8:
.skip 256
/*000000027800*/ s_clause        0x1
/*000000027804*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000002780c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000027814*/ s_waitcnt       lgkmcnt(0)
/*000000027818*/ s_lshl_b32      s1, s6, 3
/*00000002781c*/ v_add3_u32      v0, s0, s1, v0
/*000000027824*/ s_mul_i32       s0, s2, s0
/*000000027828*/ v_mov_b32       v2, s0
/*00000002782c*/ v_add_co_u32    v0, s[1:2], s4, v0
/*000000027834*/ v_add_co_ci_u32 v1, s[1:2], s5, 0, s[1:2]
/*00000002783c*/ global_store_byte v[0:1], v2, off
/*000000027844*/ s_endpgm
/*000000027848*/ s_nop           0x0
/*00000002784c*/ s_nop           0x0
/*000000027850*/ s_nop           0x0
/*000000027854*/ s_nop           0x0
/*000000027858*/ s_nop           0x0
/*00000002785c*/ s_nop           0x0
/*000000027860*/ s_nop           0x0
/*000000027864*/ s_nop           0x0
/*000000027868*/ s_nop           0x0
/*00000002786c*/ s_nop           0x0
/*000000027870*/ s_nop           0x0
/*000000027874*/ s_nop           0x0
/*000000027878*/ s_nop           0x0
/*00000002787c*/ s_nop           0x0
/*000000027880*/ s_nop           0x0
/*000000027884*/ s_nop           0x0
/*000000027888*/ s_nop           0x0
/*00000002788c*/ s_nop           0x0
/*000000027890*/ s_nop           0x0
/*000000027894*/ s_nop           0x0
/*000000027898*/ s_nop           0x0
/*00000002789c*/ s_nop           0x0
/*0000000278a0*/ s_nop           0x0
/*0000000278a4*/ s_nop           0x0
/*0000000278a8*/ s_nop           0x0
/*0000000278ac*/ s_nop           0x0
/*0000000278b0*/ s_nop           0x0
/*0000000278b4*/ s_nop           0x0
/*0000000278b8*/ s_nop           0x0
/*0000000278bc*/ s_nop           0x0
/*0000000278c0*/ s_nop           0x0
/*0000000278c4*/ s_nop           0x0
/*0000000278c8*/ s_nop           0x0
/*0000000278cc*/ s_nop           0x0
/*0000000278d0*/ s_nop           0x0
/*0000000278d4*/ s_nop           0x0
/*0000000278d8*/ s_nop           0x0
/*0000000278dc*/ s_nop           0x0
/*0000000278e0*/ s_nop           0x0
/*0000000278e4*/ s_nop           0x0
/*0000000278e8*/ s_nop           0x0
/*0000000278ec*/ s_nop           0x0
/*0000000278f0*/ s_nop           0x0
/*0000000278f4*/ s_nop           0x0
/*0000000278f8*/ s_nop           0x0
/*0000000278fc*/ s_nop           0x0
mul_char_get_local_id_8_8:
.skip 256
/*000000027a00*/ s_clause        0x1
/*000000027a04*/ s_load_dword    s2, s[4:5], 0x10
/*000000027a0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000027a14*/ s_lshl_b32      s3, s6, 3
/*000000027a18*/ v_mul_lo_u16    v3, v1, v0
/*000000027a20*/ s_waitcnt       lgkmcnt(0)
/*000000027a24*/ v_add3_u32      v2, s2, s3, v0
/*000000027a2c*/ v_add_co_u32    v0, s[0:1], s0, v2
/*000000027a34*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000027a3c*/ global_store_byte v[0:1], v3, off
/*000000027a44*/ s_endpgm
/*000000027a48*/ s_nop           0x0
/*000000027a4c*/ s_nop           0x0
/*000000027a50*/ s_nop           0x0
/*000000027a54*/ s_nop           0x0
/*000000027a58*/ s_nop           0x0
/*000000027a5c*/ s_nop           0x0
/*000000027a60*/ s_nop           0x0
/*000000027a64*/ s_nop           0x0
/*000000027a68*/ s_nop           0x0
/*000000027a6c*/ s_nop           0x0
/*000000027a70*/ s_nop           0x0
/*000000027a74*/ s_nop           0x0
/*000000027a78*/ s_nop           0x0
/*000000027a7c*/ s_nop           0x0
/*000000027a80*/ s_nop           0x0
/*000000027a84*/ s_nop           0x0
/*000000027a88*/ s_nop           0x0
/*000000027a8c*/ s_nop           0x0
/*000000027a90*/ s_nop           0x0
/*000000027a94*/ s_nop           0x0
/*000000027a98*/ s_nop           0x0
/*000000027a9c*/ s_nop           0x0
/*000000027aa0*/ s_nop           0x0
/*000000027aa4*/ s_nop           0x0
/*000000027aa8*/ s_nop           0x0
/*000000027aac*/ s_nop           0x0
/*000000027ab0*/ s_nop           0x0
/*000000027ab4*/ s_nop           0x0
/*000000027ab8*/ s_nop           0x0
/*000000027abc*/ s_nop           0x0
/*000000027ac0*/ s_nop           0x0
/*000000027ac4*/ s_nop           0x0
/*000000027ac8*/ s_nop           0x0
/*000000027acc*/ s_nop           0x0
/*000000027ad0*/ s_nop           0x0
/*000000027ad4*/ s_nop           0x0
/*000000027ad8*/ s_nop           0x0
/*000000027adc*/ s_nop           0x0
/*000000027ae0*/ s_nop           0x0
/*000000027ae4*/ s_nop           0x0
/*000000027ae8*/ s_nop           0x0
/*000000027aec*/ s_nop           0x0
/*000000027af0*/ s_nop           0x0
/*000000027af4*/ s_nop           0x0
/*000000027af8*/ s_nop           0x0
/*000000027afc*/ s_nop           0x0
mul_char_get_group_id_8_8:
.skip 256
/*000000027c00*/ s_clause        0x1
/*000000027c04*/ s_load_dword    s2, s[4:5], 0x10
/*000000027c0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000027c14*/ s_lshl_b32      s3, s6, 3
/*000000027c18*/ s_waitcnt       lgkmcnt(0)
/*000000027c1c*/ v_add3_u32      v0, s2, s3, v0
/*000000027c24*/ s_mul_i32       s2, s7, s6
/*000000027c28*/ v_mov_b32       v2, s2
/*000000027c2c*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000027c34*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000027c3c*/ global_store_byte v[0:1], v2, off
/*000000027c44*/ s_endpgm
/*000000027c48*/ s_nop           0x0
/*000000027c4c*/ s_nop           0x0
/*000000027c50*/ s_nop           0x0
/*000000027c54*/ s_nop           0x0
/*000000027c58*/ s_nop           0x0
/*000000027c5c*/ s_nop           0x0
/*000000027c60*/ s_nop           0x0
/*000000027c64*/ s_nop           0x0
/*000000027c68*/ s_nop           0x0
/*000000027c6c*/ s_nop           0x0
/*000000027c70*/ s_nop           0x0
/*000000027c74*/ s_nop           0x0
/*000000027c78*/ s_nop           0x0
/*000000027c7c*/ s_nop           0x0
/*000000027c80*/ s_nop           0x0
/*000000027c84*/ s_nop           0x0
/*000000027c88*/ s_nop           0x0
/*000000027c8c*/ s_nop           0x0
/*000000027c90*/ s_nop           0x0
/*000000027c94*/ s_nop           0x0
/*000000027c98*/ s_nop           0x0
/*000000027c9c*/ s_nop           0x0
/*000000027ca0*/ s_nop           0x0
/*000000027ca4*/ s_nop           0x0
/*000000027ca8*/ s_nop           0x0
/*000000027cac*/ s_nop           0x0
/*000000027cb0*/ s_nop           0x0
/*000000027cb4*/ s_nop           0x0
/*000000027cb8*/ s_nop           0x0
/*000000027cbc*/ s_nop           0x0
/*000000027cc0*/ s_nop           0x0
/*000000027cc4*/ s_nop           0x0
/*000000027cc8*/ s_nop           0x0
/*000000027ccc*/ s_nop           0x0
/*000000027cd0*/ s_nop           0x0
/*000000027cd4*/ s_nop           0x0
/*000000027cd8*/ s_nop           0x0
/*000000027cdc*/ s_nop           0x0
/*000000027ce0*/ s_nop           0x0
/*000000027ce4*/ s_nop           0x0
/*000000027ce8*/ s_nop           0x0
/*000000027cec*/ s_nop           0x0
/*000000027cf0*/ s_nop           0x0
/*000000027cf4*/ s_nop           0x0
/*000000027cf8*/ s_nop           0x0
/*000000027cfc*/ s_nop           0x0
mul_char_get_local_size_8_8:
.skip 256
/*000000027e00*/ s_clause        0x1
/*000000027e04*/ s_load_dword    s2, s[4:5], 0x10
/*000000027e0c*/ s_load_dwordx2  s[0:1], s[4:5], 0x8
/*000000027e14*/ s_lshl_b32      s3, s6, 3
/*000000027e18*/ v_mov_b32       v2, 64
/*000000027e1c*/ s_waitcnt       lgkmcnt(0)
/*000000027e20*/ v_add3_u32      v0, s2, s3, v0
/*000000027e28*/ v_add_co_u32    v0, s[0:1], s0, v0
/*000000027e30*/ v_add_co_ci_u32 v1, s[0:1], s1, 0, s[0:1]
/*000000027e38*/ global_store_byte v[0:1], v2, off
/*000000027e40*/ s_endpgm
/*000000027e44*/ s_nop           0x0
/*000000027e48*/ s_nop           0x0
/*000000027e4c*/ s_nop           0x0
/*000000027e50*/ s_nop           0x0
/*000000027e54*/ s_nop           0x0
/*000000027e58*/ s_nop           0x0
/*000000027e5c*/ s_nop           0x0
/*000000027e60*/ s_nop           0x0
/*000000027e64*/ s_nop           0x0
/*000000027e68*/ s_nop           0x0
/*000000027e6c*/ s_nop           0x0
/*000000027e70*/ s_nop           0x0
/*000000027e74*/ s_nop           0x0
/*000000027e78*/ s_nop           0x0
/*000000027e7c*/ s_nop           0x0
/*000000027e80*/ s_nop           0x0
/*000000027e84*/ s_nop           0x0
/*000000027e88*/ s_nop           0x0
/*000000027e8c*/ s_nop           0x0
/*000000027e90*/ s_nop           0x0
/*000000027e94*/ s_nop           0x0
/*000000027e98*/ s_nop           0x0
/*000000027e9c*/ s_nop           0x0
/*000000027ea0*/ s_nop           0x0
/*000000027ea4*/ s_nop           0x0
/*000000027ea8*/ s_nop           0x0
/*000000027eac*/ s_nop           0x0
/*000000027eb0*/ s_nop           0x0
/*000000027eb4*/ s_nop           0x0
/*000000027eb8*/ s_nop           0x0
/*000000027ebc*/ s_nop           0x0
/*000000027ec0*/ s_nop           0x0
/*000000027ec4*/ s_nop           0x0
/*000000027ec8*/ s_nop           0x0
/*000000027ecc*/ s_nop           0x0
/*000000027ed0*/ s_nop           0x0
/*000000027ed4*/ s_nop           0x0
/*000000027ed8*/ s_nop           0x0
/*000000027edc*/ s_nop           0x0
/*000000027ee0*/ s_nop           0x0
/*000000027ee4*/ s_nop           0x0
/*000000027ee8*/ s_nop           0x0
/*000000027eec*/ s_nop           0x0
/*000000027ef0*/ s_nop           0x0
/*000000027ef4*/ s_nop           0x0
/*000000027ef8*/ s_nop           0x0
/*000000027efc*/ s_nop           0x0
mul_char_get_global_id_8_8:
.skip 256
/*000000028000*/ s_clause        0x1
/*000000028004*/ s_load_dwordx4  s[0:3], s[4:5], 0x10
/*00000002800c*/ s_load_dwordx2  s[4:5], s[4:5], 0x8
/*000000028014*/ v_lshl_or_b32   v0, s6, 3, v0
/*00000002801c*/ s_waitcnt       lgkmcnt(0)
/*000000028020*/ s_lshl_b32      s1, s7, 3
/*000000028024*/ v_add_co_u32    v0, s[0:1], s0, v0
/*00000002802c*/ v_add3_u32      v1, s2, s1, v1
/*000000028034*/ v_mul_lo_u16    v2, v1, v0
/*00000002803c*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000028044*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002804c*/ global_store_byte v[0:1], v2, off
/*000000028054*/ s_endpgm
/*000000028058*/ s_nop           0x0
/*00000002805c*/ s_nop           0x0
/*000000028060*/ s_nop           0x0
/*000000028064*/ s_nop           0x0
/*000000028068*/ s_nop           0x0
/*00000002806c*/ s_nop           0x0
/*000000028070*/ s_nop           0x0
/*000000028074*/ s_nop           0x0
/*000000028078*/ s_nop           0x0
/*00000002807c*/ s_nop           0x0
/*000000028080*/ s_nop           0x0
/*000000028084*/ s_nop           0x0
/*000000028088*/ s_nop           0x0
/*00000002808c*/ s_nop           0x0
/*000000028090*/ s_nop           0x0
/*000000028094*/ s_nop           0x0
/*000000028098*/ s_nop           0x0
/*00000002809c*/ s_nop           0x0
/*0000000280a0*/ s_nop           0x0
/*0000000280a4*/ s_nop           0x0
/*0000000280a8*/ s_nop           0x0
/*0000000280ac*/ s_nop           0x0
/*0000000280b0*/ s_nop           0x0
/*0000000280b4*/ s_nop           0x0
/*0000000280b8*/ s_nop           0x0
/*0000000280bc*/ s_nop           0x0
/*0000000280c0*/ s_nop           0x0
/*0000000280c4*/ s_nop           0x0
/*0000000280c8*/ s_nop           0x0
/*0000000280cc*/ s_nop           0x0
/*0000000280d0*/ s_nop           0x0
/*0000000280d4*/ s_nop           0x0
/*0000000280d8*/ s_nop           0x0
/*0000000280dc*/ s_nop           0x0
/*0000000280e0*/ s_nop           0x0
/*0000000280e4*/ s_nop           0x0
/*0000000280e8*/ s_nop           0x0
/*0000000280ec*/ s_nop           0x0
/*0000000280f0*/ s_nop           0x0
/*0000000280f4*/ s_nop           0x0
/*0000000280f8*/ s_nop           0x0
/*0000000280fc*/ s_nop           0x0
mul_char_get_global_size_8_8:
.skip 256
/*000000028200*/ s_load_dword    s9, s[6:7], 0x10
/*000000028208*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*000000028210*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*000000028218*/ s_lshl_b32      s4, s8, 3
/*00000002821c*/ s_waitcnt       lgkmcnt(0)
/*000000028220*/ v_add3_u32      v0, s9, s4, v0
/*000000028228*/ s_mul_i32       s0, s1, s0
/*00000002822c*/ v_mov_b32       v2, s0
/*000000028230*/ v_add_co_u32    v0, s[1:2], s2, v0
/*000000028238*/ v_add_co_ci_u32 v1, s[1:2], s3, 0, s[1:2]
/*000000028240*/ global_store_byte v[0:1], v2, off
/*000000028248*/ s_endpgm
/*00000002824c*/ s_nop           0x0
/*000000028250*/ s_nop           0x0
/*000000028254*/ s_nop           0x0
/*000000028258*/ s_nop           0x0
/*00000002825c*/ s_nop           0x0
/*000000028260*/ s_nop           0x0
/*000000028264*/ s_nop           0x0
/*000000028268*/ s_nop           0x0
/*00000002826c*/ s_nop           0x0
/*000000028270*/ s_nop           0x0
/*000000028274*/ s_nop           0x0
/*000000028278*/ s_nop           0x0
/*00000002827c*/ s_nop           0x0
/*000000028280*/ s_nop           0x0
/*000000028284*/ s_nop           0x0
/*000000028288*/ s_nop           0x0
/*00000002828c*/ s_nop           0x0
/*000000028290*/ s_nop           0x0
/*000000028294*/ s_nop           0x0
/*000000028298*/ s_nop           0x0
/*00000002829c*/ s_nop           0x0
/*0000000282a0*/ s_nop           0x0
/*0000000282a4*/ s_nop           0x0
/*0000000282a8*/ s_nop           0x0
/*0000000282ac*/ s_nop           0x0
/*0000000282b0*/ s_nop           0x0
/*0000000282b4*/ s_nop           0x0
/*0000000282b8*/ s_nop           0x0
/*0000000282bc*/ s_nop           0x0
/*0000000282c0*/ s_nop           0x0
/*0000000282c4*/ s_nop           0x0
/*0000000282c8*/ s_nop           0x0
/*0000000282cc*/ s_nop           0x0
/*0000000282d0*/ s_nop           0x0
/*0000000282d4*/ s_nop           0x0
/*0000000282d8*/ s_nop           0x0
/*0000000282dc*/ s_nop           0x0
/*0000000282e0*/ s_nop           0x0
/*0000000282e4*/ s_nop           0x0
/*0000000282e8*/ s_nop           0x0
/*0000000282ec*/ s_nop           0x0
/*0000000282f0*/ s_nop           0x0
/*0000000282f4*/ s_nop           0x0
/*0000000282f8*/ s_nop           0x0
/*0000000282fc*/ s_nop           0x0
mul_char_get_num_groups_8_8:
.skip 256
/*000000028400*/ s_load_dwordx2  s[0:1], s[4:5], 0xc
/*000000028408*/ s_load_dword    s4, s[6:7], 0x10
/*000000028410*/ s_waitcnt       lgkmcnt(0)
/*000000028414*/ s_and_b32       s2, s0, -8
/*000000028418*/ v_cmp_gt_u32    s[5:6], s0, s2
/*000000028420*/ s_load_dwordx2  s[2:3], s[6:7], 0x8
/*000000028428*/ s_lshl_b32      s6, s8, 3
/*00000002842c*/ s_lshr_b32      s0, s0, 3
/*000000028430*/ v_add3_u32      v0, s4, s6, v0
/*000000028438*/ s_cmpk_lg_u32   s5, 0x0
/*00000002843c*/ s_addc_u32      s0, s0, 0
/*000000028440*/ s_and_b32       s5, s1, -8
/*000000028444*/ v_cmp_gt_u32    s[5:6], s1, s5
/*00000002844c*/ s_lshr_b32      s1, s1, 3
/*000000028450*/ s_cmpk_lg_u32   s5, 0x0
/*000000028454*/ s_addc_u32      s1, s1, 0
/*000000028458*/ s_mul_i32       s0, s1, s0
/*00000002845c*/ s_waitcnt       lgkmcnt(0)
/*000000028460*/ v_add_co_u32    v0, s[1:2], s2, v0
/*000000028468*/ v_mov_b32       v2, s0
/*00000002846c*/ v_add_co_ci_u32 v1, s[1:2], s3, 0, s[1:2]
/*000000028474*/ global_store_byte v[0:1], v2, off
/*00000002847c*/ s_endpgm
/*000000028480*/ s_nop           0x0
/*000000028484*/ s_nop           0x0
/*000000028488*/ s_nop           0x0
/*00000002848c*/ s_nop           0x0
/*000000028490*/ s_nop           0x0
/*000000028494*/ s_nop           0x0
/*000000028498*/ s_nop           0x0
/*00000002849c*/ s_nop           0x0
/*0000000284a0*/ s_nop           0x0
/*0000000284a4*/ s_nop           0x0
/*0000000284a8*/ s_nop           0x0
/*0000000284ac*/ s_nop           0x0
/*0000000284b0*/ s_nop           0x0
/*0000000284b4*/ s_nop           0x0
/*0000000284b8*/ s_nop           0x0
/*0000000284bc*/ s_nop           0x0
/*0000000284c0*/ s_nop           0x0
/*0000000284c4*/ s_nop           0x0
/*0000000284c8*/ s_nop           0x0
/*0000000284cc*/ s_nop           0x0
/*0000000284d0*/ s_nop           0x0
/*0000000284d4*/ s_nop           0x0
/*0000000284d8*/ s_nop           0x0
/*0000000284dc*/ s_nop           0x0
/*0000000284e0*/ s_nop           0x0
/*0000000284e4*/ s_nop           0x0
/*0000000284e8*/ s_nop           0x0
/*0000000284ec*/ s_nop           0x0
/*0000000284f0*/ s_nop           0x0
/*0000000284f4*/ s_nop           0x0
/*0000000284f8*/ s_nop           0x0
/*0000000284fc*/ s_nop           0x0
mul_char_get_work_dim_8_8:
.skip 256
/*000000028600*/ v_mov_b32       v2, s4
/*000000028604*/ v_mov_b32       v3, s5
/*000000028608*/ s_clause        0x1
/*00000002860c*/ s_load_dwordx4  s[0:3], s[6:7], 0x10
/*000000028614*/ s_load_dwordx2  s[4:5], s[6:7], 0x8
/*00000002861c*/ s_waitcnt       lgkmcnt(0)
/*000000028620*/ s_lshl_b32      s1, s9, 3
/*000000028624*/ s_lshl_b32      s3, s8, 3
/*000000028628*/ global_load_ushort v2, v[2:3], off inst_offset:2
/*000000028630*/ v_add3_u32      v1, s2, s1, v1
/*000000028638*/ v_add3_u32      v0, s0, s3, v0
/*000000028640*/ v_add_co_u32    v0, s[0:1], s4, v0
/*000000028648*/ s_waitcnt       vmcnt(0)
/*00000002864c*/ v_mul_lo_u32    v2, v1, v2
/*000000028654*/ v_add_co_ci_u32 v1, s[0:1], s5, 0, s[0:1]
/*00000002865c*/ global_store_byte v[0:1], v2, off
/*000000028664*/ s_endpgm
/*000000028668*/ s_code_end
/*00000002866c*/ s_code_end
/*000000028670*/ s_code_end
/*000000028674*/ s_code_end
/*000000028678*/ s_code_end
/*00000002867c*/ s_code_end
/*000000028680*/ s_code_end
/*000000028684*/ s_code_end
/*000000028688*/ s_code_end
/*00000002868c*/ s_code_end
/*000000028690*/ s_code_end
/*000000028694*/ s_code_end
/*000000028698*/ s_code_end
/*00000002869c*/ s_code_end
/*0000000286a0*/ s_code_end
/*0000000286a4*/ s_code_end
/*0000000286a8*/ s_code_end
/*0000000286ac*/ s_code_end
/*0000000286b0*/ s_code_end
/*0000000286b4*/ s_code_end
/*0000000286b8*/ s_code_end
/*0000000286bc*/ s_code_end
/*0000000286c0*/ s_code_end
/*0000000286c4*/ s_code_end
/*0000000286c8*/ s_code_end
/*0000000286cc*/ s_code_end
/*0000000286d0*/ s_code_end
/*0000000286d4*/ s_code_end
/*0000000286d8*/ s_code_end
/*0000000286dc*/ s_code_end
/*0000000286e0*/ s_code_end
/*0000000286e4*/ s_code_end
/*0000000286e8*/ s_code_end
/*0000000286ec*/ s_code_end
/*0000000286f0*/ s_code_end
/*0000000286f4*/ s_code_end
/*0000000286f8*/ s_code_end
/*0000000286fc*/ s_code_end
/*000000028700*/ s_code_end
/*000000028704*/ s_code_end
/*000000028708*/ s_code_end
/*00000002870c*/ s_code_end
/*000000028710*/ s_code_end
/*000000028714*/ s_code_end
/*000000028718*/ s_code_end
/*00000002871c*/ s_code_end
/*000000028720*/ s_code_end
/*000000028724*/ s_code_end
/*000000028728*/ s_code_end
/*00000002872c*/ s_code_end
/*000000028730*/ s_code_end
/*000000028734*/ s_code_end
/*000000028738*/ s_code_end
/*00000002873c*/ s_code_end
